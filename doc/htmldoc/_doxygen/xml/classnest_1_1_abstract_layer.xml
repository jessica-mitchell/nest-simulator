<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_abstract_layer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::AbstractLayer</compoundname>
    <derivedcompoundref refid="classnest_1_1_layer" prot="public" virt="non-virtual">nest::Layer&lt; D &gt;</derivedcompoundref>
    <includes refid="layer_8h" local="no">layer.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_abstract_layer_1a32cbd1dbb9fdfd0b12903814aeb5c066" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::AbstractLayer::node_collection_</definition>
        <argsstring></argsstring>
        <name>node_collection_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> to which the layer belongs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="180" column="21" bodyfile="nestkernel/layer.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classnest_1_1_abstract_layer_1a1e8fda88e7029c3b23f35819cba848c6" prot="protected" static="yes" mutable="no">
        <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        <definition>NodeCollectionMetadataPTR nest::AbstractLayer::cached_ntree_md_</definition>
        <argsstring></argsstring>
        <name>cached_ntree_md_</name>
        <initializer>= <ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref>( nullptr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Metadata for the layer for which we cache global position information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="185" column="36" bodyfile="nestkernel/layer.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_abstract_layer_1add028a9b29284bac5c09ac20f6b42c3b" prot="protected" static="yes" mutable="no">
        <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        <definition>NodeCollectionMetadataPTR nest::AbstractLayer::cached_vector_md_</definition>
        <argsstring></argsstring>
        <name>cached_vector_md_</name>
        <initializer>= <ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref>( nullptr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Metadata for the layer for which we cache global position information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="190" column="36" bodyfile="nestkernel/layer.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a0ad131746b1272ec9866a336dc380a91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::AbstractLayer::AbstractLayer</definition>
        <argsstring>()</argsstring>
        <name>AbstractLayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="59" column="3" bodyfile="nestkernel/layer.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a5ffddcffaba780d5e7b61d2850d2c922" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>nest::AbstractLayer::~AbstractLayer</definition>
        <argsstring>()</argsstring>
        <name>~AbstractLayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="67" column="11" bodyfile="nestkernel/layer.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1ad06fa8f1d890798881a7ae445b964108" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;)=0</argsstring>
        <name>set_status</name>
        <reimplementedby refid="classnest_1_1_free_layer_1acb2f436d36da84d837609d56562af384">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1_layer_1a7e195bd64082ccf858d4419328b000d7">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1_grid_layer_1a53874da08aaf56d7893d0f7fabbe0546">set_status</reimplementedby>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change properties of the layer according to the entries in the dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="74" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a4e6967b12d99eccd9dc329daa1149c96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const =0</argsstring>
        <name>get_status</name>
        <reimplementedby refid="classnest_1_1_free_layer_1aa4bc8a616463884614fd0d29592ab51a">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1_layer_1aa997b0fe16bc08093545385042fe6e19">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1_grid_layer_1a6d74aca4288fc48455401d4027fa9378">get_status</reimplementedby>
        <param>
          <type>DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Export properties of the layer by setting entries in the status dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="81" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1aa3317ac18b2fb26cee1425134559e939" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned int</type>
        <definition>virtual unsigned int nest::AbstractLayer::get_num_dimensions</definition>
        <argsstring>() const =0</argsstring>
        <name>get_num_dimensions</name>
        <reimplementedby refid="classnest_1_1_layer_1a6e68c37a78e18c593855cc6875c1dbf2">get_num_dimensions</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="83" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a9e34dca62adbd5f133dab3fbbe18fccf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt; double &gt; nest::AbstractLayer::get_position_vector</definition>
        <argsstring>(const index lid) const =0</argsstring>
        <name>get_position_vector</name>
        <reimplementedby refid="classnest_1_1_layer_1a96bf140046dc1815263bad1be6395219">get_position_vector</reimplementedby>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get position of node. Only possible for local nodes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lid</parametername>
</parameternamelist>
<parameterdescription>
<para>index of node within layer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>position of node as std::vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="90" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1ad91d0d2ea53dff6932424b93683be50c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt; double &gt; nest::AbstractLayer::compute_displacement</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const index to) const =0</argsstring>
        <name>compute_displacement</name>
        <reimplementedby refid="classnest_1_1_layer_1a319156f736642bdb7bc5483c79b10530">compute_displacement</reimplementedby>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns displacement of node from given position. When using periodic boundary conditions, will return minimum displacement. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>node in layer to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector pointing from from_pos to node to&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="99" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1aba143620ebfde0ca5111fa32cd8fc8bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::AbstractLayer::compute_displacement</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const std::vector&lt; double &gt; &amp;to_pos, const unsigned int dimension) const =0</argsstring>
        <name>compute_displacement</name>
        <reimplementedby refid="classnest_1_1_layer_1a52c45681c7e56df3264fe31db5032108">compute_displacement</reimplementedby>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>to_pos</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="100" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1ad1368f4c4efe9a6ff909838f744e7f23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::AbstractLayer::compute_distance</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const index lid) const =0</argsstring>
        <name>compute_distance</name>
        <reimplementedby refid="classnest_1_1_layer_1ad01a6f6f14f46165fea0ec5c6fc9da08">compute_distance</reimplementedby>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns distance to node from given position. When using periodic boundary conditions, will return minimum distance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>node in layer to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of vector pointing from from_pos to node to&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="111" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a834e81b328875c599de404b1531ec2d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::AbstractLayer::compute_distance</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const std::vector&lt; double &gt; &amp;to_pos) const =0</argsstring>
        <name>compute_distance</name>
        <reimplementedby refid="classnest_1_1_layer_1a8680705537ec5ed10f3dadd966075feb">compute_distance</reimplementedby>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>to_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="112" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a8a6ee06c5c1a36fddb025ea2d2b87145" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::connect</definition>
        <argsstring>(NodeCollectionPTR source_nc, AbstractLayerPTR target, NodeCollectionPTR target_nc, ConnectionCreator &amp;connector)=0</argsstring>
        <name>connect</name>
        <reimplementedby refid="classnest_1_1_layer_1a805e0bc30af5b8449cbb5ee09fbd71fb">connect</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>source_nc</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a6779693086ed293feb10b317db6e193e" kindref="member">AbstractLayerPTR</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>target_nc</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_connection_creator" kindref="compound">ConnectionCreator</ref> &amp;</type>
          <declname>connector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect this layer to the given target layer. The actual connections are made in class <ref refid="classnest_1_1_connection_creator" kindref="compound">ConnectionCreator</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source_nc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> of the source layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>target layer to connect to. Must have same dimension as this layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_nc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> of the target layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connector</parametername>
</parameternamelist>
<parameterdescription>
<para>connection properties </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="124" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a777aa1d3700a850d4e19f8ce4b32c34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt;</type>
        <definition>virtual std::vector&lt; index &gt; nest::AbstractLayer::get_global_nodes</definition>
        <argsstring>(const MaskDatum &amp;mask, const std::vector&lt; double &gt; &amp;anchor, bool allow_oversized, NodeCollectionPTR node_collection)=0</argsstring>
        <name>get_global_nodes</name>
        <reimplementedby refid="classnest_1_1_layer_1a72db1887553137c059800b8b2fc58cd1">get_global_nodes</reimplementedby>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_oversized</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector with the node IDs of the nodes inside the mask. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>mask to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anchor</parametername>
</parameternamelist>
<parameterdescription>
<para>position to center mask in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_oversized</parametername>
</parameternamelist>
<parameterdescription>
<para>allow mask to be greater than layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_collection</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> of the layer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nodes in layer inside mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="145" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1aa7998764a99b213fbcbaa66273af928d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::dump_nodes</definition>
        <argsstring>(std::ostream &amp;os) const =0</argsstring>
        <name>dump_nodes</name>
        <reimplementedby refid="classnest_1_1_layer_1a84ccd5b88b173dedb7cb3b4b9b6c2a95">dump_nodes</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write layer data to stream. For each node in layer, write one line to stream containing: node ID x-position y-position [z-position] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="156" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1ad8da61eaa018ec1449b5a4c861897e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::dump_connections</definition>
        <argsstring>(std::ostream &amp;out, NodeCollectionPTR node_collection, AbstractLayerPTR target_layer, const Token &amp;syn_model)=0</argsstring>
        <name>dump_connections</name>
        <reimplementedby refid="classnest_1_1_layer_1ac1b9a1c8651f3eefae09c200e00974af">dump_connections</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a6779693086ed293feb10b317db6e193e" kindref="member">AbstractLayerPTR</ref></type>
          <declname>target_layer</declname>
        </param>
        <param>
          <type>const Token &amp;</type>
          <declname>syn_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dumps information about all connections of the given type having their source in the given layer to the given output stream. For distributed simulations this function will dump the connections with local targets only. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_collection</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> of the layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_layer</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_target" kindref="compound">Target</ref> layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapse_id</parametername>
</parameternamelist>
<parameterdescription>
<para>type of connection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="168" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a54c83f92a30139407e7477a8ce019414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::AbstractLayer::set_node_collection</definition>
        <argsstring>(NodeCollectionPTR)</argsstring>
        <name>set_node_collection</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>node_collection</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="173" column="8" bodyfile="nestkernel/layer.h" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1aa22fca27ef998582d5ede2a7f293478b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::AbstractLayer::get_node_collection</definition>
        <argsstring>()</argsstring>
        <name>get_node_collection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="174" column="21" bodyfile="nestkernel/layer.h" bodystart="524" bodyend="527"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a268b14297e57188c5f29a44bad369990" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::AbstractLayer::create_layer</definition>
        <argsstring>(const DictionaryDatum &amp;)</argsstring>
        <name>create_layer</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>layer_dict</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factory function for layers. The supplied dictionary contains parameters which specify the layer type and type-specific parameters. <simplesect kind="return"><para>pointer to <ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> for new layer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="135" column="28" bodyfile="nestkernel/layer.cpp" bodystart="55" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1aeca0c0047fb439d82308b60a3b21f1e6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::clear_ntree_cache_</definition>
        <argsstring>() const =0</argsstring>
        <name>clear_ntree_cache_</name>
        <reimplementedby refid="classnest_1_1_layer_1a3bdf16e4d5e8ce0a7d2c8807b9e858c2">clear_ntree_cache_</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the cache for global position information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="195" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a1e2e32ad29738387bb17856d8f309064" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::AbstractLayer::clear_vector_cache_</definition>
        <argsstring>() const =0</argsstring>
        <name>clear_vector_cache_</name>
        <reimplementedby refid="classnest_1_1_layer_1a0320d45963d9093ac80d6908f140b3f0">clear_vector_cache_</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the cache for global position information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="200" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_abstract_layer_1a560ba4e701334a2040b56a34c60f3d64" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        <definition>NodeCollectionMetadataPTR nest::AbstractLayer::get_metadata</definition>
        <argsstring>() const</argsstring>
        <name>get_metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets metadata of the <ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> to which this layer belongs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="205" column="29" bodyfile="nestkernel/layer.cpp" bodystart="163" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Abstract base class for Layers of unspecified dimension. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>nest::GridLayer&lt; D &gt;</label>
        <link refid="classnest_1_1_grid_layer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::Layer&lt; D &gt;</label>
        <link refid="classnest_1_1_layer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::FreeLayer&lt; D &gt;</label>
        <link refid="classnest_1_1_free_layer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::AbstractLayer</label>
        <link refid="classnest_1_1_abstract_layer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::AbstractLayer</label>
        <link refid="classnest_1_1_abstract_layer"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/layer.h" line="53" column="1" bodyfile="nestkernel/layer.h" bodystart="54" bodyend="206"/>
    <listofallmembers>
      <member refid="classnest_1_1_abstract_layer_1a0ad131746b1272ec9866a336dc380a91" prot="public" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>AbstractLayer</name></member>
      <member refid="classnest_1_1_abstract_layer_1a1e8fda88e7029c3b23f35819cba848c6" prot="protected" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>cached_ntree_md_</name></member>
      <member refid="classnest_1_1_abstract_layer_1add028a9b29284bac5c09ac20f6b42c3b" prot="protected" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>cached_vector_md_</name></member>
      <member refid="classnest_1_1_abstract_layer_1aeca0c0047fb439d82308b60a3b21f1e6" prot="protected" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>clear_ntree_cache_</name></member>
      <member refid="classnest_1_1_abstract_layer_1a1e2e32ad29738387bb17856d8f309064" prot="protected" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>clear_vector_cache_</name></member>
      <member refid="classnest_1_1_abstract_layer_1ad91d0d2ea53dff6932424b93683be50c" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>compute_displacement</name></member>
      <member refid="classnest_1_1_abstract_layer_1aba143620ebfde0ca5111fa32cd8fc8bf" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>compute_displacement</name></member>
      <member refid="classnest_1_1_abstract_layer_1ad1368f4c4efe9a6ff909838f744e7f23" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>compute_distance</name></member>
      <member refid="classnest_1_1_abstract_layer_1a834e81b328875c599de404b1531ec2d7" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>compute_distance</name></member>
      <member refid="classnest_1_1_abstract_layer_1a8a6ee06c5c1a36fddb025ea2d2b87145" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>connect</name></member>
      <member refid="classnest_1_1_abstract_layer_1a268b14297e57188c5f29a44bad369990" prot="public" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>create_layer</name></member>
      <member refid="classnest_1_1_abstract_layer_1ad8da61eaa018ec1449b5a4c861897e00" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>dump_connections</name></member>
      <member refid="classnest_1_1_abstract_layer_1aa7998764a99b213fbcbaa66273af928d" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>dump_nodes</name></member>
      <member refid="classnest_1_1_abstract_layer_1a777aa1d3700a850d4e19f8ce4b32c34f" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>get_global_nodes</name></member>
      <member refid="classnest_1_1_abstract_layer_1a560ba4e701334a2040b56a34c60f3d64" prot="protected" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>get_metadata</name></member>
      <member refid="classnest_1_1_abstract_layer_1aa22fca27ef998582d5ede2a7f293478b" prot="public" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>get_node_collection</name></member>
      <member refid="classnest_1_1_abstract_layer_1aa3317ac18b2fb26cee1425134559e939" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>get_num_dimensions</name></member>
      <member refid="classnest_1_1_abstract_layer_1a9e34dca62adbd5f133dab3fbbe18fccf" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>get_position_vector</name></member>
      <member refid="classnest_1_1_abstract_layer_1a4e6967b12d99eccd9dc329daa1149c96" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>get_status</name></member>
      <member refid="classnest_1_1_abstract_layer_1a32cbd1dbb9fdfd0b12903814aeb5c066" prot="protected" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>node_collection_</name></member>
      <member refid="classnest_1_1_abstract_layer_1a54c83f92a30139407e7477a8ce019414" prot="public" virt="non-virtual"><scope>nest::AbstractLayer</scope><name>set_node_collection</name></member>
      <member refid="classnest_1_1_abstract_layer_1ad06fa8f1d890798881a7ae445b964108" prot="public" virt="pure-virtual"><scope>nest::AbstractLayer</scope><name>set_status</name></member>
      <member refid="classnest_1_1_abstract_layer_1a5ffddcffaba780d5e7b61d2850d2c922" prot="public" virt="virtual"><scope>nest::AbstractLayer</scope><name>~AbstractLayer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
