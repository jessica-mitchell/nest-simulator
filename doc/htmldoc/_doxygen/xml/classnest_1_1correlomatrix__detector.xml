<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1correlomatrix__detector" kind="class" language="C++" prot="public">
    <compoundname>nest::correlomatrix_detector</compoundname>
    <basecompoundref refid="classnest_1_1Node" prot="public" virt="non-virtual">nest::Node</basecompoundref>
    <includes refid="correlomatrix__detector_8h" local="no">correlomatrix_detector.h</includes>
    <innerclass refid="structnest_1_1correlomatrix__detector_1_1Parameters__" prot="private">nest::correlomatrix_detector::Parameters_</innerclass>
    <innerclass refid="structnest_1_1correlomatrix__detector_1_1Spike__" prot="private">nest::correlomatrix_detector::Spike_</innerclass>
    <innerclass refid="structnest_1_1correlomatrix__detector_1_1State__" prot="private">nest::correlomatrix_detector::State_</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnest_1_1correlomatrix__detector_1a775e40b3b25f75f50e7a50cd1a9c15fc" prot="private" static="no">
        <type>std::deque&lt; <ref refid="structnest_1_1correlomatrix__detector_1_1Spike__" kindref="compound">Spike_</ref> &gt;</type>
        <definition>typedef std::deque&lt; Spike_ &gt; nest::correlomatrix_detector::SpikelistType</definition>
        <argsstring></argsstring>
        <name>SpikelistType</name>
        <qualifiedname>nest::correlomatrix_detector::SpikelistType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="226" column="22" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1correlomatrix__detector_1a0aaf21d6d9f70624e2fb7f86901a16dc" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1PseudoRecordingDevice" kindref="compound">PseudoRecordingDevice</ref></type>
        <definition>PseudoRecordingDevice nest::correlomatrix_detector::device_</definition>
        <argsstring></argsstring>
        <name>device_</name>
        <qualifiedname>nest::correlomatrix_detector::device_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="295" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="295" bodyend="-1"/>
        <referencedby refid="classnest_1_1correlomatrix__detector_1ad6719b66043647cf0e71eb58cff7f4e7" compoundref="correlomatrix__detector_8h" startline="311" endline="316">get_status</referencedby>
        <referencedby refid="classnest_1_1correlomatrix__detector_1a1c76fccf510cfb0ddc8a336526738830" compoundref="correlomatrix__detector_8h" startline="319" endline="330">set_status</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1correlomatrix__detector_1a047edba7b91e755c42583533cc8f5d8a" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1correlomatrix__detector_1_1Parameters__" kindref="compound">Parameters_</ref></type>
        <definition>Parameters_ nest::correlomatrix_detector::P_</definition>
        <argsstring></argsstring>
        <name>P_</name>
        <qualifiedname>nest::correlomatrix_detector::P_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="296" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="296" bodyend="-1"/>
        <referencedby refid="classnest_1_1correlomatrix__detector_1ad6719b66043647cf0e71eb58cff7f4e7" compoundref="correlomatrix__detector_8h" startline="311" endline="316">get_status</referencedby>
        <referencedby refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" compoundref="correlomatrix__detector_8h" startline="301" endline="308">handles_test_event</referencedby>
        <referencedby refid="classnest_1_1correlomatrix__detector_1a1c76fccf510cfb0ddc8a336526738830" compoundref="correlomatrix__detector_8h" startline="319" endline="330">set_status</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1correlomatrix__detector_1a8f656899ab7504e8dc577d4d733750bf" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1correlomatrix__detector_1_1State__" kindref="compound">State_</ref></type>
        <definition>State_ nest::correlomatrix_detector::S_</definition>
        <argsstring></argsstring>
        <name>S_</name>
        <qualifiedname>nest::correlomatrix_detector::S_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="297" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="297" bodyend="-1"/>
        <referencedby refid="classnest_1_1correlomatrix__detector_1ad6719b66043647cf0e71eb58cff7f4e7" compoundref="correlomatrix__detector_8h" startline="311" endline="316">get_status</referencedby>
        <referencedby refid="classnest_1_1correlomatrix__detector_1a1c76fccf510cfb0ddc8a336526738830" compoundref="correlomatrix__detector_8h" startline="319" endline="330">set_status</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a780002341eb8c158d14d51f6ffc69980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::correlomatrix_detector::correlomatrix_detector</definition>
        <argsstring>()</argsstring>
        <name>correlomatrix_detector</name>
        <qualifiedname>nest::correlomatrix_detector::correlomatrix_detector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="154" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="238" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a421c658548735c51842e493b1d19adc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::correlomatrix_detector::correlomatrix_detector</definition>
        <argsstring>(const correlomatrix_detector &amp;)</argsstring>
        <name>correlomatrix_detector</name>
        <qualifiedname>nest::correlomatrix_detector::correlomatrix_detector</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1correlomatrix__detector" kindref="compound">correlomatrix_detector</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="155" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="246" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a8d8569bf770c010afeff6f5a38a7e3ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::correlomatrix_detector::has_proxies</definition>
        <argsstring>() const override</argsstring>
        <name>has_proxies</name>
        <qualifiedname>nest::correlomatrix_detector::has_proxies</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf">has_proxies</reimplements>
        <briefdescription>
<para>This device has proxies, so that it will receive spikes also from sources which live on other threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="162" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a69730a205c2c0fdf0370dd85af2b5910" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="className" kindref="compound">Name</ref></type>
        <definition>Name nest::correlomatrix_detector::get_element_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_element_type</name>
        <qualifiedname>nest::correlomatrix_detector::get_element_type</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56">get_element_type</reimplements>
        <briefdescription>
<para>Return the element type of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="className" kindref="compound">Name</ref> is a free label describing the class of network elements a node belongs to. Currently used values are &quot;neuron&quot;, &quot;recorder&quot;, &quot;stimulator&quot;, and &quot;other&quot;, which are all defined as static <ref refid="className" kindref="compound">Name</ref> objects in the names namespace. This function is overwritten with a corresponding value in the derived classes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="168" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="168" bodyend="171"/>
        <references refid="namespacenest_1_1names_1ac06afa5c1ac719fd7354600f769f8dfe" compoundref="nest__names_8h" startline="405">nest::names::recorder</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a84891b0d4ab3820b9777fe9fb1b9dda9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::handle</definition>
        <argsstring>(SpikeEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="181" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="289" bodyend="390"/>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnectionManager_1a9ea22ac11166a9e3ed07638a9dd8a51f" compoundref="connection__manager_8h" startline="641" endline="644">nest::ConnectionManager::get_min_delay</references>
        <references refid="classnest_1_1Time_1afedb0e4fbf5d521e50573f2180016568" compoundref="nest__time_8h" startline="526" endline="540">nest::Time::get_steps</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::correlomatrix_detector::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="183" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="301" bodyend="308"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="structnest_1_1correlomatrix__detector_1_1Parameters___1a2f5352c0d8acbbd9218398c3a7be7f4d" compoundref="correlomatrix__detector_8h" startline="238">nest::correlomatrix_detector::Parameters_::N_channels_</references>
        <references refid="classnest_1_1correlomatrix__detector_1a047edba7b91e755c42583533cc8f5d8a" compoundref="correlomatrix__detector_8h" startline="296">P_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1ad6719b66043647cf0e71eb58cff7f4e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::correlomatrix_detector::get_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="185" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="311" bodyend="316"/>
        <references refid="classnest_1_1correlomatrix__detector_1a0aaf21d6d9f70624e2fb7f86901a16dc" compoundref="correlomatrix__detector_8h" startline="295">device_</references>
        <references refid="structnest_1_1correlomatrix__detector_1_1Parameters___1a822a3dd7a23ad2823a6ffa0c6061bb5f" compoundref="correlomatrix__detector_8cpp" startline="107" endline="114">nest::correlomatrix_detector::Parameters_::get</references>
        <references refid="structnest_1_1correlomatrix__detector_1_1State___1a28559de9a5ef0a5eab516da3aa387bdb" compoundref="correlomatrix__detector_8cpp" startline="117" endline="137">nest::correlomatrix_detector::State_::get</references>
        <references refid="classnest_1_1Device_1ad04b50c499901228d9c672f8a677962e" compoundref="device_8h" startline="181" endline="184">nest::Device::get_status</references>
        <references refid="classnest_1_1correlomatrix__detector_1a047edba7b91e755c42583533cc8f5d8a" compoundref="correlomatrix__detector_8h" startline="296">P_</references>
        <references refid="classnest_1_1correlomatrix__detector_1a8f656899ab7504e8dc577d4d733750bf" compoundref="correlomatrix__detector_8h" startline="297">S_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a1c76fccf510cfb0ddc8a336526738830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::correlomatrix_detector::set_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Change properties of the node according to the entries in the dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref> with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="186" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="319" bodyend="330"/>
        <references refid="classnest_1_1correlomatrix__detector_1a0aaf21d6d9f70624e2fb7f86901a16dc" compoundref="correlomatrix__detector_8h" startline="295">device_</references>
        <references refid="classnest_1_1correlomatrix__detector_1a047edba7b91e755c42583533cc8f5d8a" compoundref="correlomatrix__detector_8h" startline="296">P_</references>
        <references refid="structnest_1_1correlomatrix__detector_1_1State___1af3c400bd856cf43c9bcf4401dbc33a47" compoundref="correlomatrix__detector_8cpp" startline="207" endline="232">nest::correlomatrix_detector::State_::reset</references>
        <references refid="classnest_1_1correlomatrix__detector_1a8f656899ab7504e8dc577d4d733750bf" compoundref="correlomatrix__detector_8h" startline="297">S_</references>
        <references refid="structnest_1_1correlomatrix__detector_1_1Parameters___1a5838f5ff62855defb4e866296c456c24" compoundref="correlomatrix__detector_8cpp" startline="140" endline="199">nest::correlomatrix_detector::Parameters_::set</references>
        <references refid="classnest_1_1Device_1a7e7f029d1c677e8d5727fc80b103e990" compoundref="device_8h" startline="187" endline="194">nest::Device::set_status</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a2fc7fb23335aeb594b102c2c2b1bd7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::calibrate_time</definition>
        <argsstring>(const TimeConverter &amp;tc) override</argsstring>
        <name>calibrate_time</name>
        <qualifiedname>nest::correlomatrix_detector::calibrate_time</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7">calibrate_time</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1TimeConverter" kindref="compound">TimeConverter</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Re-calculate time-based properties of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called after a change in resolution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="188" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="393" bodyend="410"/>
        <references refid="classnest_1_1TimeConverter_1a6dd858c951ee0d6d846c5fc11a9eadc3" compoundref="nest__timeconverter_8cpp" startline="49" endline="57">nest::TimeConverter::from_old_tics</references>
        <references refid="classnest_1_1Time_1aff831a8475d8060353c4cae73cc5748c" compoundref="nest__time_8h" startline="512" endline="523">nest::Time::get_ms</references>
        <references refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" compoundref="logging_8h" startline="29">LOG</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac918263c6420db964adbf3a3375cf9ee" compoundref="logging_8h" startline="54">nest::M_INFO</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::correlomatrix_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::correlomatrix_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a2fa32e1841acec6e77216053c568fe0d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::init_state_</definition>
        <argsstring>() override</argsstring>
        <name>init_state_</name>
        <qualifiedname>nest::correlomatrix_detector::init_state_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef">init_state_</reimplements>
        <briefdescription>
<para>Configure state variables depending on runtime information. </para>
        </briefdescription>
        <detaileddescription>
<para>Overload this method if the node needs to adapt state variables prior to first simulation to runtime information, e.g., the number of incoming connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="191" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a3da5bc33cb1bb217e0b1549df3acb5da" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::init_buffers_</definition>
        <argsstring>() override</argsstring>
        <name>init_buffers_</name>
        <qualifiedname>nest::correlomatrix_detector::init_buffers_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453">init_buffers_</reimplements>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="192" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a5a7cf48e7001145523f26c8e7b658dc9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <qualifiedname>nest::correlomatrix_detector::pre_run_hook</qualifiedname>
        <reimplements refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplements>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="193" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1correlomatrix__detector_1a6a99fd6f081104a69d53d5d7401a9c06" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::correlomatrix_detector::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <qualifiedname>nest::correlomatrix_detector::update</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$. </para>
        </briefdescription>
        <detaileddescription>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="195" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.cpp" bodystart="284" bodyend="286"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Correlomatrix detector breaks with the persistence scheme as follows: the internal buffers for storing spikes are part of <ref refid="structnest_1_1correlomatrix__detector_1_1State__" kindref="compound">State_</ref>, but are initialized by <ref refid="classnest_1_1correlomatrix__detector_1a3da5bc33cb1bb217e0b1549df3acb5da" kindref="member">init_buffers_()</ref>.</para>
</simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>The correlation detector could be made more efficient as follows (HEP 2008-07-01):<itemizedlist>
<listitem><para>incoming_ is vector of two deques</para>
</listitem><listitem><para>let <ref refid="classnest_1_1correlomatrix__detector_1a84891b0d4ab3820b9777fe9fb1b9dda9" kindref="member">handle()</ref> push_back() entries in incoming_ and do nothing else</para>
</listitem><listitem><para>keep index to last &quot;old spike&quot; in each incoming_; cannot be iterator since that may change</para>
</listitem><listitem><para><ref refid="classnest_1_1correlomatrix__detector_1a6a99fd6f081104a69d53d5d7401a9c06" kindref="member">update()</ref> deletes all entries before now-tau_max, sorts the new entries, then registers new entries in histogram </para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="1">
        <label>nest::correlomatrix_detector</label>
        <link refid="classnest_1_1correlomatrix__detector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="5">
        <label>nest::Device</label>
        <link refid="classnest_1_1Device"/>
        <childnode refid="6" relation="usage">
          <edgelabel>P_</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>V_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>nest::Device::Parameters_</label>
        <link refid="structnest_1_1Device_1_1Parameters__"/>
        <childnode refid="7" relation="usage">
          <edgelabel>origin_</edgelabel>
          <edgelabel>start_</edgelabel>
          <edgelabel>stop_</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>nest::Device::Variables_</label>
        <link refid="structnest_1_1Device_1_1Variables__"/>
      </node>
      <node id="2">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="3" relation="usage">
          <edgelabel>deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::PseudoRecordingDevice</label>
        <link refid="classnest_1_1PseudoRecordingDevice"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::Time</label>
        <link refid="classnest_1_1Time"/>
        <childnode refid="8" relation="usage">
          <edgelabel>LIM_MAX</edgelabel>
          <edgelabel>LIM_MIN</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>LIM_NEG_INF</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1Time_1_1Limit"/>
      </node>
      <node id="10">
        <label>nest::Time::LimitNegInf</label>
        <link refid="structnest_1_1Time_1_1LimitNegInf"/>
      </node>
      <node id="9">
        <label>nest::Time::LimitPosInf</label>
        <link refid="structnest_1_1Time_1_1LimitPosInf"/>
      </node>
      <node id="1">
        <label>nest::correlomatrix_detector</label>
        <link refid="classnest_1_1correlomatrix__detector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>device_</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>P_</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>S_</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>nest::correlomatrix_detector::Parameters_</label>
        <link refid="structnest_1_1correlomatrix__detector_1_1Parameters__"/>
        <childnode refid="7" relation="usage">
          <edgelabel>Tstart_</edgelabel>
          <edgelabel>Tstop_</edgelabel>
          <edgelabel>delta_tau_</edgelabel>
          <edgelabel>tau_max_</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>nest::correlomatrix_detector::State_</label>
        <link refid="structnest_1_1correlomatrix__detector_1_1State__"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" line="150" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/correlomatrix_detector.h" bodystart="151" bodyend="298"/>
    <listofallmembers>
      <member refid="classnest_1_1correlomatrix__detector_1a2fc7fb23335aeb594b102c2c2b1bd7ba" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1Node_1a09632867c7096c814eeceea1be42fc6b" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>clone</name></member>
      <member refid="group__SP__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>connect_synaptic_element</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a780002341eb8c158d14d51f6ffc69980" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>correlomatrix_detector</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a421c658548735c51842e493b1d19adc5" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>correlomatrix_detector</name></member>
      <member refid="group__SP__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a0aaf21d6d9f70624e2fb7f86901a16dc" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>device_</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_C_m</name></member>
      <member refid="group__SP__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a69730a205c2c0fdf0370dd85af2b5910" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1Node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_history</name></member>
      <member refid="classnest_1_1Node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1Node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1ad6719b66043647cf0e71eb58cff7f4e7" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_status_dict_</name></member>
      <member refid="group__SP__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>get_vp</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a84891b0d4ab3820b9777fe9fb1b9dda9" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1ae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1adef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a8d8569bf770c010afeff6f5a38a7e3ab" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>init</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a3da5bc33cb1bb217e0b1549df3acb5da" prot="private" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a2fa32e1841acec6e77216053c568fe0d" prot="private" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>initialized_</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>model_id_</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a4b28c19bfaa4ac475f5248389ed911e6" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>operator=</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a047edba7b91e755c42583533cc8f5d8a" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>P_</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a5a7cf48e7001145523f26c8e7b658dc9" prot="private" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>print_network</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a8f656899ab7504e8dc577d4d733750bf" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>S_</name></member>
      <member refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a1c76fccf510cfb0ddc8a336526738830" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>set_vp</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a775e40b3b25f75f50e7a50cd1a9c15fc" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>SpikelistType</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1correlomatrix__detector_1a6a99fd6f081104a69d53d5d7401a9c06" prot="private" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>update</name></member>
      <member refid="group__SP__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::correlomatrix_detector</scope><name>vp_</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::correlomatrix_detector</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
