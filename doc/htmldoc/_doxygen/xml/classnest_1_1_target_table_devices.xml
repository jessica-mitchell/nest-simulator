<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_target_table_devices" kind="class" language="C++" prot="public">
    <compoundname>nest::TargetTableDevices</compoundname>
    <includes refid="target__table__devices_8h" local="no">target_table_devices.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_target_table_devices_1a9f9c61081cda5e0d3368dee64a963d22" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_connector_base" kindref="compound">ConnectorBase</ref> * &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::vector&lt; ConnectorBase* &gt; &gt; &gt; nest::TargetTableDevices::target_to_devices_</definition>
        <argsstring></argsstring>
        <name>target_to_devices_</name>
        <briefdescription>
<para>3d structure storing connections from neurons to devices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="57" column="15" bodyfile="nestkernel/target_table_devices.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_target_table_devices_1af9872404c6b151a5db5dd096e34ab21d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_connector_base" kindref="compound">ConnectorBase</ref> * &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::vector&lt; ConnectorBase* &gt; &gt; &gt; nest::TargetTableDevices::target_from_devices_</definition>
        <argsstring></argsstring>
        <name>target_from_devices_</name>
        <briefdescription>
<para>3d structure storing connections from devices to neurons </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="60" column="15" bodyfile="nestkernel/target_table_devices.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_target_table_devices_1aa4ce049505c204585ffb3c155a9ddaa9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; index &gt; &gt; nest::TargetTableDevices::sending_devices_node_ids_</definition>
        <argsstring></argsstring>
        <name>sending_devices_node_ids_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>3d structure storing node IDs of sending devices (necessary for get_connections) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="64" column="15" bodyfile="nestkernel/target_table_devices.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a1e9cb074c287b266b541722998c14748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::TargetTableDevices::TargetTableDevices</definition>
        <argsstring>()</argsstring>
        <name>TargetTableDevices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="67" column="3" bodyfile="nestkernel/target_table_devices.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a3b7d8cbb91730542c84efb5756ebe553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::TargetTableDevices::~TargetTableDevices</definition>
        <argsstring>()</argsstring>
        <name>~TargetTableDevices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="68" column="3" bodyfile="nestkernel/target_table_devices.cpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1ac526322735898fd1fb6a4f27236519e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize data structures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="73" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1afb5ed52083295940408e11f60f7b537c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete data structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="78" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="47" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a09f957d8ac14589929de4dbea0273abf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::add_connection_to_device</definition>
        <argsstring>(Node &amp;source, Node &amp;target, const index s_node_id, const thread tid, const synindex syn_id, const DictionaryDatum &amp;p, const double d, const double w)</argsstring>
        <name>add_connection_to_device</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>s_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a connection from the neuron source to the device target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="83" column="8" bodyfile="nestkernel/target_table_devices_impl.h" bodystart="35" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1afd8f99f2e07b51408dcc72cc165e505e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::add_connection_from_device</definition>
        <argsstring>(Node &amp;source, Node &amp;target, const thread tid, const synindex syn_id, const DictionaryDatum &amp;p, const double d, const double w)</argsstring>
        <name>add_connection_from_device</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a connection from the device source to the neuron target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="95" column="8" bodyfile="nestkernel/target_table_devices_impl.h" bodystart="54" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a83ca4950e9427381cdde2d7984056b20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::send_to_device</definition>
        <argsstring>(const thread tid, const index s_node_id, Event &amp;e, const std::vector&lt; ConnectorModel * &gt; &amp;cm)</argsstring>
        <name>send_to_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>s_node_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a spike event to all targets of the source neuron. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="106" column="8" bodyfile="nestkernel/target_table_devices_impl.h" bodystart="76" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1afd39fabbe400fa7b9009ac3140c8550c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::send_to_device</definition>
        <argsstring>(const thread tid, const index s_node_id, SecondaryEvent &amp;e, const std::vector&lt; ConnectorModel * &gt; &amp;cm)</argsstring>
        <name>send_to_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>s_node_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="107" column="8" bodyfile="nestkernel/target_table_devices_impl.h" bodystart="94" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a01f89b16e9db817588032ae7ac0d19d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::send_from_device</definition>
        <argsstring>(const thread tid, const index ldid, Event &amp;e, const std::vector&lt; ConnectorModel * &gt; &amp;cm)</argsstring>
        <name>send_from_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>ldid</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a spike event to all targets of the source device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="115" column="8" bodyfile="nestkernel/target_table_devices.h" bodystart="233" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1aa43b68ae856da1355976d98dc4ff2664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::resize_to_number_of_neurons</definition>
        <argsstring>()</argsstring>
        <name>resize_to_number_of_neurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resizes vectors according to number of local nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="120" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1ae9fa721651b8a36af760da0ec4c62270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::resize_to_number_of_synapse_types</definition>
        <argsstring>()</argsstring>
        <name>resize_to_number_of_synapse_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resizes vectors according to number of available synapse types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="125" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="89" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1ab34d597db52fd55318307a5f5babea37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::get_connections_to_devices_</definition>
        <argsstring>(const index requested_source_node_id, const index requested_target_node_id, const thread tid, const synindex synapse_id, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const</argsstring>
        <name>get_connections_to_devices_</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>synapse_id</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1_connection_i_d" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all connections from neurons to devices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="130" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="108" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1ac1e13e0d6e44dc15f3205d8b14b4c87d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::get_connections_to_device_for_lid_</definition>
        <argsstring>(const index lid, const index requested_target_node_id, const thread tid, const synindex syn_id, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const</argsstring>
        <name>get_connections_to_device_for_lid_</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1_connection_i_d" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all connections from particular neuron to devices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="140" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="134" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1acc4d13aa2d93e3afc6d18765ececb02c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::get_connections_from_devices_</definition>
        <argsstring>(const index requested_source_node_id, const index requested_target_node_id, const thread tid, const synindex synapse_id, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const</argsstring>
        <name>get_connections_from_devices_</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>synapse_id</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1_connection_i_d" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all connections from devices to neurons. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="150" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="154" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a873226de90788c963cbaa1f1812c2d75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::get_connections</definition>
        <argsstring>(const index requested_source_node_id, const index requested_target_node_id, const thread tid, const synindex synapse_id, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const</argsstring>
        <name>get_connections</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>requested_target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>synapse_id</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1_connection_i_d" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all connections between neurons and devices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="160" column="8" bodyfile="nestkernel/target_table_devices.cpp" bodystart="185" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1aa62e2c1472068967720c1117e6258e24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::get_synapse_status_to_device</definition>
        <argsstring>(const thread tid, const index source_node_id, const synindex syn_id, DictionaryDatum &amp;dict, const index lcid) const</argsstring>
        <name>get_synapse_status_to_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns synapse status of connection from neuron to device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="170" column="8" bodyfile="nestkernel/target_table_devices_impl.h" bodystart="110" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a456568309dac07db5fa61027ebd840f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::get_synapse_status_from_device</definition>
        <argsstring>(const thread tid, const index ldid, const synindex syn_id, DictionaryDatum &amp;dict, const index lcid) const</argsstring>
        <name>get_synapse_status_from_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>ldid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns synapse status of connection from device to neuron. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="179" column="8" bodyfile="nestkernel/target_table_devices.h" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1ab37f76d5554123ed75fe8b74561c46c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::set_synapse_status_to_device</definition>
        <argsstring>(const thread tid, const index source_node_id, const synindex syn_id, ConnectorModel &amp;cm, const DictionaryDatum &amp;dict, const index lcid)</argsstring>
        <name>set_synapse_status_to_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> &amp;</type>
          <declname>cm</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets synapse status of connection from neuron to device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="188" column="8" bodyfile="nestkernel/target_table_devices_impl.h" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a54b87428990f1f4c0d92b8d6f8e0f52e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::TargetTableDevices::set_synapse_status_from_device</definition>
        <argsstring>(const thread tid, const index ldid, const synindex syn_id, ConnectorModel &amp;cm, const DictionaryDatum &amp;dict, const index lcid)</argsstring>
        <name>set_synapse_status_from_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>ldid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> &amp;</type>
          <declname>cm</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets synapse status of connection from device to neuron. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="198" column="8" bodyfile="nestkernel/target_table_devices.h" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_target_table_devices_1a99e986592b99cc3dfceafa870ee0e678" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::TargetTableDevices::is_device_connected</definition>
        <argsstring>(thread tid, index lcid) const</argsstring>
        <name>is_device_connected</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the device has any connections in this thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/target_table_devices.h" line="208" column="8" bodyfile="nestkernel/target_table_devices.h" bodystart="250" bodyend="265"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This data structure stores the connections between local neurons and devices. The core structure is a two dimensional vector, which is arranged as follows:<itemizedlist>
<listitem><para>first dim: threads</para>
</listitem><listitem><para>second dim: local nodes/neurons </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::TargetTableDevices</label>
        <link refid="classnest_1_1_target_table_devices"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/target_table_devices.h" line="53" column="1" bodyfile="nestkernel/target_table_devices.h" bodystart="54" bodyend="209"/>
    <listofallmembers>
      <member refid="classnest_1_1_target_table_devices_1afd8f99f2e07b51408dcc72cc165e505e" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>add_connection_from_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1a09f957d8ac14589929de4dbea0273abf" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>add_connection_to_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1afb5ed52083295940408e11f60f7b537c" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>finalize</name></member>
      <member refid="classnest_1_1_target_table_devices_1a873226de90788c963cbaa1f1812c2d75" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>get_connections</name></member>
      <member refid="classnest_1_1_target_table_devices_1acc4d13aa2d93e3afc6d18765ececb02c" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>get_connections_from_devices_</name></member>
      <member refid="classnest_1_1_target_table_devices_1ac1e13e0d6e44dc15f3205d8b14b4c87d" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>get_connections_to_device_for_lid_</name></member>
      <member refid="classnest_1_1_target_table_devices_1ab34d597db52fd55318307a5f5babea37" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>get_connections_to_devices_</name></member>
      <member refid="classnest_1_1_target_table_devices_1a456568309dac07db5fa61027ebd840f0" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>get_synapse_status_from_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1aa62e2c1472068967720c1117e6258e24" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>get_synapse_status_to_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1ac526322735898fd1fb6a4f27236519e8" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>initialize</name></member>
      <member refid="classnest_1_1_target_table_devices_1a99e986592b99cc3dfceafa870ee0e678" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>is_device_connected</name></member>
      <member refid="classnest_1_1_target_table_devices_1aa43b68ae856da1355976d98dc4ff2664" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>resize_to_number_of_neurons</name></member>
      <member refid="classnest_1_1_target_table_devices_1ae9fa721651b8a36af760da0ec4c62270" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>resize_to_number_of_synapse_types</name></member>
      <member refid="classnest_1_1_target_table_devices_1a01f89b16e9db817588032ae7ac0d19d3" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>send_from_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1a83ca4950e9427381cdde2d7984056b20" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>send_to_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1afd39fabbe400fa7b9009ac3140c8550c" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>send_to_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1aa4ce049505c204585ffb3c155a9ddaa9" prot="private" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>sending_devices_node_ids_</name></member>
      <member refid="classnest_1_1_target_table_devices_1a54b87428990f1f4c0d92b8d6f8e0f52e" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>set_synapse_status_from_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1ab37f76d5554123ed75fe8b74561c46c0" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>set_synapse_status_to_device</name></member>
      <member refid="classnest_1_1_target_table_devices_1af9872404c6b151a5db5dd096e34ab21d" prot="private" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>target_from_devices_</name></member>
      <member refid="classnest_1_1_target_table_devices_1a9f9c61081cda5e0d3368dee64a963d22" prot="private" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>target_to_devices_</name></member>
      <member refid="classnest_1_1_target_table_devices_1a1e9cb074c287b266b541722998c14748" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>TargetTableDevices</name></member>
      <member refid="classnest_1_1_target_table_devices_1a3b7d8cbb91730542c84efb5756ebe553" prot="public" virt="non-virtual"><scope>nest::TargetTableDevices</scope><name>~TargetTableDevices</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
