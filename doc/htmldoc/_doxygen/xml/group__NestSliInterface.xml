<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__NestSliInterface" kind="group">
    <compoundname>NestSliInterface</compoundname>
    <title>SLI Interface functions of the NEST kernel.</title>
    <briefdescription>
<para>This group contains the functions that form the SLI interface of the NEST kernel. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="group__NestSliInterface_1namemangling">
<title>Name mangling</title>
<para>All function names are mangled, so that type checking can occur using type tries in the SLI interpreter. No unmangled names should be introduced.</para>
<para>Name mangling is based on the following principles:<orderedlist>
<listitem><para>For each argument expected, _# is appended to the function name in the order in which arguments are expected on the stack, i.e., deepest first.</para>
</listitem><listitem><para># is a (sequence of) lowercase letter for plain data types, an uppercase letter for compound types.</para>
</listitem><listitem><para>For compound types, a lowercase letter can be appended to indicate the type of the elements expected (eg. Ai for array of int).</para>
</listitem></orderedlist>
</para>
<sect2 id="group__NestSliInterface_1plaintypes">
<title>Codes for plain data types</title>
<para><itemizedlist>
<listitem><para><computeroutput>i</computeroutput> : int (actually long)</para>
</listitem><listitem><para><computeroutput>d</computeroutput> : double</para>
</listitem><listitem><para><computeroutput>u</computeroutput> : numeric (long or double)</para>
</listitem><listitem><para><computeroutput>s</computeroutput> : string</para>
</listitem><listitem><para><computeroutput>l</computeroutput> : literal</para>
</listitem><listitem><para><computeroutput>f</computeroutput> : function</para>
</listitem><listitem><para><computeroutput>is</computeroutput> : input stream</para>
</listitem><listitem><para><computeroutput>os</computeroutput> : output stream</para>
</listitem><listitem><para><computeroutput>t</computeroutput> : any token</para>
</listitem><listitem><para><computeroutput>C</computeroutput> : connectiontype</para>
</listitem><listitem><para><computeroutput>cg</computeroutput> : connectiongeneratortype</para>
</listitem><listitem><para><computeroutput>g</computeroutput> : node collection</para>
</listitem><listitem><para><computeroutput>q</computeroutput> : node collection iterator</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="group__NestSliInterface_1compoundtypes">
<title>Codes for compund data types</title>
<para><itemizedlist>
<listitem><para><computeroutput>A</computeroutput> : array</para>
</listitem><listitem><para><computeroutput>D</computeroutput> : dictionary</para>
</listitem><listitem><para><computeroutput>V</computeroutput> : vector</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="group__NestSliInterface_1conventions">
<title>Conventions</title>
<para><orderedlist>
<listitem><para>All interface functions expect and return nodes as vectors of node IDs (Vi).</para>
</listitem><listitem><para>Functions must document how they loop over node ID vectors and how the function is applied to NodeCollections provided as arguments.</para>
</listitem><listitem><para>Functions that do not require overloading on the SLI level, need not carry their argument list in the SLI function name and need not be wrapped by SLI tries.</para>
</listitem><listitem><para>Functions which expect a model or synapse type as argument, must be given this argument as a literal, e.g., <verbatim>     /iaf_psc_alpha 6 Create</verbatim></para>
</listitem><listitem><para>The network is accessed using the get_network() accessor function.</para>
</listitem><listitem><para>Each interface function shall verify that there are enough elements on the stack using (replace n by correct integer) <verbatim>*    i-&gt;assert_stack_load(n);
*    </verbatim></para>
</listitem><listitem><para>Errors should trigger C++ exceptions. They will be caught in the main interpreter loop.</para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="group__NestSliInterface_1slidoc">
<title>SLI Documentation</title>
<para>SLI documentation should be provided in <ref refid="nestmodule_8cpp" kindref="compound">nestmodule.cpp</ref>, ahead of each group of related functions. </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
