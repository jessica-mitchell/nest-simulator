<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_delay_checker" kind="class" language="C++" prot="public">
    <compoundname>nest::DelayChecker</compoundname>
    <includes refid="delay__checker_8h" local="no">delay_checker.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_delay_checker_1aac22d4dc9821faa25d5ec5f66894071c" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time nest::DelayChecker::min_delay_</definition>
        <argsstring></argsstring>
        <name>min_delay_</name>
        <briefdescription>
<para>Minimal delay of all created synapses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="89" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_delay_checker_1a656bc916948f0664740d190ed9a6cd86" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time nest::DelayChecker::max_delay_</definition>
        <argsstring></argsstring>
        <name>max_delay_</name>
        <briefdescription>
<para>Maximal delay of all created synapses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="90" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_delay_checker_1a9a36e262b61b6097dcee6cc17af56bcd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::DelayChecker::user_set_delay_extrema_</definition>
        <argsstring></argsstring>
        <name>user_set_delay_extrema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag indicating if the user set the delay extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="91" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_delay_checker_1a67e292d5fcdf6406ea06e84b673c4d50" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::DelayChecker::freeze_delay_update_</definition>
        <argsstring></argsstring>
        <name>freeze_delay_update_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="93" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a1c77c98b14da5b38aebcc334c78730ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::DelayChecker::DelayChecker</definition>
        <argsstring>()</argsstring>
        <name>DelayChecker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="39" column="3" bodyfile="nestkernel/delay_checker.cpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a78c7a9afa25e1c5803936753c504dd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::DelayChecker::DelayChecker</definition>
        <argsstring>(const DelayChecker &amp;)</argsstring>
        <name>DelayChecker</name>
        <param>
          <type>const <ref refid="classnest_1_1_delay_checker" kindref="compound">DelayChecker</ref> &amp;</type>
          <defname>cr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="40" column="3" bodyfile="nestkernel/delay_checker.cpp" bodystart="41" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1ac43e7a0ba7d2ebd0d134a0782ba83810" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
        <definition>const Time &amp; nest::DelayChecker::get_min_delay</definition>
        <argsstring>() const</argsstring>
        <name>get_min_delay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="42" column="14" bodyfile="nestkernel/delay_checker.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a9f356ddecef307e29ee76fbf19069116" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
        <definition>const Time &amp; nest::DelayChecker::get_max_delay</definition>
        <argsstring>() const</argsstring>
        <name>get_max_delay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="44" column="14" bodyfile="nestkernel/delay_checker.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a9d21165fa3182dff7a5e3696fa335c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::freeze_delay_update</definition>
        <argsstring>()</argsstring>
        <name>freeze_delay_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method freezes the min/ max delay update in SetDefaults of connections method. This is used, when the delay of default connections in the <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> is set: we do not know, whether new connections with this delay will ever be created. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="52" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a63f435aaf1bf3a864edcfeefc17b13ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::enable_delay_update</definition>
        <argsstring>()</argsstring>
        <name>enable_delay_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method enables the min/ max delay update in SetDefaults of connections method. This is used, when the delay of default connections in the <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> is set: we do not know, whether new connections with this delay will ever be created. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="60" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a4a0e6ca8d78a66919f2688e286bf66cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::assert_valid_delay_ms</definition>
        <argsstring>(double)</argsstring>
        <name>assert_valid_delay_ms</name>
        <param>
          <type>double</type>
          <defname>requested_new_delay</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise exception if delay value in milliseconds is invalid.</para>
<para><simplesect kind="note"><para>Not const, since it may update delay extrema as a side-effect. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="67" column="8" bodyfile="nestkernel/delay_checker.cpp" bodystart="146" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1afd253171e8f64e64ff5cd672b4ba1799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::assert_two_valid_delays_steps</definition>
        <argsstring>(delay, delay)</argsstring>
        <name>assert_two_valid_delays_steps</name>
        <param>
          <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
          <defname>new_delay1</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
          <defname>new_delay2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raise exception if either of the two delays in steps is invalid.</para>
<para><simplesect kind="note"><para>Setting continuous delays requires testing d and d+1. This function implements this more efficiently than two calls to assert_valid_delay(). </para>
</simplesect>
<simplesect kind="note"><para>This test accepts the delays in steps, as this makes more sense when working with continuous delays. </para>
</simplesect>
<simplesect kind="note"><para>Not const, since it may update delay extrema as a side-effect. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="79" column="8" bodyfile="nestkernel/delay_checker.cpp" bodystart="209" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a30b9fddaa183a32c66c92ee3f07bb23c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::DelayChecker::get_user_set_delay_extrema</definition>
        <argsstring>() const</argsstring>
        <name>get_user_set_delay_extrema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="81" column="8" bodyfile="nestkernel/delay_checker.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1ac0fa016d296b2f329aa3a2b12eec048d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::calibrate</definition>
        <argsstring>(const TimeConverter &amp;)</argsstring>
        <name>calibrate</name>
        <param>
          <type>const <ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref> &amp;</type>
          <defname>tc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="83" column="8" bodyfile="nestkernel/delay_checker.cpp" bodystart="52" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1adb57dc9a9f4b500b7194990b310927b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const</argsstring>
        <name>get_status</name>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="85" column="8" bodyfile="nestkernel/delay_checker.cpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_delay_checker_1a3bbfadbb5fc47a2027fd13ff27adf909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;)</argsstring>
        <name>set_status</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="86" column="8" bodyfile="nestkernel/delay_checker.cpp" bodystart="118" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_delay_checker_1ac1647ef4b60caef7c8dba321e3e557c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DelayChecker::set_min_max_delay_</definition>
        <argsstring>(const double, const double)</argsstring>
        <name>set_min_max_delay_</name>
        <param>
          <type>const double</type>
          <defname>min_d</defname>
        </param>
        <param>
          <type>const double</type>
          <defname>max_d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/delay_checker.h" line="95" column="8" bodyfile="nestkernel/delay_checker.cpp" bodystart="72" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::DelayChecker</label>
        <link refid="classnest_1_1_delay_checker"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/delay_checker.h" line="36" column="1" bodyfile="nestkernel/delay_checker.h" bodystart="37" bodyend="96"/>
    <listofallmembers>
      <member refid="classnest_1_1_delay_checker_1afd253171e8f64e64ff5cd672b4ba1799" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>assert_two_valid_delays_steps</name></member>
      <member refid="classnest_1_1_delay_checker_1a4a0e6ca8d78a66919f2688e286bf66cb" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>assert_valid_delay_ms</name></member>
      <member refid="classnest_1_1_delay_checker_1ac0fa016d296b2f329aa3a2b12eec048d" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>calibrate</name></member>
      <member refid="classnest_1_1_delay_checker_1a1c77c98b14da5b38aebcc334c78730ba" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>DelayChecker</name></member>
      <member refid="classnest_1_1_delay_checker_1a78c7a9afa25e1c5803936753c504dd5f" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>DelayChecker</name></member>
      <member refid="classnest_1_1_delay_checker_1a63f435aaf1bf3a864edcfeefc17b13ae" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>enable_delay_update</name></member>
      <member refid="classnest_1_1_delay_checker_1a9d21165fa3182dff7a5e3696fa335c9e" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>freeze_delay_update</name></member>
      <member refid="classnest_1_1_delay_checker_1a67e292d5fcdf6406ea06e84b673c4d50" prot="private" virt="non-virtual"><scope>nest::DelayChecker</scope><name>freeze_delay_update_</name></member>
      <member refid="classnest_1_1_delay_checker_1a9f356ddecef307e29ee76fbf19069116" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>get_max_delay</name></member>
      <member refid="classnest_1_1_delay_checker_1ac43e7a0ba7d2ebd0d134a0782ba83810" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>get_min_delay</name></member>
      <member refid="classnest_1_1_delay_checker_1adb57dc9a9f4b500b7194990b310927b3" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>get_status</name></member>
      <member refid="classnest_1_1_delay_checker_1a30b9fddaa183a32c66c92ee3f07bb23c" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>get_user_set_delay_extrema</name></member>
      <member refid="classnest_1_1_delay_checker_1a656bc916948f0664740d190ed9a6cd86" prot="private" virt="non-virtual"><scope>nest::DelayChecker</scope><name>max_delay_</name></member>
      <member refid="classnest_1_1_delay_checker_1aac22d4dc9821faa25d5ec5f66894071c" prot="private" virt="non-virtual"><scope>nest::DelayChecker</scope><name>min_delay_</name></member>
      <member refid="classnest_1_1_delay_checker_1ac1647ef4b60caef7c8dba321e3e557c8" prot="private" virt="non-virtual"><scope>nest::DelayChecker</scope><name>set_min_max_delay_</name></member>
      <member refid="classnest_1_1_delay_checker_1a3bbfadbb5fc47a2027fd13ff27adf909" prot="public" virt="non-virtual"><scope>nest::DelayChecker</scope><name>set_status</name></member>
      <member refid="classnest_1_1_delay_checker_1a9a36e262b61b6097dcee6cc17af56bcd" prot="private" virt="non-virtual"><scope>nest::DelayChecker</scope><name>user_set_delay_extrema_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
