<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1RandomManager" kind="class" language="C++" prot="public">
    <compoundname>nest::RandomManager</compoundname>
    <basecompoundref refid="classnest_1_1ManagerInterface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="random__manager_8h" local="no">random_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a18c70e888ab3682017b374511bcaf75b" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classnest_1_1BaseRandomGeneratorFactory" kindref="compound">BaseRandomGeneratorFactory</ref> * &gt;</type>
        <definition>std::map&lt; std::string, BaseRandomGeneratorFactory* &gt; nest::RandomManager::rng_types_</definition>
        <argsstring></argsstring>
        <name>rng_types_</name>
        <qualifiedname>nest::RandomManager::rng_types_</qualifiedname>
        <briefdescription>
<para>Available RNG types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="116" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a960128c6ced43ee32cde228cd9d1046d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string nest::RandomManager::current_rng_type_</definition>
        <argsstring></argsstring>
        <name>current_rng_type_</name>
        <qualifiedname>nest::RandomManager::current_rng_type_</qualifiedname>
        <briefdescription>
<para><ref refid="className" kindref="compound">Name</ref> of currently used RNG type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="119" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a60033c6b3c2c765e93dfec92f935ad6a" prot="private" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t nest::RandomManager::base_seed_</definition>
        <argsstring></argsstring>
        <name>base_seed_</name>
        <qualifiedname>nest::RandomManager::base_seed_</qualifiedname>
        <briefdescription>
<para>Base seed used when RNGs were last created. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="122" column="17" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a5e06f1eecfb2edc89b468d8ab3cb346b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::RandomManager::rank_synced_rng_</definition>
        <argsstring></argsstring>
        <name>rank_synced_rng_</name>
        <qualifiedname>nest::RandomManager::rank_synced_rng_</qualifiedname>
        <briefdescription>
<para>Random number generator synchronized across ranks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="125" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a2672fa2c5e8c47366a059f3394bf7d4b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref> &gt;</type>
        <definition>std::vector&lt; RngPtr &gt; nest::RandomManager::vp_synced_rngs_</definition>
        <argsstring></argsstring>
        <name>vp_synced_rngs_</name>
        <qualifiedname>nest::RandomManager::vp_synced_rngs_</qualifiedname>
        <briefdescription>
<para>Random number generators synchronized across VPs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="128" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1abfd53a322ef16f02a7f3d661db523a5b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref> &gt;</type>
        <definition>std::vector&lt; RngPtr &gt; nest::RandomManager::vp_specific_rngs_</definition>
        <argsstring></argsstring>
        <name>vp_specific_rngs_</name>
        <qualifiedname>nest::RandomManager::vp_specific_rngs_</qualifiedname>
        <briefdescription>
<para>Random number generators specific to VPs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="131" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a6485493d587b84abea09f859cc8ca54f" prot="private" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string nest::RandomManager::DEFAULT_RNG_TYPE_</definition>
        <argsstring></argsstring>
        <name>DEFAULT_RNG_TYPE_</name>
        <qualifiedname>nest::RandomManager::DEFAULT_RNG_TYPE_</qualifiedname>
        <initializer>= &quot;mt19937_64&quot;</initializer>
        <briefdescription>
<para>RNG type used by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="142" column="28" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a3fbfc7390a66955482dbe720468c9e68" prot="private" static="yes" mutable="no">
        <type>const std::uint32_t</type>
        <definition>const std::uint32_t nest::RandomManager::DEFAULT_BASE_SEED_</definition>
        <argsstring></argsstring>
        <name>DEFAULT_BASE_SEED_</name>
        <qualifiedname>nest::RandomManager::DEFAULT_BASE_SEED_</qualifiedname>
        <initializer>= 143202461</initializer>
        <briefdescription>
<para>Base seed used by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="145" column="30" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1af7f290786d2930e042ee45012c3802e1" prot="private" static="yes" mutable="no">
        <type>const std::uint32_t</type>
        <definition>const std::uint32_t nest::RandomManager::RANK_SYNCED_SEEDER_</definition>
        <argsstring></argsstring>
        <name>RANK_SYNCED_SEEDER_</name>
        <qualifiedname>nest::RandomManager::RANK_SYNCED_SEEDER_</qualifiedname>
        <initializer>= 0xc229212d</initializer>
        <briefdescription>
<para>Rank-synchronized seed-sequence initializer component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="148" column="30" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a7091ab0a0cb1559480f416892b518a5a" prot="private" static="yes" mutable="no">
        <type>const std::uint32_t</type>
        <definition>const std::uint32_t nest::RandomManager::THREAD_SYNCED_SEEDER_</definition>
        <argsstring></argsstring>
        <name>THREAD_SYNCED_SEEDER_</name>
        <qualifiedname>nest::RandomManager::THREAD_SYNCED_SEEDER_</qualifiedname>
        <initializer>= 0x37722d5e</initializer>
        <briefdescription>
<para>Thread-synchronized seed-sequence initializer component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="151" column="30" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1RandomManager_1a92ea8fca3797f84af55aa44755336b32" prot="private" static="yes" mutable="no">
        <type>const std::uint32_t</type>
        <definition>const std::uint32_t nest::RandomManager::THREAD_SPECIFIC_SEEDER_</definition>
        <argsstring></argsstring>
        <name>THREAD_SPECIFIC_SEEDER_</name>
        <qualifiedname>nest::RandomManager::THREAD_SPECIFIC_SEEDER_</qualifiedname>
        <initializer>= 0xb84c9bae</initializer>
        <briefdescription>
<para>Thread-specific seed-sequence initializer component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="154" column="30" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1RandomManager_1a3290dd923a45a78239e2095ea30b67f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RandomManager::RandomManager</definition>
        <argsstring>()</argsstring>
        <name>RandomManager</name>
        <qualifiedname>nest::RandomManager::RandomManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="53" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1a6c10d0f5969957ab5eaca9add7bcce2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RandomManager::~RandomManager</definition>
        <argsstring>() override</argsstring>
        <name>~RandomManager</name>
        <qualifiedname>nest::RandomManager::~RandomManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="54" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1a30c6a775cc6f820d925c442e397ace89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RandomManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <qualifiedname>nest::RandomManager::initialize</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
<para>Register available RNG types, set default RNG type and create RNGs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="59" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="64" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1a1e7b649b91b7f28713bd43327993e4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RandomManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <qualifiedname>nest::RandomManager::finalize</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
<para>Take down manager after operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1KernelManager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1RandomManager_1a30c6a775cc6f820d925c442e397ace89" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1RandomManager_1a30c6a775cc6f820d925c442e397ace89" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="60" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1ac7cb1fb557a3850554dce9c57c4a9946" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RandomManager::change_number_of_threads</definition>
        <argsstring>() override</argsstring>
        <name>change_number_of_threads</name>
        <qualifiedname>nest::RandomManager::change_number_of_threads</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1aa88c28844a59b4791eab4b7930fc62b0">change_number_of_threads</reimplements>
        <briefdescription>
<para>Change the number of threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Many data structures within the different managers depend on the number of threads. This function is called on each manager upon a change of that number and allows the manager to re-allocate data structures accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="61" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1ad66d615ef0519f6198796bb30a72cbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RandomManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::RandomManager::set_status</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="62" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="151" bodyend="187"/>
        <references refid="namespacenest_1_1names_1ae857096e35e0dda2974895166147c7ff" compoundref="nest__names_8h" startline="290">nest::names::local_num_threads</references>
        <references refid="namespacenest_1_1names_1a5fec6d7fb78f192fc2b024b6dd85bf8d" compoundref="nest__names_8h" startline="418">nest::names::rng_seed</references>
        <references refid="namespacenest_1_1names_1abaf4a71eeda472d8b27c7a2b1c8f9551" compoundref="nest__names_8h" startline="419">nest::names::rng_type</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1aac1a658b1441fe898d2359776309febb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RandomManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::RandomManager::get_status</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="63" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="137" bodyend="148"/>
        <references refid="namespacenest_1_1names_1a5fec6d7fb78f192fc2b024b6dd85bf8d" compoundref="nest__names_8h" startline="418">nest::names::rng_seed</references>
        <references refid="namespacenest_1_1names_1abaf4a71eeda472d8b27c7a2b1c8f9551" compoundref="nest__names_8h" startline="419">nest::names::rng_type</references>
        <references refid="namespacenest_1_1names_1a01a20cb742ad7750696b2e96eedeb596" compoundref="nest__names_8h" startline="420">nest::names::rng_types</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1a7c42e8a4a9a0d3c1046100defc807dc3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::RandomManager::get_rank_synced_rng</definition>
        <argsstring>() const</argsstring>
        <name>get_rank_synced_rng</name>
        <qualifiedname>nest::RandomManager::get_rank_synced_rng</qualifiedname>
        <briefdescription>
<para>Get rank-synchronized random number generator. </para>
        </briefdescription>
        <detaileddescription>
<para>The rank-synchronized generator provides identical random number sequences on all MPI ranks. It may be used only by the master thread on each rank and must be used in lock-step across all ranks. Synchronization is checked by MPI exchange at certain points during a simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="73" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="158" bodyend="161"/>
        <referencedby refid="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" compoundref="nest_8cpp" startline="84" endline="87">nest::get_rank_synced_rng</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1ac5608c89ee24b79dbda31e9457f72613" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::RandomManager::get_vp_synced_rng</definition>
        <argsstring>(thread tid) const</argsstring>
        <name>get_vp_synced_rng</name>
        <qualifiedname>nest::RandomManager::get_vp_synced_rng</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get VP-synchronized random number generator. </para>
        </briefdescription>
        <detaileddescription>
<para>The kernel maintains one instance of a synchronized random number generator for each thread (and thus, across ranks, for each VP). The purpose of these synchronized generators is to provide identical random number sequences on each VP while VPs execute in parallel. All VPs (ie all threads on all ranks) must use the generators in lock-step to maintain synchrony. Synchronization is checked by MPI exchange at certain points during a simulation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of thread requesting generator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="87" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="164" bodyend="169"/>
        <referencedby refid="namespacenest_1a7b35c25e014d6ea1ad299a69a0e0484e" compoundref="nest_8cpp" startline="90" endline="93">nest::get_vp_synced_rng</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1af00c31081f1256d0ad7b4ce0f5d1a2ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::RandomManager::get_vp_specific_rng</definition>
        <argsstring>(thread tid) const</argsstring>
        <name>get_vp_specific_rng</name>
        <qualifiedname>nest::RandomManager::get_vp_specific_rng</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Get VP-specific random number generator. </para>
        </briefdescription>
        <detaileddescription>
<para>Each VP (thread) can use this RNG freely and will receive an independent random number sequence. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="95" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="172" bodyend="177"/>
        <referencedby refid="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" compoundref="nest_8cpp" startline="96" endline="99">nest::get_vp_specific_rng</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1a76054450fb204654be7784e00f3e35c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::RandomManager::check_rng_synchrony</definition>
        <argsstring>() const</argsstring>
        <name>check_rng_synchrony</name>
        <qualifiedname>nest::RandomManager::check_rng_synchrony</qualifiedname>
        <briefdescription>
<para>Confirm that rank- and thread-synchronized RNGs are in sync. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1KernelException" kindref="compound">KernelException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if RNGs are out of sync. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="102" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="190" bodyend="229"/>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" compoundref="simulation__manager_8cpp" startline="541" endline="597">nest::SimulationManager::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomManager_1a91c03fb82b5610a326221581b88306fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RNG_TYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::RandomManager::register_rng_type</definition>
        <argsstring>(std::string name)</argsstring>
        <name>register_rng_type</name>
        <qualifiedname>nest::RandomManager::register_rng_type</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Register new random number generator type with manager. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows NEST modules to add new RNG types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RNG_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>Class fulfilling requirements of C++ RNG. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="112" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="233" bodyend="236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1RandomManager_1aa0ae608bcbb4ef65f005cc2f33ca7245" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::RandomManager::reset_rngs_</definition>
        <argsstring>()</argsstring>
        <name>reset_rngs_</name>
        <qualifiedname>nest::RandomManager::reset_rngs_</qualifiedname>
        <briefdescription>
<para>Replace current RNGs with newly seeded generators. </para>
        </briefdescription>
        <detaileddescription>
<para>The new generators will be of type <computeroutput>current_rng_type_</computeroutput> and will be seeded using <computeroutput>base_seed_</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="139" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.cpp" bodystart="105" bodyend="134"/>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="classnest_1_1VPManager_1aa87079f6760fd34ffd921c955a8af9eb" compoundref="vp__manager__impl_8h" startline="37" endline="40">nest::VPManager::get_vp</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manage the kernel&apos;s random number generators. </para>
    </briefdescription>
    <detaileddescription>
<para>This manager provides one random number generator per thread plus the global RNG. It also handles selection of RNG type and seeding. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
      <node id="1">
        <label>nest::RandomManager</label>
        <link refid="classnest_1_1RandomManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>nest::BaseRandomGenerator</label>
        <link refid="classnest_1_1BaseRandomGenerator"/>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
      <node id="1">
        <label>nest::RandomManager</label>
        <link refid="classnest_1_1RandomManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>rank_synced_rng_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" line="50" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_manager.h" bodystart="51" bodyend="155"/>
    <listofallmembers>
      <member refid="classnest_1_1RandomManager_1a60033c6b3c2c765e93dfec92f935ad6a" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>base_seed_</name></member>
      <member refid="classnest_1_1RandomManager_1ac7cb1fb557a3850554dce9c57c4a9946" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1RandomManager_1a76054450fb204654be7784e00f3e35c5" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>check_rng_synchrony</name></member>
      <member refid="classnest_1_1ManagerInterface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1RandomManager_1a960128c6ced43ee32cde228cd9d1046d" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>current_rng_type_</name></member>
      <member refid="classnest_1_1RandomManager_1a3fbfc7390a66955482dbe720468c9e68" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>DEFAULT_BASE_SEED_</name></member>
      <member refid="classnest_1_1RandomManager_1a6485493d587b84abea09f859cc8ca54f" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>DEFAULT_RNG_TYPE_</name></member>
      <member refid="classnest_1_1RandomManager_1a1e7b649b91b7f28713bd43327993e4b5" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1RandomManager_1a7c42e8a4a9a0d3c1046100defc807dc3" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>get_rank_synced_rng</name></member>
      <member refid="classnest_1_1RandomManager_1aac1a658b1441fe898d2359776309febb" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1RandomManager_1af00c31081f1256d0ad7b4ce0f5d1a2ad" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>get_vp_specific_rng</name></member>
      <member refid="classnest_1_1RandomManager_1ac5608c89ee24b79dbda31e9457f72613" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>get_vp_synced_rng</name></member>
      <member refid="classnest_1_1RandomManager_1a30c6a775cc6f820d925c442e397ace89" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1ManagerInterface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1ManagerInterface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1ManagerInterface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1ManagerInterface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1RandomManager_1a3290dd923a45a78239e2095ea30b67f3" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>RandomManager</name></member>
      <member refid="classnest_1_1RandomManager_1a5e06f1eecfb2edc89b468d8ab3cb346b" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>rank_synced_rng_</name></member>
      <member refid="classnest_1_1RandomManager_1af7f290786d2930e042ee45012c3802e1" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>RANK_SYNCED_SEEDER_</name></member>
      <member refid="classnest_1_1RandomManager_1a91c03fb82b5610a326221581b88306fa" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>register_rng_type</name></member>
      <member refid="classnest_1_1RandomManager_1aa0ae608bcbb4ef65f005cc2f33ca7245" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>reset_rngs_</name></member>
      <member refid="classnest_1_1RandomManager_1a18c70e888ab3682017b374511bcaf75b" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>rng_types_</name></member>
      <member refid="classnest_1_1RandomManager_1ad66d615ef0519f6198796bb30a72cbb0" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1RandomManager_1a92ea8fca3797f84af55aa44755336b32" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>THREAD_SPECIFIC_SEEDER_</name></member>
      <member refid="classnest_1_1RandomManager_1a7091ab0a0cb1559480f416892b518a5a" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>THREAD_SYNCED_SEEDER_</name></member>
      <member refid="classnest_1_1RandomManager_1abfd53a322ef16f02a7f3d661db523a5b" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>vp_specific_rngs_</name></member>
      <member refid="classnest_1_1RandomManager_1a2672fa2c5e8c47366a059f3394bf7d4b" prot="private" virt="non-virtual"><scope>nest::RandomManager</scope><name>vp_synced_rngs_</name></member>
      <member refid="classnest_1_1ManagerInterface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::RandomManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1RandomManager_1a6c10d0f5969957ab5eaca9add7bcce2a" prot="public" virt="non-virtual"><scope>nest::RandomManager</scope><name>~RandomManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
