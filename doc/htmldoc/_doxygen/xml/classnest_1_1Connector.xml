<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1Connector" kind="class" language="C++" prot="public">
    <compoundname>nest::Connector</compoundname>
    <basecompoundref refid="classnest_1_1ConnectorBase" prot="public" virt="non-virtual">nest::ConnectorBase</basecompoundref>
    <includes refid="connector__base_8h" local="no">connector_base.h</includes>
    <templateparamlist>
      <param>
        <type>typename ConnectionT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" prot="private" static="no" mutable="no">
        <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; ConnectionT &gt;</type>
        <definition>BlockVector&lt; ConnectionT &gt; nest::Connector&lt; ConnectionT &gt;::C_</definition>
        <argsstring></argsstring>
        <name>C_</name>
        <qualifiedname>nest::Connector::C_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="219" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="219" bodyend="-1"/>
        <referencedby refid="classnest_1_1Connector_1abeeb17408768bf9d877bd238964e4bd5" compoundref="connector__base_8h" startline="489" endline="493">nest::Connector&lt; ConnectionT &gt;::disable_connection</referencedby>
        <referencedby refid="classnest_1_1Connector_1ae54450134e6573a66494baec1473adf0" compoundref="connector__base_8h" startline="453" endline="470">nest::Connector&lt; ConnectionT &gt;::find_first_target</referencedby>
        <referencedby refid="classnest_1_1Connector_1acbd8bbcd89952cc70275612bf1794a57" compoundref="connector__base_8h" startline="473" endline="486">nest::Connector&lt; ConnectionT &gt;::find_matching_target</referencedby>
        <referencedby refid="classnest_1_1Connector_1aa2f10ea404c45384b534358a29ca77fd" compoundref="connector__base_8h" startline="317" endline="327">nest::Connector&lt; ConnectionT &gt;::get_all_connections</referencedby>
        <referencedby refid="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" compoundref="connector__base_8h" startline="272" endline="291">nest::Connector&lt; ConnectionT &gt;::get_connection</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac6051af5ceb56896d1dbba8cf9d9c2e7" compoundref="connector__base_8h" startline="294" endline="314">nest::Connector&lt; ConnectionT &gt;::get_connection_with_specified_targets</referencedby>
        <referencedby refid="classnest_1_1Connector_1afc820f81a5c50fed40c05bbe2c96eca3" compoundref="connector__base_8h" startline="330" endline="340">nest::Connector&lt; ConnectionT &gt;::get_source_lcids</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac01973b88c8ee529771fb260a389bd61" compoundref="connector__base_8h" startline="246" endline="255">nest::Connector&lt; ConnectionT &gt;::get_synapse_status</referencedby>
        <referencedby refid="classnest_1_1Connector_1a06ae7f6b8ed476870b149c18a0e95f5f" compoundref="connector__base_8h" startline="367" endline="370">nest::Connector&lt; ConnectionT &gt;::get_target_node_id</referencedby>
        <referencedby refid="classnest_1_1Connector_1a3d961980e5c07b70a6eb4ce8edff6a90" compoundref="connector__base_8h" startline="343" endline="364">nest::Connector&lt; ConnectionT &gt;::get_target_node_ids</referencedby>
        <referencedby refid="classnest_1_1Connector_1a2ac4cc7479c6f0c7bdcc6b387f3bb161" compoundref="connector__base_8h" startline="266" endline="269">nest::Connector&lt; ConnectionT &gt;::push_back</referencedby>
        <referencedby refid="classnest_1_1Connector_1aec81fcb18458affeb49aba1fd53f3a16" compoundref="connector__base_8h" startline="496" endline="500">nest::Connector&lt; ConnectionT &gt;::remove_disabled_connections</referencedby>
        <referencedby refid="classnest_1_1Connector_1a414f71fe587e7a730ab88ff987144efd" compoundref="connector__base_8h" startline="385" endline="412">nest::Connector&lt; ConnectionT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1Connector_1a94651ce01c1cf42d08c60d61d0cf2070" compoundref="connector__base_8h" startline="373" endline="382">nest::Connector&lt; ConnectionT &gt;::send_to_all</referencedby>
        <referencedby refid="classnest_1_1Connector_1abfc5d40f8534162e5147752c9bdab4e5" compoundref="connector__base_8h" startline="447" endline="450">nest::Connector&lt; ConnectionT &gt;::set_source_has_more_targets</referencedby>
        <referencedby refid="classnest_1_1Connector_1a5bbb84d281dc2645a3f37374d032521d" compoundref="connector__base_8h" startline="258" endline="263">nest::Connector&lt; ConnectionT &gt;::set_synapse_status</referencedby>
        <referencedby refid="classnest_1_1Connector_1a5a49541b9150121be9d15df761f7dec0" compoundref="connector__base_8h" startline="240" endline="243">nest::Connector&lt; ConnectionT &gt;::size</referencedby>
        <referencedby refid="classnest_1_1Connector_1acd9e81a181501c402d58b190b62f5e79" compoundref="connector__base_8h" startline="441" endline="444">nest::Connector&lt; ConnectionT &gt;::sort_connections</referencedby>
        <referencedby refid="classnest_1_1Connector_1acf54076999d8ab831f634bccd0253cc3" compoundref="connector__base_8h" startline="419" endline="438">nest::Connector&lt; ConnectionT &gt;::trigger_update_weight</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac8865aa2f3ffcad3b036b169b9a457b9" compoundref="connector__base_8h" startline="228" endline="231">nest::Connector&lt; ConnectionT &gt;::~Connector</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        <definition>const synindex nest::Connector&lt; ConnectionT &gt;::syn_id_</definition>
        <argsstring></argsstring>
        <name>syn_id_</name>
        <qualifiedname>nest::Connector::syn_id_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="220" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="220" bodyend="-1"/>
        <referencedby refid="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" compoundref="connector__base_8h" startline="272" endline="291">nest::Connector&lt; ConnectionT &gt;::get_connection</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac6051af5ceb56896d1dbba8cf9d9c2e7" compoundref="connector__base_8h" startline="294" endline="314">nest::Connector&lt; ConnectionT &gt;::get_connection_with_specified_targets</referencedby>
        <referencedby refid="classnest_1_1Connector_1a4af56d7c626a5e6fdfeebe045ae07463" compoundref="connector__base_8h" startline="234" endline="237">nest::Connector&lt; ConnectionT &gt;::get_syn_id</referencedby>
        <referencedby refid="classnest_1_1Connector_1a414f71fe587e7a730ab88ff987144efd" compoundref="connector__base_8h" startline="385" endline="412">nest::Connector&lt; ConnectionT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1Connector_1a94651ce01c1cf42d08c60d61d0cf2070" compoundref="connector__base_8h" startline="373" endline="382">nest::Connector&lt; ConnectionT &gt;::send_to_all</referencedby>
        <referencedby refid="classnest_1_1Connector_1acf54076999d8ab831f634bccd0253cc3" compoundref="connector__base_8h" startline="419" endline="438">nest::Connector&lt; ConnectionT &gt;::trigger_update_weight</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1Connector_1a633516b89ea175cb73a7e270ae689b94" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Connector&lt; ConnectionT &gt;::Connector</definition>
        <argsstring>(const synindex syn_id)</argsstring>
        <name>Connector</name>
        <qualifiedname>nest::Connector::Connector</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="223" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1ac8865aa2f3ffcad3b036b169b9a457b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Connector&lt; ConnectionT &gt;::~Connector</definition>
        <argsstring>() override</argsstring>
        <name>~Connector</name>
        <qualifiedname>nest::Connector::~Connector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="228" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="228" bodyend="231"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1a498793455f3c9cc74e8eded345fa857f" compoundref="block__vector_8h" startline="415" endline="425">BlockVector&lt; value_type_ &gt;::clear</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a4af56d7c626a5e6fdfeebe045ae07463" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        <definition>synindex nest::Connector&lt; ConnectionT &gt;::get_syn_id</definition>
        <argsstring>() const override</argsstring>
        <name>get_syn_id</name>
        <qualifiedname>nest::Connector::get_syn_id</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a3b4a213d82353d094869ad9aee212ff0">get_syn_id</reimplements>
        <briefdescription>
<para>Return syn_id_ of the synapse type of this <ref refid="classnest_1_1Connector" kindref="compound">Connector</ref> (index in list of synapse prototypes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="234" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="234" bodyend="237"/>
        <references refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" compoundref="connector__base_8h" startline="220">nest::Connector&lt; ConnectionT &gt;::syn_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a5a49541b9150121be9d15df761f7dec0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>size_t nest::Connector&lt; ConnectionT &gt;::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>nest::Connector::size</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1abbdfcab73f32165ded037f7bd7651a58">size</reimplements>
        <briefdescription>
<para>Return the number of connections in this <ref refid="classnest_1_1Connector" kindref="compound">Connector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="240" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="240" bodyend="243"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1ac01973b88c8ee529771fb260a389bd61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::get_synapse_status</definition>
        <argsstring>(const thread tid, const index lcid, DictionaryDatum &amp;dict) const override</argsstring>
        <name>get_synapse_status</name>
        <qualifiedname>nest::Connector::get_synapse_status</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1acd59c52556220b86928a82c86002cf09">get_synapse_status</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
<para>Write status of the connection at position lcid to the dictionary dict. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="246" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="246" bodyend="255"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
        <references refid="namespacenest_1_1names_1a83d2632e91d15673db6f7990fcdfe232" compoundref="nest__names_8h" startline="479">nest::names::target</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a5bbb84d281dc2645a3f37374d032521d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::set_synapse_status</definition>
        <argsstring>(const index lcid, const DictionaryDatum &amp;dict, ConnectorModel &amp;cm) override</argsstring>
        <name>set_synapse_status</name>
        <qualifiedname>nest::Connector::set_synapse_status</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a6c792ee977d6c1dfc05e6fdd2e065eaa">set_synapse_status</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1ConnectorModel" kindref="compound">ConnectorModel</ref> &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Set status of the connection at position lcid according to the dictionary dict. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="258" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="258" bodyend="263"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a2ac4cc7479c6f0c7bdcc6b387f3bb161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::push_back</definition>
        <argsstring>(const ConnectionT &amp;c)</argsstring>
        <name>push_back</name>
        <qualifiedname>nest::Connector::push_back</qualifiedname>
        <param>
          <type>const ConnectionT &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="266" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="266" bodyend="269"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1ad82291b9c6dba6fd739394a0f401dda0" compoundref="block__vector_8h" startline="398" endline="411">BlockVector&lt; value_type_ &gt;::push_back</references>
        <referencedby refid="classnest_1_1GenericConnectorModel_1a0786c7e789e6ad238b87ee53ec0035f7" compoundref="connector__model__impl_8h" startline="261" endline="285">nest::GenericConnectorModel&lt; ConnectionT &gt;::add_connection_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::get_connection</definition>
        <argsstring>(const index source_node_id, const index target_node_id, const thread tid, const index lcid, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const override</argsstring>
        <name>get_connection</name>
        <qualifiedname>nest::Connector::get_connection</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1af0bba36ebeed4b6ba93b1667a96275b0">get_connection</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1ConnectionID" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="classnest_1_1ConnectionID" kindref="compound">ConnectionID</ref> with given source_node_id and lcid to conns. </para>
        </briefdescription>
        <detaileddescription>
<para>If target_node_id is given, only add connection if target_node_id matches the node_id of the target of the connection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="272" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="272" bodyend="291"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1ad82291b9c6dba6fd739394a0f401dda0" compoundref="block__vector_8h" startline="398" endline="411">BlockVector&lt; value_type_ &gt;::push_back</references>
        <references refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" compoundref="connector__base_8h" startline="220">nest::Connector&lt; ConnectionT &gt;::syn_id_</references>
        <references refid="namespacenest_1aa69a20373c241553ae8038c0fa56e37a" compoundref="connection__label_8h" startline="41">nest::UNLABELED_CONNECTION</references>
        <referencedby refid="classnest_1_1Connector_1aa2f10ea404c45384b534358a29ca77fd" compoundref="connector__base_8h" startline="317" endline="327">nest::Connector&lt; ConnectionT &gt;::get_all_connections</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1ac6051af5ceb56896d1dbba8cf9d9c2e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::get_connection_with_specified_targets</definition>
        <argsstring>(const index source_node_id, const std::vector&lt; size_t &gt; &amp;target_neuron_node_ids, const thread tid, const index lcid, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const override</argsstring>
        <name>get_connection_with_specified_targets</name>
        <qualifiedname>nest::Connector::get_connection_with_specified_targets</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a86589add3fa38b1c1c37982a1663c3a4">get_connection_with_specified_targets</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>target_neuron_node_ids</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1ConnectionID" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
<para>Add <ref refid="classnest_1_1ConnectionID" kindref="compound">ConnectionID</ref> with given source_node_id and lcid to conns. </para>
        </briefdescription>
        <detaileddescription>
<para>If target_neuron_node_ids is given, only add connection if target_neuron_node_ids contains the node ID of the target of the connection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="294" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="294" bodyend="314"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1ad82291b9c6dba6fd739394a0f401dda0" compoundref="block__vector_8h" startline="398" endline="411">BlockVector&lt; value_type_ &gt;::push_back</references>
        <references refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" compoundref="connector__base_8h" startline="220">nest::Connector&lt; ConnectionT &gt;::syn_id_</references>
        <references refid="namespacenest_1aa69a20373c241553ae8038c0fa56e37a" compoundref="connection__label_8h" startline="41">nest::UNLABELED_CONNECTION</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1aa2f10ea404c45384b534358a29ca77fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::get_all_connections</definition>
        <argsstring>(const index source_node_id, const index target_node_id, const thread tid, const long synapse_label, std::deque&lt; ConnectionID &gt; &amp;conns) const override</argsstring>
        <name>get_all_connections</name>
        <qualifiedname>nest::Connector::get_all_connections</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a87c73a0c60fb7c2235986756c9156222">get_all_connections</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>synapse_label</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1ConnectionID" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
<para>Add ConnectionIDs with given source_node_id to conns, looping over all lcids. </para>
        </briefdescription>
        <detaileddescription>
<para>If target_node_id is given, only add connection if target_node_id matches the node ID of the target of the connection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="317" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="317" bodyend="327"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" compoundref="connector__base_8h" startline="272" endline="291">nest::Connector&lt; ConnectionT &gt;::get_connection</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1afc820f81a5c50fed40c05bbe2c96eca3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::get_source_lcids</definition>
        <argsstring>(const thread tid, const index target_node_id, std::vector&lt; index &gt; &amp;source_lcids) const override</argsstring>
        <name>get_source_lcids</name>
        <qualifiedname>nest::Connector::get_source_lcids</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a34c546b3fb30c6a86126f2f1056a6699">get_source_lcids</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>source_lcids</declname>
        </param>
        <briefdescription>
<para>For a given target_node_id add lcids of all connections with matching node ID of target to source_lcids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="330" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="330" bodyend="340"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1ad82291b9c6dba6fd739394a0f401dda0" compoundref="block__vector_8h" startline="398" endline="411">BlockVector&lt; value_type_ &gt;::push_back</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a3d961980e5c07b70a6eb4ce8edff6a90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::get_target_node_ids</definition>
        <argsstring>(const thread tid, const index start_lcid, const std::string &amp;post_synaptic_element, std::vector&lt; index &gt; &amp;target_node_ids) const override</argsstring>
        <name>get_target_node_ids</name>
        <qualifiedname>nest::Connector::get_target_node_ids</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1ab023c83389e5a00478b23d709565a224">get_target_node_ids</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>start_lcid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>post_synaptic_element</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>target_node_ids</declname>
        </param>
        <briefdescription>
<para>For a given start_lcid add node IDs of all targets that belong to the same source to target_node_ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="343" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="343" bodyend="364"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a06ae7f6b8ed476870b149c18a0e95f5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Connector&lt; ConnectionT &gt;::get_target_node_id</definition>
        <argsstring>(const thread tid, const unsigned int lcid) const override</argsstring>
        <name>get_target_node_id</name>
        <qualifiedname>nest::Connector::get_target_node_id</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a295233237a4b3d0e9cfa36b631f2c149">get_target_node_id</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
<para>For a given lcid return the node ID of the target of the connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="367" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="367" bodyend="370"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a94651ce01c1cf42d08c60d61d0cf2070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::send_to_all</definition>
        <argsstring>(const thread tid, const std::vector&lt; ConnectorModel * &gt; &amp;cm, Event &amp;e) override</argsstring>
        <name>send_to_all</name>
        <qualifiedname>nest::Connector::send_to_all</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1ad1ea9e2efd963536675db94dbd58b96e">send_to_all</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1ConnectorModel" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Send the event e to all connections of this <ref refid="classnest_1_1Connector" kindref="compound">Connector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="373" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="373" bodyend="382"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
        <references refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" compoundref="connector__base_8h" startline="220">nest::Connector&lt; ConnectionT &gt;::syn_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a414f71fe587e7a730ab88ff987144efd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Connector&lt; ConnectionT &gt;::send</definition>
        <argsstring>(const thread tid, const index lcid, const std::vector&lt; ConnectorModel * &gt; &amp;cm, Event &amp;e) override</argsstring>
        <name>send</name>
        <qualifiedname>nest::Connector::send</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1afa1924c507b17c94c5690a54aa8e2d9a">send</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1ConnectorModel" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Send the event e to the connection at position lcid. </para>
        </briefdescription>
        <detaileddescription>
<para>Return bool indicating whether the following connection belongs to the same source. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="385" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="385" bodyend="412"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classnest_1_1Connector_1a57f7c53b040d5686aceb365001b5bee5" compoundref="connector__base__impl_8h" startline="36" endline="62">nest::Connector&lt; ConnectionT &gt;::send_weight_event</references>
        <references refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" compoundref="connector__base_8h" startline="220">nest::Connector&lt; ConnectionT &gt;::syn_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1a57f7c53b040d5686aceb365001b5bee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::send_weight_event</definition>
        <argsstring>(const thread tid, const unsigned int lcid, Event &amp;e, const CommonSynapseProperties &amp;cp) override</argsstring>
        <name>send_weight_event</name>
        <qualifiedname>nest::Connector::send_weight_event</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a5b4a5a0d597d9baa83d5301d9dba5a98">send_weight_event</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>lcid</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1CommonSynapseProperties" kindref="compound">CommonSynapseProperties</ref> &amp;</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="416" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base_impl.h" bodystart="36" bodyend="62"/>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="classnest_1_1CommonSynapseProperties_1add2b1deff9175e15d3e7ef6340f8c3f7" compoundref="common__synapse__properties_8h" startline="120" endline="123">nest::CommonSynapseProperties::get_weight_recorder</references>
        <references refid="classnest_1_1CommonSynapseProperties_1a09118695a3291727c5474911f4dc0274" compoundref="common__synapse__properties_8h" startline="114" endline="117">nest::CommonSynapseProperties::get_wr_node_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1Event_1ae662ecac352f57893c104563dd53c7fe" compoundref="event_8h" startline="974" endline="977">nest::Event::set_delay_steps</references>
        <references refid="classnest_1_1Event_1a934d28b25e817dd9ed45fbbab3436288" compoundref="event_8h" startline="1004" endline="1007">nest::Event::set_port</references>
        <references refid="classnest_1_1Event_1a16234c886ae93c42bf120bf77abece30" compoundref="event_8h" startline="886" endline="889">nest::Event::set_receiver</references>
        <references refid="classnest_1_1WeightRecorderEvent_1a836e267234827d00b898839f2110f3c5" compoundref="event_8h" startline="470" endline="473">nest::WeightRecorderEvent::set_receiver_node_id</references>
        <references refid="classnest_1_1Event_1aeac7ec4158ac45bf8e503ee04888d367" compoundref="event_8h" startline="1010" endline="1013">nest::Event::set_rport</references>
        <references refid="classnest_1_1Event_1a63cf602cb38d901021bbe9096f161850" compoundref="event_8h" startline="892" endline="895">nest::Event::set_sender</references>
        <references refid="classnest_1_1Event_1a7ba2a5690a5345624a8ed57c7633cc03" compoundref="event_8h" startline="898" endline="901">nest::Event::set_sender_node_id</references>
        <references refid="classnest_1_1Event_1a47c5bdb5473b5b8971b2a077aec754e0" compoundref="event_8h" startline="948" endline="955">nest::Event::set_stamp</references>
        <references refid="classnest_1_1Event_1ab5269d296a67598c7d6cbb9117756de0" compoundref="event_8h" startline="936" endline="939">nest::Event::set_weight</references>
        <referencedby refid="classnest_1_1Connector_1a414f71fe587e7a730ab88ff987144efd" compoundref="connector__base_8h" startline="385" endline="412">nest::Connector&lt; ConnectionT &gt;::send</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1acf54076999d8ab831f634bccd0253cc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::trigger_update_weight</definition>
        <argsstring>(const long vt_node_id, const thread tid, const std::vector&lt; spikecounter &gt; &amp;dopa_spikes, const double t_trig, const std::vector&lt; ConnectorModel * &gt; &amp;cm) override</argsstring>
        <name>trigger_update_weight</name>
        <qualifiedname>nest::Connector::trigger_update_weight</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1af85e15d1e39deb31cf8dd718dc11674b">trigger_update_weight</reimplements>
        <param>
          <type>const long</type>
          <declname>vt_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1spikecounter" kindref="compound">spikecounter</ref> &gt; &amp;</type>
          <declname>dopa_spikes</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t_trig</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1ConnectorModel" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Update weights of dopamine modulated STDP connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="419" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="419" bodyend="438"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
        <references refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" compoundref="connector__base_8h" startline="220">nest::Connector&lt; ConnectionT &gt;::syn_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1acd9e81a181501c402d58b190b62f5e79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::sort_connections</definition>
        <argsstring>(BlockVector&lt; Source &gt; &amp;sources) override</argsstring>
        <name>sort_connections</name>
        <qualifiedname>nest::Connector::sort_connections</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a5501e2d12e37fa05b93b4c77ce7d8b4c">sort_connections</reimplements>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Sort connections according to source node IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="441" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="441" bodyend="444"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">nest::sort</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1abfc5d40f8534162e5147752c9bdab4e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::set_source_has_more_targets</definition>
        <argsstring>(const index lcid, const bool has_more_targets) override</argsstring>
        <name>set_source_has_more_targets</name>
        <qualifiedname>nest::Connector::set_source_has_more_targets</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1aa5888c57c54f870f880c9dab5df8dc98">set_source_has_more_targets</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>has_more_targets</declname>
        </param>
        <briefdescription>
<para>Set a flag in the connection indicating whether the following connection belongs to the same source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="447" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="447" bodyend="450"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1ae54450134e6573a66494baec1473adf0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Connector&lt; ConnectionT &gt;::find_first_target</definition>
        <argsstring>(const thread tid, const index start_lcid, const index target_node_id) const override</argsstring>
        <name>find_first_target</name>
        <qualifiedname>nest::Connector::find_first_target</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a631cc448fa7bbba2dd3b742bb50b0d42">find_first_target</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>start_lcid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <briefdescription>
<para>Return lcid of the first connection after start_lcid (inclusive) where the node_id of the target matches target_node_id. </para>
        </briefdescription>
        <detaileddescription>
<para>If there are no matches, the function returns invalid_index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="453" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="453" bodyend="470"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1acbd8bbcd89952cc70275612bf1794a57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Connector&lt; ConnectionT &gt;::find_matching_target</definition>
        <argsstring>(const thread tid, const std::vector&lt; index &gt; &amp;matching_lcids, const index target_node_id) const override</argsstring>
        <name>find_matching_target</name>
        <qualifiedname>nest::Connector::find_matching_target</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1ac2285576bd04f9a60f666f70d60d4d61">find_matching_target</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>matching_lcids</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <briefdescription>
<para>Return lcid of first connection where the node ID of the target matches target_node_id; consider only the connections with lcids given in matching_lcids. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no match, the function returns invalid_index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="473" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="473" bodyend="486"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1abeeb17408768bf9d877bd238964e4bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::disable_connection</definition>
        <argsstring>(const index lcid) override</argsstring>
        <name>disable_connection</name>
        <qualifiedname>nest::Connector::disable_connection</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1aa385dbad65bd446b0906f4bc958efbcf">disable_connection</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
<para>Disable the transfer of events through the connection at position lcid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="489" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="489" bodyend="493"/>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connector_1aec81fcb18458affeb49aba1fd53f3a16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Connector&lt; ConnectionT &gt;::remove_disabled_connections</definition>
        <argsstring>(const index first_disabled_index) override</argsstring>
        <name>remove_disabled_connections</name>
        <qualifiedname>nest::Connector::remove_disabled_connections</qualifiedname>
        <reimplements refid="classnest_1_1ConnectorBase_1a2a72378dfe2d0c41974f8da687ab22e6">remove_disabled_connections</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>first_disabled_index</declname>
        </param>
        <briefdescription>
<para>Remove disabled connections from the connector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="496" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="496" bodyend="500"/>
        <references refid="classBlockVector_1a2f29f4d518506752e5e5ee9940e6365a" compoundref="block__vector_8h" startline="370" endline="373">BlockVector&lt; value_type_ &gt;::begin</references>
        <references refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" compoundref="connector__base_8h" startline="219">nest::Connector&lt; ConnectionT &gt;::C_</references>
        <references refid="classBlockVector_1a794af8153625e4c925137afa010b2864" compoundref="block__vector_8h" startline="384" endline="387">BlockVector&lt; value_type_ &gt;::end</references>
        <references refid="classBlockVector_1a96fdf65b807b7fbca9cb0127fb12829c" compoundref="block__vector_8h" startline="446" endline="495">BlockVector&lt; value_type_ &gt;::erase</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Homogeneous connector, contains synapses of one particular type (syn_id_). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::Connector&lt; ConnectionT &gt;</label>
        <link refid="classnest_1_1Connector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ConnectorBase</label>
        <link refid="classnest_1_1ConnectorBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>BlockVector&lt; value_type_ &gt;</label>
        <link refid="classBlockVector"/>
        <childnode refid="7" relation="usage">
          <edgelabel>finish_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BlockVector&lt; ConnectionT &gt;</label>
        <link refid="classBlockVector"/>
        <childnode refid="4" relation="usage">
          <edgelabel>finish_</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; ConnectionT &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>bv_iterator&lt; value_type_, ref_, ptr_ &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="5" relation="usage">
          <edgelabel>block_it_</edgelabel>
          <edgelabel>block_vector_it_</edgelabel>
          <edgelabel>current_block_end_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>bv_iterator&lt; ConnectionT, ConnectionT &amp;, ConnectionT * &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>block_vector_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>block_it_</edgelabel>
          <edgelabel>block_vector_it_</edgelabel>
          <edgelabel>current_block_end_</edgelabel>
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; ConnectionT, ConnectionT &amp;, ConnectionT * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>bv_iterator&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="5" relation="usage">
          <edgelabel>block_it_</edgelabel>
          <edgelabel>block_vector_it_</edgelabel>
          <edgelabel>current_block_end_</edgelabel>
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::Connector&lt; ConnectionT &gt;</label>
        <link refid="classnest_1_1Connector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>C_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::ConnectorBase</label>
        <link refid="classnest_1_1ConnectorBase"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" line="216" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connector_base.h" bodystart="217" bodyend="501"/>
    <listofallmembers>
      <member refid="classnest_1_1Connector_1aba9fa490ea813b8bd0af4045577fa738" prot="private" virt="non-virtual"><scope>nest::Connector</scope><name>C_</name></member>
      <member refid="classnest_1_1Connector_1a633516b89ea175cb73a7e270ae689b94" prot="public" virt="non-virtual"><scope>nest::Connector</scope><name>Connector</name></member>
      <member refid="classnest_1_1Connector_1abeeb17408768bf9d877bd238964e4bd5" prot="public" virt="virtual"><scope>nest::Connector</scope><name>disable_connection</name></member>
      <member refid="classnest_1_1Connector_1ae54450134e6573a66494baec1473adf0" prot="public" virt="virtual"><scope>nest::Connector</scope><name>find_first_target</name></member>
      <member refid="classnest_1_1Connector_1acbd8bbcd89952cc70275612bf1794a57" prot="public" virt="virtual"><scope>nest::Connector</scope><name>find_matching_target</name></member>
      <member refid="classnest_1_1Connector_1aa2f10ea404c45384b534358a29ca77fd" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_all_connections</name></member>
      <member refid="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_connection</name></member>
      <member refid="classnest_1_1Connector_1ac6051af5ceb56896d1dbba8cf9d9c2e7" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_connection_with_specified_targets</name></member>
      <member refid="classnest_1_1Connector_1afc820f81a5c50fed40c05bbe2c96eca3" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_source_lcids</name></member>
      <member refid="classnest_1_1Connector_1a4af56d7c626a5e6fdfeebe045ae07463" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_syn_id</name></member>
      <member refid="classnest_1_1Connector_1ac01973b88c8ee529771fb260a389bd61" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_synapse_status</name></member>
      <member refid="classnest_1_1Connector_1a06ae7f6b8ed476870b149c18a0e95f5f" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_target_node_id</name></member>
      <member refid="classnest_1_1Connector_1a3d961980e5c07b70a6eb4ce8edff6a90" prot="public" virt="virtual"><scope>nest::Connector</scope><name>get_target_node_ids</name></member>
      <member refid="classnest_1_1Connector_1a2ac4cc7479c6f0c7bdcc6b387f3bb161" prot="public" virt="non-virtual"><scope>nest::Connector</scope><name>push_back</name></member>
      <member refid="classnest_1_1Connector_1aec81fcb18458affeb49aba1fd53f3a16" prot="public" virt="virtual"><scope>nest::Connector</scope><name>remove_disabled_connections</name></member>
      <member refid="classnest_1_1Connector_1a414f71fe587e7a730ab88ff987144efd" prot="public" virt="virtual"><scope>nest::Connector</scope><name>send</name></member>
      <member refid="classnest_1_1Connector_1a94651ce01c1cf42d08c60d61d0cf2070" prot="public" virt="virtual"><scope>nest::Connector</scope><name>send_to_all</name></member>
      <member refid="classnest_1_1Connector_1a57f7c53b040d5686aceb365001b5bee5" prot="public" virt="virtual"><scope>nest::Connector</scope><name>send_weight_event</name></member>
      <member refid="classnest_1_1Connector_1abfc5d40f8534162e5147752c9bdab4e5" prot="public" virt="virtual"><scope>nest::Connector</scope><name>set_source_has_more_targets</name></member>
      <member refid="classnest_1_1Connector_1a5bbb84d281dc2645a3f37374d032521d" prot="public" virt="virtual"><scope>nest::Connector</scope><name>set_synapse_status</name></member>
      <member refid="classnest_1_1Connector_1a5a49541b9150121be9d15df761f7dec0" prot="public" virt="virtual"><scope>nest::Connector</scope><name>size</name></member>
      <member refid="classnest_1_1Connector_1acd9e81a181501c402d58b190b62f5e79" prot="public" virt="virtual"><scope>nest::Connector</scope><name>sort_connections</name></member>
      <member refid="classnest_1_1Connector_1a534d4a3c17461251b1a1fb168ce5c0a6" prot="private" virt="non-virtual"><scope>nest::Connector</scope><name>syn_id_</name></member>
      <member refid="classnest_1_1Connector_1acf54076999d8ab831f634bccd0253cc3" prot="public" virt="virtual"><scope>nest::Connector</scope><name>trigger_update_weight</name></member>
      <member refid="classnest_1_1Connector_1ac8865aa2f3ffcad3b036b169b9a457b9" prot="public" virt="non-virtual"><scope>nest::Connector</scope><name>~Connector</name></member>
      <member refid="classnest_1_1ConnectorBase_1a2eef2a906c557e1970b66eefa6b99ec6" prot="public" virt="virtual"><scope>nest::Connector</scope><name>~ConnectorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
