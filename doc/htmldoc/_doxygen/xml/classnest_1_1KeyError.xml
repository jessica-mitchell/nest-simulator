<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1KeyError" kind="class" language="C++" prot="public">
    <compoundname>nest::KeyError</compoundname>
    <basecompoundref refid="classnest_1_1KernelException" prot="public" virt="non-virtual">nest::KernelException</basecompoundref>
    <includes refid="exceptions_8h" local="no">exceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1KeyError_1a93837d212df39de59aeb8ebc8e48e616" prot="private" static="no" mutable="no">
        <type>const <ref refid="className" kindref="compound">Name</ref></type>
        <definition>const Name nest::KeyError::key_</definition>
        <argsstring></argsstring>
        <name>key_</name>
        <qualifiedname>nest::KeyError::key_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="914" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1KeyError_1acf85e84c8e7e12062290a3bc00605f7b" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string nest::KeyError::map_type_</definition>
        <argsstring></argsstring>
        <name>map_type_</name>
        <qualifiedname>nest::KeyError::map_type_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="915" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1KeyError_1abcb98d16669ddcb87bc175d6acaccf1c" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string nest::KeyError::map_op_</definition>
        <argsstring></argsstring>
        <name>map_op_</name>
        <qualifiedname>nest::KeyError::map_op_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="916" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="916" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1KeyError_1a3dd4812032bd501ca0616c7b393f35ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::KeyError::KeyError</definition>
        <argsstring>(const Name &amp;key, const std::string &amp;map_type, const std::string &amp;map_op)</argsstring>
        <name>KeyError</name>
        <qualifiedname>nest::KeyError::KeyError</qualifiedname>
        <param>
          <type>const <ref refid="className" kindref="compound">Name</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>map_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>map_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="919" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="919" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1KeyError_1a18349da55a4ef301b33b9843e14b5f85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::KeyError::~KeyError</definition>
        <argsstring>() override</argsstring>
        <name>~KeyError</name>
        <qualifiedname>nest::KeyError::~KeyError</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="927" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="927" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1KeyError_1a6ff244f2c6822c991863fd5ff2aebbc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string nest::KeyError::message</definition>
        <argsstring>() const override</argsstring>
        <name>message</name>
        <qualifiedname>nest::KeyError::message</qualifiedname>
        <reimplements refid="classnest_1_1KernelException_1a485c64ff3ea756a5eb6118799e0f1c74">message</reimplements>
        <briefdescription>
<para>Returns a diagnostic message or empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="930" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.cpp" bodystart="450" bodyend="457"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception to be thrown if when trying to delete an entry from <ref refid="classnest_1_1DynamicRecordablesMap" kindref="compound">DynamicRecordablesMap</ref> that does not exist. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::KernelException</label>
        <link refid="classnest_1_1KernelException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::KeyError</label>
        <link refid="classnest_1_1KeyError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>Name</label>
        <link refid="className"/>
      </node>
      <node id="3">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::KernelException</label>
        <link refid="classnest_1_1KernelException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::KeyError</label>
        <link refid="classnest_1_1KeyError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>key_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="912" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="913" bodyend="931"/>
    <listofallmembers>
      <member refid="classnest_1_1KernelException_1aeb4d5e1c6351372f03f535806264fb6d" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KernelException_1a587cc59f8f1fac92da4370934c03ab15" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KernelException_1a1a10edf2a54c9d48aeab137024cd3144" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KeyError_1a93837d212df39de59aeb8ebc8e48e616" prot="private" virt="non-virtual"><scope>nest::KeyError</scope><name>key_</name></member>
      <member refid="classnest_1_1KeyError_1a3dd4812032bd501ca0616c7b393f35ca" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>KeyError</name></member>
      <member refid="classnest_1_1KeyError_1abcb98d16669ddcb87bc175d6acaccf1c" prot="private" virt="non-virtual"><scope>nest::KeyError</scope><name>map_op_</name></member>
      <member refid="classnest_1_1KeyError_1acf85e84c8e7e12062290a3bc00605f7b" prot="private" virt="non-virtual"><scope>nest::KeyError</scope><name>map_type_</name></member>
      <member refid="classnest_1_1KeyError_1a6ff244f2c6822c991863fd5ff2aebbc8" prot="public" virt="virtual"><scope>nest::KeyError</scope><name>message</name></member>
      <member refid="classSLIException_1ace48f5938754e82931bab7f54471dd3f" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a5da1b6d493d134687d9ce01e9799b59d" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a4ac56d362c7d86819a47c76571c9c031" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>what</name></member>
      <member refid="classSLIException_1af0e8f12a5e346db4c028d23a2974f016" prot="private" virt="non-virtual"><scope>nest::KeyError</scope><name>what_</name></member>
      <member refid="classnest_1_1KernelException_1aeaa4cd0b8db52d17bb0907ea6db41a44" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>~KernelException</name></member>
      <member refid="classnest_1_1KeyError_1a18349da55a4ef301b33b9843e14b5f85" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>~KeyError</name></member>
      <member refid="classSLIException_1a671677b69bcc3895df94a069067c0578" prot="public" virt="non-virtual"><scope>nest::KeyError</scope><name>~SLIException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
