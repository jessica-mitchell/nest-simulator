<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="typechk_8h" kind="file" language="C++">
    <compoundname>typechk.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">vector</includes>
    <includes refid="slifunction_8h" local="yes">slifunction.h</includes>
    <includes refid="slinames_8h" local="yes">slinames.h</includes>
    <includes refid="tokenarray_8h" local="yes">tokenarray.h</includes>
    <includes refid="tokenstack_8h" local="yes">tokenstack.h</includes>
    <includes refid="typearray_8h" local="yes">typearray.h</includes>
    <includedby refid="triedatum_8h" local="yes">triedatum.h</includedby>
    <includedby refid="typechk_8cc" local="yes">typechk.cc</includedby>
    <incdepgraph>
      <node id="20">
        <label>datum.h</label>
        <link refid="datum_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>name.h</label>
        <link refid="name_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sliexceptions.h</label>
        <link refid="sliexceptions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>slifunction.h</label>
        <link refid="slifunction_8h"/>
      </node>
      <node id="6">
        <label>slinames.h</label>
        <link refid="slinames_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>slitype.h</label>
        <link refid="slitype_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tarrayobj.h</label>
        <link refid="tarrayobj_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>token.h</label>
        <link refid="token_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tokenarray.h</label>
        <link refid="tokenarray_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tokenstack.h</label>
        <link refid="tokenstack_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>typearray.h</label>
        <link refid="typearray_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>typechk.h</label>
        <link refid="typechk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="19">
        <label>config.h</label>
      </node>
      <node id="14">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>deque</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="3">
        <label>typeinfo</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>interpret.cc</label>
        <link refid="interpret_8cc"/>
      </node>
      <node id="4">
        <label>sliactions.cc</label>
        <link refid="sliactions_8cc"/>
      </node>
      <node id="5">
        <label>slitypecheck.cc</label>
        <link refid="slitypecheck_8cc"/>
      </node>
      <node id="6">
        <label>triedatum.cc</label>
        <link refid="triedatum_8cc"/>
      </node>
      <node id="2">
        <label>triedatum.h</label>
        <link refid="triedatum_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>typechk.cc</label>
        <link refid="typechk_8cc"/>
      </node>
      <node id="1">
        <label>typechk.h</label>
        <link refid="typechk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classTypeTrie" prot="public">TypeTrie</innerclass>
    <innerclass refid="classTypeTrie_1_1TypeNode" prot="private">TypeTrie::TypeNode</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>typechk.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TYPECHECK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPECHECK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>classes<sp/>for<sp/>dynamic<sp/>type<sp/>checking<sp/>in<sp/>SLI</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************</highlight></codeline>
<codeline lineno="30"><highlight class="comment">Project:<sp/><sp/><sp/>SYNOD/SLI<sp/>2.0</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">Task:<sp/><sp/><sp/><sp/><sp/><sp/>With<sp/>a<sp/>TypeTrie<sp/>it<sp/>will<sp/>be<sp/>possible<sp/>to<sp/>perfrom<sp/>a<sp/>type</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check<sp/>of<sp/>(SLI)<sp/>function<sp/>input<sp/>parameters.<sp/>A<sp/>TypeNode</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>represents<sp/>the<sp/>position<sp/>and<sp/>the<sp/>datatype<sp/>of<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>parameter.<sp/>The<sp/>leaves<sp/>of<sp/>the<sp/>tree<sp/>will<sp/>contain<sp/>the</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpreter<sp/>function<sp/>of<sp/>correct<sp/>input<sp/>parameters.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>simple<sp/>add<sp/>type<sp/>tree:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----------------------</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>-----------------&gt;<sp/>double<sp/>-|</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>-&gt;<sp/>double<sp/>-|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>-&gt;<sp/>double<sp/>-|</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(add)<sp/><sp/><sp/>(add)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(add)<sp/><sp/><sp/>(add)</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">Baseclass:<sp/>None</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">Inherit<sp/>:</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">History:<sp/><sp/>This<sp/>is<sp/>a<sp/>revised<sp/>version<sp/>of<sp/>the<sp/>type<sp/>checking<sp/>mechanism<sp/>based<sp/>on</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tries.</highlight></codeline>
<codeline lineno="54"><highlight class="comment">Author:<sp/><sp/><sp/><sp/>Marc-Oliver<sp/>Gewaltig,<sp/>Thomas<sp/>Matyak</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">Date:<sp/><sp/><sp/><sp/><sp/><sp/>18.11.95</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="slifunction_8h" kindref="compound">slifunction.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="slinames_8h" kindref="compound">slinames.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tokenarray_8h" kindref="compound">tokenarray.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tokenstack_8h" kindref="compound">tokenstack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="typearray_8h" kindref="compound">typearray.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classTypeTrie" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypeTrie" kindref="compound">TypeTrie</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76" refid="classTypeTrie_1_1TypeNode" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79" refid="classTypeTrie_1_1TypeNode_1a3c226f19ccdea228c1ce95b28b5ce0da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode_1a3c226f19ccdea228c1ce95b28b5ce0da" kindref="member">refs</ref>;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>references<sp/>to<sp/>this<sp/>Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82" refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref><sp/><ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>type<sp/>at<sp/>this<sp/>stack<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classToken" kindref="compound">Token</ref><sp/><ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref>;<sp/></highlight><highlight class="comment">//<sp/>points<sp/>to<sp/>the<sp/>operator<sp/>or<sp/>an<sp/>error<sp/>func.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>points<sp/>to<sp/>the<sp/>next<sp/>parameter<sp/>alternative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>;<sp/></highlight><highlight class="comment">//<sp/>points<sp/>to<sp/>the<sp/>next<sp/>stack<sp/>level<sp/>for<sp/>this<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classTypeTrie_1_1TypeNode_1accaa4790e41d5a03c8aaf3a9ec3e2a46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1accaa4790e41d5a03c8aaf3a9ec3e2a46" kindref="member">addreference</ref>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="classTypeTrie_1_1TypeNode_1a3c226f19ccdea228c1ce95b28b5ce0da" kindref="member">refs</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classTypeTrie_1_1TypeNode_1a1c7880afc4b1afb931e64681bfdbf26e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a1c7880afc4b1afb931e64681bfdbf26e" kindref="member">removereference</ref>()</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>--<ref refid="classTypeTrie_1_1TypeNode_1a3c226f19ccdea228c1ce95b28b5ce0da" kindref="member">refs</ref><sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classTypeTrie_1_1TypeNode_1a57adfabcbe5b03d8a253986d84971d67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a57adfabcbe5b03d8a253986d84971d67" kindref="member">TypeNode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classTypeTrie_1_1TypeNode_1a3c226f19ccdea228c1ce95b28b5ce0da" kindref="member">refs</ref>(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref>(<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref>()</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classTypeTrie_1_1TypeNode_1a2be6e91174afbb323393dce3022d5949" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a2be6e91174afbb323393dce3022d5949" kindref="member">TypeNode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>n,<sp/><ref refid="classToken" kindref="compound">Token</ref><sp/>f<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classTypeTrie_1_1TypeNode_1a3c226f19ccdea228c1ce95b28b5ce0da" kindref="member">refs</ref>(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref>(<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref>(<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classTypeTrie_1_1TypeNode_1a5324df3beb6a298e5c6069afc2a056c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a5324df3beb6a298e5c6069afc2a056c8" kindref="member">~TypeNode</ref>()</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a1c7880afc4b1afb931e64681bfdbf26e" kindref="member">removereference</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref><sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a1c7880afc4b1afb931e64681bfdbf26e" kindref="member">removereference</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode_1af742917a541b937a4fa42120c18a9ac5" kindref="member">toTokenArray</ref>(<sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode_1ad2e347ac48171be93d72ddd6ea46b254" kindref="member">info</ref>(<sp/>std::ostream&amp;,<sp/>std::vector&lt;<sp/>TypeNode<sp/>const*<sp/>&gt;&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>TypeTrie<sp/>operator=(const<sp/>TypeTrie<sp/>&amp;){};<sp/>//<sp/>disable<sp/>this<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/><ref refid="classTypeTrie_1ab5a3623db41b0a42c07c9c21e1ba2ee8" kindref="member">getalternative</ref>(<sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/><ref refid="classTypeTrie_1ad35f33cb9ecd3f174b703e62c80a4696" kindref="member">newnode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="145" refid="classTypeTrie_1a7ebc094ac86a3dd3014039245ccae440" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1a7ebc094ac86a3dd3014039245ccae440" kindref="member">TypeTrie</ref>()</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>(<sp/>new<sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>(<sp/><ref refid="className" kindref="compound">Name</ref>()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classTypeTrie_1a841fb0a4c2064bee8ac858e55ebd7795" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1a841fb0a4c2064bee8ac858e55ebd7795" kindref="member">TypeTrie</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>ta<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>=<sp/><ref refid="classTypeTrie_1ad35f33cb9ecd3f174b703e62c80a4696" kindref="member">newnode</ref>(<sp/>ta<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classTypeTrie_1a8b5d1c7c2c3e273a84e9aadb58040ec1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1a8b5d1c7c2c3e273a84e9aadb58040ec1" kindref="member">TypeTrie</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie" kindref="compound">TypeTrie</ref>&amp;<sp/>tt<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>(<sp/>tt.<ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1accaa4790e41d5a03c8aaf3a9ec3e2a46" kindref="member">addreference</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1ac2c99b9334436f7db4e278e8ab19381a" kindref="member">~TypeTrie</ref>();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1a004f4e995e02879d9dfde8e80ad897d7" kindref="member">insert_move</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="typearray_8h_1a6a6749dbe567b56ca734934e8418743e" kindref="member">TypeArray</ref>&amp;,<sp/><ref refid="classToken" kindref="compound">Token</ref>&amp;<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classTypeTrie_1a806a7c6a546881ded4ddeebe6ef7bc51" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1a806a7c6a546881ded4ddeebe6ef7bc51" kindref="member">insert</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="typearray_8h_1a6a6749dbe567b56ca734934e8418743e" kindref="member">TypeArray</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classToken" kindref="compound">Token</ref>&amp;<sp/>t<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classToken" kindref="compound">Token</ref><sp/>tmp(<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>no<sp/>insert<sp/>variant,<sp/>that&apos;s<sp/>why<sp/>we<sp/>copy<sp/>the<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>temporary<sp/>and<sp/>then<sp/>move<sp/>it<sp/>to<sp/>the<sp/>trie.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1a004f4e995e02879d9dfde8e80ad897d7" kindref="member">insert_move</ref>(<sp/>a,<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classToken" kindref="compound">Token</ref>&amp;<sp/><ref refid="classTypeTrie_1a2cd6221bd50d0f4d9262edd4121bce23" kindref="member">lookup</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTokenStack" kindref="compound">TokenStack</ref>&amp;<sp/>st<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1ac30301312ec03fb3b499e59f9f22df05" kindref="member">operator==</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie" kindref="compound">TypeTrie</ref>&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1a15d2130f6cdfe54d442abf42925b2448" kindref="member">equals</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1ab3054ff54c173e6f523b2103704b3967" kindref="member">toTokenArray</ref>(<sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1af75874239a6274d6babfbcb64496da4a" kindref="member">info</ref>(<sp/>std::ostream&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classTypeTrie_1ac2c99b9334436f7db4e278e8ab19381a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1ac2c99b9334436f7db4e278e8ab19381a" kindref="member">TypeTrie::~TypeTrie</ref>()</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a1c7880afc4b1afb931e64681bfdbf26e" kindref="member">removereference</ref>();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*_____<sp/>end<sp/>~TypeTrie()<sp/>__________________________________________*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Typename<sp/>comparison<sp/>including<sp/>/anytype<sp/>which<sp/>compares</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>positively<sp/>for<sp/>all<sp/>other<sp/>typenames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classTypeTrie_1a15d2130f6cdfe54d442abf42925b2448" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1a15d2130f6cdfe54d442abf42925b2448" kindref="member">TypeTrie::equals</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>t2<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="201"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>t1<sp/>==<sp/>t2<sp/>or<sp/>t2<sp/>==<sp/><ref refid="namespacesli_1ab9a4380b334ceb97044ad963264037c8" kindref="member">sli::any</ref><sp/>or<sp/>t1<sp/>==<sp/><ref refid="namespacesli_1ab9a4380b334ceb97044ad963264037c8" kindref="member">sli::any</ref><sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classToken" kindref="compound">Token</ref>&amp;</highlight></codeline>
<codeline lineno="206" refid="classTypeTrie_1a2cd6221bd50d0f4d9262edd4121bce23" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1a2cd6221bd50d0f4d9262edd4121bce23" kindref="member">TypeTrie::lookup</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTokenStack" kindref="compound">TokenStack</ref>&amp;<sp/>st<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="207"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>Task:<sp/><sp/><sp/><sp/><sp/><sp/>Tokens<sp/>on<sp/>stack<sp/>&apos;st&apos;<sp/>will<sp/>be<sp/>compared<sp/>with<sp/>the<sp/>TypeTrie.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>stack<sp/>element<sp/>must<sp/>have<sp/>an<sp/>equivalent<sp/>type<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>tree<sp/>level.<sp/>By<sp/>reaching<sp/>a<sp/>leaf<sp/>the<sp/>interpreter</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>will<sp/>be<sp/>returned.<sp/>If<sp/>an<sp/>error<sp/>occurs<sp/>the</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;ErrorFunction&apos;<sp/>will<sp/>be<sp/>returned.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/>Author:<sp/><sp/><sp/><sp/>Marc<sp/>Oliver<sp/>Gewaltig</highlight></codeline>
<codeline lineno="216"><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>Date:<sp/><sp/><sp/><sp/><sp/><sp/>18.11.95,<sp/>rewritten<sp/>on<sp/>Apr.<sp/>16<sp/>1998</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>Parameter:<sp/>st<sp/>=<sp/>stack</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>load<sp/>=<sp/>st.<ref refid="classTokenStack_1a9ca4715bf5e4dc851ca0b2c41eb6c586" kindref="member">load</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/>pos<sp/>=<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>level<sp/>&lt;<sp/>load<sp/>)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref><sp/>find_type<sp/>=<sp/>st.<ref refid="classTokenStack_1ac861cc2282484dd2a27dd1304aa719a4" kindref="member">pick</ref>(<sp/>level<sp/>)-&gt;<ref refid="classDatum_1af7a6a22e2fadd9d3b75e15d7d4dc3998" kindref="member">gettypename</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>1:<sp/>find<sp/>the<sp/>type<sp/>at<sp/>the<sp/>current<sp/>stack<sp/>level<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>alternatives.<sp/>Unfortunately,<sp/>this<sp/>search<sp/>is<sp/>O(n).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classTypeTrie_1a15d2130f6cdfe54d442abf42925b2448" kindref="member">equals</ref>(<sp/>find_type,<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref><sp/>)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classArgumentType" kindref="compound">ArgumentType</ref>(<sp/>level<sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>go<sp/>to<sp/>the<sp/>next<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>==<sp/><ref refid="namespacesli_1a4fcea40a5a1b1949c4155f5bdfff1556" kindref="member">sli::object</ref><sp/>)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>++level;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classStackUnderflow" kindref="compound">StackUnderflow</ref>(<sp/>level<sp/>+<sp/>1,<sp/>load<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="classTypeTrie_1ac30301312ec03fb3b499e59f9f22df05" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1ac30301312ec03fb3b499e59f9f22df05" kindref="member">TypeTrie::operator==</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie" kindref="compound">TypeTrie</ref>&amp;<sp/>tt<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="262"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>==<sp/>tt.<ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/typechk.h"/>
  </compounddef>
</doxygen>
