<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1multimeter" kind="class" language="C++" prot="public">
    <compoundname>nest::multimeter</compoundname>
    <basecompoundref refid="classnest_1_1RecordingDevice" prot="public" virt="non-virtual">nest::RecordingDevice</basecompoundref>
    <derivedcompoundref refid="classnest_1_1voltmeter" prot="public" virt="non-virtual">nest::voltmeter</derivedcompoundref>
    <includes refid="multimeter_8h" local="no">multimeter.h</includes>
    <innerclass refid="structnest_1_1multimeter_1_1Buffers__" prot="private">nest::multimeter::Buffers_</innerclass>
    <innerclass refid="structnest_1_1multimeter_1_1Parameters__" prot="private">nest::multimeter::Parameters_</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1multimeter_1aa4f9ce690806ccff41da801f3b3c0c5b" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1multimeter_1_1Parameters__" kindref="compound">Parameters_</ref></type>
        <definition>Parameters_ nest::multimeter::P_</definition>
        <argsstring></argsstring>
        <name>P_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="221" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="221" bodyend="-1"/>
        <referencedby refid="classnest_1_1multimeter_1a352fc50e020b737e61c56561194db8a6" compoundref="multimeter_8cpp" startline="173" endline="176">pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" compoundref="multimeter_8cpp" startline="49" endline="59">send_test_event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1multimeter_1a6ae2f069887fd4b0ccc15986d34a146f" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1multimeter_1_1Buffers__" kindref="compound">Buffers_</ref></type>
        <definition>Buffers_ nest::multimeter::B_</definition>
        <argsstring></argsstring>
        <name>B_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="222" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="222" bodyend="-1"/>
        <referencedby refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" compoundref="multimeter_8cpp" startline="49" endline="59">send_test_event</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1multimeter_1a175051f11cba0898bae5bfa9e1628db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::multimeter::multimeter</definition>
        <argsstring>()</argsstring>
        <name>multimeter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="136" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="34" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1ab02c38a6ce5aba440d1b35a58f5d78f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::multimeter::multimeter</definition>
        <argsstring>(const multimeter &amp;)</argsstring>
        <name>multimeter</name>
        <param>
          <type>const <ref refid="classnest_1_1multimeter" kindref="compound">multimeter</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="137" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1af451f253f56f84f0f3162982eb8c155c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::multimeter::has_proxies</definition>
        <argsstring>() const override</argsstring>
        <name>has_proxies</name>
        <reimplements refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf">has_proxies</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>multimeters never have proxies, since they must sample their targets through local communication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="144" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1ac300b14572033ccffd065bbe3e9fef6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Name</type>
        <definition>Name nest::multimeter::get_element_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_element_type</name>
        <reimplements refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56">get_element_type</reimplements>
        <briefdescription>
<para>Return the element type of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned Name is a free label describing the class of network elements a node belongs to. Currently used values are &quot;neuron&quot;, &quot;recorder&quot;, &quot;stimulator&quot;, and &quot;other&quot;, which are all defined as static Name objects in the names namespace. This function is overwritten with a corresponding value in the derived classes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="150" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="150" bodyend="153"/>
        <references refid="namespacenest_1_1names_1aa3e17cd04c350b745b64ca6ed7f2a699">nest::names::recorder</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::multimeter::send_test_event</definition>
        <argsstring>(Node &amp;, rport, synindex, bool) override</argsstring>
        <name>send_test_event</name>
        <reimplements refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3">send_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>receiving_node</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dummy_target</declname>
        </param>
        <briefdescription>
<para>Send an event to the receiving_node passed as an argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of check_connection just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para>This is required during the connection handshaking to test, if the receiving_node can handle the event type and receptor_type sent by the source node.</para>
<para>If dummy_target is true, this indicates that receiving_node is derived from <ref refid="classnest_1_1ConnTestDummyNodeBase" kindref="compound">ConnTestDummyNodeBase</ref> and used in the first call to <ref refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" kindref="member">send_test_event()</ref>. This can be ignored in most cases, but Nodes sending DS*Events to their own event hooks and then *Events to their proper targets must send DS*Events when called with the dummy target, and *Events when called with the real target, see #478. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="164" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="49" bodyend="59"/>
        <references refid="classnest_1_1multimeter_1a6ae2f069887fd4b0ccc15986d34a146f" compoundref="multimeter_8h" startline="222">B_</references>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="structnest_1_1multimeter_1_1Buffers___1a84ec344c6b8f8d2ce39b91c487e3b6be" compoundref="multimeter_8h" startline="215">nest::multimeter::Buffers_::has_targets_</references>
        <references refid="structnest_1_1multimeter_1_1Parameters___1af68b407fcb21194e6b6a2717ce8f70b3" compoundref="multimeter_8h" startline="193">nest::multimeter::Parameters_::interval_</references>
        <references refid="namespacenest_1a6505b01bba1d7ff79d4e718ecc097a4a" compoundref="nest__types_8h" startline="183">nest::invalid_port</references>
        <references refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" compoundref="node_8h" startline="1012" endline="1015">nest::Node::is_model_prototype</references>
        <references refid="structnest_1_1multimeter_1_1Parameters___1ad06b831d479e3af9ea840021bede2904" compoundref="multimeter_8h" startline="194">nest::multimeter::Parameters_::offset_</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
        <references refid="classnest_1_1multimeter_1aa4f9ce690806ccff41da801f3b3c0c5b" compoundref="multimeter_8h" startline="221">P_</references>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
        <references refid="structnest_1_1multimeter_1_1Parameters___1a13f2d1fcbc7b046e4a2157494f077aa9" compoundref="multimeter_8h" startline="195">nest::multimeter::Parameters_::record_from_</references>
        <references refid="namespacenest_1_1names_1a8f3b23679799316ba69b9d6c98c69e3a">nest::names::target</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a69851b4da90acd9a090bf2cde9c1f2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::multimeter::handle</definition>
        <argsstring>(DataLoggingReply &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>There is no connect_sender() for <ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref>, since this event is only used as &quot;back channel&quot; for <ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="166" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="203" bodyend="225"/>
        <references refid="namespacenest_1_1names_1a30b3f9cb3c24869421dea79ceee584fb">nest::names::data</references>
        <references refid="classnest_1_1DataLoggingReply_1adff530c7a4c657a29b5303266d43e5b2" compoundref="event_8h" startline="749" endline="752">nest::DataLoggingReply::get_info</references>
        <references refid="classnest_1_1RecordingDevice_1afbc0cc70ae3ba2eff8a0d765aa59adb5" compoundref="recording__device_8cpp" startline="204" endline="209">nest::RecordingDevice::is_active</references>
        <references refid="classnest_1_1RecordingBackend_1a6881478b0e2f8b699f6af4457459c571" compoundref="recording__backend_8h" startline="324">nest::RecordingBackend::NO_LONG_VALUES</references>
        <references refid="classnest_1_1Event_1a47c5bdb5473b5b8971b2a077aec754e0" compoundref="event_8h" startline="948" endline="955">nest::Event::set_stamp</references>
        <references refid="classnest_1_1RecordingDevice_1a79b4d2540dc042282d81d1e7d41fdf81" compoundref="recording__device_8cpp" startline="212" endline="218">nest::RecordingDevice::write</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a3537bccb753b03bc5acf2794ce9a8f50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>SignalType nest::multimeter::sends_signal</definition>
        <argsstring>() const override</argsstring>
        <name>sends_signal</name>
        <reimplements refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f">sends_signal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node produces used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="168" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="268" bodyend="271"/>
        <references refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a3a209f77703491919c187f326f48b784" compoundref="nest__types_8h" startline="224">nest::ALL</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a68bf27e4090c368d81e493050ef08738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33" kindref="member">Type</ref></type>
        <definition>RecordingDevice::Type nest::multimeter::get_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_type</name>
        <reimplements refid="classnest_1_1RecordingDevice_1a6e4f1c6055f5aeda01bd5b51579703e5">get_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="170" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="228" bodyend="231"/>
        <references refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a4f56e4007d9f3ea3fe582738727ec24c" compoundref="recording__device_8h" startline="143">nest::RecordingDevice::MULTIMETER</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1adcf15205a1624343eae90243e692c9e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::multimeter::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1Device_1ad04b50c499901228d9c672f8a677962e">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="171" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="227" bodyend="248"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="classnest_1_1RecordingDevice_1a60b60f1790b78bdaca10bf6d30ac3930" compoundref="recording__device_8cpp" startline="177" endline="201">nest::RecordingDevice::get_status</references>
        <references refid="classnest_1_1NodeManager_1a907f84fe45e7f1317bd4e1a67f530a61" compoundref="node__manager_8cpp" startline="477" endline="493">nest::NodeManager::get_thread_siblings</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="254">nest::KernelManager::node_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a25c0c41b427eaa597f1efc7eb81c9cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::multimeter::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1Device_1a7e7f029d1c677e8d5727fc80b103e990">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="172" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="251" bodyend="265"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="namespacenest_1_1names_1a31dd210d0cb3745e0495fc61545f55f9">nest::names::frozen</references>
        <references refid="structnest_1_1multimeter_1_1Parameters___1aa6546960275481e886bf7cc223e4a69d" compoundref="multimeter_8cpp" startline="107" endline="170">nest::multimeter::Parameters_::set</references>
        <references refid="classnest_1_1RecordingDevice_1a466c7b9ed8d05e9d42eed08009dc81e0" compoundref="recording__device_8cpp" startline="125" endline="174">nest::RecordingDevice::set_status</references>
        <referencedby refid="classnest_1_1voltmeter_1a03da8d06aa29bc1f1e315ba46d1d98e6" compoundref="multimeter_8cpp" startline="233" endline="241">nest::voltmeter::voltmeter</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a5a60a9f98cb13adb2b071e5aa0cf3b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::multimeter::calibrate_time</definition>
        <argsstring>(const TimeConverter &amp;tc) override</argsstring>
        <name>calibrate_time</name>
        <reimplements refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7">calibrate_time</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1TimeConverter" kindref="compound">TimeConverter</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Re-calculate time-based properties of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called after a change in resolution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="174" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="274" bodyend="278"/>
        <references refid="classnest_1_1TimeConverter_1a6dd858c951ee0d6d846c5fc11a9eadc3" compoundref="nest__timeconverter_8cpp" startline="49" endline="57">nest::TimeConverter::from_old_tics</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="160" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1multimeter_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1multimeter_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1multimeter_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>virtual SignalType nest::Node::sends_signal</definition>
        <argsstring>() const</argsstring>
        <name>sends_signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node produces used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="162" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="758" bodyend="761"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1multimeter_1a352fc50e020b737e61c56561194db8a6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::multimeter::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1Device_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplements>
        <briefdescription>
<para>Set internal variables before calls to <ref refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="177" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="173" bodyend="176"/>
        <references refid="classnest_1_1RecordingBackend_1aff668c3a4fbfca1219efbe740d69a8d4" compoundref="recording__backend_8h" startline="322">nest::RecordingBackend::NO_LONG_VALUE_NAMES</references>
        <references refid="classnest_1_1multimeter_1aa4f9ce690806ccff41da801f3b3c0c5b" compoundref="multimeter_8h" startline="221">P_</references>
        <references refid="classnest_1_1RecordingDevice_1a56f87d667d7b32a2cd3f95459e424834" compoundref="device_8cpp" startline="144" endline="153">nest::RecordingDevice::pre_run_hook</references>
        <references refid="structnest_1_1multimeter_1_1Parameters___1a13f2d1fcbc7b046e4a2157494f077aa9" compoundref="multimeter_8h" startline="195">nest::multimeter::Parameters_::record_from_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1multimeter_1abbad23126653a41a7590a55b971c6dd2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::multimeter::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
          <defname>origin</defname>
        </param>
        <param>
          <type>const long</type>
          <defname>from</defname>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Collect and output membrane potential information. </para>
        </briefdescription>
        <detaileddescription>
<para>This function pages all its targets at all pertinent sample points for membrane potential information and then outputs that information. The sampled nodes must provide data from the previous time slice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="186" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.cpp" bodystart="179" bodyend="200"/>
        <references refid="classnest_1_1KernelManager_1a39a94f269d1aeb7363ae5c33783b762e" compoundref="kernel__manager_8h" startline="251">nest::KernelManager::event_delivery_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e">nest::names::origin</references>
        <references refid="classnest_1_1EventDeliveryManager_1a9a350f7997aebc9c0a3b0620639ac0a4" compoundref="event__delivery__manager__impl_8h" startline="60" endline="63">nest::EventDeliveryManager::send</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>nest::voltmeter</label>
        <link refid="classnest_1_1voltmeter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::RecordingDevice</label>
        <link refid="classnest_1_1RecordingDevice"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1DeviceNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::multimeter</label>
        <link refid="classnest_1_1multimeter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::Device</label>
        <link refid="classnest_1_1Device"/>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="12">
        <label>nest::Device::Variables_</label>
        <link refid="structnest_1_1Device_1_1Variables__"/>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="10">
        <label>nest::Time::LimitPosInf</label>
        <link refid="structnest_1_1Time_1_1LimitPosInf"/>
      </node>
      <node id="9">
        <label>nest::Time::LimitNegInf</label>
        <link refid="structnest_1_1Time_1_1LimitNegInf"/>
      </node>
      <node id="2">
        <label>nest::RecordingDevice</label>
        <link refid="classnest_1_1RecordingDevice"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>-S_</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>-P_</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>nest::multimeter::Buffers_</label>
        <link refid="structnest_1_1multimeter_1_1Buffers__"/>
      </node>
      <node id="7">
        <label>nest::Device::Parameters_</label>
        <link refid="structnest_1_1Device_1_1Parameters__"/>
        <childnode refid="8" relation="usage">
          <edgelabel>+origin_</edgelabel>
          <edgelabel>+start_</edgelabel>
          <edgelabel>+stop_</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>nest::Time</label>
        <link refid="classnest_1_1Time"/>
        <childnode refid="9" relation="usage">
          <edgelabel>#LIM_NEG_INF</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>#LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>#LIM_MAX</edgelabel>
          <edgelabel>#LIM_MIN</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1DeviceNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::multimeter</label>
        <link refid="classnest_1_1multimeter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>-P_</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>-B_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>nest::Device</label>
        <link refid="classnest_1_1Device"/>
        <childnode refid="7" relation="usage">
          <edgelabel>-P_</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>-V_</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1Time_1_1Limit"/>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>nest::RecordingDevice::Parameters_</label>
        <link refid="structnest_1_1RecordingDevice_1_1Parameters__"/>
      </node>
      <node id="15">
        <label>nest::multimeter::Parameters_</label>
        <link refid="structnest_1_1multimeter_1_1Parameters__"/>
        <childnode refid="8" relation="usage">
          <edgelabel>+interval_</edgelabel>
          <edgelabel>+offset_</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>nest::RecordingDevice::State_</label>
        <link refid="structnest_1_1RecordingDevice_1_1State__"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" line="132" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/multimeter.h" bodystart="133" bodyend="223"/>
    <listofallmembers>
      <member refid="classnest_1_1multimeter_1a6ae2f069887fd4b0ccc15986d34a146f" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>B_</name></member>
      <member refid="classnest_1_1RecordingDevice_1a25fccd5c6a3eee4937e3250ff5e0eec3" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>backend_params_</name></member>
      <member refid="classnest_1_1multimeter_1a5a60a9f98cb13adb2b071e5aa0cf3b1e" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1Node_1ad88edfd6f881579328b545d88372807d" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>clone</name></member>
      <member refid="group__SP__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>connect_synaptic_element</name></member>
      <member refid="group__SP__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Device_1aea88c464444468044c92ed53ec521334" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>Device</name></member>
      <member refid="classnest_1_1Device_1a2ff1a2fd348f7109db47e1bbac3b5ac5" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>Device</name></member>
      <member refid="classnest_1_1DeviceNode_1a528097bccee9d8364ba626c9ac573221" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>DeviceNode</name></member>
      <member refid="classnest_1_1DeviceNode_1acb8cad4e7bc743f7469fe145cbf318f0" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>DeviceNode</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::multimeter</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_C_m</name></member>
      <member refid="group__SP__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1multimeter_1ac300b14572033ccffd065bbe3e9fef6e" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1Node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_history</name></member>
      <member refid="classnest_1_1Node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1Node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1RecordingDevice_1a4bb1a250312df89c7b5c96907043493b" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_label</name></member>
      <member refid="classnest_1_1DeviceNode_1a170639eec44df6f43d5f9a5403959ba4" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::multimeter</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1Device_1aa971ee0786f8fb04f3d76c65429d3d06" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_origin</name></member>
      <member refid="classnest_1_1Device_1a38b889e483489692ba03d3910167c30f" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_start</name></member>
      <member refid="classnest_1_1multimeter_1adcf15205a1624343eae90243e692c9e8" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::multimeter</scope><name>get_status_dict_</name></member>
      <member refid="classnest_1_1Device_1a398741486c43d247d75ba784b6b14b1f" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_stop</name></member>
      <member refid="group__SP__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Device_1ab78b2c8c5dd25d5328790c3d2d77bc02" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_t_max_</name></member>
      <member refid="classnest_1_1Device_1a84e4ade576e165a46597963ae943b829" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_t_min_</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1multimeter_1a68bf27e4090c368d81e493050ef08738" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_type</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>get_vp</name></member>
      <member refid="classnest_1_1multimeter_1a69851b4da90acd9a090bf2cde9c1f2d3" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1ae810de070216d0f281833171a3b997bc" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1adef54045c4b20be6075910f936a723b6" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handle</name></member>
      <member refid="classnest_1_1multimeter_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1multimeter_1af451f253f56f84f0f3162982eb8c155c" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>init</name></member>
      <member refid="classnest_1_1Device_1aac3d7dd71fd9f86cd8306b2faeefa6a0" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>init_buffers</name></member>
      <member refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453" prot="protected" virt="virtual"><scope>nest::multimeter</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1Device_1acfb7d327f43c0bcf3c86920b188c5830" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>init_state</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::multimeter</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>initialized_</name></member>
      <member refid="classnest_1_1RecordingDevice_1afbc0cc70ae3ba2eff8a0d765aa59adb5" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>is_active</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1DeviceNode_1aa345406ceab967b0dd50907ac380747c" prot="protected" virt="non-virtual"><scope>nest::multimeter</scope><name>local_device_id_</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>model_id_</name></member>
      <member refid="classnest_1_1multimeter_1a175051f11cba0898bae5bfa9e1628db2" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>multimeter</name></member>
      <member refid="classnest_1_1multimeter_1ab02c38a6ce5aba440d1b35a58f5d78f1" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>multimeter</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a4f56e4007d9f3ea3fe582738727ec24c" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>MULTIMETER</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a9c99a8caa89a3eb73e975f25678d5d58" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>operator=</name></member>
      <member refid="classnest_1_1multimeter_1aa4f9ce690806ccff41da801f3b3c0c5b" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>P_</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1multimeter_1a352fc50e020b737e61c56561194db8a6" prot="protected" virt="virtual"><scope>nest::multimeter</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1RecordingDevice_1a2d1416e38bec46975b4b79ba2e042fed" prot="public" virt="non-virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::multimeter</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>print_network</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1RecordingDevice_1ad53e191fdc3d060ffba1345ffc077df1" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>RecordingDevice</name></member>
      <member refid="classnest_1_1RecordingDevice_1a18449921045976fc3bb3c63677515ad8" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>RecordingDevice</name></member>
      <member refid="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1RecordingDevice_1ad59ad8688c8df49b3665044ed0fc8b96" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>S_</name></member>
      <member refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1multimeter_1a3537bccb753b03bc5acf2794ce9a8f50" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1multimeter_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::multimeter</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1RecordingDevice_1ab77a88eadcacbb992e706e55aa88627a" prot="protected" virt="virtual"><scope>nest::multimeter</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1DeviceNode_1a8c8b80f5be38584cb4b36a18a2977772" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1multimeter_1a25c0c41b427eaa597f1efc7eb81c9cac" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>set_vp</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a778e708f1fcba2df5abe761ce5d5a0a7" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>SPIKE_RECORDER</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a7c9a979265a7db7007976fe57b6f2e42" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>SPIN_DETECTOR</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>Type</name></member>
      <member refid="classnest_1_1multimeter_1abbad23126653a41a7590a55b971c6dd2" prot="protected" virt="virtual"><scope>nest::multimeter</scope><name>update</name></member>
      <member refid="group__SP__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1Device_1aba9db825c8f7e3631f8baf67f69a3beb" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>V_</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::multimeter</scope><name>vp_</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33af51c666ce117b58b1c233f5cbbd1afe8" prot="public" virt="non-virtual"><scope>nest::multimeter</scope><name>WEIGHT_RECORDER</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1RecordingDevice_1a79b4d2540dc042282d81d1e7d41fdf81" prot="protected" virt="non-virtual"><scope>nest::multimeter</scope><name>write</name></member>
      <member refid="classnest_1_1Device_1adabaff79bdfe01d0986f94241bcbd027" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>~Device</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::multimeter</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
