<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1cm__default" kind="class" language="C++" prot="public">
    <compoundname>nest::cm_default</compoundname>
    <basecompoundref refid="classnest_1_1ArchivingNode" prot="public" virt="non-virtual">nest::ArchivingNode</basecompoundref>
    <includes refid="cm__default_8h" local="no">cm_default.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1cm__default_1a8943062d9ae6fe4157f7a38575cc651b" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1CompTree" kindref="compound">CompTree</ref></type>
        <definition>CompTree nest::cm_default::c_tree_</definition>
        <argsstring></argsstring>
        <name>c_tree_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="260" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="260" bodyend="-1"/>
        <referencedby refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" compoundref="cm__default_8cpp" startline="70" endline="98">get_status</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656" compoundref="cm__default_8h" startline="314" endline="325">handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1cm__default_1a70391d5235eda5b519c4b28890c05275" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1RingBuffer" kindref="compound">RingBuffer</ref> &gt;</type>
        <definition>std::vector&lt; RingBuffer &gt; nest::cm_default::syn_buffers_</definition>
        <argsstring></argsstring>
        <name>syn_buffers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="261" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="261" bodyend="-1"/>
        <referencedby refid="classnest_1_1cm__default_1a3945ef56b7db6a93be1811d799015622" compoundref="cm__default_8h" startline="301" endline="311">handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1cm__default_1a81d477619de451f04ced440a4f901155" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Name &gt;</type>
        <definition>std::vector&lt; Name &gt; nest::cm_default::recordables_names</definition>
        <argsstring></argsstring>
        <name>recordables_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="280" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1cm__default_1aaadaadc78b7a6a1f50ca1eb1af851e79" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double * &gt;</type>
        <definition>std::vector&lt; double* &gt; nest::cm_default::recordables_values</definition>
        <argsstring></argsstring>
        <name>recordables_values</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="281" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="281" bodyend="-1"/>
        <referencedby refid="classnest_1_1cm__default_1a880c9f879dfeaf96367d0989e13c234d" compoundref="cm__default_8cpp" startline="44" endline="53">cm_default</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1cm__default_1ad29aa520f72484e261e3c67f74171882" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1DynamicRecordablesMap" kindref="compound">DynamicRecordablesMap</ref>&lt; <ref refid="classnest_1_1cm__default" kindref="compound">cm_default</ref> &gt;</type>
        <definition>DynamicRecordablesMap&lt; cm_default &gt; nest::cm_default::recordablesMap_</definition>
        <argsstring></argsstring>
        <name>recordablesMap_</name>
        <briefdescription>
<para>Mapping of recordables names to access functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="284" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="284" bodyend="-1"/>
        <referencedby refid="classnest_1_1cm__default_1a880c9f879dfeaf96367d0989e13c234d" compoundref="cm__default_8cpp" startline="44" endline="53">cm_default</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" compoundref="cm__default_8cpp" startline="70" endline="98">get_status</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a4c47a4dbc493de958ba48811a476696e" compoundref="cm__default_8h" startline="328" endline="335">handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1cm__default_1a23af13f1760a42ffab4d86f948a18496" prot="private" static="no" mutable="no">
        <type>DynamicUniversalDataLogger&lt; <ref refid="classnest_1_1cm__default" kindref="compound">cm_default</ref> &gt;</type>
        <definition>DynamicUniversalDataLogger&lt; cm_default &gt; nest::cm_default::logger_</definition>
        <argsstring></argsstring>
        <name>logger_</name>
        <briefdescription>
<para>Logger for all analog data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="286" column="30" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="286" bodyend="-1"/>
        <referencedby refid="classnest_1_1cm__default_1a4c47a4dbc493de958ba48811a476696e" compoundref="cm__default_8h" startline="328" endline="335">handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1cm__default_1a3be5e0d624cf927e2e493cda0c8fdc5b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::cm_default::V_th_</definition>
        <argsstring></argsstring>
        <name>V_th_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="288" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="288" bodyend="-1"/>
        <referencedby refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" compoundref="cm__default_8cpp" startline="70" endline="98">get_status</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1cm__default_1a44826cfa3402a9ab10c2f39db8e0f609" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DataAccessFunctor&lt; cm_default &gt;</definition>
        <argsstring></argsstring>
        <name>DataAccessFunctor&lt; cm_default &gt;</name>
        <param>
          <type><ref refid="classnest_1_1DataAccessFunctor" kindref="compound">DataAccessFunctor</ref>&lt; <ref refid="classnest_1_1cm__default" kindref="compound">cm_default</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="265" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1cm__default_1ad34b12cc9ee23946c1e1e67fc3f7ce3a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DynamicRecordablesMap&lt; cm_default &gt;</definition>
        <argsstring></argsstring>
        <name>DynamicRecordablesMap&lt; cm_default &gt;</name>
        <param>
          <type><ref refid="classnest_1_1DynamicRecordablesMap" kindref="compound">DynamicRecordablesMap</ref>&lt; <ref refid="classnest_1_1cm__default" kindref="compound">cm_default</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="265" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1cm__default_1a44fc7d0026791f7b57062c5d55b6dd6f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DynamicUniversalDataLogger&lt; cm_default &gt;</definition>
        <argsstring></argsstring>
        <name>DynamicUniversalDataLogger&lt; cm_default &gt;</name>
        <param>
          <type>DynamicUniversalDataLogger&lt; <ref refid="classnest_1_1cm__default" kindref="compound">cm_default</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="265" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1cm__default_1a880c9f879dfeaf96367d0989e13c234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::cm_default::cm_default</definition>
        <argsstring>()</argsstring>
        <name>cm_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="232" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="44" bodyend="53"/>
        <references refid="classnest_1_1cm__default_1aaadaadc78b7a6a1f50ca1eb1af851e79" compoundref="cm__default_8h" startline="281">recordables_values</references>
        <references refid="classnest_1_1cm__default_1ad29aa520f72484e261e3c67f74171882" compoundref="cm__default_8h" startline="284">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a17dd61bab1322e4588322217ec8cb45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::cm_default::cm_default</definition>
        <argsstring>(const cm_default &amp;)</argsstring>
        <name>cm_default</name>
        <param>
          <type>const <ref refid="classnest_1_1cm__default" kindref="compound">cm_default</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="233" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="55" bodyend="63"/>
        <references refid="classnest_1_1cm__default_1aaadaadc78b7a6a1f50ca1eb1af851e79" compoundref="cm__default_8h" startline="281">recordables_values</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1acbe2e817a1d43b100d577d1004657b07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::cm_default::send_test_event</definition>
        <argsstring>(Node &amp;, rport, synindex, bool) override</argsstring>
        <name>send_test_event</name>
        <reimplements refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3">send_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>receiving_node</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dummy_target</declname>
        </param>
        <briefdescription>
<para>Send an event to the receiving_node passed as an argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of check_connection just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para>This is required during the connection handshaking to test, if the receiving_node can handle the event type and receptor_type sent by the source node.</para>
<para>If dummy_target is true, this indicates that receiving_node is derived from <ref refid="classnest_1_1ConnTestDummyNodeBase" kindref="compound">ConnTestDummyNodeBase</ref> and used in the first call to <ref refid="classnest_1_1cm__default_1acbe2e817a1d43b100d577d1004657b07" kindref="member">send_test_event()</ref>. This can be ignored in most cases, but Nodes sending DS*Events to their own event hooks and then *Events to their proper targets must send DS*Events when called with the dummy target, and *Events when called with the real target, see #478. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="238" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="293" bodyend="298"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
        <references refid="namespacenest_1_1names_1a8f3b23679799316ba69b9d6c98c69e3a">nest::names::target</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::handle</definition>
        <argsstring>(SpikeEvent &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="240" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="328" bodyend="340"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a3b607b5ed036bfd77741be67af70fcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::handle</definition>
        <argsstring>(CurrentEvent &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for current events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="241" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="343" bodyend="352"/>
        <references refid="classnest_1_1RingBuffer_1a7e42e6eb1df812ced409c37bcf599676" compoundref="ring__buffer_8h" startline="151" endline="154">nest::RingBuffer::add_value</references>
        <references refid="namespacenest_1_1names_1aa1557d817741767a3ce099d6d7778501">nest::names::c</references>
        <references refid="classnest_1_1Compartment_1aa2386a6aa6143dfb1cf4971f9ea49d9c" compoundref="cm__tree_8h" startline="70">nest::Compartment::currents</references>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenest_1_1names_1a3f66df55023653633c5e24abdadda690">nest::names::w</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a502b735e683cdd663564a8650f603147" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::handle</definition>
        <argsstring>(DataLoggingRequest &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="242" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="355" bodyend="358"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a3945ef56b7db6a93be1811d799015622" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::cm_default::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1cm__default_1acbe2e817a1d43b100d577d1004657b07" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="244" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="301" bodyend="311"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
        <references refid="classnest_1_1cm__default_1a70391d5235eda5b519c4b28890c05275" compoundref="cm__default_8h" startline="261">syn_buffers_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::cm_default::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="245" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="314" bodyend="325"/>
        <references refid="classnest_1_1cm__default_1a8943062d9ae6fe4157f7a38575cc651b" compoundref="cm__default_8h" startline="260">c_tree_</references>
        <references refid="classnest_1_1CompTree_1a7b428d60f0438fa398a2072b2ccaf00a" compoundref="cm__tree_8cpp" startline="226" endline="229">nest::CompTree::get_compartment</references>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="classnest_1_1CompTree_1ab9a3da3b83bcaf04bf16de838d8603a9" compoundref="cm__tree_8h" startline="189" endline="192">nest::CompTree::get_root</references>
        <references refid="classnest_1_1CompTree_1a3c7f0301d4aabad6ebb9ffd286a0eae3" compoundref="cm__tree_8h" startline="196" endline="199">nest::CompTree::get_size</references>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a4c47a4dbc493de958ba48811a476696e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::cm_default::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <defname>dlr</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="246" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="328" bodyend="335"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="classnest_1_1cm__default_1a23af13f1760a42ffab4d86f948a18496" compoundref="cm__default_8h" startline="286">logger_</references>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
        <references refid="classnest_1_1cm__default_1ad29aa520f72484e261e3c67f74171882" compoundref="cm__default_8h" startline="284">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <reimplements refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="248" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="70" bodyend="98"/>
        <references refid="classnest_1_1CompartmentCurrents_1aabcea0a6cda7203a8c1507af18ab6da5" compoundref="cm__compartmentcurrents_8h" startline="472" endline="510">nest::CompartmentCurrents::add_receptor_info</references>
        <references refid="classnest_1_1cm__default_1a8943062d9ae6fe4157f7a38575cc651b" compoundref="cm__default_8h" startline="260">c_tree_</references>
        <references refid="namespacenest_1_1names_1a9a7e83857206e1cf6f775da52a36c2bd">nest::names::comp_idx</references>
        <references refid="classnest_1_1Compartment_1a9daf8fc9ef29ae17f59907c07abd39b9" compoundref="cm__tree_8h" startline="60">nest::Compartment::comp_index</references>
        <references refid="classnest_1_1Compartment_1a6aa0f2e3705af2fb187c1c8062361f1d" compoundref="cm__tree_8h" startline="67">nest::Compartment::compartment_currents</references>
        <references refid="namespacenest_1_1names_1a1cce1eb10335585dcd2e59adf9b93819">nest::names::compartments</references>
        <references refid="classnest_1_1CompTree_1a7b428d60f0438fa398a2072b2ccaf00a" compoundref="cm__tree_8cpp" startline="226" endline="229">nest::CompTree::get_compartment</references>
        <references refid="classnest_1_1CompTree_1a3c7f0301d4aabad6ebb9ffd286a0eae3" compoundref="cm__tree_8h" startline="196" endline="199">nest::CompTree::get_size</references>
        <references refid="classnest_1_1ArchivingNode_1acd46838612262b4a5d4cacdf7d901145" compoundref="archiving__node_8cpp" startline="222" endline="234">nest::ArchivingNode::get_status</references>
        <references refid="classnest_1_1Compartment_1af1c2ba2c9c322e6d285cf7a4252fe1ee" compoundref="cm__tree_8h" startline="62">nest::Compartment::p_index</references>
        <references refid="namespacenest_1_1names_1a385a78afdb57ce5439c71342d6c7d07c">nest::names::parent_idx</references>
        <references refid="namespacenest_1_1names_1aa12d701dd04159ad9201ed85f1f4ea1f">nest::names::receptors</references>
        <references refid="namespacenest_1_1names_1af23802d960e3bad87b63c3ec4b563176">nest::names::recordables</references>
        <references refid="classnest_1_1cm__default_1ad29aa520f72484e261e3c67f74171882" compoundref="cm__default_8h" startline="284">recordablesMap_</references>
        <references refid="namespacenest_1_1names_1a0c0feeb5503e2bbffd5e0a6edd7d3625">nest::names::V_th</references>
        <references refid="classnest_1_1cm__default_1a3be5e0d624cf927e2e493cda0c8fdc5b" compoundref="cm__default_8h" startline="288">V_th_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a506d4ae17551d5d6b7d87cdb72852f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Change properties of the node according to the entries in the dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Add a compartment (or compartments) to the tree, so that the new compartment has the compartment specified by &quot;parent_idx&quot; as parent. The parent has to be in the tree, otherwise an error will be raised. We add either a single compartment or multiple compartments, depending on whether the entry was a list of dicts or a single dict</para>
<para>Add a receptor (or receptors) to the tree, so that the new receptor targets the compartment specified by &quot;comp_idx&quot;. The compartment has to be in the tree, otherwise an error will be raised. We add either a single receptor or multiple receptors, depending on whether the entry was a list of dicts or a single dict</para>
<para>we need to initialize the recordables pointers to guarantee that the recordables of the new compartments and/or receptors will be in the recordables map</para>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="249" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="101" bodyend="213"/>
        <references refid="namespacenest_1_1names_1aecb0f45aa670827265b74b198f6425a3">nest::names::add_compartments</references>
        <references refid="namespacenest_1_1names_1a6c94c97fcb86c89c6414028743825b71">nest::names::add_receptors</references>
        <references refid="namespacenest_1_1names_1a1cce1eb10335585dcd2e59adf9b93819">nest::names::compartments</references>
        <references refid="namespacenest_1_1names_1aa12d701dd04159ad9201ed85f1f4ea1f">nest::names::receptors</references>
        <references refid="classnest_1_1ArchivingNode_1ac69d56c97bed5fd58fab9c3c745328c4" compoundref="archiving__node_8cpp" startline="237" endline="265">nest::ArchivingNode::set_status</references>
        <references refid="namespacenest_1_1names_1a0c0feeb5503e2bbffd5e0a6edd7d3625">nest::names::V_th</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming weight recording events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept weight recording events. <simplesect kind="see"><para>class WeightRecordingEvent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>There is no connect_sender() for <ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref>, since this event is only used as &quot;back channel&quot; for <ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for current events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for conductance events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for DoubleData events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for gap junction events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, GapJunctionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, InstantaneousRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, InstantaneousRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for delay rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, DelayedRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1cm__default_1acbe2e817a1d43b100d577d1004657b07" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="236" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1cm__default_1adac0a76ef0e60dd19a8ab183efdbb56c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::cm_default::add_compartment_</definition>
        <argsstring>(DictionaryDatum &amp;dd)</argsstring>
        <name>add_compartment_</name>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>dd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="252" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="215" bodyend="226"/>
        <references refid="namespacenest_1_1names_1ab153cba7971a1ce0c755195c4096266a">nest::names::params</references>
        <references refid="namespacenest_1_1names_1a385a78afdb57ce5439c71342d6c7d07c">nest::names::parent_idx</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a35302cd9fdacbb227794dee7f7f536dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::cm_default::add_receptor_</definition>
        <argsstring>(DictionaryDatum &amp;dd)</argsstring>
        <name>add_receptor_</name>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>dd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="253" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="228" bodyend="251"/>
        <references refid="classnest_1_1CompartmentCurrents_1a638156249f5404c3bd259d3bdf82b969" compoundref="cm__compartmentcurrents_8h" startline="415" endline="441">nest::CompartmentCurrents::add_synapse</references>
        <references refid="namespacenest_1_1names_1a9a7e83857206e1cf6f775da52a36c2bd">nest::names::comp_idx</references>
        <references refid="classnest_1_1Compartment_1a6aa0f2e3705af2fb187c1c8062361f1d" compoundref="cm__tree_8h" startline="67">nest::Compartment::compartment_currents</references>
        <references refid="namespacenest_1_1names_1ab153cba7971a1ce0c755195c4096266a">nest::names::params</references>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
        <references refid="classnest_1_1RingBuffer_1ade57efa5a082172db71c88feb8a575f5" compoundref="ring__buffer_8h" startline="132" endline="135">nest::RingBuffer::size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1ac5a54139fd6bcdb64dfe94eb895cc708" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::cm_default::init_recordables_pointers_</definition>
        <argsstring>()</argsstring>
        <name>init_recordables_pointers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Get the map of all recordables (i.e. all state variables of the model): --&gt; keys are state variable names suffixed by the compartment index for voltage (e.g. &quot;v_comp1&quot;) or by the synapse index for receptor currents --&gt; values are pointers to the specific state variables</para>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="255" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="254" bodyend="284"/>
        <references refid="namespacenest_1_1names_1af23802d960e3bad87b63c3ec4b563176">nest::names::recordables</references>
        <referencedby refid="classnest_1_1DynamicRecordablesMap_1ab89eb35443f3922272b4da53dc06afa7" compoundref="cm__default_8cpp" startline="35" endline="38">nest::DynamicRecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a4d9fd53bdf0f7b40b9f47a91e711c33a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplements>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="256" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="287" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a32a8a0a8d9720bb1aff55d2bca5b1fef" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::cm_default::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
          <defname>origin</defname>
        </param>
        <param>
          <type>const long</type>
          <defname>from</defname>
        </param>
        <param>
          <type>const long</type>
          <defname>to</defname>
        </param>
        <briefdescription>
<para>Update and spike handling functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="258" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.cpp" bodystart="305" bodyend="325"/>
        <references refid="classnest_1_1KernelManager_1a39a94f269d1aeb7363ae5c33783b762e" compoundref="kernel__manager_8h" startline="251">nest::KernelManager::event_delivery_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e">nest::names::origin</references>
        <references refid="classnest_1_1EventDeliveryManager_1a9a350f7997aebc9c0a3b0620639ac0a4" compoundref="event__delivery__manager__impl_8h" startline="60" endline="63">nest::EventDeliveryManager::send</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1cm__default_1a35225f67147f6ea8c85ddf6343e5bade" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::cm_default::get_state_element</definition>
        <argsstring>(size_t elem)</argsstring>
        <name>get_state_element</name>
        <param>
          <type>size_t</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="265" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="265" bodyend="268"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="1">
        <label>nest::cm_default</label>
        <link refid="classnest_1_1cm__default"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>std::map&lt; Name, const DataAccessFunctor&lt; nest::cm_default &gt; &gt;</label>
      </node>
      <node id="13">
        <label>nest::Na</label>
        <link refid="classnest_1_1Na"/>
      </node>
      <node id="9">
        <label>std::map&lt; Name, const DataAccessFunctor&lt; HostNode &gt; &gt;</label>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="14">
        <label>nest::K</label>
        <link refid="classnest_1_1K"/>
      </node>
      <node id="10">
        <label>nest::CompTree</label>
        <link refid="classnest_1_1CompTree"/>
        <childnode refid="11" relation="usage">
          <edgelabel>-root_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>nest::DynamicRecordablesMap&lt; nest::cm_default &gt;</label>
        <link refid="classnest_1_1DynamicRecordablesMap"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; nest::cm_default &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>nest::CompartmentCurrents</label>
        <link refid="classnest_1_1CompartmentCurrents"/>
        <childnode refid="13" relation="usage">
          <edgelabel>-Na_chan_</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>-K_chan_</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>nest::DynamicRecordablesMap&lt; HostNode &gt;</label>
        <link refid="classnest_1_1DynamicRecordablesMap"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>nest::RingBuffer</label>
        <link refid="classnest_1_1RingBuffer"/>
      </node>
      <node id="11">
        <label>nest::Compartment</label>
        <link refid="classnest_1_1Compartment"/>
        <childnode refid="12" relation="usage">
          <edgelabel>+compartment_currents</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>+currents</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>+parent</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::cm_default</label>
        <link refid="classnest_1_1cm__default"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>-recordablesMap_</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>-c_tree_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" line="228" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_default.h" bodystart="229" bodyend="289"/>
    <listofallmembers>
      <member refid="classnest_1_1cm__default_1adac0a76ef0e60dd19a8ab183efdbb56c" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>add_compartment_</name></member>
      <member refid="classnest_1_1cm__default_1a35302cd9fdacbb227794dee7f7f536dc" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>add_receptor_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a6c9f56d9b47e62eeb5a21f56dfbdc411" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>ArchivingNode</name></member>
      <member refid="classnest_1_1ArchivingNode_1acb6a397bfafe3b1c3349a33437f19f66" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>ArchivingNode</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a61c0b9825270fab375fc4c722cfaec6b" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>beta_Ca_</name></member>
      <member refid="classnest_1_1cm__default_1a8943062d9ae6fe4157f7a38575cc651b" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>c_tree_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5917ea5dc7f39ee46825a20faae4d49c" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>Ca_minus_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a62b1974824c28eabfbb4bc4cbcc1edeb" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>Ca_t_</name></member>
      <member refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>clear_history</name></member>
      <member refid="classnest_1_1Node_1ad88edfd6f881579328b545d88372807d" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>clone</name></member>
      <member refid="classnest_1_1cm__default_1a880c9f879dfeaf96367d0989e13c234d" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>cm_default</name></member>
      <member refid="classnest_1_1cm__default_1a17dd61bab1322e4588322217ec8cb45d" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>cm_default</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a8fb547186b1ee49384fddeb4e268481d" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>connect_synaptic_element</name></member>
      <member refid="classnest_1_1cm__default_1a44826cfa3402a9ab10c2f39db8e0f609" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>DataAccessFunctor&lt; cm_default &gt;</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a0f11a1c88af75d6a51057d97fe1f6583" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>downcast</name></member>
      <member refid="classnest_1_1cm__default_1ad34b12cc9ee23946c1e1e67fc3f7ce3a" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>DynamicRecordablesMap&lt; cm_default &gt;</name></member>
      <member refid="classnest_1_1cm__default_1a44fc7d0026791f7b57062c5d55b6dd6f" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>DynamicUniversalDataLogger&lt; cm_default &gt;</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_C_m</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb8ec0a74d457fd285665b3ff8077213" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1ArchivingNode_1a17dd209382eae47cbb5f02b88fbb997a" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_history</name></member>
      <member refid="classnest_1_1ArchivingNode_1a063cf1374f05675f2501b9cf1d4f04e7" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_K_triplet_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1ab6c3dea0d46a9f24fc4d726bea34dd3a" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1aa756873904842e8e63e9144d1f49967f" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1ArchivingNode_1afab9e578540e7a00114f41ce4a6f877d" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1ArchivingNode_1afbac3e3b40f07e096fea768a715f9034" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>get_spiketime_ms</name></member>
      <member refid="classnest_1_1cm__default_1a35225f67147f6ea8c85ddf6343e5bade" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>get_state_element</name></member>
      <member refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::cm_default</scope><name>get_status_dict_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af2415c16f2edd606035f497d6003c392" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a84df4d213b9f22e9dae6b26c8fd9905d" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a9ba39ec217579e3ef23db9ae20479955" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af35fbeeb8459557ea3a5baf5c6fe7d20" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5708dead1beae2f0bccb87080356cd63" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a893ba9023105eb3c68c988dc3f912d2f" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5b0318a17b8e2416f7904d00b3d4a830" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_tau_Ca</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>get_vp</name></member>
      <member refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a3b607b5ed036bfd77741be67af70fcca" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a502b735e683cdd663564a8650f603147" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1ae810de070216d0f281833171a3b997bc" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1adef54045c4b20be6075910f936a723b6" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handle</name></member>
      <member refid="classnest_1_1cm__default_1a3945ef56b7db6a93be1811d799015622" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a4c47a4dbc493de958ba48811a476696e" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1cm__default_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::cm_default</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1ArchivingNode_1a25d021158d742b10234548c339f7f625" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>history_</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>init</name></member>
      <member refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453" prot="protected" virt="virtual"><scope>nest::cm_default</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1cm__default_1ac5a54139fd6bcdb64dfe94eb895cc708" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>init_recordables_pointers_</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::cm_default</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>initialized_</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1ArchivingNode_1abf5e14af5f052f6275746df00043e6ce" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>Kminus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aca1b6e411f89e286c59b519c97a5940f" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>Kminus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3dcd0174ab639ea897388ea375a9a6b7" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>last_spike_</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1cm__default_1a23af13f1760a42ffab4d86f948a18496" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>logger_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a7384c7f1a1f3d059806598b606e056d8" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>max_delay_</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>model_id_</name></member>
      <member refid="classnest_1_1ArchivingNode_1ac1f375fc0e109ced42aaf68cbba40fed" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>n_incoming_</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a9c99a8caa89a3eb73e975f25678d5d58" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>operator=</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1cm__default_1a4d9fd53bdf0f7b40b9f47a91e711c33a" prot="private" virt="virtual"><scope>nest::cm_default</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>print_network</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1cm__default_1a81d477619de451f04ced440a4f901155" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>recordables_names</name></member>
      <member refid="classnest_1_1cm__default_1aaadaadc78b7a6a1f50ca1eb1af851e79" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>recordables_values</name></member>
      <member refid="classnest_1_1cm__default_1ad29aa520f72484e261e3c67f74171882" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>recordablesMap_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a0f573e9b1e9f7f49a493aa2a533c2803" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1cm__default_1acbe2e817a1d43b100d577d1004657b07" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::cm_default</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1ArchivingNode_1af5655cc7a93c86837c09e48cce007993" prot="protected" virt="non-virtual"><scope>nest::cm_default</scope><name>set_spiketime</name></member>
      <member refid="classnest_1_1cm__default_1a506d4ae17551d5d6b7d87cdb72852f16" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>set_vp</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a1b21cac6a54b750cfb72a011cc226936" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a64bcfbab69f9d53322f18896838c6c80" prot="public" virt="non-virtual"><scope>nest::cm_default</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1cm__default_1a70391d5235eda5b519c4b28890c05275" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>syn_buffers_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb62fb32d42235fb404d919fdf1865e8" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>synaptic_elements_map_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a905ca4acf3665fca699c1cc91f2704f8" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>tau_Ca_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a2eaadb93df6c09941829cfcf99f0af80" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>tau_minus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a072504ce3c26083587fbd78522d50dc1" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>tau_minus_inv_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aaae85c3700810f049ccb9ca853c651b7" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>tau_minus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1adf4c70fed4fe8f168b28b47b51fa35ab" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>tau_minus_triplet_inv_</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a75621ba377fb9e61a31a67c9d9ee3684" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>trace_</name></member>
      <member refid="classnest_1_1cm__default_1a32a8a0a8d9720bb1aff55d2bca5b1fef" prot="private" virt="virtual"><scope>nest::cm_default</scope><name>update</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a74fc8e9d9ef49af9c53b35e19ee3ddd9" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1cm__default_1a3be5e0d624cf927e2e493cda0c8fdc5b" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>V_th_</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::cm_default</scope><name>vp_</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::cm_default</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
