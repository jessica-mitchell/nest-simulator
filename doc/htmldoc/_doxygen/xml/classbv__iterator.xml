<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classbv__iterator" kind="class" language="C++" prot="public">
    <compoundname>bv_iterator</compoundname>
    <includes refid="block__vector_8h" local="no">block_vector.h</includes>
    <templateparamlist>
      <param>
        <type>typename value_type_</type>
      </param>
      <param>
        <type>typename ref_</type>
      </param>
      <param>
        <type>typename ptr_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classbv__iterator_1ade3dece421fd39c2a86f59c9f54b7d62" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename cv_value_type_</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref>&lt; value_type_, cv_value_type_ &amp;, cv_value_type_ * &gt;</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::iter_ =  bv_iterator&lt; value_type_, cv_value_type_&amp;, cv_value_type_* &gt;</definition>
        <argsstring></argsstring>
        <name>iter_</name>
        <qualifiedname>bv_iterator::iter_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="63" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" prot="public" static="no">
        <type><ref refid="classbv__iterator_1ade3dece421fd39c2a86f59c9f54b7d62" kindref="member">iter_</ref>&lt; value_type_ &gt;</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::iterator =  iter_&lt; value_type_ &gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>bv_iterator::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="75" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" prot="public" static="no">
        <type><ref refid="classbv__iterator_1ade3dece421fd39c2a86f59c9f54b7d62" kindref="member">iter_</ref>&lt; const value_type_ &gt;</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_iterator =  iter_&lt; const value_type_ &gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>bv_iterator::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="76" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbv__iterator_1a02080e45873e1851d6d7fdad1f6ad7cb" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <qualifiedname>bv_iterator::iterator_category</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="78" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbv__iterator_1a13f026e3e592af583a476e25791b3b25" prot="public" static="no">
        <type>value_type_</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::value_type =  value_type_</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>bv_iterator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="79" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbv__iterator_1a157938917a1ac41d9f4d0c3ceb408d14" prot="public" static="no">
        <type>ptr_</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::pointer =  ptr_</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>bv_iterator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="80" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbv__iterator_1a46214444a4dcaedea84028d03a31a4da" prot="public" static="no">
        <type>ref_</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::reference =  ref_</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>bv_iterator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="81" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" prot="public" static="no">
        <type>typename <ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; <ref refid="classbv__iterator_1a13f026e3e592af583a476e25791b3b25" kindref="member">value_type</ref> &gt;::difference_type</type>
        <definition>using bv_iterator&lt; value_type_, ref_, ptr_ &gt;::difference_type =  typename BlockVector&lt; value_type &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>bv_iterator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="82" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classbv__iterator_1afaa77c6b81e6a4a79175d28b42458d9f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BlockVector&lt; value_type_ &gt;</definition>
        <argsstring></argsstring>
        <name>BlockVector&lt; value_type_ &gt;</name>
        <qualifiedname>bv_iterator::BlockVector&lt; value_type_ &gt;</qualifiedname>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; value_type_ &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="816" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbv__iterator_1aad43d00bc293ffbd9acf6f34c018d112" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class bv_iterator</definition>
        <argsstring></argsstring>
        <name>bv_iterator</name>
        <qualifiedname>bv_iterator::bv_iterator</qualifiedname>
        <param>
          <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="59" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" prot="private" static="no" mutable="no">
        <type>const <ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; value_type_ &gt; *</type>
        <definition>const BlockVector&lt; value_type_ &gt;* bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_</definition>
        <argsstring></argsstring>
        <name>block_vector_</name>
        <qualifiedname>bv_iterator::block_vector_</qualifiedname>
        <briefdescription>
<para><ref refid="classBlockVector" kindref="compound">BlockVector</ref> to which this iterator points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="66" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="66" bodyend="-1"/>
        <referencedby refid="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" compoundref="block__vector_8h" startline="809" endline="812">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_cast_</referencedby>
        <referencedby refid="classBlockVector_1a96fdf65b807b7fbca9cb0127fb12829c" compoundref="block__vector_8h" startline="446" endline="495">BlockVector&lt; value_type_ &gt;::erase</referencedby>
        <referencedby refid="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" compoundref="block__vector_8h" startline="599" endline="616">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</referencedby>
        <referencedby refid="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" compoundref="block__vector_8h" startline="620" endline="643">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</referencedby>
        <referencedby refid="classbv__iterator_1a5cfaa33336b775a7b55cc1fec066109d" compoundref="block__vector_8h" startline="747" endline="754">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; value_type_ &gt; &gt;<ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">::const_iterator</ref></type>
        <definition>std::vector&lt;std::vector&lt;value_type_&gt;&gt;::const_iterator bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</definition>
        <argsstring></argsstring>
        <name>block_vector_it_</name>
        <qualifiedname>bv_iterator::block_vector_it_</qualifiedname>
        <briefdescription>
<para>Iterator for the current block in the blockmap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="68" column="41" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="68" bodyend="-1"/>
        <referencedby refid="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" compoundref="block__vector_8h" startline="809" endline="812">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_cast_</referencedby>
        <referencedby refid="classbv__iterator_1adb48b380cff065ce684738209ef86bce" compoundref="block__vector_8h" startline="772" endline="775">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator!=</referencedby>
        <referencedby refid="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" compoundref="block__vector_8h" startline="599" endline="616">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</referencedby>
        <referencedby refid="classbv__iterator_1ac6b4231d0634279ad1989384748f4461" compoundref="block__vector_8h" startline="729" endline="734">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-</referencedby>
        <referencedby refid="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" compoundref="block__vector_8h" startline="620" endline="643">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</referencedby>
        <referencedby refid="classbv__iterator_1ac6568a04b0a1d3f14cba888acd35ecac" compoundref="block__vector_8h" startline="779" endline="783">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&lt;</referencedby>
        <referencedby refid="classbv__iterator_1a5cfaa33336b775a7b55cc1fec066109d" compoundref="block__vector_8h" startline="747" endline="754">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator=</referencedby>
        <referencedby refid="classbv__iterator_1a2f7db919cab7b26330a0f5cbd8f13839" compoundref="block__vector_8h" startline="765" endline="768">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator==</referencedby>
        <referencedby refid="classbv__iterator_1aec8a5df3fcc15c9a7b1670e02abba637" compoundref="block__vector_8h" startline="787" endline="791">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&gt;</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; value_type_ &gt;<ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">::const_iterator</ref></type>
        <definition>std::vector&lt;value_type_&gt;::const_iterator bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</definition>
        <argsstring></argsstring>
        <name>block_it_</name>
        <qualifiedname>bv_iterator::block_it_</qualifiedname>
        <briefdescription>
<para>Iterator pointing to the current element in the current block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="70" column="41" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="70" bodyend="-1"/>
        <referencedby refid="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" compoundref="block__vector_8h" startline="809" endline="812">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_cast_</referencedby>
        <referencedby refid="classbv__iterator_1adb48b380cff065ce684738209ef86bce" compoundref="block__vector_8h" startline="772" endline="775">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator!=</referencedby>
        <referencedby refid="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" compoundref="block__vector_8h" startline="599" endline="616">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</referencedby>
        <referencedby refid="classbv__iterator_1ac6b4231d0634279ad1989384748f4461" compoundref="block__vector_8h" startline="729" endline="734">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-</referencedby>
        <referencedby refid="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" compoundref="block__vector_8h" startline="620" endline="643">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</referencedby>
        <referencedby refid="classbv__iterator_1ac6568a04b0a1d3f14cba888acd35ecac" compoundref="block__vector_8h" startline="779" endline="783">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&lt;</referencedby>
        <referencedby refid="classbv__iterator_1a5cfaa33336b775a7b55cc1fec066109d" compoundref="block__vector_8h" startline="747" endline="754">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator=</referencedby>
        <referencedby refid="classbv__iterator_1a2f7db919cab7b26330a0f5cbd8f13839" compoundref="block__vector_8h" startline="765" endline="768">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator==</referencedby>
        <referencedby refid="classbv__iterator_1aec8a5df3fcc15c9a7b1670e02abba637" compoundref="block__vector_8h" startline="787" endline="791">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&gt;</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbv__iterator_1af772007182597bd7921d4defee294121" prot="private" static="no" mutable="no">
        <type>std::vector&lt; value_type_ &gt;<ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">::const_iterator</ref></type>
        <definition>std::vector&lt;value_type_&gt;::const_iterator bv_iterator&lt; value_type_, ref_, ptr_ &gt;::current_block_end_</definition>
        <argsstring></argsstring>
        <name>current_block_end_</name>
        <qualifiedname>bv_iterator::current_block_end_</qualifiedname>
        <briefdescription>
<para>Iterator pointing to the end of the current block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="72" column="41" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="72" bodyend="-1"/>
        <referencedby refid="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" compoundref="block__vector_8h" startline="809" endline="812">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_cast_</referencedby>
        <referencedby refid="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" compoundref="block__vector_8h" startline="599" endline="616">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</referencedby>
        <referencedby refid="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" compoundref="block__vector_8h" startline="620" endline="643">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</referencedby>
        <referencedby refid="classbv__iterator_1a5cfaa33336b775a7b55cc1fec066109d" compoundref="block__vector_8h" startline="747" endline="754">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator=</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbv__iterator_1a32fad25cf0001e66e305dea01ec15ecf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::bv_iterator</definition>
        <argsstring>()</argsstring>
        <name>bv_iterator</name>
        <qualifiedname>bv_iterator::bv_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="84" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ab248d01627c0719d1606e5f30f8435b2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::bv_iterator</definition>
        <argsstring>(const BlockVector&lt; value_type_ &gt; &amp;)</argsstring>
        <name>bv_iterator</name>
        <qualifiedname>bv_iterator::bv_iterator</qualifiedname>
        <param>
          <type>const <ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; value_type_ &gt; &amp;</type>
          <defname>block_vector</defname>
        </param>
        <briefdescription>
<para>Creates an iterator pointing to the first element in a <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_vector</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBlockVector" kindref="compound">BlockVector</ref> to which the iterator will point to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="93" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="568" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ac5b780ec1410581fcf19e17180cafe16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::bv_iterator</definition>
        <argsstring>(const iterator &amp;)</argsstring>
        <name>bv_iterator</name>
        <qualifiedname>bv_iterator::bv_iterator</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" kindref="member">iterator</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Iterator copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="577" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ad4c0a05fef4554a8edbaf49b886c14aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::bv_iterator</definition>
        <argsstring>(const BlockVector&lt; value_type_ &gt; *, const typename std::vector&lt; std::vector&lt; value_type_ &gt; &gt;::const_iterator, const typename std::vector&lt; value_type_ &gt;::const_iterator, const typename std::vector&lt; value_type_ &gt;::const_iterator)</argsstring>
        <name>bv_iterator</name>
        <qualifiedname>bv_iterator::bv_iterator</qualifiedname>
        <param>
          <type>const <ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; value_type_ &gt; *</type>
          <defname>block_vector</defname>
        </param>
        <param>
          <type>const typename std::vector&lt; std::vector&lt; value_type_ &gt; &gt;<ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">::const_iterator</ref></type>
          <defname>block_vector_it</defname>
        </param>
        <param>
          <type>const typename std::vector&lt; value_type_ &gt;<ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">::const_iterator</ref></type>
          <defname>block_it</defname>
        </param>
        <param>
          <type>const typename std::vector&lt; value_type_ &gt;<ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">::const_iterator</ref></type>
          <defname>current_block_end</defname>
        </param>
        <briefdescription>
<para>Creates an iterator with specified parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_vector</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBlockVector" kindref="compound">BlockVector</ref> to point to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of current block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to current element in the current block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_block_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the end of the current block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="108" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="586" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; &amp; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>bv_iterator::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="113" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="599" bodyend="616"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" compoundref="block__vector_8h" startline="66">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <references refid="classbv__iterator_1af772007182597bd7921d4defee294121" compoundref="block__vector_8h" startline="72">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::current_block_end_</references>
        <referencedby refid="classbv__iterator_1ae38e248649acc7766d8a71f6d4139e4d" compoundref="block__vector_8h" startline="647" endline="658">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator+=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; &amp; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <qualifiedname>bv_iterator::operator--</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="114" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="620" bodyend="643"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" compoundref="block__vector_8h" startline="66">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <references refid="classbv__iterator_1af772007182597bd7921d4defee294121" compoundref="block__vector_8h" startline="72">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::current_block_end_</references>
        <referencedby refid="classbv__iterator_1a34b205461c0df4aaf8d139ebe9045a92" compoundref="block__vector_8h" startline="662" endline="673">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ae38e248649acc7766d8a71f6d4139e4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; &amp; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator+=</definition>
        <argsstring>(difference_type)</argsstring>
        <name>operator+=</name>
        <qualifiedname>bv_iterator::operator+=</qualifiedname>
        <param>
          <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
          <defname>val</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="115" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="647" bodyend="658"/>
        <references refid="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" compoundref="block__vector_8h" startline="599" endline="616">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</references>
        <references refid="classbv__iterator_1a34b205461c0df4aaf8d139ebe9045a92" compoundref="block__vector_8h" startline="662" endline="673">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-=</references>
        <referencedby refid="classbv__iterator_1a34b205461c0df4aaf8d139ebe9045a92" compoundref="block__vector_8h" startline="662" endline="673">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a34b205461c0df4aaf8d139ebe9045a92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; &amp; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-=</definition>
        <argsstring>(difference_type)</argsstring>
        <name>operator-=</name>
        <qualifiedname>bv_iterator::operator-=</qualifiedname>
        <param>
          <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
          <defname>val</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="116" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="662" bodyend="673"/>
        <references refid="classbv__iterator_1ae38e248649acc7766d8a71f6d4139e4d" compoundref="block__vector_8h" startline="647" endline="658">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator+=</references>
        <references refid="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" compoundref="block__vector_8h" startline="620" endline="643">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</references>
        <referencedby refid="classbv__iterator_1ae38e248649acc7766d8a71f6d4139e4d" compoundref="block__vector_8h" startline="647" endline="658">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator+=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ab456d75b355ea4d748dbb15e765c6812" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator+</definition>
        <argsstring>(difference_type) const</argsstring>
        <name>operator+</name>
        <qualifiedname>bv_iterator::operator+</qualifiedname>
        <param>
          <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
          <defname>val</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="117" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="677" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a75c09d37db3265d355e5a57513be4a55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-</definition>
        <argsstring>(difference_type) const</argsstring>
        <name>operator-</name>
        <qualifiedname>bv_iterator::operator-</qualifiedname>
        <param>
          <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
          <defname>val</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="118" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="685" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a3a7e75de92875778e6a6b868ed1422db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>bv_iterator::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="119" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="693" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a008c93283f6ed2e1948ecc793e497d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <qualifiedname>bv_iterator::operator--</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="120" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="702" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a7cb6eab64ae784b7b1efdeae585399a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1a46214444a4dcaedea84028d03a31a4da" kindref="member">reference</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::reference bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>bv_iterator::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="121" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="711" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a90b3b415cdc4e29c049fbc7a0bbd3b78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1a157938917a1ac41d9f4d0c3ceb408d14" kindref="member">pointer</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::pointer bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>bv_iterator::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="122" column="11" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="720" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ac6b4231d0634279ad1989384748f4461" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::difference_type bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-</definition>
        <argsstring>(const iterator &amp;) const</argsstring>
        <name>operator-</name>
        <qualifiedname>bv_iterator::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" kindref="member">iterator</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="123" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="729" bodyend="734"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a7b38769e1e7dfbf862e208a649783e30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::difference_type bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator-</definition>
        <argsstring>(const const_iterator &amp;) const</argsstring>
        <name>operator-</name>
        <qualifiedname>bv_iterator::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" kindref="member">const_iterator</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="124" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="738" bodyend="743"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a5cfaa33336b775a7b55cc1fec066109d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" kindref="member">iterator</ref> &amp;</type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::iterator &amp; bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator=</definition>
        <argsstring>(const iterator &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>bv_iterator::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" kindref="member">iterator</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="126" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="747" bodyend="754"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" compoundref="block__vector_8h" startline="66">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <references refid="classbv__iterator_1af772007182597bd7921d4defee294121" compoundref="block__vector_8h" startline="72">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::current_block_end_</references>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ab7af0fa45e8ec97a1c6bb6c46604b936" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1a46214444a4dcaedea84028d03a31a4da" kindref="member">reference</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::reference bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator[]</definition>
        <argsstring>(difference_type n) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>bv_iterator::operator[]</qualifiedname>
        <param>
          <type><ref refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" kindref="member">difference_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="128" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="758" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a2f7db919cab7b26330a0f5cbd8f13839" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator==</definition>
        <argsstring>(const bv_iterator &amp;) const</argsstring>
        <name>operator==</name>
        <qualifiedname>bv_iterator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="130" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="765" bodyend="768"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1adb48b380cff065ce684738209ef86bce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator!=</definition>
        <argsstring>(const bv_iterator &amp;) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>bv_iterator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="131" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="772" bodyend="775"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1ac6568a04b0a1d3f14cba888acd35ecac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&lt;</definition>
        <argsstring>(const bv_iterator &amp;) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>bv_iterator::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="132" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="779" bodyend="783"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <referencedby refid="classbv__iterator_1a03acb2dac679d0a51aa14d453fadc1ff" compoundref="block__vector_8h" startline="795" endline="798">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&lt;=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1aec8a5df3fcc15c9a7b1670e02abba637" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&gt;</definition>
        <argsstring>(const bv_iterator &amp;) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>bv_iterator::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="133" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="787" bodyend="791"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <referencedby refid="classbv__iterator_1aea79c796aa04e131c8cc6587944d2a15" compoundref="block__vector_8h" startline="802" endline="805">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&gt;=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1a03acb2dac679d0a51aa14d453fadc1ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&lt;=</definition>
        <argsstring>(const bv_iterator &amp;) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>bv_iterator::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="134" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="795" bodyend="798"/>
        <references refid="classbv__iterator_1ac6568a04b0a1d3f14cba888acd35ecac" compoundref="block__vector_8h" startline="779" endline="783">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&lt;</references>
        <references refid="dict_8h_1a1023fe3c893f106e462b1ad41b9ecc8d" compoundref="dict_8h" startline="40" endline="43">operator==</references>
      </memberdef>
      <memberdef kind="function" id="classbv__iterator_1aea79c796aa04e131c8cc6587944d2a15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&gt;=</definition>
        <argsstring>(const bv_iterator &amp;) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>bv_iterator::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classbv__iterator" kindref="compound">bv_iterator</ref> &amp;</type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="135" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="802" bodyend="805"/>
        <references refid="dict_8h_1a1023fe3c893f106e462b1ad41b9ecc8d" compoundref="dict_8h" startline="40" endline="43">operator==</references>
        <references refid="classbv__iterator_1aec8a5df3fcc15c9a7b1670e02abba637" compoundref="block__vector_8h" startline="787" endline="791">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::operator&gt;</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" kindref="member">iterator</ref></type>
        <definition>bv_iterator&lt; value_type_, ref_, ptr_ &gt;::iterator bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_cast_</definition>
        <argsstring>() const</argsstring>
        <name>const_cast_</name>
        <qualifiedname>bv_iterator::const_cast_</qualifiedname>
        <briefdescription>
<para>Converts the iterator to a non-const iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="141" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="809" bodyend="812"/>
        <references refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" compoundref="block__vector_8h" startline="70">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_it_</references>
        <references refid="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" compoundref="block__vector_8h" startline="66">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_</references>
        <references refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" compoundref="block__vector_8h" startline="68">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_it_</references>
        <references refid="classbv__iterator_1af772007182597bd7921d4defee294121" compoundref="block__vector_8h" startline="72">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::current_block_end_</references>
        <referencedby refid="classBlockVector_1a96fdf65b807b7fbca9cb0127fb12829c" compoundref="block__vector_8h" startline="446" endline="495">BlockVector&lt; value_type_ &gt;::erase</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" kindref="member">BlockVector::iterator</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>value_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref_</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reference to the element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr_</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of pointer to the element.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classBlockVector" kindref="compound">BlockVector</ref> holds one of this internally, marking the end of the valid range. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>bv_iterator&lt; ConnectionT, ConnectionT &amp;, ConnectionT * &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; ConnectionT, ConnectionT &amp;, ConnectionT * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>bv_iterator&lt; nest::SparseNodeArray::NodeEntry, nest::SparseNodeArray::NodeEntry &amp;, nest::SparseNodeArray::NodeEntry * &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; nest::SparseNodeArray::NodeEntry, nest::SparseNodeArray::NodeEntry &amp;, nest::SparseNodeArray::NodeEntry * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>bv_iterator&lt; value_type_, ref_, ptr_ &gt;</label>
        <link refid="classbv__iterator"/>
      </node>
      <node id="2">
        <label>bv_iterator&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>bv_iterator&lt; value_type_, ref_, ptr_ &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>block_it_</edgelabel>
          <edgelabel>block_vector_it_</edgelabel>
          <edgelabel>current_block_end_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>bv_iterator&lt; value_type_, ref_, ptr_ &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>block_it_</edgelabel>
          <edgelabel>block_vector_it_</edgelabel>
          <edgelabel>current_block_end_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="52" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="53" bodyend="142"/>
    <listofallmembers>
      <member refid="classbv__iterator_1ad3a47e8653f5f6facf84dbbf1057e8e7" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>block_it_</name></member>
      <member refid="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>block_vector_</name></member>
      <member refid="classbv__iterator_1ad4ad27d4f8012d5c23b18237bf406786" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>block_vector_it_</name></member>
      <member refid="classbv__iterator_1afaa77c6b81e6a4a79175d28b42458d9f" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>BlockVector&lt; value_type_ &gt;</name></member>
      <member refid="classbv__iterator_1aad43d00bc293ffbd9acf6f34c018d112" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>bv_iterator</name></member>
      <member refid="classbv__iterator_1a32fad25cf0001e66e305dea01ec15ecf" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>bv_iterator</name></member>
      <member refid="classbv__iterator_1ab248d01627c0719d1606e5f30f8435b2" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>bv_iterator</name></member>
      <member refid="classbv__iterator_1ac5b780ec1410581fcf19e17180cafe16" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>bv_iterator</name></member>
      <member refid="classbv__iterator_1ad4c0a05fef4554a8edbaf49b886c14aa" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>bv_iterator</name></member>
      <member refid="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>const_cast_</name></member>
      <member refid="classbv__iterator_1a84748eefef545f1c095f3b8d40bfdc34" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>const_iterator</name></member>
      <member refid="classbv__iterator_1af772007182597bd7921d4defee294121" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>current_block_end_</name></member>
      <member refid="classbv__iterator_1ab4ef19c47b948b37c5d7e48d4efc6433" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>difference_type</name></member>
      <member refid="classbv__iterator_1ade3dece421fd39c2a86f59c9f54b7d62" prot="private" virt="non-virtual"><scope>bv_iterator</scope><name>iter_</name></member>
      <member refid="classbv__iterator_1adb257f7c2e78a1acb310d861197c31ec" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>iterator</name></member>
      <member refid="classbv__iterator_1a02080e45873e1851d6d7fdad1f6ad7cb" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>iterator_category</name></member>
      <member refid="classbv__iterator_1adb48b380cff065ce684738209ef86bce" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator!=</name></member>
      <member refid="classbv__iterator_1a7cb6eab64ae784b7b1efdeae585399a7" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator*</name></member>
      <member refid="classbv__iterator_1ab456d75b355ea4d748dbb15e765c6812" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator+</name></member>
      <member refid="classbv__iterator_1af21523df031ca76d54ec917e7751e8d1" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator++</name></member>
      <member refid="classbv__iterator_1a3a7e75de92875778e6a6b868ed1422db" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator++</name></member>
      <member refid="classbv__iterator_1ae38e248649acc7766d8a71f6d4139e4d" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator+=</name></member>
      <member refid="classbv__iterator_1a75c09d37db3265d355e5a57513be4a55" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator-</name></member>
      <member refid="classbv__iterator_1ac6b4231d0634279ad1989384748f4461" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator-</name></member>
      <member refid="classbv__iterator_1a7b38769e1e7dfbf862e208a649783e30" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator-</name></member>
      <member refid="classbv__iterator_1afb56d8a0e4f5f1ce2ebb4a4d8d743296" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator--</name></member>
      <member refid="classbv__iterator_1a008c93283f6ed2e1948ecc793e497d93" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator--</name></member>
      <member refid="classbv__iterator_1a34b205461c0df4aaf8d139ebe9045a92" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator-=</name></member>
      <member refid="classbv__iterator_1a90b3b415cdc4e29c049fbc7a0bbd3b78" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator-&gt;</name></member>
      <member refid="classbv__iterator_1ac6568a04b0a1d3f14cba888acd35ecac" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator&lt;</name></member>
      <member refid="classbv__iterator_1a03acb2dac679d0a51aa14d453fadc1ff" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator&lt;=</name></member>
      <member refid="classbv__iterator_1a5cfaa33336b775a7b55cc1fec066109d" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator=</name></member>
      <member refid="classbv__iterator_1a2f7db919cab7b26330a0f5cbd8f13839" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator==</name></member>
      <member refid="classbv__iterator_1aec8a5df3fcc15c9a7b1670e02abba637" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator&gt;</name></member>
      <member refid="classbv__iterator_1aea79c796aa04e131c8cc6587944d2a15" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator&gt;=</name></member>
      <member refid="classbv__iterator_1ab7af0fa45e8ec97a1c6bb6c46604b936" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>operator[]</name></member>
      <member refid="classbv__iterator_1a157938917a1ac41d9f4d0c3ceb408d14" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>pointer</name></member>
      <member refid="classbv__iterator_1a46214444a4dcaedea84028d03a31a4da" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>reference</name></member>
      <member refid="classbv__iterator_1a13f026e3e592af583a476e25791b3b25" prot="public" virt="non-virtual"><scope>bv_iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
