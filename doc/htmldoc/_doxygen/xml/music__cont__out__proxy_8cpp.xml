<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="music__cont__out__proxy_8cpp" kind="file" language="C++">
    <compoundname>music_cont_out_proxy.cpp</compoundname>
    <includes refid="music__cont__out__proxy_8h" local="yes">music_cont_out_proxy.h</includes>
    <incdepgraph>
      <node id="1">
        <label>music_cont_out_proxy.cpp</label>
        <link refid="music__cont__out__proxy_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>music_cont_out_proxy.h</label>
        <link refid="music__cont__out__proxy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>music_cont_out_proxy.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="music__cont__out__proxy_8h" kindref="compound">music_cont_out_proxy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MUSIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="event__delivery__manager__impl_8h" kindref="compound">event_delivery_manager_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nest__datums_8h" kindref="compound">nest_datums.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>libnestutil:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compose.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logging_8h" kindref="compound">logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dictutils_8h" kindref="compound">dictutils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="doubledatum_8h" kindref="compound">doubledatum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="integerdatum_8h" kindref="compound">integerdatum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>Default<sp/>constructors<sp/>defining<sp/>default<sp/>parameters<sp/>and<sp/>state</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">nest::music_cont_out_proxy::Parameters_::Parameters_()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>:<sp/>interval_(<sp/>Time::ms(<sp/>1.0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>,<sp/>port_name_(<sp/></highlight><highlight class="stringliteral">&quot;cont_out&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>,<sp/>record_from_()</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>,<sp/>targets_(<sp/>new<sp/>NodeCollectionPrimitive()<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">nest::music_cont_out_proxy::Parameters_::Parameters_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>:<sp/>interval_(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.interval_<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>,<sp/>port_name_(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.port_name_<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>,<sp/>record_from_(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.record_from_<sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>,<sp/>targets_(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.targets_<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>interval_.calibrate();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">nest::music_cont_out_proxy::State_::State_()</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>:<sp/>published_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>,<sp/>port_width_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">nest::music_cont_out_proxy::State_::State_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State_&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>:<sp/>published_(<sp/>s.published_<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>,<sp/>port_width_(<sp/>s.port_width_<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">nest::music_cont_out_proxy::Buffers_::Buffers_()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>:<sp/>has_targets_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>,<sp/>data_()</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">nest::music_cont_out_proxy::Buffers_::Buffers_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffers_&amp;<sp/>b<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>:<sp/>has_targets_(<sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>.has_targets_<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>,<sp/>data_(<sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>.data_<sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>extraction<sp/>and<sp/>manipulation<sp/>functions</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">nest::music_cont_out_proxy::Parameters_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="98"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::port_name<sp/>]<sp/>=<sp/>port_name_;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::interval<sp/>]<sp/>=<sp/>interval_.get_ms();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref><sp/>ad_record_from;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>record_from_.size();<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ad_record_from.push_back(<sp/><ref refid="classLiteralDatum" kindref="compound">LiteralDatum</ref>(<sp/>record_from_[<sp/>j<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::record_from<sp/>]<sp/>=<sp/>ad_record_from;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::targets<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="nest__datums_8h_1a46dc3375f57e5fdc088238d79b4545f9" kindref="member">NodeCollectionDatum</ref>(<sp/>targets_<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">nest::music_cont_out_proxy::Parameters_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Node&amp;<sp/>self,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State_&amp;<sp/>state,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffers_&amp;<sp/>buffers<sp/>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1a2c7c2c6d78a38838cd53427e9f5c5ab0" kindref="member">state</ref>.published_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>updateValue&lt;<sp/>string<sp/>&gt;(<sp/>d,<sp/>names::port_name,<sp/>port_name_<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buffers.has_targets_<sp/>and<sp/>(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>names::interval<sp/>)<sp/>or<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>names::record_from<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>recording<sp/>interval<sp/>and<sp/>the<sp/>list<sp/>of<sp/>properties<sp/>to<sp/>record<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>be<sp/>changed<sp/>after<sp/>the<sp/>index_map<sp/>has<sp/>been<sp/>set.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValue&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::interval,<sp/>v<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Time(<sp/>Time::ms(<sp/>v<sp/>)<sp/>)<sp/>&lt;<sp/>Time::get_resolution()<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>sampling<sp/>interval<sp/>must<sp/>be<sp/>at<sp/>least<sp/>as<sp/>long<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;as<sp/>the<sp/>simulation<sp/>resolution.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>can<sp/>represent<sp/>interval<sp/>as<sp/>multiple<sp/>of<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>interval_<sp/>=<sp/>Time::step(<sp/>Time(<sp/>Time::ms(<sp/>v<sp/>)<sp/>).get_steps()<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>std::abs(<sp/>1<sp/>-<sp/>interval_.get_ms()<sp/>/<sp/>v<sp/>)<sp/>&gt;<sp/>10<sp/>*<sp/>std::numeric_limits&lt;<sp/>double<sp/>&gt;::epsilon()<sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>sampling<sp/>interval<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>simulation<sp/>resolution&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>names::record_from<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>record_from_.clear();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref><sp/>ad<sp/>=<sp/>getValue&lt;<sp/>ArrayDatum<sp/>&gt;(<sp/>d,<sp/>names::record_from<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classToken" kindref="compound">Token</ref>*<sp/>t<sp/>=<sp/>ad.begin();<sp/>t<sp/>!=<sp/>ad.end();<sp/>++t<sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record_from_.push_back(<sp/><ref refid="className" kindref="compound">Name</ref>(<sp/><ref refid="tokenutils_8cc_1ab4940c6a9d7f700ec063ad673ea35ca9" kindref="member">getValue&lt; std::string &gt;</ref>(<sp/>*t<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>names::targets<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>record_from_.empty()<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>property<sp/>record_from<sp/>must<sp/>be<sp/>set<sp/>before<sp/>passing<sp/>targets.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1a2c7c2c6d78a38838cd53427e9f5c5ab0" kindref="member">state</ref>.published_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targets_<sp/>=<sp/>getValue&lt;<sp/>NodeCollectionDatum<sp/>&gt;(<sp/>d,<sp/>names::targets<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>MUSICPortAlreadyPublished(<sp/>self.get_name(),<sp/>port_name_<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">nest::music_cont_out_proxy::State_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="183"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::published<sp/>]<sp/>=<sp/>published_;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::port_width<sp/>]<sp/>=<sp/>port_width_;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>Default<sp/>and<sp/>copy<sp/>constructor<sp/>for<sp/>node</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">nest::music_cont_out_proxy::music_cont_out_proxy()</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>:<sp/>DeviceNode()</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>,<sp/>P_()</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>,<sp/>S_()</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>,<sp/>B_()</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">nest::music_cont_out_proxy::music_cont_out_proxy(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>music_cont_out_proxy&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>:<sp/>DeviceNode(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>,<sp/>P_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.P_<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.S_<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.B_<sp/>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">nest::music_cont_out_proxy::init_buffers_()</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>B_.data_.clear();</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">nest::music_cont_out_proxy::finalize()</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">nest::port</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal">nest::music_cont_out_proxy::send_test_event(<sp/>Node&amp;<sp/>target,<sp/>rport<sp/>receptor_type,<sp/>synindex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>DataLoggingRequest<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>(<sp/>P_.interval_,<sp/>P_.record_from_<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.set_sender(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref><sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a83d2632e91d15673db6f7990fcdfe232" kindref="member">target</ref>.handles_test_event(<sp/>e,<sp/>receptor_type<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>!=<sp/>invalid_port<sp/>and<sp/>not<sp/>is_model_prototype()<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.has_targets_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">nest::music_cont_out_proxy::pre_run_hook()</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>publish<sp/>the<sp/>output<sp/>port<sp/>once,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.published_<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>synmodel_id<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().model_manager.get_synapse_model_id(<sp/></highlight><highlight class="stringliteral">&quot;static_synapse&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>MUSIC::GlobalIndex<sp/>&gt;<sp/>music_index_map;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref><sp/>dummy_params<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDictionary" kindref="compound">Dictionary</ref>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>P_.targets_-&gt;size();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>tnode_id<sp/>=<sp/>(<sp/>*P_.targets_<sp/>)[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().node_manager.is_local_node_id(<sp/>tnode_id<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.connect(<sp/>get_node_id(),<sp/>tnode_id,<sp/>dummy_params,<sp/>synmodel_id<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>P_.record_from_.size();<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>music_index_map.push_back(<sp/>P_.record_from_.size()<sp/>*<sp/>i<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>MUSIC::Setup*<sp/>s<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().music_manager.get_music_setup();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>MUSICSimulationHasRun(<sp/>get_name()<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>MUSIC::ContOutputPort*<sp/>MP<sp/>=<sp/>s-&gt;publishContOutput(<sp/>P_.port_name_<sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>MP-&gt;isConnected()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>MUSICPortUnconnected(<sp/>get_name(),<sp/>P_.port_name_<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>MP-&gt;hasWidth()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>MUSICPortHasNoWidth(<sp/>get_name(),<sp/>P_.port_name_<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>S_.port_width_<sp/>=<sp/>MP-&gt;width();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>per_port_width<sp/>=<sp/>P_.record_from_.size();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.data_.resize(<sp/>per_port_width<sp/>*<sp/>S_.port_width_<sp/>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>any<sp/>port<sp/>is<sp/>out<sp/>of<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>P_.targets_-&gt;size()<sp/>&gt;<sp/>S_.port_width_<sp/>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>MUSICChannelUnknown(<sp/>get_name(),<sp/>P_.port_name_,<sp/>S_.port_width_<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>permutation<sp/>index<sp/>map,<sp/>contains<sp/>global_index[local_index]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>MUSIC::PermutationIndex*<sp/>music_perm_ind<sp/>=</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MUSIC::PermutationIndex(<sp/>&amp;music_index_map.front(),<sp/>music_index_map.size()<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>MUSIC::ArrayData*<sp/>dmap<sp/>=</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MUSIC::ArrayData(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;(<sp/>B_.data_.front()<sp/>)<sp/>),<sp/>MPI::DOUBLE,<sp/>music_perm_ind<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>an<sp/>array<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>MP-&gt;map(<sp/>dmap<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>S_.published_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String::compose(<sp/></highlight><highlight class="stringliteral">&quot;Mapping<sp/>MUSIC<sp/>continuous<sp/>output<sp/>port<sp/>&apos;%1&apos;<sp/>with<sp/>width=%2.&quot;</highlight><highlight class="normal">,<sp/>P_.port_name_,<sp/>S_.port_width_<sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" kindref="member">LOG</ref>(<sp/>M_INFO,<sp/></highlight><highlight class="stringliteral">&quot;music_cont_out_proxy::pre_run_hook()&quot;</highlight><highlight class="normal">,<sp/>msg.c_str()<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">nest::music_cont_out_proxy::get_status(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="308"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>P_.get(<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>S_.get(<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>is_model_prototype()<sp/>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>data<sp/>to<sp/>collect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>the<sp/>device<sp/>on<sp/>thread<sp/>0,<sp/>also<sp/>get<sp/>the<sp/>data<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>siblings<sp/>on<sp/>other<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_thread()<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>Node*<sp/>&gt;<sp/>siblings<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().node_manager.get_thread_siblings(<sp/>get_node_id()<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Node*<sp/>&gt;::const_iterator<sp/>s;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>=<sp/>siblings.begin()<sp/>+<sp/>1;<sp/>s<sp/>!=<sp/>siblings.end();<sp/>++s<sp/>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>*s<sp/>)-&gt;get_status(<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">nest::music_cont_out_proxy::set_status(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>P_.set(<sp/>d,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>S_,<sp/>B_<sp/>);<sp/></highlight><highlight class="comment">//<sp/>throws<sp/>if<sp/>BadProperty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">nest::music_cont_out_proxy::update(<sp/>Time<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>nothing<sp/>to<sp/>request<sp/>during<sp/>the<sp/>first<sp/>time<sp/>slice.<sp/>For</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>each<sp/>subsequent<sp/>slice,<sp/>we<sp/>collect<sp/>all<sp/>data<sp/>generated<sp/>during</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>previous<sp/>slice<sp/>if<sp/>we<sp/>are<sp/>called<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>slice.<sp/>Otherwise,<sp/>we<sp/>do<sp/>nothing.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1a6448c21f7fb2a2b838e803d3fa965fc7" kindref="member">origin</ref>.get_steps()<sp/>==<sp/>0<sp/>or<sp/>from<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>send<sp/>a<sp/>request<sp/>to<sp/>each<sp/>of<sp/>our<sp/>targets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>target<sp/>then<sp/>immediately<sp/>returns<sp/>a<sp/>DataLoggingReply<sp/>event,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>caught<sp/>by<sp/>music_cont_out_proxy::handle(),<sp/>which<sp/>in<sp/>turn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensures<sp/>that<sp/>the<sp/>event<sp/>is<sp/>recorded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle()<sp/>has<sp/>access<sp/>to<sp/>request_,<sp/>so<sp/>it<sp/>knows<sp/>what<sp/>we<sp/>asked<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>not<sp/>all<sp/>nodes<sp/>receiving<sp/>the<sp/>request<sp/>will<sp/>necessarily<sp/>answer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>DataLoggingRequest<sp/>req;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.send(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>req<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">nest::music_cont_out_proxy::handle(<sp/>DataLoggingReply&amp;<sp/>reply<sp/>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>easy<sp/>access<sp/>to<sp/>relevant<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>DataLoggingReply::Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>info<sp/>=<sp/>reply.get_info();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref><sp/>=<sp/>reply.get_port();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>record_width<sp/>=<sp/>P_.record_from_.size();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a61130023bb9c0b6022bae75bb6b8b385" kindref="member">offset</ref><sp/>=<sp/><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref><sp/>*<sp/>record_width;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataLoggingReply::DataItem<sp/>item<sp/>=<sp/>info[<sp/>info.size()<sp/>-<sp/>1<sp/>].data;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>info[<sp/>info.size()<sp/>-<sp/>1<sp/>].timestamp.is_finite()<sp/>)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>item.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B_.data_[<sp/><ref refid="namespacenest_1_1names_1a61130023bb9c0b6022bae75bb6b8b385" kindref="member">offset</ref><sp/>+<sp/>i<sp/>]<sp/>=<sp/>item[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/music_cont_out_proxy.cpp"/>
  </compounddef>
</doxygen>
