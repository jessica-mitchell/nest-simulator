<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1Connection" kind="class" language="C++" prot="public">
    <compoundname>nest::Connection</compoundname>
    <derivedcompoundref refid="classnest_1_1DiffusionConnection" prot="public" virt="non-virtual">nest::DiffusionConnection&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1GapJunction" prot="public" virt="non-virtual">nest::GapJunction&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1RateConnectionDelayed" prot="public" virt="non-virtual">nest::RateConnectionDelayed&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1RateConnectionInstantaneous" prot="public" virt="non-virtual">nest::RateConnectionInstantaneous&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1bernoulli__synapse" prot="public" virt="non-virtual">nest::bernoulli_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1clopath__synapse" prot="public" virt="non-virtual">nest::clopath_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1cont__delay__synapse" prot="public" virt="non-virtual">nest::cont_delay_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ht__synapse" prot="public" virt="non-virtual">nest::ht_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1jonke__synapse" prot="public" virt="non-virtual">nest::jonke_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1quantal__stp__synapse" prot="public" virt="non-virtual">nest::quantal_stp_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1static__synapse" prot="public" virt="non-virtual">nest::static_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1static__synapse__hom__w" prot="public" virt="non-virtual">nest::static_synapse_hom_w&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__dopamine__synapse" prot="public" virt="non-virtual">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__facetshw__synapse__hom" prot="public" virt="non-virtual">nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__nn__pre__centered__synapse" prot="public" virt="non-virtual">nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__nn__restr__synapse" prot="public" virt="non-virtual">nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__nn__symm__synapse" prot="public" virt="non-virtual">nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__pl__synapse__hom" prot="public" virt="non-virtual">nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__synapse" prot="public" virt="non-virtual">nest::stdp_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__synapse__hom" prot="public" virt="non-virtual">nest::stdp_synapse_hom&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1stdp__triplet__synapse" prot="public" virt="non-virtual">nest::stdp_triplet_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1tsodyks2__synapse" prot="public" virt="non-virtual">nest::tsodyks2_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1tsodyks__synapse" prot="public" virt="non-virtual">nest::tsodyks_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1tsodyks__synapse__hom" prot="public" virt="non-virtual">nest::tsodyks_synapse_hom&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1urbanczik__synapse" prot="public" virt="non-virtual">nest::urbanczik_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1vogels__sprekeler__synapse" prot="public" virt="non-virtual">nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;</derivedcompoundref>
    <includes refid="connection_8h" local="no">connection.h</includes>
    <templateparamlist>
      <param>
        <type>typename targetidentifierT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classnest_1_1Connection_1a8431f234dc8bf81e675ff3bf8f748a1d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespacenest_1ada520c3662d2209c7209c5cc7dfae9a4" kindref="member">ConnectionModelProperties</ref></type>
        <definition>constexpr ConnectionModelProperties nest::Connection&lt; targetidentifierT &gt;::properties</definition>
        <argsstring></argsstring>
        <name>properties</name>
        <initializer>= ConnectionModelProperties::NONE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="119" column="46" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1Connection_1af2b2773f69c67db7330eb1064a199af7" prot="protected" static="no" mutable="no">
        <type>targetidentifierT</type>
        <definition>targetidentifierT nest::Connection&lt; targetidentifierT &gt;::target_</definition>
        <argsstring></argsstring>
        <name>target_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="311" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="311" bodyend="-1"/>
        <referencedby refid="classnest_1_1Connection_1a67a2fe2ff35ad8fc9ae258974545724c" compoundref="connection_8h" startline="243" endline="246">nest::Connection&lt; targetidentifierT &gt;::get_rport</referencedby>
        <referencedby refid="classnest_1_1Connection_1aad7670ccbbf3bcb8dadad67075c15ff5" compoundref="connection_8h" startline="238" endline="241">nest::Connection&lt; targetidentifierT &gt;::get_target</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" prot="protected" static="no" mutable="no">
        <type><ref refid="structnest_1_1SynIdDelay" kindref="compound">SynIdDelay</ref></type>
        <definition>SynIdDelay nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</definition>
        <argsstring></argsstring>
        <name>syn_id_delay_</name>
        <briefdescription>
<para>syn_id (9 bit), delay (21 bit) in timesteps of this connection and more_targets and disabled flags (each 1 bit) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="313" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="313" bodyend="-1"/>
        <referencedby refid="classnest_1_1Connection_1a811dff4d6dbbca5a8cae4de925aa9faf" compoundref="connection_8h" startline="278" endline="281">nest::Connection&lt; targetidentifierT &gt;::disable</referencedby>
        <referencedby refid="classnest_1_1Connection_1a859a57c02d19389a8f6a15c626214c9b" compoundref="connection_8h" startline="172" endline="175">nest::Connection&lt; targetidentifierT &gt;::get_delay</referencedby>
        <referencedby refid="classnest_1_1Connection_1a239230687eac7f8868b89c8a5e8fc56e" compoundref="connection_8h" startline="181" endline="184">nest::Connection&lt; targetidentifierT &gt;::get_delay_steps</referencedby>
        <referencedby refid="classnest_1_1Connection_1a2aca6e34443f8ef8576e23f097b199df" compoundref="connection_8h" startline="217" endline="220">nest::Connection&lt; targetidentifierT &gt;::get_syn_id</referencedby>
        <referencedby refid="classnest_1_1Connection_1af8930ce6e4fee3c867cccac967970bd2" compoundref="connection_8h" startline="289" endline="292">nest::Connection&lt; targetidentifierT &gt;::is_disabled</referencedby>
        <referencedby refid="classnest_1_1Connection_1abebbbd505fa36932bde4860d98eaed2e" compoundref="connection_8h" startline="190" endline="193">nest::Connection&lt; targetidentifierT &gt;::set_delay</referencedby>
        <referencedby refid="classnest_1_1Connection_1ab67c8cbeb4173f71fbc1a364d4e91785" compoundref="connection_8h" startline="199" endline="202">nest::Connection&lt; targetidentifierT &gt;::set_delay_steps</referencedby>
        <referencedby refid="classnest_1_1Connection_1adce5ef19844ee30d96e7d39b5fe1a7f1" compoundref="connection_8h" startline="255" endline="258">nest::Connection&lt; targetidentifierT &gt;::set_source_has_more_targets</referencedby>
        <referencedby refid="classnest_1_1Connection_1a7abf9bd27ab16f395112be31001bae3c" compoundref="connection_8h" startline="208" endline="211">nest::Connection&lt; targetidentifierT &gt;::set_syn_id</referencedby>
        <referencedby refid="classnest_1_1Connection_1a0007e829af9dc39e624c5f349259a8ca" compoundref="connection_8h" startline="267" endline="270">nest::Connection&lt; targetidentifierT &gt;::source_has_more_targets</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1Connection_1acb7166410b78749a3c989e98868d1020" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Connection&lt; targetidentifierT &gt;::Connection</definition>
        <argsstring>()</argsstring>
        <name>Connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a9237d0912e8b9c7fbb5d32d4c7abcb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Connection&lt; targetidentifierT &gt;::Connection</definition>
        <argsstring>(const Connection&lt; targetidentifierT &gt; &amp;rhs)=default</argsstring>
        <name>Connection</name>
        <param>
          <type>const <ref refid="classnest_1_1Connection" kindref="compound">Connection</ref>&lt; targetidentifierT &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="127" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a48fb1882cd92d44887b93fffd606c720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Connection" kindref="compound">Connection</ref> &amp;</type>
        <definition>Connection&amp; nest::Connection&lt; targetidentifierT &gt;::operator=</definition>
        <argsstring>(const Connection&lt; targetidentifierT &gt; &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnest_1_1Connection" kindref="compound">Connection</ref>&lt; targetidentifierT &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="128" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1ab94466cbfab610e03bc440e4bb1a6a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref> *</type>
        <definition>SecondaryEvent * nest::Connection&lt; targetidentifierT &gt;::get_secondary_event</definition>
        <argsstring>()</argsstring>
        <name>get_secondary_event</name>
        <briefdescription>
<para>Get a pointer to an instance of a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref> if this connection supports secondary events. </para>
        </briefdescription>
        <detaileddescription>
<para>To prevent erronous calls of this function on primary connections, the base class implementation below just contains <computeroutput>assert(false)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="136" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a103247c0ca2e2b7528bea85fdf1db458" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::get_status</definition>
        <argsstring>(DictionaryDatum &amp;d) const</argsstring>
        <name>get_status</name>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Get all properties of this connection and put them into a dictionary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="141" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="352" bodyend="356"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="namespacenest_1_1names_1ab9cc026669479769b697c033fed944aa">nest::names::delay</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1aede706c57e428cfe0831f17fa439f4fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;d, ConnectorModel &amp;cm)</argsstring>
        <name>set_status</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1ConnectorModel" kindref="compound">ConnectorModel</ref> &amp;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Set properties of this connection from the values given in dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classnest_1_1Target" kindref="compound">Target</ref> and Rport cannot be changed after a connection has been created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="149" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="360" bodyend="369"/>
        <references refid="classnest_1_1DelayChecker_1a4a0e6ca8d78a66919f2688e286bf66cb" compoundref="delay__checker_8cpp" startline="146" endline="206">nest::DelayChecker::assert_valid_delay_ms</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="249">nest::KernelManager::connection_manager</references>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="namespacenest_1_1names_1ab9cc026669479769b697c033fed944aa">nest::names::delay</references>
        <references refid="classnest_1_1ConnectionManager_1a13545535bee9810548166d5d8606cbfc" compoundref="connection__manager_8cpp" startline="190" endline="193">nest::ConnectionManager::get_delay_checker</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1ae7698c05fc210ced5bbf31b02dd6e05b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::check_synapse_params</definition>
        <argsstring>(const DictionaryDatum &amp;d) const</argsstring>
        <name>check_synapse_params</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Check syn_spec dictionary for parameters that are not allowed with the given connection. </para>
        </briefdescription>
        <detaileddescription>
<para>Will issue warning or throw error if an illegal parameter is found. The method does nothing if no illegal parameter is found.</para>
<para><simplesect kind="note"><para>Classes requiring checks need to override the function with their own implementation, as this base class implementation does not do anything. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="161" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a98a2af4db1c9a34d011be0c89a731c9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::calibrate</definition>
        <argsstring>(const TimeConverter &amp;)</argsstring>
        <name>calibrate</name>
        <param>
          <type>const <ref refid="classnest_1_1TimeConverter" kindref="compound">TimeConverter</ref> &amp;</type>
          <defname>tc</defname>
        </param>
        <briefdescription>
<para>Calibrate the delay of this connection to the desired resolution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="166" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="379" bodyend="388"/>
        <references refid="classnest_1_1TimeConverter_1ac87d0cd883224a57f34faf424f7a6432" compoundref="nest__timeconverter_8cpp" startline="38" endline="46">nest::TimeConverter::from_old_steps</references>
        <references refid="classnest_1_1Time_1afedb0e4fbf5d521e50573f2180016568" compoundref="nest__time_8h" startline="526" endline="540">nest::Time::get_steps</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a859a57c02d19389a8f6a15c626214c9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::Connection&lt; targetidentifierT &gt;::get_delay</definition>
        <argsstring>() const</argsstring>
        <name>get_delay</name>
        <briefdescription>
<para>Return the delay of the connection in ms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="172" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="172" bodyend="175"/>
        <references refid="structnest_1_1SynIdDelay_1a04f8aa49a16adbc48d96115048c1f2bd" compoundref="syn__id__delay_8h" startline="55" endline="58">nest::SynIdDelay::get_delay_ms</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a239230687eac7f8868b89c8a5e8fc56e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long nest::Connection&lt; targetidentifierT &gt;::get_delay_steps</definition>
        <argsstring>() const</argsstring>
        <name>get_delay_steps</name>
        <briefdescription>
<para>Return the delay of the connection in steps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="181" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="181" bodyend="184"/>
        <references refid="structnest_1_1SynIdDelay_1ac5588fbb27f68655030c4a243fd430fd" compoundref="syn__id__delay_8h" startline="35">nest::SynIdDelay::delay</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1abebbbd505fa36932bde4860d98eaed2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::set_delay</definition>
        <argsstring>(const double delay)</argsstring>
        <name>set_delay</name>
        <param>
          <type>const double</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set the delay of the connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="190" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="190" bodyend="193"/>
        <references refid="structnest_1_1SynIdDelay_1ad9db4f5ce6cf00ac5a507c597ac46966" compoundref="syn__id__delay_8h" startline="64" endline="67">nest::SynIdDelay::set_delay_ms</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1ab67c8cbeb4173f71fbc1a364d4e91785" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::set_delay_steps</definition>
        <argsstring>(const long delay)</argsstring>
        <name>set_delay_steps</name>
        <param>
          <type>const long</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set the delay of the connection in steps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="199" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="199" bodyend="202"/>
        <references refid="structnest_1_1SynIdDelay_1ac5588fbb27f68655030c4a243fd430fd" compoundref="syn__id__delay_8h" startline="35">nest::SynIdDelay::delay</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a7abf9bd27ab16f395112be31001bae3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::set_syn_id</definition>
        <argsstring>(synindex syn_id)</argsstring>
        <name>set_syn_id</name>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
<para>Set the synapse id of the connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="208" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="208" bodyend="211"/>
        <references refid="structnest_1_1SynIdDelay_1a458c24aea1b7838a7b1b079cd268974f" compoundref="syn__id__delay_8h" startline="36">nest::SynIdDelay::syn_id</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a2aca6e34443f8ef8576e23f097b199df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        <definition>synindex nest::Connection&lt; targetidentifierT &gt;::get_syn_id</definition>
        <argsstring>() const</argsstring>
        <name>get_syn_id</name>
        <briefdescription>
<para>Get the synapse id of the connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="217" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="217" bodyend="220"/>
        <references refid="structnest_1_1SynIdDelay_1a458c24aea1b7838a7b1b079cd268974f" compoundref="syn__id__delay_8h" startline="36">nest::SynIdDelay::syn_id</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a7c32524ac24f7d591bd14a5cc9219618" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long nest::Connection&lt; targetidentifierT &gt;::get_label</definition>
        <argsstring>() const</argsstring>
        <name>get_label</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="223" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="223" bodyend="226"/>
        <references refid="namespacenest_1aa69a20373c241553ae8038c0fa56e37a" compoundref="connection__label_8h" startline="41">nest::UNLABELED_CONNECTION</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1aa1e3449ea1e2ff5f7dd2338bbf3feafe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::trigger_update_weight</definition>
        <argsstring>(const thread, const std::vector&lt; spikecounter &gt; &amp;, const double, const CommonSynapseProperties &amp;)</argsstring>
        <name>trigger_update_weight</name>
        <param>
          <type>const</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1spikecounter" kindref="compound">spikecounter</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const double</type>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1CommonSynapseProperties" kindref="compound">CommonSynapseProperties</ref> &amp;</type>
        </param>
        <briefdescription>
<para>triggers an update of a synaptic weight this function is needed for neuromodulated synaptic plasticity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="232" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="392" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1aad7670ccbbf3bcb8dadad67075c15ff5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node* nest::Connection&lt; targetidentifierT &gt;::get_target</definition>
        <argsstring>(const thread tid) const</argsstring>
        <name>get_target</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="238" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="238" bodyend="241"/>
        <references refid="classnest_1_1Connection_1af2b2773f69c67db7330eb1064a199af7" compoundref="connection_8h" startline="311">nest::Connection&lt; targetidentifierT &gt;::target_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a67a2fe2ff35ad8fc9ae258974545724c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
        <definition>rport nest::Connection&lt; targetidentifierT &gt;::get_rport</definition>
        <argsstring>() const</argsstring>
        <name>get_rport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="243" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="243" bodyend="246"/>
        <references refid="classnest_1_1Connection_1af2b2773f69c67db7330eb1064a199af7" compoundref="connection_8h" startline="311">nest::Connection&lt; targetidentifierT &gt;::target_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1adce5ef19844ee30d96e7d39b5fe1a7f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::set_source_has_more_targets</definition>
        <argsstring>(const bool more_targets)</argsstring>
        <name>set_source_has_more_targets</name>
        <param>
          <type>const bool</type>
          <declname>more_targets</declname>
        </param>
        <briefdescription>
<para>Sets a flag in the connection to signal that the following connection has the same source. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1Connection_1a0007e829af9dc39e624c5f349259a8ca" kindref="member">source_has_more_targets</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="255" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="255" bodyend="258"/>
        <references refid="structnest_1_1SynIdDelay_1aa6fdbd5055dbd33554593c47badd2221" compoundref="syn__id__delay_8h" startline="70" endline="73">nest::SynIdDelay::set_source_has_more_targets</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a0007e829af9dc39e624c5f349259a8ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Connection&lt; targetidentifierT &gt;::source_has_more_targets</definition>
        <argsstring>() const</argsstring>
        <name>source_has_more_targets</name>
        <briefdescription>
<para>Returns a flag denoting whether the connection has source subsequent targets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1Connection_1adce5ef19844ee30d96e7d39b5fe1a7f1" kindref="member">set_source_has_more_targets</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="267" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="267" bodyend="270"/>
        <references refid="structnest_1_1SynIdDelay_1a25fc08ad7adddab1be069bb90b986ac6" compoundref="syn__id__delay_8h" startline="76" endline="79">nest::SynIdDelay::source_has_more_targets</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1a811dff4d6dbbca5a8cae4de925aa9faf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::disable</definition>
        <argsstring>()</argsstring>
        <name>disable</name>
        <briefdescription>
<para>Disables the connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1Connection_1af8930ce6e4fee3c867cccac967970bd2" kindref="member">is_disabled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="278" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="278" bodyend="281"/>
        <references refid="structnest_1_1SynIdDelay_1a376577aa3f24f1346393efddc5a9bc56" compoundref="syn__id__delay_8h" startline="87" endline="90">nest::SynIdDelay::disable</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Connection_1af8930ce6e4fee3c867cccac967970bd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Connection&lt; targetidentifierT &gt;::is_disabled</definition>
        <argsstring>() const</argsstring>
        <name>is_disabled</name>
        <briefdescription>
<para>Returns a flag denoting if the connection is disabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1Connection_1a811dff4d6dbbca5a8cae4de925aa9faf" kindref="member">disable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="289" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="289" bodyend="292"/>
        <references refid="structnest_1_1SynIdDelay_1afd0f99d2a349627c88db97dfd6ac12bb" compoundref="syn__id__delay_8h" startline="98" endline="101">nest::SynIdDelay::is_disabled</references>
        <references refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" compoundref="connection_8h" startline="313">nest::Connection&lt; targetidentifierT &gt;::syn_id_delay_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1Connection_1ade845a0f52ecb9a6f93b0323b37380e0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Connection&lt; targetidentifierT &gt;::check_connection_</definition>
        <argsstring>(Node &amp;dummy_target, Node &amp;source, Node &amp;target, const rport receptor_type)</argsstring>
        <name>check_connection_</name>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>dummy_target</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>This function calls check_connection() on the sender to check if the receiver accepts the event type and receptor type requested by the sender. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The target node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the requested receptor type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>last spike produced by the presynaptic neuron (for STDP and maturing connections) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="304" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="321" bodyend="348"/>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
        <references refid="namespacenest_1_1names_1af9fc29ade057c46d8e283df412841131">nest::names::source</references>
        <references refid="namespacenest_1_1names_1a8f3b23679799316ba69b9d6c98c69e3a">nest::names::target</references>
        <referencedby refid="classnest_1_1bernoulli__synapse_1af445220c7eedf5053de99a21d98e524d" compoundref="bernoulli__synapse_8h" startline="144" endline="148">nest::bernoulli_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1clopath__synapse_1a82e0f01777b3e1f30f0970c053c30e2b" compoundref="clopath__synapse_8h" startline="180" endline="187">nest::clopath_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1cont__delay__synapse_1a3d5519ced627ca0b8f9e4ffb70126914" compoundref="cont__delay__synapse_8h" startline="194" endline="198">nest::cont_delay_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1ht__synapse_1a0da57835e4543171639788bb419f69f9" compoundref="ht__synapse_8h" startline="165" endline="169">nest::ht_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1jonke__synapse_1a5da09d4d1a8570cf1f8ab81875c1eccb" compoundref="jonke__synapse_8h" startline="274" endline="281">nest::jonke_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1quantal__stp__synapse_1ae159e8a65ce9565ba839526c1ecc28e6" compoundref="quantal__stp__synapse_8h" startline="169" endline="173">nest::quantal_stp_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1static__synapse_1a6af1964f62b45d5b0a7969d995247830" compoundref="static__synapse_8h" startline="147" endline="151">nest::static_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1static__synapse__hom__w_1a4261a23cc70a0be03fc9d71dc7b08f6c" compoundref="static__synapse__hom__w_8h" startline="136" endline="140">nest::static_synapse_hom_w&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__pre__centered__synapse_1af326eb37398a6035d8d83eb0a8a030b8" compoundref="stdp__nn__pre__centered__synapse_8h" startline="192" endline="199">nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__restr__synapse_1a02d1e4a0802ee845d659ba1b548cb62f" compoundref="stdp__nn__restr__synapse_8h" startline="187" endline="194">nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__symm__synapse_1a9c53b05c11c7d8c09b719580fc6c6eb6" compoundref="stdp__nn__symm__synapse_8h" startline="189" endline="196">nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__pl__synapse__hom_1a23c016c3633085698e96d193aa5d3d4a" compoundref="stdp__pl__synapse__hom_8h" startline="203" endline="210">nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse_1a8644cdf2bae1d50bb8ff857918fffcad" compoundref="stdp__synapse_8h" startline="179" endline="186">nest::stdp_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__facetshw__synapse__hom_1a2a9965e97314ccd75add69871198e808" compoundref="stdp__synapse__facetshw__hom_8h" startline="309" endline="316">nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse__hom_1a0d530a80687a13d80a68b1bb793ce40f" compoundref="stdp__synapse__hom_8h" startline="237" endline="243">nest::stdp_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__triplet__synapse_1a9d06cd3553f8740df257e8834eb26978" compoundref="stdp__triplet__synapse_8h" startline="201" endline="208">nest::stdp_triplet_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1tsodyks2__synapse_1a8e30ff63724877258507a86d08609d5f" compoundref="tsodyks2__synapse_8h" startline="187" endline="191">nest::tsodyks2_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1tsodyks__synapse_1ad41e0a43fd5d488b3137296d4089da5b" compoundref="tsodyks__synapse_8h" startline="205" endline="209">nest::tsodyks_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1tsodyks__synapse__hom_1a1f917f1d1a36a2eb4f614b97b441853f" compoundref="tsodyks__synapse__hom_8h" startline="238" endline="242">nest::tsodyks_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1urbanczik__synapse_1a041a8ffcf2a886e33f84aaac2f42a102" compoundref="urbanczik__synapse_8h" startline="174" endline="181">nest::urbanczik_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1vogels__sprekeler__synapse_1abd7bec0a60dca349a7d35d7345d34069" compoundref="vogels__sprekeler__synapse_8h" startline="156" endline="163">nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__dopamine__synapse_1abf8a9abe9502a752b7939173bc0e2f44" compoundref="stdp__dopamine__synapse_8h" startline="285" endline="296">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for representing connections. </para>
    </briefdescription>
    <detaileddescription>
<para>It provides the mandatory properties receiver port and target, as well as the functions <ref refid="classnest_1_1Connection_1a103247c0ca2e2b7528bea85fdf1db458" kindref="member">get_status()</ref> and <ref refid="classnest_1_1Connection_1aede706c57e428cfe0831f17fa439f4fe" kindref="member">set_status()</ref> to read and write them. A suitable <ref refid="classnest_1_1Connector" kindref="compound">Connector</ref> containing these connections can be obtained from the template GenericConnector.</para>
<para><simplesect kind="note"><para>Please note that the event received by the send() function is a reference to a single object that is re-used by each <ref refid="classnest_1_1Connection" kindref="compound">Connection</ref>. This means that the object must not be changed in the <ref refid="classnest_1_1Connection" kindref="compound">Connection</ref>, or if needs to be changed, everything has to be reset after sending (i.e. after Event::operator() has been called). </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="23">
        <label>nest::tsodyks2_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1tsodyks2__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>nest::stdp_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::RateConnectionDelayed&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1RateConnectionDelayed"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::bernoulli_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1bernoulli__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__nn__restr__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>nest::static_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1static__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>nest::tsodyks_synapse_hom&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1tsodyks__synapse__hom"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>nest::urbanczik_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1urbanczik__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::cont_delay_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1cont__delay__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>nest::stdp_synapse_hom&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__synapse__hom"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__nn__symm__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>nest::stdp_triplet_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__triplet__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Connection&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1Connection"/>
      </node>
      <node id="15">
        <label>nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__facetshw__synapse__hom"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__pl__synapse__hom"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>nest::ht_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1ht__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>nest::jonke_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1jonke__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__dopamine__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>nest::quantal_stp_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1quantal__stp__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>nest::static_synapse_hom_w&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1static__synapse__hom__w"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>nest::tsodyks_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1tsodyks__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::RateConnectionInstantaneous&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1RateConnectionInstantaneous"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::GapJunction&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1GapJunction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::DiffusionConnection&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1DiffusionConnection"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1vogels__sprekeler__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::clopath_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1clopath__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1stdp__nn__pre__centered__synapse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::Connection&lt; targetidentifierT &gt;</label>
        <link refid="classnest_1_1Connection"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#syn_id_delay_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::SynIdDelay</label>
        <link refid="structnest_1_1SynIdDelay"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" line="114" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection.h" bodystart="115" bodyend="314"/>
    <listofallmembers>
      <member refid="classnest_1_1Connection_1a98a2af4db1c9a34d011be0c89a731c9b" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>calibrate</name></member>
      <member refid="classnest_1_1Connection_1ade845a0f52ecb9a6f93b0323b37380e0" prot="protected" virt="non-virtual"><scope>nest::Connection</scope><name>check_connection_</name></member>
      <member refid="classnest_1_1Connection_1ae7698c05fc210ced5bbf31b02dd6e05b" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>check_synapse_params</name></member>
      <member refid="classnest_1_1Connection_1acb7166410b78749a3c989e98868d1020" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>Connection</name></member>
      <member refid="classnest_1_1Connection_1a9237d0912e8b9c7fbb5d32d4c7abcb8d" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>Connection</name></member>
      <member refid="classnest_1_1Connection_1a811dff4d6dbbca5a8cae4de925aa9faf" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>disable</name></member>
      <member refid="classnest_1_1Connection_1a859a57c02d19389a8f6a15c626214c9b" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_delay</name></member>
      <member refid="classnest_1_1Connection_1a239230687eac7f8868b89c8a5e8fc56e" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_delay_steps</name></member>
      <member refid="classnest_1_1Connection_1a7c32524ac24f7d591bd14a5cc9219618" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_label</name></member>
      <member refid="classnest_1_1Connection_1a67a2fe2ff35ad8fc9ae258974545724c" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_rport</name></member>
      <member refid="classnest_1_1Connection_1ab94466cbfab610e03bc440e4bb1a6a41" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_secondary_event</name></member>
      <member refid="classnest_1_1Connection_1a103247c0ca2e2b7528bea85fdf1db458" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_status</name></member>
      <member refid="classnest_1_1Connection_1a2aca6e34443f8ef8576e23f097b199df" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_syn_id</name></member>
      <member refid="classnest_1_1Connection_1aad7670ccbbf3bcb8dadad67075c15ff5" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>get_target</name></member>
      <member refid="classnest_1_1Connection_1af8930ce6e4fee3c867cccac967970bd2" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>is_disabled</name></member>
      <member refid="classnest_1_1Connection_1a48fb1882cd92d44887b93fffd606c720" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>operator=</name></member>
      <member refid="classnest_1_1Connection_1a8431f234dc8bf81e675ff3bf8f748a1d" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>properties</name></member>
      <member refid="classnest_1_1Connection_1abebbbd505fa36932bde4860d98eaed2e" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>set_delay</name></member>
      <member refid="classnest_1_1Connection_1ab67c8cbeb4173f71fbc1a364d4e91785" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>set_delay_steps</name></member>
      <member refid="classnest_1_1Connection_1adce5ef19844ee30d96e7d39b5fe1a7f1" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>set_source_has_more_targets</name></member>
      <member refid="classnest_1_1Connection_1aede706c57e428cfe0831f17fa439f4fe" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>set_status</name></member>
      <member refid="classnest_1_1Connection_1a7abf9bd27ab16f395112be31001bae3c" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>set_syn_id</name></member>
      <member refid="classnest_1_1Connection_1a0007e829af9dc39e624c5f349259a8ca" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>source_has_more_targets</name></member>
      <member refid="classnest_1_1Connection_1a27f971c956034918da99deb971949a26" prot="protected" virt="non-virtual"><scope>nest::Connection</scope><name>syn_id_delay_</name></member>
      <member refid="classnest_1_1Connection_1af2b2773f69c67db7330eb1064a199af7" prot="protected" virt="non-virtual"><scope>nest::Connection</scope><name>target_</name></member>
      <member refid="classnest_1_1Connection_1aa1e3449ea1e2ff5f7dd2338bbf3feafe" prot="public" virt="non-virtual"><scope>nest::Connection</scope><name>trigger_update_weight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
