<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classForall__aFunction" kind="class" language="C++" prot="public">
    <compoundname>Forall_aFunction</compoundname>
    <basecompoundref refid="classSLIFunction" prot="public" virt="non-virtual">SLIFunction</basecompoundref>
    <includes refid="slicontrol_8h" local="no">slicontrol.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classForall__aFunction_1a8b718a002c2d567c166ec789a2d27a82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Forall_aFunction::Forall_aFunction</definition>
        <argsstring>()</argsstring>
        <name>Forall_aFunction</name>
        <qualifiedname>Forall_aFunction::Forall_aFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/slicontrol.h" line="250" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/slicontrol.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classForall__aFunction_1a2c5428ef925360bf22b41ac1aff70682" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Forall_aFunction::execute</definition>
        <argsstring>(SLIInterpreter *) const override</argsstring>
        <name>execute</name>
        <qualifiedname>Forall_aFunction::execute</qualifiedname>
        <reimplements refid="classSLIFunction_1abb5b37eaff928b43534627ed6f668e7d">execute</reimplements>
        <param>
          <type><ref refid="classSLIInterpreter" kindref="compound">SLIInterpreter</ref> *</type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>@BeginDocumentation <ref refid="className" kindref="compound">Name</ref>: forall - Call a procedure for each element of a list/string/dictionary </para>
        </briefdescription>
        <detaileddescription>
<para>Synopsis: [v1 ... vn] {f} forall -&gt; f(v1) ... f(vn) (c1...cn) {f} forall -&gt; f(c1) ... f(cn) &lt;&lt;/key1 val1 ... /keyn valn&gt;&gt; {f} forall -&gt; f(/key1 val1) ... f(/keyn valn)</para>
<para>Parameters: [v1,...,vn] - list of n arbitrary objects (c1...cn) - arbitrary string &lt;&lt;/keyi&gt;&gt; - arbitrary dictionary {f} - function which can operate on the elements of the array, or on key/value pairs of the dictionary. f is not required to return a specific number of values.</para>
<para>Description: Arrays: For each element of the input array, forall calls f. forall is similar to Map, however, it does not construct a new list from the return values.</para>
<para>Dictionaries: For each key/value pair of the dictionary, forall calls f. Order on the operand stack will be: key, value. (I.e. value on top.)</para>
<para>Note: The dictionary contents are copied before operation. This can be a potentially expensive operation.*</para>
<para>Loops can be nested. The loop can be quit prematurely with exit.</para>
<para>Examples: [1 2 3 4 5] {=} forall -&gt; - % Print all values of the list [1 2 3 4 5] {} forall -&gt; 1 2 3 4 5 (abc) {=} forall -&gt; prints 97 98 99 on separate lines &lt;&lt;/a 1 /b 2&gt;&gt; {== ==} forall -&gt; prints 1 /a 2 /b on separate lines</para>
<para>Author: Marc-Oliver Gewaltig, Ruediger Kupper (dictionary variant)</para>
<para>References: The Red Book</para>
<para>SeeAlso: Map, MapAt, MapIndexed, Table, forallindexed, NestList, FoldList, Fold, exit </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/slicontrol.h" line="253" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/slicontrol.cc" bodystart="972" bodyend="990"/>
        <references refid="classSLIInterpreter_1a96c3eff127bf8a56860f05ff199cb6ff" compoundref="interpret_8cc" startline="311" endline="314">SLIInterpreter::baselookup</references>
        <references refid="classToken_1a309bb2d7f89471b3aa7ca63cfbde65e4" compoundref="token_8h" startline="360" endline="364">Token::datum</references>
        <references refid="classSLIInterpreter_1a3fe2d135bbae0ac57317ff6db9e39055" compoundref="interpret_8h" startline="251">SLIInterpreter::EStack</references>
        <references refid="classSLIInterpreter_1ab7e09e5f4839123f67c1dddaad003cd0" compoundref="interpret_8h" startline="114">SLIInterpreter::iforallarray_name</references>
        <references refid="classSLIInterpreter_1a29a1dfe19e4620ae85beeeff6b4f6b87" compoundref="interpret_8h" startline="355" endline="358">SLIInterpreter::inc_call_depth</references>
        <references refid="classSLIInterpreter_1afe0e3fe443a8fa59dfaf31a4a5f46526" compoundref="interpret_8h" startline="130">SLIInterpreter::mark_name</references>
        <references refid="classSLIInterpreter_1ab50b50d10259d50fd78939273af5e4f5" compoundref="interpret_8h" startline="250">SLIInterpreter::OStack</references>
        <references refid="classTokenStack_1ac861cc2282484dd2a27dd1304aa719a4" compoundref="tokenstack_8h" startline="127" endline="130">TokenStack::pick</references>
        <references refid="classTokenStack_1a759f4b3c1c8955ab6f236de28a7f1cc0" compoundref="tokenstack_8h" startline="96" endline="99">TokenStack::pop</references>
        <references refid="classTokenStack_1a75a8af662288b54a64d5185c90401dec" compoundref="tokenstack_8h" startline="90" endline="93">TokenStack::push_by_pointer</references>
        <references refid="classTokenStack_1a93b45dc84823374ce277c972e41e8769" compoundref="tokenstack_8h" startline="79" endline="82">TokenStack::push_by_ref</references>
        <references refid="classTokenStack_1a9d3b72926bfa2090389f0782cd2b6e76" compoundref="tokenstack_8h" startline="68" endline="71">TokenStack::push_move</references>
        <references refid="classTokenStack_1a25006b53032030f38d6512076ee70abf" compoundref="tokenstack_8h" startline="116" endline="119">TokenStack::top</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Forall_aFunction</label>
        <link refid="classForall__aFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Forall_aFunction</label>
        <link refid="classForall__aFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/slicontrol.h" line="247" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/slicontrol.h" bodystart="248" bodyend="254"/>
    <listofallmembers>
      <member refid="classSLIFunction_1a68fd2ac46dd904673f3a8c96009221ba" prot="public" virt="virtual"><scope>Forall_aFunction</scope><name>backtrace</name></member>
      <member refid="classForall__aFunction_1a2c5428ef925360bf22b41ac1aff70682" prot="public" virt="virtual"><scope>Forall_aFunction</scope><name>execute</name></member>
      <member refid="classForall__aFunction_1a8b718a002c2d567c166ec789a2d27a82" prot="public" virt="non-virtual"><scope>Forall_aFunction</scope><name>Forall_aFunction</name></member>
      <member refid="classSLIFunction_1a3c4393dfc6f80af057a81d34a1a8bbad" prot="public" virt="non-virtual"><scope>Forall_aFunction</scope><name>SLIFunction</name></member>
      <member refid="classSLIFunction_1a1d35138a5956abbaf4a57d051bcb397b" prot="public" virt="virtual"><scope>Forall_aFunction</scope><name>~SLIFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
