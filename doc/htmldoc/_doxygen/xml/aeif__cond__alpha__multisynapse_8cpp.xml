<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="aeif__cond__alpha__multisynapse_8cpp" kind="file" language="C++">
    <compoundname>aeif_cond_alpha_multisynapse.cpp</compoundname>
    <includes refid="aeif__cond__alpha__multisynapse_8h" local="yes">aeif_cond_alpha_multisynapse.h</includes>
    <incdepgraph>
      <node id="1">
        <label>aeif_cond_alpha_multisynapse.cpp</label>
        <link refid="aeif__cond__alpha__multisynapse_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>aeif_cond_alpha_multisynapse.h</label>
        <link refid="aeif__cond__alpha__multisynapse_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
      <node id="4">
        <label>sstream</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>aeif_cond_alpha_multisynapse.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="aeif__cond__alpha__multisynapse_8h" kindref="compound">aeif_cond_alpha_multisynapse.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>libnestutil:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__util_8h" kindref="compound">dict_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="numerics_8h" kindref="compound">numerics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exceptions_8h" kindref="compound">exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="universal__data__logger__impl_8h" kindref="compound">universal_data_logger_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dictutils_8h" kindref="compound">dictutils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenest" kindref="compound">nest</ref><sp/></highlight><highlight class="comment">//<sp/>template<sp/>specialization<sp/>must<sp/>be<sp/>placed<sp/>in<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>Recordables<sp/>map</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Override<sp/>the<sp/>create()<sp/>method<sp/>with<sp/>one<sp/>call<sp/>to<sp/>RecordablesMap::insert_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>quantity<sp/>to<sp/>be<sp/>recorded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classnest_1_1DynamicRecordablesMap_1a80653a37ed5c4f8ed7fe75af9a460157" kindref="member">DynamicRecordablesMap&lt; aeif_cond_alpha_multisynapse &gt;::create</ref>(<sp/>aeif_cond_alpha_multisynapse&amp;<sp/>host<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>standard<sp/>names<sp/>wherever<sp/>you<sp/>can<sp/>for<sp/>consistency!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>insert(<sp/><ref refid="namespacenest_1_1names_1ad28257953ae69bacdb5139d473aa0cbd" kindref="member">names::V_m</ref>,<sp/>host.get_data_access_functor(<sp/>aeif_cond_alpha_multisynapse::State_::V_M<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>insert(<sp/><ref refid="namespacenest_1_1names_1a0403fad5d4aa9101601ac972ae0f8dce" kindref="member">names::w</ref>,<sp/>host.get_data_access_functor(<sp/>aeif_cond_alpha_multisynapse::State_::W<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>host.insert_conductance_recordables();</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="className" kindref="compound">Name</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal">aeif_cond_alpha_multisynapse::get_g_receptor_name(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>receptor<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>receptor_name;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>receptor_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;g_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>receptor<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/>receptor_name.str()<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">aeif_cond_alpha_multisynapse::insert_conductance_recordables(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>receptor<sp/>=<sp/>first;<sp/>receptor<sp/>&lt;<sp/>P_.E_rev.size();<sp/>++receptor<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem<sp/>=<sp/>aeif_cond_alpha_multisynapse::State_::G</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>receptor<sp/>*<sp/>aeif_cond_alpha_multisynapse::State_::NUM_STATE_ELEMENTS_PER_RECEPTOR;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>recordablesMap_.insert(<sp/>get_g_receptor_name(<sp/>receptor<sp/>),<sp/>this-&gt;get_data_access_functor(<sp/>elem<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">DataAccessFunctor&lt;<sp/>aeif_cond_alpha_multisynapse<sp/>&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">aeif_cond_alpha_multisynapse::get_data_access_functor(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem<sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataAccessFunctor&lt;<sp/>aeif_cond_alpha_multisynapse<sp/>&gt;(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>elem<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>Right-hand<sp/>side<sp/>function</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">aeif_cond_alpha_multisynapse_dynamics(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pnode<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>y[]<sp/>is<sp/>the<sp/>state<sp/>vector<sp/>supplied<sp/>by<sp/>the<sp/>integrator,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>the<sp/>state<sp/>vector<sp/>in<sp/>the<sp/>node,<sp/>node.S_.y[].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>nest::aeif_cond_alpha_multisynapse::State_<sp/><ref refid="namespacenest_1_1names_1a1a3fb0a6a989ea3f36383767030bd54c" kindref="member">S</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>access<sp/>to<sp/>node<sp/>so<sp/>we<sp/>can<sp/>almost<sp/>work<sp/>as<sp/>in<sp/>a<sp/>member<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>assert(<sp/>pnode<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nest::aeif_cond_alpha_multisynapse&amp;<sp/>node<sp/>=</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/>nest::aeif_cond_alpha_multisynapse*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pnode<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref><sp/>=<sp/>node.S_.r_<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>membrane<sp/>potential<sp/>to<sp/>V_reset<sp/>while<sp/>refractory,<sp/>otherwise<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>to<sp/>V_peak.<sp/>Do<sp/>not<sp/>use<sp/>V_.V_peak_<sp/>here,<sp/>since<sp/>that<sp/>is<sp/>set<sp/>to<sp/>V_th<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delta_T<sp/>==<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>V<sp/>=<sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref><sp/>?<sp/>node.P_.V_reset_<sp/>:<sp/>std::min(<sp/>y[<sp/>S::V_M<sp/>],<sp/>node.P_.V_peak_<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="namespacenest_1_1names_1a0403fad5d4aa9101601ac972ae0f8dce" kindref="member">w</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::W<sp/>];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I_syn<sp/>=<sp/>-<sp/>sum_k<sp/>g_k<sp/>(V<sp/>-<sp/>E_rev_k).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a7c2c46ae0f0aa02d4f7020dc139c0d09" kindref="member">I_syn</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>node.P_.n_receptors();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>*<sp/>S::NUM_STATE_ELEMENTS_PER_RECEPTOR;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a7c2c46ae0f0aa02d4f7020dc139c0d09" kindref="member">I_syn</ref><sp/>+=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::G<sp/>+<sp/>j<sp/>]<sp/>*<sp/>(<sp/>node.P_.E_rev[<sp/>i<sp/>]<sp/>-<sp/>V<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>I_spike<sp/>=</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>node.P_.Delta_T<sp/>==<sp/>0.<sp/>?<sp/>0<sp/>:<sp/>(<sp/>node.P_.Delta_T<sp/>*<sp/>node.P_.g_L<sp/>*<sp/>std::exp(<sp/>(<sp/>V<sp/>-<sp/>node.P_.V_th<sp/>)<sp/>/<sp/>node.P_.Delta_T<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dv/dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>f[<sp/>S::V_M<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>?<sp/>0</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>(<sp/>-node.P_.g_L<sp/>*<sp/>(<sp/>V<sp/>-<sp/>node.P_.E_L<sp/>)<sp/>+<sp/>I_spike<sp/>+<sp/>I_syn<sp/>-<sp/>w<sp/>+<sp/>node.P_.I_e<sp/>+<sp/>node.B_.I_stim_<sp/>)<sp/>/<sp/>node.P_.C_m;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adaptation<sp/>current<sp/>w.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>f[<sp/>S::W<sp/>]<sp/>=<sp/>(<sp/>node.P_.a<sp/>*<sp/>(<sp/>V<sp/>-<sp/>node.P_.E_L<sp/>)<sp/>-<sp/>w<sp/>)<sp/>/<sp/>node.P_.tau_w;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>node.P_.n_receptors();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>*<sp/>S::NUM_STATE_ELEMENTS_PER_RECEPTOR;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Synaptic<sp/>conductance<sp/>derivative<sp/>dG/dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::DG<sp/>+<sp/>j<sp/>]<sp/>=<sp/>-<ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::DG<sp/>+<sp/>j<sp/>]<sp/>/<sp/>node.P_.tau_syn[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::G<sp/>+<sp/>j<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::DG<sp/>+<sp/>j<sp/>]<sp/>-<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::G<sp/>+<sp/>j<sp/>]<sp/>/<sp/>node.P_.tau_syn[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GSL_SUCCESS;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>Default<sp/>constructors<sp/>defining<sp/>default<sp/>parameters<sp/>and<sp/>state</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">aeif_cond_alpha_multisynapse::Parameters_::Parameters_()</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>:<sp/>V_peak_(<sp/>0.0<sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>,<sp/>V_reset_(<sp/>-60.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>,<sp/>t_ref_(<sp/>0.0<sp/>)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a6a90c30349b856f56b527a2a07521b69" kindref="member">g_L</ref>(<sp/>30.0<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a87c37b74ee8ef5b94a8cf290a29adbde" kindref="member">C_m</ref>(<sp/>281.0<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a8716ae8315df1d512b346b4243e2556d" kindref="member">E_L</ref>(<sp/>-70.6<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1aa5a22edd88abbef254de23534ab29044" kindref="member">Delta_T</ref>(<sp/>2.0<sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1af8ee7f173300d62ec408dbe374b25580" kindref="member">tau_w</ref>(<sp/>144.0<sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1aa689f9c844899d76cc06e33a7a1fa455" kindref="member">a</ref>(<sp/>4.0<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>(<sp/>80.5<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a8785fca1cb39c1bba08243740c7adabc" kindref="member">V_th</ref>(<sp/>-50.4<sp/>)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1ad2f9a37e055291380f3d688c1fd647df" kindref="member">tau_syn</ref>(<sp/>1,<sp/>2.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a3dc9ef32ca192fc15b6e45ee3eb50d2a" kindref="member">E_rev</ref>(<sp/>1,<sp/>0.0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a17aa476db9e655c644567ffca7c7d797" kindref="member">I_e</ref>(<sp/>0.0<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1a8c28540996946a9840dc118eafc94908" kindref="member">gsl_error_tol</ref>(<sp/>1<ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>-6<sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>,<sp/>has_connections_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">aeif_cond_alpha_multisynapse::State_::State_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>:<sp/>y_(<sp/>STATE_VECTOR_MIN_SIZE,<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>,<sp/>r_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>y_[<sp/>0<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_L;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>and<sp/>state<sp/>extractions<sp/>and<sp/>manipulation<sp/>functions</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">aeif_cond_alpha_multisynapse::Parameters_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="182"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::C_m,<sp/>C_m<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_th,<sp/>V_th<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::t_ref,<sp/>t_ref_<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::g_L,<sp/>g_L<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::E_L,<sp/>E_L<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_reset,<sp/>V_reset_<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>d,<sp/>names::n_receptors,<sp/><ref refid="namespacenest_1_1names_1a140a98a85ce92c309aec676a9fd2b9f7" kindref="member">n_receptors</ref>()<sp/>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref><sp/>E_rev_ad(<sp/>E_rev<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref><sp/>tau_syn_ad(<sp/>tau_syn<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>def&lt;<sp/>ArrayDatum<sp/>&gt;(<sp/>d,<sp/>names::E_rev,<sp/>E_rev_ad<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>def&lt;<sp/>ArrayDatum<sp/>&gt;(<sp/>d,<sp/>names::tau_syn,<sp/>tau_syn_ad<sp/>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::a,<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::b,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::Delta_T,<sp/>Delta_T<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau_w,<sp/>tau_w<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::I_e,<sp/>I_e<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_peak,<sp/>V_peak_<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::gsl_error_tol,<sp/>gsl_error_tol<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>def&lt;<sp/>bool<sp/>&gt;(<sp/>d,<sp/>names::has_connections,<sp/>has_connections_<sp/>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">aeif_cond_alpha_multisynapse::Parameters_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,<sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_th,<sp/>V_th,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_peak,<sp/>V_peak_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::t_ref,<sp/>t_ref_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::E_L,<sp/>E_L,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_reset,<sp/>V_reset_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::C_m,<sp/>C_m,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::g_L,<sp/>g_L,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_n_receptors<sp/>=<sp/><ref refid="namespacenest_1_1names_1a140a98a85ce92c309aec676a9fd2b9f7" kindref="member">n_receptors</ref>();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Erev_flag<sp/>=<sp/>updateValue&lt;<sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>,<sp/>names::E_rev,<sp/><ref refid="namespacenest_1_1names_1a3dc9ef32ca192fc15b6e45ee3eb50d2a" kindref="member">E_rev</ref><sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tau_flag<sp/>=<sp/>updateValue&lt;<sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>,<sp/>names::tau_syn,<sp/><ref refid="namespacenest_1_1names_1ad2f9a37e055291380f3d688c1fd647df" kindref="member">tau_syn</ref><sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Erev_flag<sp/>or<sp/>tau_flag<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>receptor<sp/>arrays<sp/>have<sp/>been<sp/>modified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="namespacenest_1_1names_1a3dc9ef32ca192fc15b6e45ee3eb50d2a" kindref="member">E_rev</ref>.size()<sp/>!=<sp/>old_n_receptors<sp/>or<sp/><ref refid="namespacenest_1_1names_1ad2f9a37e055291380f3d688c1fd647df" kindref="member">tau_syn</ref>.size()<sp/>!=<sp/>old_n_receptors<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>(<sp/>not<sp/>Erev_flag<sp/>or<sp/>not<sp/>tau_flag<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;If<sp/>the<sp/>number<sp/>of<sp/>receptor<sp/>ports<sp/>is<sp/>changed,<sp/>both<sp/>arrays<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;E_rev<sp/>and<sp/>tau_syn<sp/>must<sp/>be<sp/>provided.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1a3dc9ef32ca192fc15b6e45ee3eb50d2a" kindref="member">E_rev</ref>.size()<sp/>!=<sp/><ref refid="namespacenest_1_1names_1ad2f9a37e055291380f3d688c1fd647df" kindref="member">tau_syn</ref>.size()<sp/>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>reversal<sp/>potential,<sp/>and<sp/>synaptic<sp/>time<sp/>constant<sp/>arrays<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;must<sp/>have<sp/>the<sp/>same<sp/>size.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ad2f9a37e055291380f3d688c1fd647df" kindref="member">tau_syn</ref>.size()<sp/>&lt;<sp/>old_n_receptors<sp/>and<sp/>has_connections_<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>neuron<sp/>has<sp/>connections,<sp/>therefore<sp/>the<sp/>number<sp/>of<sp/>ports<sp/>cannot<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reduced.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="namespacenest_1_1names_1ad2f9a37e055291380f3d688c1fd647df" kindref="member">tau_syn</ref>.size();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tau_syn[<sp/>i<sp/>]<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>synaptic<sp/>time<sp/>constants<sp/>must<sp/>be<sp/>strictly<sp/>positive&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::a,<sp/>a,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::b,<sp/>b,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::Delta_T,<sp/>Delta_T,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau_w,<sp/>tau_w,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::I_e,<sp/>I_e,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::gsl_error_tol,<sp/>gsl_error_tol,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>V_peak_<sp/>&lt;<sp/>V_th<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;V_peak<sp/>&gt;=<sp/>V_th<sp/>required.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>V_reset_<sp/>&gt;=<sp/>V_peak_<sp/>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Ensure<sp/>that:<sp/>V_reset<sp/>&lt;<sp/>V_peak<sp/>.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Delta_T<sp/>&lt;<sp/>0.<sp/>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Delta_T<sp/>must<sp/>be<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Delta_T<sp/>&gt;<sp/>0.<sp/>)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>possible<sp/>numerical<sp/>overflow<sp/>with<sp/>the<sp/>exponential<sp/>divergence<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spike<sp/>time,<sp/>keep<sp/>a<sp/>1e20<sp/>margin<sp/>for<sp/>the<sp/>subsequent<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_exp_arg<sp/>=<sp/>std::log(<sp/>std::numeric_limits&lt;<sp/>double<sp/>&gt;::max()<sp/>/<sp/>1e20<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>V_peak_<sp/>-<sp/>V_th<sp/>)<sp/>/<sp/>Delta_T<sp/>&gt;=<sp/>max_exp_arg<sp/>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>current<sp/>combination<sp/>of<sp/>V_peak,<sp/>V_th<sp/>and<sp/>Delta_T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;will<sp/>lead<sp/>to<sp/>numerical<sp/>overflow<sp/>at<sp/>spike<sp/>time;<sp/>try&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>instance<sp/>to<sp/>increase<sp/>Delta_T<sp/>or<sp/>to<sp/>reduce<sp/>V_peak&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>avoid<sp/>this<sp/>problem.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>C_m<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Capacitance<sp/>must<sp/>be<sp/>strictly<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t_ref_<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Refractory<sp/>time<sp/>cannot<sp/>be<sp/>negative.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tau_w<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>time<sp/>constants<sp/>must<sp/>be<sp/>strictly<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gsl_error_tol<sp/>&lt;=<sp/>0.<sp/>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>gsl_error_tol<sp/>must<sp/>be<sp/>strictly<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">aeif_cond_alpha_multisynapse::State_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="310"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_m,<sp/>y_[<sp/>V_M<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;*<sp/><ref refid="namespacenest_1_1names_1ac215f6209cf60fc071c5b3f964bd427e" kindref="member">dg</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>double<sp/>&gt;();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;*<sp/><ref refid="namespacenest_1_1names_1aa04d80effd2a6b582167dce3590f50df" kindref="member">g</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>double<sp/>&gt;();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>(<sp/>(<sp/>y_.size()<sp/>-<sp/>State_::NUMBER_OF_FIXED_STATES_ELEMENTS<sp/>)<sp/>/<sp/>State_::NUM_STATE_ELEMENTS_PER_RECEPTOR<sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1ac215f6209cf60fc071c5b3f964bd427e" kindref="member">dg</ref>-&gt;push_back(<sp/>y_[<sp/>State_::DG<sp/>+<sp/>(<sp/>State_::NUM_STATE_ELEMENTS_PER_RECEPTOR<sp/>*<sp/>i<sp/>)<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1aa04d80effd2a6b582167dce3590f50df" kindref="member">g</ref>-&gt;push_back(<sp/>y_[<sp/>State_::G<sp/>+<sp/>(<sp/>State_::NUM_STATE_ELEMENTS_PER_RECEPTOR<sp/>*<sp/>i<sp/>)<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::dg<sp/>]<sp/>=<sp/><ref refid="arraydatum_8h_1a4017529a13c3554e5231690909cdce58" kindref="member">DoubleVectorDatum</ref>(<sp/>dg<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/>names::g<sp/>]<sp/>=<sp/><ref refid="arraydatum_8h_1a4017529a13c3554e5231690909cdce58" kindref="member">DoubleVectorDatum</ref>(<sp/>g<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::w,<sp/>y_[<sp/>W<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">aeif_cond_alpha_multisynapse::State_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,<sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_m,<sp/>y_[<sp/>V_M<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::w,<sp/>y_[<sp/>W<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">aeif_cond_alpha_multisynapse::Buffers_::Buffers_(<sp/>aeif_cond_alpha_multisynapse&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>,<sp/>s_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>,<sp/>c_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>,<sp/>e_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/>Time::get_resolution().get_ms()<sp/>)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>,<sp/>IntegrationStep_(<sp/><ref refid="namespacenest_1_1names_1adc6cdaa5573eabdd77a277277d4b3ffe" kindref="member">std</ref>::<ref refid="namespacenest_1_1names_1a03751e4c523eb80936ee7c4eaa3c0703" kindref="member">min</ref>(<sp/>0.01,<sp/>step_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>,<sp/>I_stim_(<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">aeif_cond_alpha_multisynapse::Buffers_::Buffers_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffers_&amp;<sp/>b,<sp/>aeif_cond_alpha_multisynapse&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>,<sp/>s_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>,<sp/>c_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>,<sp/>e_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>.step_<sp/>)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>,<sp/>IntegrationStep_(<sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>.IntegrationStep_<sp/>)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>,<sp/>I_stim_(<sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>.I_stim_<sp/>)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>Default<sp/>and<sp/>copy<sp/>constructor<sp/>for<sp/>node,<sp/>and<sp/>destructor</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">aeif_cond_alpha_multisynapse::aeif_cond_alpha_multisynapse()</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>:<sp/>ArchivingNode()</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>,<sp/>P_()</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/>P_<sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>recordablesMap_.create(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">aeif_cond_alpha_multisynapse::aeif_cond_alpha_multisynapse(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>aeif_cond_alpha_multisynapse&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>:<sp/>ArchivingNode(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>,<sp/>P_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.P_<sp/>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.S_<sp/>)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.B_,<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>recordablesMap_.create(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">aeif_cond_alpha_multisynapse::~aeif_cond_alpha_multisynapse()</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GSL<sp/>structs<sp/>may<sp/>not<sp/>have<sp/>been<sp/>allocated,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>protect<sp/>destruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.s_<sp/>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_step_free(<sp/>B_.s_<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.c_<sp/>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_control_free(<sp/>B_.c_<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.e_<sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_evolve_free(<sp/>B_.e_<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>Node<sp/>initialization<sp/>functions</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">aeif_cond_alpha_multisynapse::init_buffers_()</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>B_.spikes_.clear();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>includes<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>B_.currents_.clear();<sp/></highlight><highlight class="comment">//<sp/>includes<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>ArchivingNode::clear_history();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>B_.logger_.reset();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>B_.step_<sp/>=<sp/>Time::get_resolution().get_ms();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>integrate<sp/>this<sp/>model<sp/>with<sp/>high-precision<sp/>to<sp/>obtain<sp/>decent<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>B_.IntegrationStep_<sp/>=<sp/>std::min(<sp/>0.01,<sp/>B_.step_<sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>B_.c_<sp/>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.c_<sp/>=<sp/>gsl_odeiv_control_yp_new(<sp/>P_.gsl_error_tol,<sp/>P_.gsl_error_tol<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_control_init(<sp/>B_.c_,<sp/>P_.gsl_error_tol,<sp/>P_.gsl_error_tol,<sp/>0.0,<sp/>1.0<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stepping<sp/>function<sp/>and<sp/>evolution<sp/>function<sp/>are<sp/>allocated<sp/>in<sp/>pre_run_hook()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>B_.sys_.function<sp/>=<sp/>aeif_cond_alpha_multisynapse_dynamics;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>B_.sys_.jacobian<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>B_.sys_.params<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>B_.sys_.dimension<sp/>is<sp/>assigned<sp/>in<sp/>pre_run_hook()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>B_.I_stim_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">aeif_cond_alpha_multisynapse::pre_run_hook()</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensures<sp/>initialization<sp/>in<sp/>case<sp/>mm<sp/>connected<sp/>after<sp/>Simulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>B_.logger_.init();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>V_.g0_.resize(<sp/>P_.n_receptors()<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>g0_<sp/>will<sp/>be<sp/>initialized<sp/>in<sp/>the<sp/>loop<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>P_.n_receptors();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.g0_[<sp/>i<sp/>]<sp/>=<sp/>1.0<sp/>*<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">numerics::e</ref><sp/>/<sp/>P_.tau_syn[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>right<sp/>threshold<sp/>depending<sp/>on<sp/>Delta_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>P_.Delta_T<sp/>&gt;<sp/>0.<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.V_peak<sp/>=<sp/>P_.V_peak_;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.V_peak<sp/>=<sp/>P_.V_th;<sp/></highlight><highlight class="comment">//<sp/>same<sp/>as<sp/>IAF<sp/>dynamics<sp/>for<sp/>spikes<sp/>if<sp/>Delta_T<sp/>==<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>V_.refractory_counts_<sp/>=<sp/>Time(<sp/>Time::ms(<sp/>P_.t_ref_<sp/>)<sp/>).get_steps();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>B_.spikes_.resize(<sp/>P_.n_receptors()<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>S_.y_.resize(</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>State_::NUMBER_OF_FIXED_STATES_ELEMENTS<sp/>+<sp/>(<sp/>State_::NUM_STATE_ELEMENTS_PER_RECEPTOR<sp/>*<sp/>P_.n_receptors()<sp/>),<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reallocate<sp/>instance<sp/>of<sp/>stepping<sp/>function<sp/>for<sp/>ODE<sp/>GSL<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.s_<sp/>)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_step_free(<sp/>B_.s_<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>B_.s_<sp/>=<sp/>gsl_odeiv_step_alloc(<sp/>gsl_odeiv_step_rkf45,<sp/>S_.y_.size()<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reallocate<sp/>instance<sp/>of<sp/>evolution<sp/>function<sp/>for<sp/>ODE<sp/>GSL<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.e_<sp/>)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_evolve_free(<sp/>B_.e_<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>B_.e_<sp/>=<sp/>gsl_odeiv_evolve_alloc(<sp/>S_.y_.size()<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>B_.sys_.dimension<sp/>=<sp/>S_.y_.size();</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>Update<sp/>and<sp/>spike<sp/>handling<sp/>functions</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">aeif_cond_alpha_multisynapse::update(<sp/>Time<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to<sp/>)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>assert(<sp/>to<sp/>&gt;=<sp/>0<sp/>and<sp/>(<sp/>delay<sp/>)<sp/>from<sp/>&lt;<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay()<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>assert(<sp/>from<sp/>&lt;<sp/>to<sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>assert(<sp/>State_::V_M<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lag<sp/>=<sp/>from;<sp/>lag<sp/>&lt;<sp/>to;<sp/>++lag<sp/>)<sp/></highlight><highlight class="comment">//<sp/>proceed<sp/>by<sp/>stepsize<sp/>B_.step_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">//<sp/>internal<sp/>time<sp/>of<sp/>the<sp/>integration<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numerical<sp/>integration<sp/>with<sp/>adaptive<sp/>step<sp/>size<sp/>control:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gsl_odeiv_evolve_apply<sp/>performs<sp/>only<sp/>a<sp/>single<sp/>numerical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>integration<sp/>step,<sp/>starting<sp/>from<sp/>t<sp/>and<sp/>bounded<sp/>by<sp/>step;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>while-loop<sp/>ensures<sp/>integration<sp/>over<sp/>the<sp/>whole<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>(0,<sp/>step]<sp/>if<sp/>more<sp/>than<sp/>one<sp/>integration<sp/>step<sp/>is<sp/>needed<sp/>due</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>small<sp/>integration<sp/>step<sp/>size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>(t+IntegrationStep<sp/>&gt;<sp/>step)<sp/>leads<sp/>to<sp/>integration<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(t,<sp/>step]<sp/>and<sp/>afterwards<sp/>setting<sp/>t<sp/>to<sp/>step,<sp/>but<sp/>it<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enforce<sp/>setting<sp/>IntegrationStep<sp/>to<sp/>step-t;<sp/>this<sp/>is<sp/>of<sp/>advantage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>consistent<sp/>and<sp/>efficient<sp/>integration<sp/>across<sp/>subsequent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simulation<sp/>intervals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>&lt;<sp/>B_.step_<sp/>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>gsl_odeiv_evolve_apply(<sp/>B_.e_,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.c_,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.s_,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;B_.sys_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>of<sp/>ODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.step_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>t<sp/>&lt;=<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;B_.IntegrationStep_,<sp/></highlight><highlight class="comment">//<sp/>integration<sp/>step<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;S_.y_[<sp/>0<sp/>]<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>neuronal<sp/>state<sp/>converted<sp/>to<sp/>double[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>!=<sp/>GSL_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>GSLSolverFailure(<sp/>get_name(),<sp/>status<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>unreasonable<sp/>values;<sp/>we<sp/>allow<sp/>V_M<sp/>to<sp/>explode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>&lt;<sp/>-1e3<sp/>or<sp/>S_.y_[<sp/>State_::W<sp/>]<sp/>&lt;<sp/>-1e6<sp/>or<sp/>S_.y_[<sp/>State_::W<sp/>]<sp/>&gt;<sp/>1e6<sp/>)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>NumericalInstability(<sp/>get_name()<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.r_<sp/>&gt;<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>neuron<sp/>is<sp/>still<sp/>in<sp/>refractory<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>=<sp/>P_.V_reset_;<sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>it<sp/>to<sp/>V_reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>&gt;=<sp/>V_.V_peak<sp/>)<sp/></highlight><highlight class="comment">//<sp/>V_m<sp/>&gt;=<sp/>V_peak:<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>=<sp/>P_.V_reset_;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/>State_::W<sp/>]<sp/>+=<sp/>P_.b;<sp/></highlight><highlight class="comment">//<sp/>spike-driven<sp/>adaptation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>refractory<sp/>step<sp/>counter.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>We<sp/>need<sp/>to<sp/>add<sp/>1<sp/>to<sp/>compensate<sp/>for<sp/>count-down<sp/>immediately<sp/>after</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>while<sp/>loop.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>If<sp/>neuron<sp/>has<sp/>no<sp/>refractory<sp/>time,<sp/>set<sp/>to<sp/>0<sp/>to<sp/>avoid<sp/>refractory</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>artifact<sp/>inside<sp/>while<sp/>loop.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_.r_<sp/>=<sp/>V_.refractory_counts_<sp/>&gt;<sp/>0<sp/>?<sp/>V_.refractory_counts_<sp/>+<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_spiketime(<sp/>Time::step(<sp/><ref refid="namespacenest_1_1names_1a6448c21f7fb2a2b838e803d3fa965fc7" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>+<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpikeEvent<sp/>se;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.send(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>se,<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.r_<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--S_.r_;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>P_.n_receptors();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/>State_::DG<sp/>+<sp/>(<sp/>State_::NUM_STATE_ELEMENTS_PER_RECEPTOR<sp/>*<sp/>i<sp/>)<sp/>]<sp/>+=</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.spikes_[<sp/>i<sp/>].get_value(<sp/>lag<sp/>)<sp/>*<sp/>V_.g0_[<sp/>i<sp/>];<sp/></highlight><highlight class="comment">//<sp/>add<sp/>incoming<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>input<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.I_stim_<sp/>=<sp/>B_.currents_.get_value(<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>state<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.logger_.record_data(<sp/><ref refid="namespacenest_1_1names_1a6448c21f7fb2a2b838e803d3fa965fc7" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>for-loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></highlight></codeline>
<codeline lineno="573"><highlight class="normal">aeif_cond_alpha_multisynapse::handles_test_event(<sp/>SpikeEvent&amp;,<sp/>rport<sp/>receptor_type<sp/>)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>receptor_type<sp/>&lt;=<sp/>0<sp/>or<sp/>receptor_type<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>P_.n_receptors()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>IncompatibleReceptorType(<sp/>receptor_type,<sp/>get_name(),<sp/></highlight><highlight class="stringliteral">&quot;SpikeEvent&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>P_.has_connections_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a1a3db5f8f8132d9450c58ae90c7fe89a" kindref="member">receptor_type</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">aeif_cond_alpha_multisynapse::handle(<sp/>SpikeEvent&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_weight()<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Synaptic<sp/>weights<sp/>for<sp/>conductance-based<sp/>multisynapse<sp/>models<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>assert(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_delay_steps()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>assert(<sp/>(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>&gt;<sp/>0<sp/>)<sp/>and<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>&lt;=<sp/>P_.n_receptors()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>B_.spikes_[<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>-<sp/>1<sp/>].add_value(</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rel_delivery_steps(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_slice_origin()<sp/>),<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_weight()<sp/>*<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_multiplicity()<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">aeif_cond_alpha_multisynapse::handle(<sp/>CurrentEvent&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>assert(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_delay_steps()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a87ba3cd2bbdd887c7fbddbbca2731a68" kindref="member">I</ref><sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_current();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a0403fad5d4aa9101601ac972ae0f8dce" kindref="member">w</ref><sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_weight();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>weighted<sp/>current;<sp/>HEP<sp/>2002-10-04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>B_.currents_.add_value(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rel_delivery_steps(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_slice_origin()<sp/>),<sp/>w<sp/>*<sp/>I<sp/>);</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">aeif_cond_alpha_multisynapse::handle(<sp/>DataLoggingRequest&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>B_.logger_.handle(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">aeif_cond_alpha_multisynapse::set_status(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>Parameters_<sp/>ptmp<sp/>=<sp/>P_;<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy<sp/>in<sp/>case<sp/>of<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>ptmp.set(<sp/>d,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throws<sp/>if<sp/>BadProperty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>State_<sp/>stmp<sp/>=<sp/>S_;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy<sp/>in<sp/>case<sp/>of<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>stmp.set(<sp/>d,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throws<sp/>if<sp/>BadProperty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>now<sp/>know<sp/>that<sp/>(ptmp,<sp/>stmp)<sp/>are<sp/>consistent.<sp/>We<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>them<sp/>back<sp/>to<sp/>(P_,<sp/>S_)<sp/>before<sp/>we<sp/>are<sp/>also<sp/>sure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>properties<sp/>to<sp/>be<sp/>set<sp/>in<sp/>the<sp/>parent<sp/>class<sp/>are<sp/>internally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>consistent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>ArchivingNode::set_status(<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Here<sp/>is<sp/>where<sp/>we<sp/>must<sp/>update<sp/>the<sp/>recordablesMap_<sp/>if<sp/>new<sp/>receptors</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/>*<sp/>are<sp/>added!</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ptmp.E_rev.size()<sp/>&gt;<sp/>P_.E_rev.size()<sp/>)<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>receptors<sp/>increased</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>receptor<sp/>=<sp/>P_.E_rev.size();<sp/>receptor<sp/>&lt;<sp/>ptmp.E_rev.size();<sp/>++receptor<sp/>)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem<sp/>=<sp/>aeif_cond_alpha_multisynapse::State_::G</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>receptor<sp/>*<sp/>aeif_cond_alpha_multisynapse::State_::NUM_STATE_ELEMENTS_PER_RECEPTOR;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recordablesMap_.insert(<sp/>get_g_receptor_name(<sp/>receptor<sp/>),<sp/>get_data_access_functor(<sp/>elem<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ptmp.E_rev.size()<sp/>&lt;<sp/>P_.E_rev.size()<sp/>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>receptors<sp/>decreased</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>receptor<sp/>=<sp/>ptmp.E_rev.size();<sp/>receptor<sp/>&lt;<sp/>P_.E_rev.size();<sp/>++receptor<sp/>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recordablesMap_.erase(<sp/>get_g_receptor_name(<sp/>receptor<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>get<sp/>here,<sp/>temporaries<sp/>contain<sp/>consistent<sp/>set<sp/>of<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>P_<sp/>=<sp/>ptmp;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>S_<sp/>=<sp/>stmp;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/aeif_cond_alpha_multisynapse.cpp"/>
  </compounddef>
</doxygen>
