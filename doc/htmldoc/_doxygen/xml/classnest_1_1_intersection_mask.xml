<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_intersection_mask" kind="class" language="C++" prot="public">
    <compoundname>nest::IntersectionMask</compoundname>
    <basecompoundref refid="classnest_1_1_mask" prot="public" virt="non-virtual">nest::Mask&lt; D &gt;</basecompoundref>
    <includes refid="mask_8h" local="no">mask.h</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>D</declname>
        <defname>D</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_intersection_mask_1a325c7e87b4074938ea1f5f6aa4101aec" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>Mask&lt; D &gt;* nest::IntersectionMask&lt; D &gt;::mask1_</definition>
        <argsstring></argsstring>
        <name>mask1_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="534" column="7" bodyfile="nestkernel/mask.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_intersection_mask_1a9d926e998b1bba75567686c19c3e405a" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>Mask&lt; D &gt; * nest::IntersectionMask&lt; D &gt;::mask2_</definition>
        <argsstring></argsstring>
        <name>mask2_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="534" column="14" bodyfile="nestkernel/mask.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1ac1a16a0244fa48407116c782b13ef9b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::IntersectionMask&lt; D &gt;::IntersectionMask</definition>
        <argsstring>(const Mask&lt; D &gt; &amp;m1, const Mask&lt; D &gt; &amp;m2)</argsstring>
        <name>IntersectionMask</name>
        <param>
          <type>const <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the intersection of the two given masks. Copies are made of the supplied <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="501" column="3" bodyfile="nestkernel/mask.h" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1a304c5ac38e8c4e03e62a7b2f0ef71f48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::IntersectionMask&lt; D &gt;::IntersectionMask</definition>
        <argsstring>(const IntersectionMask &amp;m)</argsstring>
        <name>IntersectionMask</name>
        <param>
          <type>const <ref refid="classnest_1_1_intersection_mask" kindref="compound">IntersectionMask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="510" column="3" bodyfile="nestkernel/mask.h" bodystart="510" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1a961a4a7684a21e9aeb80ad87ef14175d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::IntersectionMask&lt; D &gt;::~IntersectionMask</definition>
        <argsstring>()</argsstring>
        <name>~IntersectionMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="517" column="3" bodyfile="nestkernel/mask.h" bodystart="517" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1af98ed3b6f15fa235730b261d3912963b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::IntersectionMask&lt; D &gt;::inside</definition>
        <argsstring>(const Position&lt; D &gt; &amp;p) const</argsstring>
        <name>inside</name>
        <reimplements refid="classnest_1_1_mask_1a43d1949f739d9bc932e2aadb25d573de">inside</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if point is inside mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="523" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1ad7c29ac3f2faf7dd0ba04bce7d357b73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::IntersectionMask&lt; D &gt;::inside</definition>
        <argsstring>(const Box&lt; D &gt; &amp;b) const</argsstring>
        <name>inside</name>
        <reimplements refid="classnest_1_1_mask_1a4ca07f89ca3d3139c2903137a642c114">inside</reimplements>
        <param>
          <type>const <ref refid="structnest_1_1_box" kindref="compound">Box</ref>&lt; D &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the whole box is inside the mask. </para>
</simplesect>
<simplesect kind="note"><para>a return value of false is not a guarantee that the whole box is not inside the mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="525" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1a9edbc98ac29ff15842141a0b7fd0f0d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::IntersectionMask&lt; D &gt;::outside</definition>
        <argsstring>(const Box&lt; D &gt; &amp;b) const</argsstring>
        <name>outside</name>
        <reimplements refid="classnest_1_1_mask_1a7b0e35f7bed34d2b143d322caad7b40d">outside</reimplements>
        <param>
          <type>const <ref refid="structnest_1_1_box" kindref="compound">Box</ref>&lt; D &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the whole box is outside the mask. </para>
</simplesect>
<simplesect kind="note"><para>a return value of false is not a guarantee that the whole box is not outside the mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="527" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1a3093a52d626ca1b8363b8124b4299153" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structnest_1_1_box" kindref="compound">Box</ref>&lt; D &gt;</type>
        <definition>Box&lt; D &gt; nest::IntersectionMask&lt; D &gt;::get_bbox</definition>
        <argsstring>() const</argsstring>
        <name>get_bbox</name>
        <reimplements refid="classnest_1_1_mask_1a5762fcaec01449570b208b4de6923295">get_bbox</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The whole mask is inside (i.e., false everywhere outside) the bounding box. <simplesect kind="return"><para>bounding box </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="529" column="7" bodyfile="nestkernel/mask_impl.h" bodystart="324" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_intersection_mask_1a7d1bfde8434919e8cbf00d180550364b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>Mask&lt; D &gt; * nest::IntersectionMask&lt; D &gt;::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classnest_1_1_mask_1a9d7b816374204f095198b9f949aebd78">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone method. <simplesect kind="return"><para>dynamically allocated copy of mask object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="531" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="344" bodyend="347"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref> combining two masks with a Boolean AND, the intersection. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::IntersectionMask&lt; D &gt;</label>
        <link refid="classnest_1_1_intersection_mask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::AbstractMask</label>
        <link refid="classnest_1_1_abstract_mask"/>
      </node>
      <node id="2">
        <label>nest::Mask&lt; D &gt;</label>
        <link refid="classnest_1_1_mask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::IntersectionMask&lt; D &gt;</label>
        <link refid="classnest_1_1_intersection_mask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::AbstractMask</label>
        <link refid="classnest_1_1_abstract_mask"/>
      </node>
      <node id="2">
        <label>nest::Mask&lt; D &gt;</label>
        <link refid="classnest_1_1_mask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/mask.h" line="492" column="1" bodyfile="nestkernel/mask.h" bodystart="493" bodyend="535"/>
    <listofallmembers>
      <member refid="classnest_1_1_intersection_mask_1a7d1bfde8434919e8cbf00d180550364b" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>clone</name></member>
      <member refid="classnest_1_1_intersection_mask_1a3093a52d626ca1b8363b8124b4299153" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>get_bbox</name></member>
      <member refid="classnest_1_1_abstract_mask_1afaa2c932fb8581e1417eddc784754a94" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>get_dict</name></member>
      <member refid="classnest_1_1_intersection_mask_1af98ed3b6f15fa235730b261d3912963b" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_intersection_mask_1ad7c29ac3f2faf7dd0ba04bce7d357b73" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_mask_1a8f5f7b1b18f31e4a927705b536c05a72" prot="public" virt="virtual" ambiguityscope="nest::Mask::"><scope>nest::IntersectionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_mask_1a20df18bae0e8e78e06c68b6654f1ca8c" prot="public" virt="non-virtual" ambiguityscope="nest::Mask::"><scope>nest::IntersectionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_mask_1a26c865ca83050e6dff23c56ef880f702" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>intersect_mask</name></member>
      <member refid="classnest_1_1_intersection_mask_1ac1a16a0244fa48407116c782b13ef9b9" prot="public" virt="non-virtual"><scope>nest::IntersectionMask</scope><name>IntersectionMask</name></member>
      <member refid="classnest_1_1_intersection_mask_1a304c5ac38e8c4e03e62a7b2f0ef71f48" prot="public" virt="non-virtual"><scope>nest::IntersectionMask</scope><name>IntersectionMask</name></member>
      <member refid="classnest_1_1_intersection_mask_1a325c7e87b4074938ea1f5f6aa4101aec" prot="protected" virt="non-virtual"><scope>nest::IntersectionMask</scope><name>mask1_</name></member>
      <member refid="classnest_1_1_intersection_mask_1a9d926e998b1bba75567686c19c3e405a" prot="protected" virt="non-virtual"><scope>nest::IntersectionMask</scope><name>mask2_</name></member>
      <member refid="classnest_1_1_mask_1ac19b409451836f97eeb0c884009ef6a2" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>minus_mask</name></member>
      <member refid="classnest_1_1_intersection_mask_1a9edbc98ac29ff15842141a0b7fd0f0d4" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>outside</name></member>
      <member refid="classnest_1_1_mask_1ae6318d1bdb788014d3ab08b25c8cc240" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>union_mask</name></member>
      <member refid="classnest_1_1_abstract_mask_1a5933f9f222c335b21f90ef55c1caa430" prot="public" virt="virtual"><scope>nest::IntersectionMask</scope><name>~AbstractMask</name></member>
      <member refid="classnest_1_1_intersection_mask_1a961a4a7684a21e9aeb80ad87ef14175d" prot="public" virt="non-virtual"><scope>nest::IntersectionMask</scope><name>~IntersectionMask</name></member>
      <member refid="classnest_1_1_mask_1a4361fce7b927c7b0f8f4f7e1384bb00f" prot="public" virt="non-virtual"><scope>nest::IntersectionMask</scope><name>~Mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
