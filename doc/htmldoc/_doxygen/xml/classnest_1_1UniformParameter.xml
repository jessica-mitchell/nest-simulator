<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1UniformParameter" kind="class" language="C++" prot="public">
    <compoundname>nest::UniformParameter</compoundname>
    <basecompoundref refid="classnest_1_1Parameter" prot="public" virt="non-virtual">nest::Parameter</basecompoundref>
    <includes refid="parameter_8h" local="no">parameter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1UniformParameter_1a4b3b890ba286326deb58866ccae8eda5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::UniformParameter::lower_</definition>
        <argsstring></argsstring>
        <name>lower_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="210" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="210" bodyend="-1"/>
        <referencedby refid="classnest_1_1UniformParameter_1a422df014dce0071d0c62e421c713cff6" compoundref="parameter_8h" startline="187" endline="201">UniformParameter</referencedby>
        <referencedby refid="classnest_1_1UniformParameter_1a4602c970da96d8f096dbc5744be13505" compoundref="parameter_8h" startline="204" endline="207">value</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1UniformParameter_1a3b019dee9e41f2550d71b25283c2bbb6" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::UniformParameter::range_</definition>
        <argsstring></argsstring>
        <name>range_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="210" column="17" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="210" bodyend="-1"/>
        <referencedby refid="classnest_1_1UniformParameter_1a422df014dce0071d0c62e421c713cff6" compoundref="parameter_8h" startline="187" endline="201">UniformParameter</referencedby>
        <referencedby refid="classnest_1_1UniformParameter_1a4602c970da96d8f096dbc5744be13505" compoundref="parameter_8h" startline="204" endline="207">value</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1UniformParameter_1a422df014dce0071d0c62e421c713cff6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UniformParameter::UniformParameter</definition>
        <argsstring>(const DictionaryDatum &amp;d)</argsstring>
        <name>UniformParameter</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classnest_1_1UniformParameter" kindref="compound">UniformParameter</ref> with specifications specified in a dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dictionary with parameter specifications</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The dictionary can include the following entries: min - minimum value max - maximum value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="187" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="187" bodyend="201"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="classnest_1_1UniformParameter_1a4b3b890ba286326deb58866ccae8eda5" compoundref="parameter_8h" startline="210">lower_</references>
        <references refid="namespacenest_1_1names_1a9426cabb2c0dd92562f8a017eecef730">nest::names::max</references>
        <references refid="namespacenest_1_1names_1a9e18240ceefb12b7db55fc1ce75582e6">nest::names::min</references>
        <references refid="classnest_1_1UniformParameter_1a3b019dee9e41f2550d71b25283c2bbb6" compoundref="parameter_8h" startline="210">range_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1UniformParameter_1a4602c970da96d8f096dbc5744be13505" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::UniformParameter::value</definition>
        <argsstring>(RngPtr rng, Node *) override</argsstring>
        <name>value</name>
        <reimplements refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplements>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when getting a parameter value based on random values or node attributes, like position. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the node, used when the node position is relevant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="204" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="204" bodyend="207"/>
        <references refid="classnest_1_1BaseRandomGenerator_1ac9f238412d989640ad55a82e8d9e3a45">nest::BaseRandomGenerator::drand</references>
        <references refid="classnest_1_1UniformParameter_1a4b3b890ba286326deb58866ccae8eda5" compoundref="parameter_8h" startline="210">lower_</references>
        <references refid="classnest_1_1UniformParameter_1a3b019dee9e41f2550d71b25283c2bbb6" compoundref="parameter_8h" startline="210">range_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1UniformParameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>virtual double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, Node *node)=0</argsstring>
        <name>value</name>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when getting a parameter value based on random values or node attributes, like position. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the node, used when the node position is relevant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="177" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1UniformParameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, const std::vector&lt; double &gt; &amp;source_pos, const std::vector&lt; double &gt; &amp;target_pos, const AbstractLayer &amp;layer, Node *node)</argsstring>
        <name>value</name>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>source_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>target_pos</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1AbstractLayer" kindref="compound">AbstractLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when connecting spatial nodes. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the target node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>spatial layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>target node, required for normal and lognormal parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="177" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1453" bodyend="1460"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Random parameter with uniform distribution in [min,max). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1Parameter"/>
      </node>
      <node id="1">
        <label>nest::UniformParameter</label>
        <link refid="classnest_1_1UniformParameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1Parameter"/>
      </node>
      <node id="1">
        <label>nest::UniformParameter</label>
        <link refid="classnest_1_1UniformParameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="174" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="175" bodyend="211"/>
    <listofallmembers>
      <member refid="classnest_1_1Parameter_1a73d93795275bcb0ba6e59761ab52c928" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>apply</name></member>
      <member refid="classnest_1_1Parameter_1a73aaebb7863ec82e848463497631bd88" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>is_spatial</name></member>
      <member refid="classnest_1_1Parameter_1ac20be9081c515b43cc92c7964d316902" prot="protected" virt="non-virtual"><scope>nest::UniformParameter</scope><name>is_spatial_</name></member>
      <member refid="classnest_1_1UniformParameter_1a4b3b890ba286326deb58866ccae8eda5" prot="private" virt="non-virtual"><scope>nest::UniformParameter</scope><name>lower_</name></member>
      <member refid="classnest_1_1Parameter_1a795d9e3c2ef8e4b2f272377807dc4817" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1Parameter_1a7c451c0b857c87c3df9c2b2340851556" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1UniformParameter_1a3b019dee9e41f2550d71b25283c2bbb6" prot="private" virt="non-virtual"><scope>nest::UniformParameter</scope><name>range_</name></member>
      <member refid="classnest_1_1Parameter_1ae333502a77312fc1ba9dcfdd27fc762a" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>returns_int_only</name></member>
      <member refid="classnest_1_1Parameter_1ad3e746702f48606b0b18a86188ff3350" prot="protected" virt="non-virtual"><scope>nest::UniformParameter</scope><name>returns_int_only_</name></member>
      <member refid="classnest_1_1UniformParameter_1a422df014dce0071d0c62e421c713cff6" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>UniformParameter</name></member>
      <member refid="classnest_1_1UniformParameter_1a4602c970da96d8f096dbc5744be13505" prot="public" virt="virtual"><scope>nest::UniformParameter</scope><name>value</name></member>
      <member refid="classnest_1_1UniformParameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>value</name></member>
      <member refid="classnest_1_1UniformParameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" virt="non-virtual"><scope>nest::UniformParameter</scope><name>value</name></member>
      <member refid="classnest_1_1Parameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" virt="virtual" ambiguityscope="nest::Parameter::"><scope>nest::UniformParameter</scope><name>value</name></member>
      <member refid="classnest_1_1Parameter_1a60666e9ec0de4fb53188f64657217939" prot="protected" virt="non-virtual"><scope>nest::UniformParameter</scope><name>value_is_integer_</name></member>
      <member refid="classnest_1_1Parameter_1aee3ca93bce135fcb5d8d7f0ec7bd0daf" prot="public" virt="virtual"><scope>nest::UniformParameter</scope><name>~Parameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
