<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1StimulationBackend" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::StimulationBackend</compoundname>
    <derivedcompoundref refid="classnest_1_1StimulationBackendMPI" prot="public" virt="non-virtual">nest::StimulationBackendMPI</derivedcompoundref>
    <includes refid="stimulation__backend_8h" local="no">stimulation_backend.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1af7e29a01e07656215981cbed2ac7aaa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::StimulationBackend::StimulationBackend</definition>
        <argsstring>()=default</argsstring>
        <name>StimulationBackend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="75" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1aa49db24f8776ed4ce51159a99904d4ce" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual nest::StimulationBackend::~StimulationBackend</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~StimulationBackend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="77" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a97900719ff848a845fea1e2f7e05bc33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::enroll</definition>
        <argsstring>(StimulationDevice &amp;, const DictionaryDatum &amp;)</argsstring>
        <name>enroll</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1ac3af465f99360719a66c93e44a40a4bd">enroll</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref> &amp;</type>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Enroll a <computeroutput><ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref></computeroutput> with the <computeroutput><ref refid="classnest_1_1StimulationBackend" kindref="compound">StimulationBackend</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>When this function is called by a <computeroutput><ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref></computeroutput> <computeroutput>device</computeroutput>, the <computeroutput><ref refid="classnest_1_1StimulationBackend" kindref="compound">StimulationBackend</ref></computeroutput> can set up per-device data structures and properties. Individual device instances can be identified using the <computeroutput>thread</computeroutput> and <computeroutput>node_id</computeroutput> of the <computeroutput>device</computeroutput>.</para>
<para>This function is called from the set_initialized_() function of the <computeroutput>device</computeroutput> and their set_status() function.</para>
<para>A backend needs to be able to cope with multiple calls to this function, as multiple calls to set_status() may occur on the <computeroutput>device</computeroutput>. For already enrolled devices this usually means that only the parameters in <computeroutput>params</computeroutput> have to be set, but no further actions are needed.</para>
<para>Each stimulation backend must ensure that enrollment (including all settings made by the user) is persistent over multiple calls to Prepare, while the enrollment of all devices should end with a call to <ref refid="classnest_1_1StimulationBackend_1a762f1ca96f846e3617fa56ea594f6a54" kindref="member">finalize()</ref>.</para>
<para>A common implementation of this function will create an entry in a thread-local map, associating the device&apos;s node ID with the device-specific backend properties and an input facility of some kind.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref> to be enrolled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>device-specific backend parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1StimulationBackend_1a82c6164e8c0b3355e15f5203e24ac0ad" kindref="member">disenroll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="113" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a82c6164e8c0b3355e15f5203e24ac0ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::disenroll</definition>
        <argsstring>(StimulationDevice &amp;)</argsstring>
        <name>disenroll</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1a56c15b58587a99e1bcc813b97bed72b9">disenroll</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Disenroll a <computeroutput><ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref></computeroutput> from the <computeroutput><ref refid="classnest_1_1StimulationBackend" kindref="compound">StimulationBackend</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is considered to be the opposite of <ref refid="classnest_1_1StimulationBackend_1a97900719ff848a845fea1e2f7e05bc33" kindref="member">enroll()</ref> in the sense that it cancels the enrollment of a StimulatinDevice from a <ref refid="classnest_1_1StimulationBackend" kindref="compound">StimulationBackend</ref> by deleting all device specific data. When setting a new stimulation backend for a stimulation device, this function is called for each backend the device is not enrolled with.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref> to be disenrolled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1StimulationBackend_1a97900719ff848a845fea1e2f7e05bc33" kindref="member">enroll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="131" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1ae80e46a9ccd188561dca8b46b290a69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::pre_run_hook</definition>
        <argsstring>()=0</argsstring>
        <name>pre_run_hook</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1ab749a6c23d67d844c35d65754c1612bf">pre_run_hook</reimplementedby>
        <briefdescription>
<para>Initialize global backend-specific data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called on each backend right at the very beginning of <computeroutput><ref refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref></computeroutput>. It used for getting the data in order to update the stimulation devices. The update of the device are made only if necessary and repeated at the beginning of every single call to run in a prepare-run-run-...-run-run-cleanup sequence.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1StimulationBackend_1ad4361d6651dd23ddca0caaef5e8ef593" kindref="member">post_run_hook()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="147" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1ad4361d6651dd23ddca0caaef5e8ef593" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::post_run_hook</definition>
        <argsstring>()=0</argsstring>
        <name>post_run_hook</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1a091f0160a127210605a58a686dff754a">post_run_hook</reimplementedby>
        <briefdescription>
<para>Clean up the backend at the end of a Run. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called right before <computeroutput><ref refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref></computeroutput> terminates. It allows the backend to indicate that the run is ending.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1StimulationBackend_1ae80e46a9ccd188561dca8b46b290a69d" kindref="member">pre_run_hook()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="159" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a00070a035e8cd1768d7247fb247fb446" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::initialize</definition>
        <argsstring>()=0</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1aa58ceaab209d05794d8d073c90df9260">initialize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="168" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a762f1ca96f846e3617fa56ea594f6a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::finalize</definition>
        <argsstring>()=0</argsstring>
        <name>finalize</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1a2dd500cfc39496adee2500586a9b7851">finalize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="169" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a3f65dec5e7a63752b5e763b6872f4134" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::prepare</definition>
        <argsstring>()=0</argsstring>
        <name>prepare</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1ac083c50fc8f38d7b7dbb0ccb9fea04bd">prepare</reimplementedby>
        <briefdescription>
<para>Prepare the backend at the beginning of the NEST Simulate function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by <computeroutput><ref refid="classnest_1_1KernelManager_1aa04eacfced16ba64667115aea94ff79a" kindref="member">KernelManager::prepare()</ref></computeroutput> and allows the backend to open files, establish network connections, etc.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1StimulationBackend_1a25aa97793cc11aabd14916b08dc1d441" kindref="member">cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="181" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a25aa97793cc11aabd14916b08dc1d441" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationBackend::cleanup</definition>
        <argsstring>()=0</argsstring>
        <name>cleanup</name>
        <reimplementedby refid="classnest_1_1StimulationBackendMPI_1a16f875498206f2315670fb6b68f62add">cleanup</reimplementedby>
        <briefdescription>
<para>Clean up the backend at the end of a user level call to the NEST Simulate function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by <computeroutput><ref refid="classnest_1_1SimulationManager_1af2d373b936e4d432a688a78af29be0ce" kindref="member">SimulationManager::cleanup()</ref></computeroutput> and allows the backend to close open files, close network connections, etc.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1StimulationBackend_1a3f65dec5e7a63752b5e763b6872f4134" kindref="member">prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="194" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1StimulationBackend_1a6e3d3d53318fff1bd55c2b9d828232f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::StimulationBackend::clear</definition>
        <argsstring>(const StimulationDevice &amp;)</argsstring>
        <name>clear</name>
        <param>
          <type>const <ref refid="classnest_1_1StimulationDevice" kindref="compound">StimulationDevice</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="196" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" bodystart="196" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract bass class for all NESTio stimulation backends. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides the interface for NESTio stimulation backends with which StimulationDevices can be enrolled for receiving stimulation data that they can use to updating their parameters at the beginning of each run.</para>
<para>Built-in stimulation backends are registered in the constructor of <ref refid="classnest_1_1IOManager" kindref="compound">IOManager</ref> by inserting an instance of each of them into a std::map under the name of the backend. The default backend, the one using memory, are not registered in this map.</para>
<para>A user level call to Simulate internally executes the sequence Prepare → Run → Cleanup. During Prepare, the <ref refid="classnest_1_1StimulationBackend_1a3f65dec5e7a63752b5e763b6872f4134" kindref="member">prepare()</ref> function of each backend is called by the <ref refid="classnest_1_1IOManager" kindref="compound">IOManager</ref>. This gives the backend an opportunity to prepare itself for being ready to receive the data.</para>
<para>The user level function Run drives the simulation main loop by updating all the stimulation device. At its beginning it calls <ref refid="classnest_1_1StimulationBackend_1ae80e46a9ccd188561dca8b46b290a69d" kindref="member">pre_run_hook()</ref> on each stimulation backend via the <ref refid="classnest_1_1IOManager" kindref="compound">IOManager</ref>. This function is used to receive or read data and update the stimulation devices. At the end of each run, it calls <ref refid="classnest_1_1StimulationBackend_1ad4361d6651dd23ddca0caaef5e8ef593" kindref="member">post_run_hook()</ref> on each stimulation backend via <ref refid="classnest_1_1IOManager" kindref="compound">IOManager</ref>.</para>
<para>During the simulation, stimulation backends do nothing. This solution was chosen to avoid complex synchronization, but can be changed in the future if the need shall arise.</para>
<para><simplesect kind="author"><para>Sandra Diaz </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::StimulationBackend</label>
        <link refid="classnest_1_1StimulationBackend"/>
      </node>
      <node id="2">
        <label>nest::StimulationBackendMPI</label>
        <link refid="classnest_1_1StimulationBackendMPI"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::StimulationBackend</label>
        <link refid="classnest_1_1StimulationBackend"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" line="72" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/stimulation_backend.h" bodystart="73" bodyend="197"/>
    <listofallmembers>
      <member refid="classnest_1_1StimulationBackend_1a25aa97793cc11aabd14916b08dc1d441" prot="public" virt="pure-virtual"><scope>nest::StimulationBackend</scope><name>cleanup</name></member>
      <member refid="classnest_1_1StimulationBackend_1a6e3d3d53318fff1bd55c2b9d828232f5" prot="public" virt="non-virtual"><scope>nest::StimulationBackend</scope><name>clear</name></member>
      <member refid="classnest_1_1StimulationBackend_1a82c6164e8c0b3355e15f5203e24ac0ad" prot="public" virt="virtual"><scope>nest::StimulationBackend</scope><name>disenroll</name></member>
      <member refid="classnest_1_1StimulationBackend_1a97900719ff848a845fea1e2f7e05bc33" prot="public" virt="virtual"><scope>nest::StimulationBackend</scope><name>enroll</name></member>
      <member refid="classnest_1_1StimulationBackend_1a762f1ca96f846e3617fa56ea594f6a54" prot="public" virt="pure-virtual"><scope>nest::StimulationBackend</scope><name>finalize</name></member>
      <member refid="classnest_1_1StimulationBackend_1a00070a035e8cd1768d7247fb247fb446" prot="public" virt="pure-virtual"><scope>nest::StimulationBackend</scope><name>initialize</name></member>
      <member refid="classnest_1_1StimulationBackend_1ad4361d6651dd23ddca0caaef5e8ef593" prot="public" virt="pure-virtual"><scope>nest::StimulationBackend</scope><name>post_run_hook</name></member>
      <member refid="classnest_1_1StimulationBackend_1ae80e46a9ccd188561dca8b46b290a69d" prot="public" virt="pure-virtual"><scope>nest::StimulationBackend</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1StimulationBackend_1a3f65dec5e7a63752b5e763b6872f4134" prot="public" virt="pure-virtual"><scope>nest::StimulationBackend</scope><name>prepare</name></member>
      <member refid="classnest_1_1StimulationBackend_1af7e29a01e07656215981cbed2ac7aaa6" prot="public" virt="non-virtual"><scope>nest::StimulationBackend</scope><name>StimulationBackend</name></member>
      <member refid="classnest_1_1StimulationBackend_1aa49db24f8776ed4ce51159a99904d4ce" prot="public" virt="virtual"><scope>nest::StimulationBackend</scope><name>~StimulationBackend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
