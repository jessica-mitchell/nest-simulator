<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1iaf__psc__alpha__multisynapse" kind="class" language="C++" prot="public">
    <compoundname>nest::iaf_psc_alpha_multisynapse</compoundname>
    <basecompoundref refid="classnest_1_1ArchivingNode" prot="public" virt="non-virtual">nest::ArchivingNode</basecompoundref>
    <includes refid="iaf__psc__alpha__multisynapse_8h" local="no">iaf_psc_alpha_multisynapse.h</includes>
    <innerclass refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers__" prot="private">nest::iaf_psc_alpha_multisynapse::Buffers_</innerclass>
    <innerclass refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters__" prot="private">nest::iaf_psc_alpha_multisynapse::Parameters_</innerclass>
    <innerclass refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State__" prot="private">nest::iaf_psc_alpha_multisynapse::State_</innerclass>
    <innerclass refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables__" prot="private">nest::iaf_psc_alpha_multisynapse::Variables_</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1iaf__psc__alpha__multisynapse_1a508bd211f82a9f85338ea64850606f85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DynamicRecordablesMap&lt; iaf_psc_alpha_multisynapse &gt;</definition>
        <argsstring></argsstring>
        <name>DynamicRecordablesMap&lt; iaf_psc_alpha_multisynapse &gt;</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::DynamicRecordablesMap&lt; iaf_psc_alpha_multisynapse &gt;</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1DynamicRecordablesMap" kindref="compound">DynamicRecordablesMap</ref>&lt; <ref refid="classnest_1_1iaf__psc__alpha__multisynapse" kindref="compound">iaf_psc_alpha_multisynapse</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="118" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1iaf__psc__alpha__multisynapse_1af8bb5c4a3615572d0a6b48bd9bf99a80" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DynamicUniversalDataLogger&lt; iaf_psc_alpha_multisynapse &gt;</definition>
        <argsstring></argsstring>
        <name>DynamicUniversalDataLogger&lt; iaf_psc_alpha_multisynapse &gt;</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::DynamicUniversalDataLogger&lt; iaf_psc_alpha_multisynapse &gt;</qualifiedname>
        <param>
          <type>DynamicUniversalDataLogger&lt; <ref refid="classnest_1_1iaf__psc__alpha__multisynapse" kindref="compound">iaf_psc_alpha_multisynapse</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="118" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1iaf__psc__alpha__multisynapse_1a51fce7238d016d15b9fb81e5d544c673" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class DataAccessFunctor&lt; iaf_psc_alpha_multisynapse &gt;</definition>
        <argsstring></argsstring>
        <name>DataAccessFunctor&lt; iaf_psc_alpha_multisynapse &gt;</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::DataAccessFunctor&lt; iaf_psc_alpha_multisynapse &gt;</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1DataAccessFunctor" kindref="compound">DataAccessFunctor</ref>&lt; <ref refid="classnest_1_1iaf__psc__alpha__multisynapse" kindref="compound">iaf_psc_alpha_multisynapse</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="118" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="123" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a5c1e7010558019dd22de659860417f8e" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="80" endline="83">get_data_access_functor</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters__" kindref="compound">Parameters_</ref></type>
        <definition>Parameters_ nest::iaf_psc_alpha_multisynapse::P_</definition>
        <argsstring></argsstring>
        <name>P_</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::P_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="277" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="277" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a62ce894a261dd568ea0366cbcdc25b9f" compoundref="iaf__psc__alpha__multisynapse_8h" startline="289" endline="303">get_state_element</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a90d8bb22cd87cc9ac223d19723d910c3" compoundref="iaf__psc__alpha__multisynapse_8h" startline="348" endline="355">get_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="385" endline="394">handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1ae77caaced02a21dd5e867f55981efcb9" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="69" endline="77">insert_current_recordables</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="285" endline="322">pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="424" endline="461">set_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="325" endline="382">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State__" kindref="compound">State_</ref></type>
        <definition>State_ nest::iaf_psc_alpha_multisynapse::S_</definition>
        <argsstring></argsstring>
        <name>S_</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::S_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="278" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="278" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a62ce894a261dd568ea0366cbcdc25b9f" compoundref="iaf__psc__alpha__multisynapse_8h" startline="289" endline="303">get_state_element</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a90d8bb22cd87cc9ac223d19723d910c3" compoundref="iaf__psc__alpha__multisynapse_8h" startline="348" endline="355">get_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="285" endline="322">pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="424" endline="461">set_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="325" endline="382">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__iaf__psc__alpha__multisynapse__data_1gaab98054893f042246e69b8c77d44c7d2" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables__" kindref="compound">Variables_</ref></type>
        <definition>Variables_ nest::iaf_psc_alpha_multisynapse::V_</definition>
        <argsstring></argsstring>
        <name>V_</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::V_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="279" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="279" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="285" endline="322">pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="325" endline="382">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers__" kindref="compound">Buffers_</ref></type>
        <definition>Buffers_ nest::iaf_psc_alpha_multisynapse::B_</definition>
        <argsstring></argsstring>
        <name>B_</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::B_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="280" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="280" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a811191307b23ba1deced77632ca095fc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="397" endline="403">handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a9f233f62984bac3bd9a55d25823837a6" compoundref="iaf__psc__alpha__multisynapse_8h" startline="338" endline="345">handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa4f4ea478626536298dec22a3c8d08f9" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="274" endline="282">init_buffers_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="285" endline="322">pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="325" endline="382">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1DynamicRecordablesMap" kindref="compound">DynamicRecordablesMap</ref>&lt; <ref refid="classnest_1_1iaf__psc__alpha__multisynapse" kindref="compound">iaf_psc_alpha_multisynapse</ref> &gt;</type>
        <definition>DynamicRecordablesMap&lt; iaf_psc_alpha_multisynapse &gt; nest::iaf_psc_alpha_multisynapse::recordablesMap_</definition>
        <argsstring></argsstring>
        <name>recordablesMap_</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::recordablesMap_</qualifiedname>
        <briefdescription>
<para>Mapping of recordables names to access functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="284" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="284" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a90d8bb22cd87cc9ac223d19723d910c3" compoundref="iaf__psc__alpha__multisynapse_8h" startline="348" endline="355">get_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a9f233f62984bac3bd9a55d25823837a6" compoundref="iaf__psc__alpha__multisynapse_8h" startline="338" endline="345">handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a23af36cdb2de27a3784101aed65707bd" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="251" endline="258">iaf_psc_alpha_multisynapse</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1ae77caaced02a21dd5e867f55981efcb9" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="69" endline="77">insert_current_recordables</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="424" endline="461">set_status</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a23af36cdb2de27a3784101aed65707bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::iaf_psc_alpha_multisynapse::iaf_psc_alpha_multisynapse</definition>
        <argsstring>()</argsstring>
        <name>iaf_psc_alpha_multisynapse</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::iaf_psc_alpha_multisynapse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="90" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="251" bodyend="258"/>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="284">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1aa8a2eb35eb24b5abe936adee63c52730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::iaf_psc_alpha_multisynapse::iaf_psc_alpha_multisynapse</definition>
        <argsstring>(const iaf_psc_alpha_multisynapse &amp;)</argsstring>
        <name>iaf_psc_alpha_multisynapse</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::iaf_psc_alpha_multisynapse</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1iaf__psc__alpha__multisynapse" kindref="compound">iaf_psc_alpha_multisynapse</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="91" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="260" bodyend="267"/>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="284">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a0fb8ed298ebcf6af357f37a4104ec911" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_alpha_multisynapse::send_test_event</definition>
        <argsstring>(Node &amp;, rport, synindex, bool) override</argsstring>
        <name>send_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::send_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3">send_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>receiving_node</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dummy_target</declname>
        </param>
        <briefdescription>
<para>Send an event to the receiving_node passed as an argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of check_connection just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para>This is required during the connection handshaking to test, if the receiving_node can handle the event type and receptor_type sent by the source node.</para>
<para>If dummy_target is true, this indicates that receiving_node is derived from <ref refid="classnest_1_1ConnTestDummyNodeBase" kindref="compound">ConnTestDummyNodeBase</ref> and used in the first call to <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1a0fb8ed298ebcf6af357f37a4104ec911" kindref="member">send_test_event()</ref>. This can be ignored in most cases, but Nodes sending DS*Events to their own event hooks and then *Events to their proper targets must send DS*Events when called with the dummy target, and *Events when called with the real target, see #478. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="101" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="319" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a811191307b23ba1deced77632ca095fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::handle</definition>
        <argsstring>(SpikeEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="103" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="397" bodyend="403"/>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1af5b98e05a84a246714294c63d94e730a" compoundref="iaf__psc__alpha__multisynapse_8h" startline="238">nest::iaf_psc_alpha_multisynapse::Buffers_::spikes_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a772b20b1cdad64b1fadc158464becfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::handle</definition>
        <argsstring>(CurrentEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for current events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="104" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="406" bodyend="415"/>
        <references refid="classnest_1_1RingBuffer_1a7e42e6eb1df812ced409c37bcf599676" compoundref="ring__buffer_8h" startline="151" endline="154">nest::RingBuffer::add_value</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a20197f21a841ffb88cc551c9d3aaef7b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="239">nest::iaf_psc_alpha_multisynapse::Buffers_::currents_</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a1a88e2e6d028a3e96adac98ea261cfa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::handle</definition>
        <argsstring>(DataLoggingRequest &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1a811191307b23ba1deced77632ca095fc" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="105" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="418" bodyend="421"/>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a5344229955177c03a2f0ab9ccfb06b0c" compoundref="iaf__psc__alpha__multisynapse_8h" startline="242">nest::iaf_psc_alpha_multisynapse::Buffers_::logger_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_alpha_multisynapse::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1a0fb8ed298ebcf6af357f37a4104ec911" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="107" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="385" bodyend="394"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a3b34fbf71e8f3f1b8d106e3b09d0e634" compoundref="iaf__psc__alpha__multisynapse_8h" startline="162">nest::iaf_psc_alpha_multisynapse::Parameters_::has_connections_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a3f57dd7b9f5c531422af7acdd32d4c75" compoundref="iaf__psc__alpha__multisynapse_8h" startline="313" endline="316">nest::iaf_psc_alpha_multisynapse::Parameters_::n_receptors_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a872f77790ce784f67522b24ef49c8d9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_alpha_multisynapse::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="108" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="328" bodyend="335"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a9f233f62984bac3bd9a55d25823837a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_alpha_multisynapse::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <defname>dlr</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="109" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="338" bodyend="345"/>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a5344229955177c03a2f0ab9ccfb06b0c" compoundref="iaf__psc__alpha__multisynapse_8h" startline="242">nest::iaf_psc_alpha_multisynapse::Buffers_::logger_</references>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="284">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a90d8bb22cd87cc9ac223d19723d910c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::get_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="111" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="348" bodyend="355"/>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a750381ca1500ec92ba4eac74857e4260" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="118" endline="133">nest::iaf_psc_alpha_multisynapse::Parameters_::get</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1ab7187195942aa0363ddecddbd723ed6b" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="213" endline="216">nest::iaf_psc_alpha_multisynapse::State_::get</references>
        <references refid="classnest_1_1ArchivingNode_1acd46838612262b4a5d4cacdf7d901145" compoundref="archiving__node_8cpp" startline="221" endline="233">nest::ArchivingNode::get_status</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
        <references refid="namespacenest_1_1names_1a62373422f098eca1af4ddd73144c5928" compoundref="nest__names_8h" startline="404">nest::names::recordables</references>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="284">recordablesMap_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" compoundref="iaf__psc__alpha__multisynapse_8h" startline="278">S_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::set_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Change properties of the node according to the entries in the dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref> with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="112" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="424" bodyend="461"/>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1a5c1e7010558019dd22de659860417f8e" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="80" endline="83">get_data_access_functor</references>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1acf65e76952943777eecbb43c8d2f3a8f" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="61" endline="66">get_i_syn_name</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a96112767e048cd5daaa079514297fc4ca0d138be4ad772cf8d615e08f31e0b70d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="199">nest::iaf_psc_alpha_multisynapse::State_::I_SYN</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1ae09f095022f1dbee98fd364b939ec629" compoundref="iaf__psc__alpha__multisynapse_8h" startline="203">nest::iaf_psc_alpha_multisynapse::State_::NUM_STATE_ELEMENTS_PER_RECEPTOR</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="284">recordablesMap_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" compoundref="iaf__psc__alpha__multisynapse_8h" startline="278">S_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a309d64747a1a14469e04b34ec1341c2f" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="219" endline="235">nest::iaf_psc_alpha_multisynapse::State_::set</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a2d95fe0016185129aae798b145a6f487" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="136" endline="210">nest::iaf_psc_alpha_multisynapse::Parameters_::set</references>
        <references refid="classnest_1_1ArchivingNode_1ac69d56c97bed5fd58fab9c3c745328c4" compoundref="archiving__node_8cpp" startline="236" endline="264">nest::ArchivingNode::set_status</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a5e1f91d7fa55a3d6419ff5696ac6e1db" compoundref="iaf__psc__alpha__multisynapse_8h" startline="159">nest::iaf_psc_alpha_multisynapse::Parameters_::tau_syn_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="98" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1a0fb8ed298ebcf6af357f37a4104ec911" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1aa4f4ea478626536298dec22a3c8d08f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::init_buffers_</definition>
        <argsstring>() override</argsstring>
        <name>init_buffers_</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::init_buffers_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453">init_buffers_</reimplements>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="115" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="274" bodyend="282"/>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="classnest_1_1RingBuffer_1a7f132a77d1ed5e95b6a1912afb507877" compoundref="ring__buffer_8cpp" startline="41" endline="46">nest::RingBuffer::clear</references>
        <references refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" compoundref="archiving__node_8cpp" startline="267" endline="273">nest::ArchivingNode::clear_history</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a20197f21a841ffb88cc551c9d3aaef7b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="239">nest::iaf_psc_alpha_multisynapse::Buffers_::currents_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a5344229955177c03a2f0ab9ccfb06b0c" compoundref="iaf__psc__alpha__multisynapse_8h" startline="242">nest::iaf_psc_alpha_multisynapse::Buffers_::logger_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1af5b98e05a84a246714294c63d94e730a" compoundref="iaf__psc__alpha__multisynapse_8h" startline="238">nest::iaf_psc_alpha_multisynapse::Buffers_::spikes_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::pre_run_hook</qualifiedname>
        <reimplements refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplements>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="116" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="285" bodyend="322"/>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1ae3f1f960255718f1c440c28b15e2ee6b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="136">nest::iaf_psc_alpha_multisynapse::Parameters_::C_</references>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="classIAFPropagatorAlpha_1a56ea2f52f540342dc1d626ef714875ca" compoundref="iaf__propagator_8cpp" startline="95" endline="117">IAFPropagatorAlpha::evaluate</references>
        <references refid="classnest_1_1Time_1aff831a8475d8060353c4cae73cc5748c" compoundref="nest__time_8h" startline="512" endline="523">nest::Time::get_ms</references>
        <references refid="classnest_1_1Time_1a6f14dc87dbd694a028020f00a5a92d7c" compoundref="nest__time_8h" startline="341" endline="344">nest::Time::get_resolution</references>
        <references refid="classnest_1_1Time_1afedb0e4fbf5d521e50573f2180016568" compoundref="nest__time_8h" startline="526" endline="540">nest::Time::get_steps</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a5344229955177c03a2f0ab9ccfb06b0c" compoundref="iaf__psc__alpha__multisynapse_8h" startline="242">nest::iaf_psc_alpha_multisynapse::Buffers_::logger_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a3f57dd7b9f5c531422af7acdd32d4c75" compoundref="iaf__psc__alpha__multisynapse_8h" startline="313" endline="316">nest::iaf_psc_alpha_multisynapse::Parameters_::n_receptors_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a7cba9801526eb96b2cd0f1ae75dd21d3" compoundref="iaf__psc__alpha__multisynapse_8h" startline="255">nest::iaf_psc_alpha_multisynapse::Variables_::P11_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a54a8f516d1fd418b640f27e43476282d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="256">nest::iaf_psc_alpha_multisynapse::Variables_::P21_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a85737f92036419919b58a01bff865e9f" compoundref="iaf__psc__alpha__multisynapse_8h" startline="257">nest::iaf_psc_alpha_multisynapse::Variables_::P22_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1abb0156f0c0b9792f92ad34a67793d79e" compoundref="iaf__psc__alpha__multisynapse_8h" startline="261">nest::iaf_psc_alpha_multisynapse::Variables_::P30_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1aca4f1af881d64a0dc37a6ddb1c48726d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="258">nest::iaf_psc_alpha_multisynapse::Variables_::P31_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a0d8578233865799671511dcb9c012f2b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="259">nest::iaf_psc_alpha_multisynapse::Variables_::P32_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a59fb2594b17e04e881238f2c52c91cf1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="262">nest::iaf_psc_alpha_multisynapse::Variables_::P33_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a601b774b35d8b3891be74378028fccd9" compoundref="iaf__psc__alpha__multisynapse_8h" startline="252">nest::iaf_psc_alpha_multisynapse::Variables_::PSCInitialValues_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a64789a885e659c24382eedbefc16f2f9" compoundref="iaf__psc__alpha__multisynapse_8h" startline="139">nest::iaf_psc_alpha_multisynapse::Parameters_::refractory_time_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1af3da7091d54210bcd1c745742e33275b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="253">nest::iaf_psc_alpha_multisynapse::Variables_::RefractoryCounts_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" compoundref="iaf__psc__alpha__multisynapse_8h" startline="278">S_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1af5b98e05a84a246714294c63d94e730a" compoundref="iaf__psc__alpha__multisynapse_8h" startline="238">nest::iaf_psc_alpha_multisynapse::Buffers_::spikes_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1aa3b31383d828b06664a902074394f26d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="133">nest::iaf_psc_alpha_multisynapse::Parameters_::Tau_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a5e1f91d7fa55a3d6419ff5696ac6e1db" compoundref="iaf__psc__alpha__multisynapse_8h" startline="159">nest::iaf_psc_alpha_multisynapse::Parameters_::tau_syn_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gaab98054893f042246e69b8c77d44c7d2" compoundref="iaf__psc__alpha__multisynapse_8h" startline="279">V_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a8248882a508e0eb18a82307b2a8873ab" compoundref="iaf__psc__alpha__multisynapse_8h" startline="206">nest::iaf_psc_alpha_multisynapse::State_::y1_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a289cbfb770484ee77d8d302554c9cd02" compoundref="iaf__psc__alpha__multisynapse_8h" startline="207">nest::iaf_psc_alpha_multisynapse::State_::y2_syn_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::update</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$. </para>
        </briefdescription>
        <detaileddescription>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="118" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="325" bodyend="382"/>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" compoundref="iaf__psc__alpha__multisynapse_8h" startline="280">B_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a865dc5fd9d41e9e92760a6578e26c3f2" compoundref="iaf__psc__alpha__multisynapse_8h" startline="210">nest::iaf_psc_alpha_multisynapse::State_::current_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a20197f21a841ffb88cc551c9d3aaef7b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="239">nest::iaf_psc_alpha_multisynapse::Buffers_::currents_</references>
        <references refid="classnest_1_1KernelManager_1a39a94f269d1aeb7363ae5c33783b762e" compoundref="kernel__manager_8h" startline="249">nest::KernelManager::event_delivery_manager</references>
        <references refid="classnest_1_1RingBuffer_1ab779454b930d8a7ff3f85993b1eecb31" compoundref="ring__buffer_8h" startline="163" endline="174">nest::RingBuffer::get_value</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1ad3256674a3fd8a57276aadad787d4246" compoundref="iaf__psc__alpha__multisynapse_8h" startline="205">nest::iaf_psc_alpha_multisynapse::State_::I_const_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1aa0c0c3e7c70d7169825b3363a41a44b3" compoundref="iaf__psc__alpha__multisynapse_8h" startline="145">nest::iaf_psc_alpha_multisynapse::Parameters_::I_e_</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1a5344229955177c03a2f0ab9ccfb06b0c" compoundref="iaf__psc__alpha__multisynapse_8h" startline="242">nest::iaf_psc_alpha_multisynapse::Buffers_::logger_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a43c67cb7cf9008b8646d4bd32c8b5540" compoundref="iaf__psc__alpha__multisynapse_8h" startline="156">nest::iaf_psc_alpha_multisynapse::Parameters_::LowerBound_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a3f57dd7b9f5c531422af7acdd32d4c75" compoundref="iaf__psc__alpha__multisynapse_8h" startline="313" endline="316">nest::iaf_psc_alpha_multisynapse::Parameters_::n_receptors_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a7cba9801526eb96b2cd0f1ae75dd21d3" compoundref="iaf__psc__alpha__multisynapse_8h" startline="255">nest::iaf_psc_alpha_multisynapse::Variables_::P11_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a54a8f516d1fd418b640f27e43476282d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="256">nest::iaf_psc_alpha_multisynapse::Variables_::P21_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a85737f92036419919b58a01bff865e9f" compoundref="iaf__psc__alpha__multisynapse_8h" startline="257">nest::iaf_psc_alpha_multisynapse::Variables_::P22_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1abb0156f0c0b9792f92ad34a67793d79e" compoundref="iaf__psc__alpha__multisynapse_8h" startline="261">nest::iaf_psc_alpha_multisynapse::Variables_::P30_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1aca4f1af881d64a0dc37a6ddb1c48726d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="258">nest::iaf_psc_alpha_multisynapse::Variables_::P31_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a0d8578233865799671511dcb9c012f2b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="259">nest::iaf_psc_alpha_multisynapse::Variables_::P32_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a59fb2594b17e04e881238f2c52c91cf1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="262">nest::iaf_psc_alpha_multisynapse::Variables_::P33_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1a601b774b35d8b3891be74378028fccd9" compoundref="iaf__psc__alpha__multisynapse_8h" startline="252">nest::iaf_psc_alpha_multisynapse::Variables_::PSCInitialValues_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1adf6a720747dc747d1bf011752acac001" compoundref="iaf__psc__alpha__multisynapse_8h" startline="213">nest::iaf_psc_alpha_multisynapse::State_::refractory_steps_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables___1af3da7091d54210bcd1c745742e33275b" compoundref="iaf__psc__alpha__multisynapse_8h" startline="253">nest::iaf_psc_alpha_multisynapse::Variables_::RefractoryCounts_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" compoundref="iaf__psc__alpha__multisynapse_8h" startline="278">S_</references>
        <references refid="classnest_1_1EventDeliveryManager_1a9a350f7997aebc9c0a3b0620639ac0a4" compoundref="event__delivery__manager__impl_8h" startline="60" endline="63">nest::EventDeliveryManager::send</references>
        <references refid="classnest_1_1ArchivingNode_1af5655cc7a93c86837c09e48cce007993" compoundref="archiving__node_8cpp" startline="181" endline="218">nest::ArchivingNode::set_spiketime</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers___1af5b98e05a84a246714294c63d94e730a" compoundref="iaf__psc__alpha__multisynapse_8h" startline="238">nest::iaf_psc_alpha_multisynapse::Buffers_::spikes_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a146080372153fd401d40cda5ccc01091" compoundref="iaf__psc__alpha__multisynapse_8h" startline="152">nest::iaf_psc_alpha_multisynapse::Parameters_::Theta_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1gaab98054893f042246e69b8c77d44c7d2" compoundref="iaf__psc__alpha__multisynapse_8h" startline="279">V_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1add89523cfae845df68035dc2d5985fe7" compoundref="iaf__psc__alpha__multisynapse_8h" startline="209">nest::iaf_psc_alpha_multisynapse::State_::V_m_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a4f916cee72211b925da02a20703b7e6e" compoundref="iaf__psc__alpha__multisynapse_8h" startline="148">nest::iaf_psc_alpha_multisynapse::Parameters_::V_reset_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a8248882a508e0eb18a82307b2a8873ab" compoundref="iaf__psc__alpha__multisynapse_8h" startline="206">nest::iaf_psc_alpha_multisynapse::State_::y1_syn_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a289cbfb770484ee77d8d302554c9cd02" compoundref="iaf__psc__alpha__multisynapse_8h" startline="207">nest::iaf_psc_alpha_multisynapse::State_::y2_syn_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a5c1e7010558019dd22de659860417f8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1DataAccessFunctor" kindref="compound">DataAccessFunctor</ref>&lt; <ref refid="classnest_1_1iaf__psc__alpha__multisynapse" kindref="compound">iaf_psc_alpha_multisynapse</ref> &gt;</type>
        <definition>DataAccessFunctor&lt; iaf_psc_alpha_multisynapse &gt; nest::iaf_psc_alpha_multisynapse::get_data_access_functor</definition>
        <argsstring>(size_t elem)</argsstring>
        <name>get_data_access_functor</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::get_data_access_functor</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="287" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="80" bodyend="83"/>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1a51fce7238d016d15b9fb81e5d544c673" compoundref="iaf__psc__alpha__multisynapse_8h" startline="123">DataAccessFunctor&lt; iaf_psc_alpha_multisynapse &gt;</references>
        <referencedby refid="classnest_1_1DynamicRecordablesMap_1a5be1c588aae44bf2e42c556891de09c0" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="50" endline="58">nest::DynamicRecordablesMap&lt; HostNode &gt;::create</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1ae77caaced02a21dd5e867f55981efcb9" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="69" endline="77">insert_current_recordables</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="424" endline="461">set_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1a62ce894a261dd568ea0366cbcdc25b9f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::iaf_psc_alpha_multisynapse::get_state_element</definition>
        <argsstring>(size_t elem)</argsstring>
        <name>get_state_element</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::get_state_element</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="289" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="289" bodyend="303"/>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a865dc5fd9d41e9e92760a6578e26c3f2" compoundref="iaf__psc__alpha__multisynapse_8h" startline="210">nest::iaf_psc_alpha_multisynapse::State_::current_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1ad37af29711ac8fe86ceba8affcc0bdaf" compoundref="iaf__psc__alpha__multisynapse_8h" startline="142">nest::iaf_psc_alpha_multisynapse::Parameters_::E_L_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a96112767e048cd5daaa079514297fc4ca0327e5894e21209e659641187de8f7a5" compoundref="iaf__psc__alpha__multisynapse_8h" startline="198">nest::iaf_psc_alpha_multisynapse::State_::I</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a7467d0f731e0f6194ed1fd4679bb663e" compoundref="iaf__psc__alpha__multisynapse_8h" startline="202">nest::iaf_psc_alpha_multisynapse::State_::NUMBER_OF_FIXED_STATES_ELEMENTS</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" compoundref="iaf__psc__alpha__multisynapse_8h" startline="278">S_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a96112767e048cd5daaa079514297fc4ca9414b26d10ca25d0f1444d3ee0c9cdbd" compoundref="iaf__psc__alpha__multisynapse_8h" startline="197">nest::iaf_psc_alpha_multisynapse::State_::V_M</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1add89523cfae845df68035dc2d5985fe7" compoundref="iaf__psc__alpha__multisynapse_8h" startline="209">nest::iaf_psc_alpha_multisynapse::State_::V_m_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a289cbfb770484ee77d8d302554c9cd02" compoundref="iaf__psc__alpha__multisynapse_8h" startline="207">nest::iaf_psc_alpha_multisynapse::State_::y2_syn_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1acf65e76952943777eecbb43c8d2f3a8f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="className" kindref="compound">Name</ref></type>
        <definition>Name nest::iaf_psc_alpha_multisynapse::get_i_syn_name</definition>
        <argsstring>(size_t elem)</argsstring>
        <name>get_i_syn_name</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::get_i_syn_name</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="308" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="61" bodyend="66"/>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1ae77caaced02a21dd5e867f55981efcb9" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="69" endline="77">insert_current_recordables</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="424" endline="461">set_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__alpha__multisynapse_1ae77caaced02a21dd5e867f55981efcb9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_alpha_multisynapse::insert_current_recordables</definition>
        <argsstring>(size_t first=0)</argsstring>
        <name>insert_current_recordables</name>
        <qualifiedname>nest::iaf_psc_alpha_multisynapse::insert_current_recordables</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>first</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="309" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.cpp" bodystart="69" bodyend="77"/>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1a5c1e7010558019dd22de659860417f8e" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="80" endline="83">get_data_access_functor</references>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1acf65e76952943777eecbb43c8d2f3a8f" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="61" endline="66">get_i_syn_name</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1a96112767e048cd5daaa079514297fc4ca0d138be4ad772cf8d615e08f31e0b70d" compoundref="iaf__psc__alpha__multisynapse_8h" startline="199">nest::iaf_psc_alpha_multisynapse::State_::I_SYN</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State___1ae09f095022f1dbee98fd364b939ec629" compoundref="iaf__psc__alpha__multisynapse_8h" startline="203">nest::iaf_psc_alpha_multisynapse::State_::NUM_STATE_ELEMENTS_PER_RECEPTOR</references>
        <references refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" compoundref="iaf__psc__alpha__multisynapse_8h" startline="277">P_</references>
        <references refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" compoundref="iaf__psc__alpha__multisynapse_8h" startline="284">recordablesMap_</references>
        <references refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters___1a5e1f91d7fa55a3d6419ff5696ac6e1db" compoundref="iaf__psc__alpha__multisynapse_8h" startline="159">nest::iaf_psc_alpha_multisynapse::Parameters_::tau_syn_</references>
        <referencedby refid="classnest_1_1DynamicRecordablesMap_1a5be1c588aae44bf2e42c556891de09c0" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="50" endline="58">nest::DynamicRecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::iaf_psc_alpha_multisynapse</label>
        <link refid="classnest_1_1iaf__psc__alpha__multisynapse"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>nest::DynamicRecordablesMap&lt; nest::iaf_psc_alpha_multisynapse &gt;</label>
        <link refid="classnest_1_1DynamicRecordablesMap"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; nest::iaf_psc_alpha_multisynapse &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="13">
        <label>nest::DynamicRecordablesMap&lt; HostNode &gt;</label>
        <link refid="classnest_1_1DynamicRecordablesMap"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>nest::RingBuffer</label>
        <link refid="classnest_1_1RingBuffer"/>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::iaf_psc_alpha_multisynapse</label>
        <link refid="classnest_1_1iaf__psc__alpha__multisynapse"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>P_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>S_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>V_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>B_</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recordablesMap_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>nest::iaf_psc_alpha_multisynapse::Buffers_</label>
        <link refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Buffers__"/>
        <childnode refid="10" relation="usage">
          <edgelabel>currents_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>nest::iaf_psc_alpha_multisynapse::Parameters_</label>
        <link refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Parameters__"/>
      </node>
      <node id="7">
        <label>nest::iaf_psc_alpha_multisynapse::State_</label>
        <link refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1State__"/>
      </node>
      <node id="8">
        <label>nest::iaf_psc_alpha_multisynapse::Variables_</label>
        <link refid="structnest_1_1iaf__psc__alpha__multisynapse_1_1Variables__"/>
      </node>
      <node id="14">
        <label>std::map&lt; Name, const DataAccessFunctor&lt; HostNode &gt; &gt;</label>
      </node>
      <node id="12">
        <label>std::map&lt; Name, const DataAccessFunctor&lt; nest::iaf_psc_alpha_multisynapse &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" line="86" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_alpha_multisynapse.h" bodystart="87" bodyend="310"/>
    <listofallmembers>
      <member refid="classnest_1_1ArchivingNode_1a6c9f56d9b47e62eeb5a21f56dfbdc411" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>ArchivingNode</name></member>
      <member refid="classnest_1_1ArchivingNode_1acb6a397bfafe3b1c3349a33437f19f66" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>ArchivingNode</name></member>
      <member refid="group__iaf__psc__alpha__multisynapse__data_1gac04152beab358313117d4ba85c4a4fbb" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>B_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a61c0b9825270fab375fc4c722cfaec6b" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>beta_Ca_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5917ea5dc7f39ee46825a20faae4d49c" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>Ca_minus_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a62b1974824c28eabfbb4bc4cbcc1edeb" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>Ca_t_</name></member>
      <member refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>clear_history</name></member>
      <member refid="classnest_1_1Node_1a09632867c7096c814eeceea1be42fc6b" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>clone</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a8fb547186b1ee49384fddeb4e268481d" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>connect_synaptic_element</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a51fce7238d016d15b9fb81e5d544c673" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>DataAccessFunctor&lt; iaf_psc_alpha_multisynapse &gt;</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a0f11a1c88af75d6a51057d97fe1f6583" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>downcast</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a508bd211f82a9f85338ea64850606f85" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>DynamicRecordablesMap&lt; iaf_psc_alpha_multisynapse &gt;</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1af8bb5c4a3615572d0a6b48bd9bf99a80" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>DynamicUniversalDataLogger&lt; iaf_psc_alpha_multisynapse &gt;</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_C_m</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb8ec0a74d457fd285665b3ff8077213" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a5c1e7010558019dd22de659860417f8e" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_data_access_functor</name></member>
      <member refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1ArchivingNode_1a17dd209382eae47cbb5f02b88fbb997a" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_history</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1acf65e76952943777eecbb43c8d2f3a8f" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_i_syn_name</name></member>
      <member refid="classnest_1_1ArchivingNode_1a063cf1374f05675f2501b9cf1d4f04e7" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_K_triplet_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1ab6c3dea0d46a9f24fc4d726bea34dd3a" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1aa756873904842e8e63e9144d1f49967f" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1ArchivingNode_1afab9e578540e7a00114f41ce4a6f877d" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1ArchivingNode_1afbac3e3b40f07e096fea768a715f9034" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_spiketime_ms</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a62ce894a261dd568ea0366cbcdc25b9f" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_state_element</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a90d8bb22cd87cc9ac223d19723d910c3" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_status_dict_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af2415c16f2edd606035f497d6003c392" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a84df4d213b9f22e9dae6b26c8fd9905d" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a9ba39ec217579e3ef23db9ae20479955" prot="private" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af35fbeeb8459557ea3a5baf5c6fe7d20" prot="private" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5708dead1beae2f0bccb87080356cd63" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a893ba9023105eb3c68c988dc3f912d2f" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5b0318a17b8e2416f7904d00b3d4a830" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_tau_Ca</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>get_vp</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a811191307b23ba1deced77632ca095fc" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a772b20b1cdad64b1fadc158464becfbc" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a1a88e2e6d028a3e96adac98ea261cfa3" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1ae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1adef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a872f77790ce784f67522b24ef49c8d9c" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a9f233f62984bac3bd9a55d25823837a6" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1ArchivingNode_1a25d021158d742b10234548c339f7f625" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>history_</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a23af36cdb2de27a3784101aed65707bd" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>iaf_psc_alpha_multisynapse</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa8a2eb35eb24b5abe936adee63c52730" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>iaf_psc_alpha_multisynapse</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>init</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa4f4ea478626536298dec22a3c8d08f9" prot="private" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>initialized_</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1ae77caaced02a21dd5e867f55981efcb9" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>insert_current_recordables</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1ArchivingNode_1abf5e14af5f052f6275746df00043e6ce" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>Kminus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aca1b6e411f89e286c59b519c97a5940f" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>Kminus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3dcd0174ab639ea897388ea375a9a6b7" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>last_spike_</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1ArchivingNode_1a7384c7f1a1f3d059806598b606e056d8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>max_delay_</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>model_id_</name></member>
      <member refid="classnest_1_1ArchivingNode_1ac1f375fc0e109ced42aaf68cbba40fed" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>n_incoming_</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a4b28c19bfaa4ac475f5248389ed911e6" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>operator=</name></member>
      <member refid="group__iaf__psc__alpha__multisynapse__data_1ga52c28c22806dc394cb42df13e7ca0cda" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>P_</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2" prot="private" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>print_network</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1ab2a431f2dffa8f2401a42e403e7886a1" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>recordablesMap_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a0f573e9b1e9f7f49a493aa2a533c2803" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>register_stdp_connection</name></member>
      <member refid="group__iaf__psc__alpha__multisynapse__data_1ga7c6de8066cee1ace7027bbbf18fbe1b8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>S_</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1a0fb8ed298ebcf6af357f37a4104ec911" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1ArchivingNode_1af5655cc7a93c86837c09e48cce007993" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_spiketime</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>set_vp</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a1b21cac6a54b750cfb72a011cc226936" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a64bcfbab69f9d53322f18896838c6c80" prot="public" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb62fb32d42235fb404d919fdf1865e8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>synaptic_elements_map_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a905ca4acf3665fca699c1cc91f2704f8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>tau_Ca_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a2eaadb93df6c09941829cfcf99f0af80" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>tau_minus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a072504ce3c26083587fbd78522d50dc1" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>tau_minus_inv_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aaae85c3700810f049ccb9ca853c651b7" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>tau_minus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1adf4c70fed4fe8f168b28b47b51fa35ab" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>tau_minus_triplet_inv_</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a75621ba377fb9e61a31a67c9d9ee3684" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>trace_</name></member>
      <member refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" prot="private" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>update</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a74fc8e9d9ef49af9c53b35e19ee3ddd9" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>update_synaptic_elements</name></member>
      <member refid="group__iaf__psc__alpha__multisynapse__data_1gaab98054893f042246e69b8c77d44c7d2" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>V_</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>vp_</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::iaf_psc_alpha_multisynapse</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
