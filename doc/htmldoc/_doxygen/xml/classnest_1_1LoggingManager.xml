<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1LoggingManager" kind="class" language="C++" prot="public">
    <compoundname>nest::LoggingManager</compoundname>
    <basecompoundref refid="classnest_1_1ManagerInterface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="logging__manager_8h" local="no">logging_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1LoggingManager_1aa535deeab60397c168a4f459125b7fa9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacenest_1aaefcb0ca1e047a3dfa5c97d7d02b7c39" kindref="member">deliver_logging_event_ptr</ref> &gt;</type>
        <definition>std::vector&lt; deliver_logging_event_ptr &gt; nest::LoggingManager::client_callbacks_</definition>
        <argsstring></argsstring>
        <name>client_callbacks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="119" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1LoggingManager_1aab778b54c4233f7837a83a09bfe600f2" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72" kindref="member">nest::severity_t</ref></type>
        <definition>nest::severity_t nest::LoggingManager::logging_level_</definition>
        <argsstring></argsstring>
        <name>logging_level_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="120" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1LoggingManager_1a834c4782f46adf8b3a890cb4d191b034" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::LoggingManager::dict_miss_is_error_</definition>
        <argsstring></argsstring>
        <name>dict_miss_is_error_</name>
        <briefdescription>
<para>whether to throw exception on missed dictionary entries </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="121" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a13e2b48fc880e28002661939ad00224c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::LoggingManager::LoggingManager</definition>
        <argsstring>()</argsstring>
        <name>LoggingManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="50" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a8afea8dce0717068a0998314269e3243" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1ManagerInterface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
<para>Prepare manager for operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1KernelManager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1LoggingManager_1a7df2114c58aaa551765073ddd3f48b1c" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="52" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a7df2114c58aaa551765073ddd3f48b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1ManagerInterface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
<para>Take down manager after operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1KernelManager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1LoggingManager_1a8afea8dce0717068a0998314269e3243" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1LoggingManager_1a8afea8dce0717068a0998314269e3243" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="53" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1aa4406c42ee02a34b60d7eef8204f5562" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1ManagerInterface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>dict</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="54" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="56" bodyend="59"/>
        <references refid="namespacenest_1_1names_1ad307dba8a781753734c83f0e862cb1dc">nest::names::dict_miss_is_error</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1ab7eceba0737ec4f47edd7c57095a34ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1ManagerInterface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>dict</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="55" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="62" bodyend="65"/>
        <references refid="namespacenest_1_1names_1ad307dba8a781753734c83f0e862cb1dc">nest::names::dict_miss_is_error</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a0a78d6496c332ac5f5537dd00a0da413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::register_logging_client</definition>
        <argsstring>(const deliver_logging_event_ptr callback)</argsstring>
        <name>register_logging_client</name>
        <param>
          <type>const <ref refid="namespacenest_1aaefcb0ca1e047a3dfa5c97d7d02b7c39" kindref="member">deliver_logging_event_ptr</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Register a logging client. </para>
        </briefdescription>
        <detaileddescription>
<para>Register a callback function that will receive all subsequent LoggingEvents. For the method signature see <ref refid="logging_8h" kindref="compound">logging.h</ref> . </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="63" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="69" bodyend="74"/>
        <referencedby refid="namespacenest_1a2790d3c6c87c60627f8cfd1fc4fac771" compoundref="nest_8cpp" startline="72" endline="75">nest::register_logger_client</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1aa6a9775feef4690f5e8b9bfdfefc3f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::set_logging_level</definition>
        <argsstring>(const severity_t level)</argsstring>
        <name>set_logging_level</name>
        <param>
          <type>const <ref refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72" kindref="member">severity_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the logging level. </para>
        </briefdescription>
        <detaileddescription>
<para>All logging messages with a lower severity will not be forwarded to the logging clients. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="71" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="167" bodyend="173"/>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a28ae2e4c0ae2e82ad5665e5c8a48b49b" compoundref="logging_8h" startline="51">nest::M_ALL</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac5db3bd6072d18f9ed8c79299666c3ba" compoundref="logging_8h" startline="60">nest::M_QUIET</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a8b49769d3ddb45f0fe1e8e86d282ac46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72" kindref="member">severity_t</ref></type>
        <definition>nest::severity_t nest::LoggingManager::get_logging_level</definition>
        <argsstring>() const</argsstring>
        <name>get_logging_level</name>
        <briefdescription>
<para>Get the current logging level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="76" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1acdb56b52c6e670e6586786335f2bbb9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::publish_log</definition>
        <argsstring>(const severity_t, const std::string &amp;, const std::string &amp;, const std::string &amp;, const size_t) const</argsstring>
        <name>publish_log</name>
        <param>
          <type>const</type>
          <declname>severity_t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>fctn</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>file</defname>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
          <defname>line</defname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref> that will be delivered to all registered logging clients, if the severity is above the set logging level. Do not use this function to do actual logging in the source code, instead use the <ref refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" kindref="member">LOG()</ref> function provided by the <ref refid="logging_8h" kindref="compound">logging.h</ref> header in libnestutil. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="88" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="107" bodyend="121"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1ac6503e6e9d2cf94139f36798df861d54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::all_entries_accessed</definition>
        <argsstring>(const Dictionary &amp;, const std::string &amp;, const std::string &amp;, const std::string &amp;, const size_t) const</argsstring>
        <name>all_entries_accessed</name>
        <param>
          <type>const Dictionary &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>where</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>file</defname>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
          <defname>line</defname>
        </param>
        <briefdescription>
<para>Implements standard behaviour for dictionary entry misses. </para>
        </briefdescription>
        <detaileddescription>
<para>Use with define ALL_ENTRIES_ACCESSED. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="94" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="124" bodyend="142"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaacd7f6853f3c5659533a75bc712c3b" compoundref="logging_8h" startline="57">nest::M_WARNING</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a33541187b4f25decff0f0f316cea69fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::all_entries_accessed</definition>
        <argsstring>(const Dictionary &amp;, const std::string &amp;, const std::string &amp;, const std::string &amp;, const std::string &amp;, const size_t) const</argsstring>
        <name>all_entries_accessed</name>
        <param>
          <type>const Dictionary &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>where</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg1</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>msg2</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>file</defname>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
          <defname>line</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="100" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="145" bodyend="164"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaacd7f6853f3c5659533a75bc712c3b" compoundref="logging_8h" startline="57">nest::M_WARNING</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1LoggingManager_1a7b2d5848b2ba02120e00450ee275d8df" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::deliver_logging_event_</definition>
        <argsstring>(const LoggingEvent &amp;event) const</argsstring>
        <name>deliver_logging_event_</name>
        <param>
          <type>const <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Delivers a <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref> to all registered clients. </para>
        </briefdescription>
        <detaileddescription>
<para>It iterates all callback from the client_callbacks_ and calls it with the <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref> as argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="114" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1LoggingManager_1af35944212cb5e6408b678c4b173469f2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::LoggingManager::default_logging_callback_</definition>
        <argsstring>(const LoggingEvent &amp;event) const</argsstring>
        <name>default_logging_callback_</name>
        <param>
          <type>const <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="116" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.cpp" bodystart="90" bodyend="104"/>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaacd7f6853f3c5659533a75bc712c3b" compoundref="logging_8h" startline="57">nest::M_WARNING</references>
        <references refid="classnest_1_1LoggingEvent_1a8e1de47536a5faf99c25804f90c552c0" compoundref="logging__event_8h" startline="51">nest::LoggingEvent::severity</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::LoggingManager</label>
        <link refid="classnest_1_1LoggingManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::LoggingManager</label>
        <link refid="classnest_1_1LoggingManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" line="47" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/logging_manager.h" bodystart="48" bodyend="123"/>
    <listofallmembers>
      <member refid="classnest_1_1LoggingManager_1ac6503e6e9d2cf94139f36798df861d54" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>all_entries_accessed</name></member>
      <member refid="classnest_1_1LoggingManager_1a33541187b4f25decff0f0f316cea69fc" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>all_entries_accessed</name></member>
      <member refid="classnest_1_1ManagerInterface_1aa88c28844a59b4791eab4b7930fc62b0" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1ManagerInterface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1LoggingManager_1aa535deeab60397c168a4f459125b7fa9" prot="private" virt="non-virtual"><scope>nest::LoggingManager</scope><name>client_callbacks_</name></member>
      <member refid="classnest_1_1LoggingManager_1af35944212cb5e6408b678c4b173469f2" prot="private" virt="non-virtual"><scope>nest::LoggingManager</scope><name>default_logging_callback_</name></member>
      <member refid="classnest_1_1LoggingManager_1a7b2d5848b2ba02120e00450ee275d8df" prot="private" virt="non-virtual"><scope>nest::LoggingManager</scope><name>deliver_logging_event_</name></member>
      <member refid="classnest_1_1LoggingManager_1a834c4782f46adf8b3a890cb4d191b034" prot="private" virt="non-virtual"><scope>nest::LoggingManager</scope><name>dict_miss_is_error_</name></member>
      <member refid="classnest_1_1LoggingManager_1a7df2114c58aaa551765073ddd3f48b1c" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1LoggingManager_1a8b49769d3ddb45f0fe1e8e86d282ac46" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>get_logging_level</name></member>
      <member refid="classnest_1_1LoggingManager_1ab7eceba0737ec4f47edd7c57095a34ef" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1LoggingManager_1a8afea8dce0717068a0998314269e3243" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1LoggingManager_1aab778b54c4233f7837a83a09bfe600f2" prot="private" virt="non-virtual"><scope>nest::LoggingManager</scope><name>logging_level_</name></member>
      <member refid="classnest_1_1LoggingManager_1a13e2b48fc880e28002661939ad00224c" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>LoggingManager</name></member>
      <member refid="classnest_1_1ManagerInterface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1ManagerInterface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1ManagerInterface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1ManagerInterface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1LoggingManager_1acdb56b52c6e670e6586786335f2bbb9c" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>publish_log</name></member>
      <member refid="classnest_1_1LoggingManager_1a0a78d6496c332ac5f5537dd00a0da413" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>register_logging_client</name></member>
      <member refid="classnest_1_1LoggingManager_1aa6a9775feef4690f5e8b9bfdfefc3f13" prot="public" virt="non-virtual"><scope>nest::LoggingManager</scope><name>set_logging_level</name></member>
      <member refid="classnest_1_1LoggingManager_1aa4406c42ee02a34b60d7eef8204f5562" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1ManagerInterface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::LoggingManager</scope><name>~ManagerInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
