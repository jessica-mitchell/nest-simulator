<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1BaseRandomGenerator" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::BaseRandomGenerator</compoundname>
    <derivedcompoundref refid="classnest_1_1RandomGenerator" prot="public" virt="non-virtual">nest::RandomGenerator&lt; RandomEngineT &gt;</derivedcompoundref>
    <includes refid="random__generators_8h" local="no">random_generators.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a060a5729c3fe031529c81baace4b983e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual nest::BaseRandomGenerator::~BaseRandomGenerator</definition>
        <argsstring>()</argsstring>
        <name>~BaseRandomGenerator</name>
        <qualifiedname>nest::BaseRandomGenerator::~BaseRandomGenerator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="64" column="11" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a472253c50dffaecb1a448f6395483610" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::uniform_int_distribution&lt; unsigned long &gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1aad40c7bf9e03db4e6d48b7c9ae35221d">operator()</reimplementedby>
        <param>
          <type>std::uniform_int_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Calls the provided distribution with the wrapped RNG engine. </para>
        </briefdescription>
        <detaileddescription>
<para>One operator per distribution must be defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution that will be called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="74" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a2512da8d7398489887ae02d73d694a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::uniform_real_distribution&lt;&gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a450d4494f2a75a1414231a1ce601a079">operator()</reimplementedby>
        <param>
          <type>std::uniform_real_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="75" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1aaaaf7e40729f6e2c6439ccc4af2551c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::poisson_distribution&lt; unsigned long &gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1ad62bb1efc952b130815ed16b49a34bab">operator()</reimplementedby>
        <param>
          <type>std::poisson_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="76" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1ad20e37e78309a1608e75debc923e04d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::normal_distribution&lt;&gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a6378c3763e541efb730e6ae97016de94">operator()</reimplementedby>
        <param>
          <type>std::normal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="77" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1aef117d929ee5ac4eed50be6d86f9a4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::lognormal_distribution&lt;&gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a7ffb30a7a53986603631546109c43390">operator()</reimplementedby>
        <param>
          <type>std::lognormal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="78" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a1cb1527038b11069334f706094616f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::binomial_distribution&lt; unsigned long &gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a7127b3b0d815e097f58f22645d7a1bfb">operator()</reimplementedby>
        <param>
          <type>std::binomial_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="79" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a1eaa74bc8d26b08098a6465a34b63da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::gamma_distribution&lt;&gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a662db7eb06758b8dfcce24c9759466bf">operator()</reimplementedby>
        <param>
          <type>std::gamma_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="80" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a5d18f95f6ee9eb4eeb64c99e9dcbdd66" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::exponential_distribution&lt;&gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1ac8e57968ef032ab08bfd9f10ed126d44">operator()</reimplementedby>
        <param>
          <type>std::exponential_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="81" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a574b47da2aa4456e364aa6826157f84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::discrete_distribution&lt; unsigned long &gt; &amp;d)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1aa84e11d50990909fe2388fc44ef78370">operator()</reimplementedby>
        <param>
          <type>std::discrete_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="82" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a06186796d519ed7f8f49da7397d54c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::uniform_int_distribution&lt; unsigned long &gt; &amp;d, std::uniform_int_distribution&lt; unsigned long &gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a3c7741c888b6b597e0a9b2b62b13fa5f">operator()</reimplementedby>
        <param>
          <type>std::uniform_int_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::uniform_int_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Calls the provided distribution with the wrapped RNG engine, using provided distribution parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>One operator per distribution must be defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution that will be called. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="91" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1aefa0d58372b408a12aa5fae8cf2edafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::uniform_real_distribution&lt;&gt; &amp;d, std::uniform_real_distribution&lt;&gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a315d96e8a07cf14e44e4c77c1358ffc3">operator()</reimplementedby>
        <param>
          <type>std::uniform_real_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::uniform_real_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="93" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a5e45fdc276d15bd247630b51724dfa81" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::poisson_distribution&lt; unsigned long &gt; &amp;d, std::poisson_distribution&lt; unsigned long &gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1abb59501479698026ebe46abee3d24577">operator()</reimplementedby>
        <param>
          <type>std::poisson_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::poisson_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="94" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a871b7a859435dc51adb2a59a7014b14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::normal_distribution&lt;&gt; &amp;d, std::normal_distribution&lt;&gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a3acd7572381608deed381a09e33d2d28">operator()</reimplementedby>
        <param>
          <type>std::normal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::normal_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="96" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a37be54106f0a82695f451002fbaa1ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::lognormal_distribution&lt;&gt; &amp;d, std::lognormal_distribution&lt;&gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a8b3c03079fc032775198d43ba9edb176">operator()</reimplementedby>
        <param>
          <type>std::lognormal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::lognormal_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="97" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a0aeae4aeb22ddfba73e3469821c6a768" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::binomial_distribution&lt; unsigned long &gt; &amp;d, std::binomial_distribution&lt; unsigned long &gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a9bf1758f36f3cb4a34fc886801d0c50b">operator()</reimplementedby>
        <param>
          <type>std::binomial_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::binomial_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="98" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a2ef81f616be10a510228f00f89d9b729" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::gamma_distribution&lt;&gt; &amp;d, std::gamma_distribution&lt;&gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a7028eaf466643f4e5fa3c5540edbe7c6">operator()</reimplementedby>
        <param>
          <type>std::gamma_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::gamma_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="100" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a5ea3fba875a9cc81864288648dc2bb47" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::exponential_distribution&lt;&gt; &amp;d, std::exponential_distribution&lt;&gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1ad860ff1d7e4304195517a4b2adb5c42c">operator()</reimplementedby>
        <param>
          <type>std::exponential_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::exponential_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="101" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a9d8fc0b53cd6528dd11a6727fc607ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::operator()</definition>
        <argsstring>(std::discrete_distribution&lt; unsigned long &gt; &amp;d, std::discrete_distribution&lt; unsigned long &gt;::param_type &amp;p)=0</argsstring>
        <name>operator()</name>
        <qualifiedname>nest::BaseRandomGenerator::operator()</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1acecca5c056c7a2943e16f21aa1c3b384">operator()</reimplementedby>
        <param>
          <type>std::discrete_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::discrete_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="102" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1ac9f238412d989640ad55a82e8d9e3a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::BaseRandomGenerator::drand</definition>
        <argsstring>()=0</argsstring>
        <name>drand</name>
        <qualifiedname>nest::BaseRandomGenerator::drand</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a9699db4c43a8caef056f31fe5f4411d2">drand</reimplementedby>
        <briefdescription>
<para>Uses the wrapped RNG engine to draw a double from a uniform distribution in the range [0, 1). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="108" column="18"/>
        <referencedby refid="classnest_1_1ConnectionCreator_1a9406f2b55a5fdbb556a8c5642e150967" compoundref="connection__creator__impl_8h" startline="73" endline="111">nest::ConnectionCreator::connect_to_target_</referencedby>
        <referencedby refid="classnest_1_1mip__generator_1abd0c2c060dc2a93380c6625fc9d6dcc1" compoundref="mip__generator_8cpp" startline="146" endline="177">nest::mip_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1poisson__generator__ps_1adc4906d29813d0f609b23efe52ad3fca" compoundref="poisson__generator__ps_8cpp" startline="210" endline="281">nest::poisson_generator_ps::event_hook</referencedby>
        <referencedby refid="classnest_1_1BernoulliBuilder_1a1f205dd554c84cf6374c29469ed0d3c5" compoundref="conn__builder_8cpp" startline="1624" endline="1653">nest::BernoulliBuilder::inner_connect_</referencedby>
        <referencedby refid="classnest_1_1gainfunction__erfc_1af8068ac34b2bc2225287606bf66b68f7" compoundref="erfc__neuron_8h" startline="154" endline="157">nest::gainfunction_erfc::operator()</referencedby>
        <referencedby refid="classnest_1_1gainfunction__ginzburg_1af29f20da240d8efd011bff3c1b2d022b" compoundref="ginzburg__neuron_8h" startline="169" endline="172">nest::gainfunction_ginzburg::operator()</referencedby>
        <referencedby refid="classnest_1_1bernoulli__synapse_1a621c9a6947bdf1225d1d98dbbe27f407" compoundref="bernoulli__synapse_8h" startline="147" endline="174">nest::bernoulli_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1quantal__stp__synapse_1a99ec542d220fbfda54165a9887c7e0e4" compoundref="quantal__stp__synapse_8h" startline="196" endline="238">nest::quantal_stp_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1UniformParameter_1a4602c970da96d8f096dbc5744be13505" compoundref="parameter_8h" startline="204" endline="207">nest::UniformParameter::value</referencedby>
        <referencedby refid="classnest_1_1ExponentialParameter_1a4cc5719841a35760707a69e3048f1b63" compoundref="parameter_8h" startline="324" endline="327">nest::ExponentialParameter::value</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1BaseRandomGenerator_1a3983c4b45417bf8fd09c592691f6c40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned long</type>
        <definition>virtual unsigned long nest::BaseRandomGenerator::ulrand</definition>
        <argsstring>(unsigned long N)=0</argsstring>
        <name>ulrand</name>
        <qualifiedname>nest::BaseRandomGenerator::ulrand</qualifiedname>
        <reimplementedby refid="classnest_1_1RandomGenerator_1a5adae48e125f4162d1e9dba8ee000dc6">ulrand</reimplementedby>
        <param>
          <type>unsigned long</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Uses the wrapped RNG engine to draw an unsigned long from a uniform distribution in the range [0, N). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value that can be drawn. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="114" column="25"/>
        <referencedby refid="classnest_1_1FixedOutDegreeBuilder_1ab9a2bb23bb142823ef65509b1486ed53" compoundref="conn__builder_8cpp" startline="1299" endline="1369">nest::FixedOutDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedTotalNumberBuilder_1abab6d39ad2dc94125e09f5c6fc4212c4" compoundref="conn__builder_8cpp" startline="1407" endline="1538">nest::FixedTotalNumberBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1SymmetricBernoulliBuilder_1a7dc57144fbbfb3bdacc30a8b6de8307b" compoundref="conn__builder_8cpp" startline="1689" endline="1780">nest::SymmetricBernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="635">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a660e2d7f16859a0e1807eef4331c6628" compoundref="sp__manager_8cpp" startline="714" endline="734">nest::SPManager::global_shuffle</referencedby>
        <referencedby refid="classnest_1_1FixedInDegreeBuilder_1a1e1b9e9a3423c4325e5e047a576c38bb" compoundref="conn__builder_8cpp" startline="1194" endline="1239">nest::FixedInDegreeBuilder::inner_connect_</referencedby>
        <referencedby refid="classnest_1_1UniformIntParameter_1a1eed25de1fb988b83dee028df139e7dd" compoundref="parameter_8h" startline="240" endline="243">nest::UniformIntParameter::value</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for RNG engine wrappers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::BaseRandomGenerator</label>
        <link refid="classnest_1_1BaseRandomGenerator"/>
      </node>
      <node id="2">
        <label>nest::RandomGenerator&lt; RandomEngineT &gt;</label>
        <link refid="classnest_1_1RandomGenerator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="61" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="62" bodyend="115"/>
    <listofallmembers>
      <member refid="classnest_1_1BaseRandomGenerator_1ac9f238412d989640ad55a82e8d9e3a45" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>drand</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a472253c50dffaecb1a448f6395483610" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a2512da8d7398489887ae02d73d694a6c" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1aaaaf7e40729f6e2c6439ccc4af2551c3" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1ad20e37e78309a1608e75debc923e04d9" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1aef117d929ee5ac4eed50be6d86f9a4bf" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a1cb1527038b11069334f706094616f2f" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a1eaa74bc8d26b08098a6465a34b63da2" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a5d18f95f6ee9eb4eeb64c99e9dcbdd66" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a574b47da2aa4456e364aa6826157f84b" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a06186796d519ed7f8f49da7397d54c5f" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1aefa0d58372b408a12aa5fae8cf2edafa" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a5e45fdc276d15bd247630b51724dfa81" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a871b7a859435dc51adb2a59a7014b14f" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a37be54106f0a82695f451002fbaa1ab9" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a0aeae4aeb22ddfba73e3469821c6a768" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a2ef81f616be10a510228f00f89d9b729" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a5ea3fba875a9cc81864288648dc2bb47" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a9d8fc0b53cd6528dd11a6727fc607ed9" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a3983c4b45417bf8fd09c592691f6c40e" prot="public" virt="pure-virtual"><scope>nest::BaseRandomGenerator</scope><name>ulrand</name></member>
      <member refid="classnest_1_1BaseRandomGenerator_1a060a5729c3fe031529c81baace4b983e" prot="public" virt="virtual"><scope>nest::BaseRandomGenerator</scope><name>~BaseRandomGenerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
