<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1Node" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::Node</compoundname>
    <derivedcompoundref refid="classnest_1_1ConnTestDummyNodeBase" prot="public" virt="non-virtual">nest::ConnTestDummyNodeBase</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1DeviceNode" prot="public" virt="non-virtual">nest::DeviceNode</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1StructuralPlasticityNode" prot="public" virt="non-virtual">nest::StructuralPlasticityNode</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1correlation__detector" prot="public" virt="non-virtual">nest::correlation_detector</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1correlomatrix__detector" prot="public" virt="non-virtual">nest::correlomatrix_detector</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1correlospinmatrix__detector" prot="public" virt="non-virtual">nest::correlospinmatrix_detector</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1proxynode" prot="public" virt="non-virtual">nest::proxynode</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1spike__train__injector" prot="public" virt="non-virtual">nest::spike_train_injector</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1volume__transmitter" prot="public" virt="non-virtual">nest::volume_transmitter</derivedcompoundref>
    <includes refid="node_8h" local="no">node.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1Node_1aa49a527d01a369f21afaddd4e13a9748" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class NodeManager</definition>
        <argsstring></argsstring>
        <name>NodeManager</name>
        <param>
          <type><ref refid="classnest_1_1NodeManager" kindref="compound">NodeManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="105" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1Node_1aa54a149299ea6a38d6cee1943b2bddf9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ModelManager</definition>
        <argsstring></argsstring>
        <name>ModelManager</name>
        <param>
          <type><ref refid="classnest_1_1ModelManager" kindref="compound">ModelManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="106" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1Node_1a157176d1c5146d6a93a538de218cbe8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class proxynode</definition>
        <argsstring></argsstring>
        <name>proxynode</name>
        <param>
          <type><ref refid="classnest_1_1proxynode" kindref="compound">proxynode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="107" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1Node_1a4b5b0493670970044a06856861cf3c86" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Synapse</definition>
        <argsstring></argsstring>
        <name>Synapse</name>
        <param>
          <type>Synapse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="108" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1Node_1a2bf2a0e9b454c55aa5dcb5aa4698697b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Model</definition>
        <argsstring></argsstring>
        <name>Model</name>
        <param>
          <type><ref refid="classnest_1_1Model" kindref="compound">Model</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="109" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1Node_1a630a7fe19e19ffa310ad17522b70878e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class SimulationManager</definition>
        <argsstring></argsstring>
        <name>SimulationManager</name>
        <param>
          <type><ref refid="classnest_1_1SimulationManager" kindref="compound">SimulationManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="110" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" static="no" mutable="no">
        <type><ref refid="classnest_1_1DeprecationWarning" kindref="compound">DeprecationWarning</ref></type>
        <definition>DeprecationWarning nest::Node::deprecation_warning</definition>
        <argsstring></argsstring>
        <name>deprecation_warning</name>
        <briefdescription>
<para>Member of <ref refid="classnest_1_1DeprecationWarning" kindref="compound">DeprecationWarning</ref> class to be used by models if parameters are deprecated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="827" column="22" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="827" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Node::node_id_</definition>
        <argsstring></argsstring>
        <name>node_id_</name>
        <briefdescription>
<para>Global Element ID (node ID). </para>
        </briefdescription>
        <detaileddescription>
<para>The node ID is unique within the network. The smallest valid node ID is 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="890" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="890" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" compoundref="node_8h" startline="975" endline="978">get_node_id</referencedby>
        <referencedby refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" compoundref="node_8h" startline="987" endline="990">set_node_id_</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Node::thread_lid_</definition>
        <argsstring></argsstring>
        <name>thread_lid_</name>
        <briefdescription>
<para>Local id of this node in the thread-local vector of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="895" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="895" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" compoundref="node_8h" startline="1057" endline="1060">get_thread_lid</referencedby>
        <referencedby refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" compoundref="node_8h" startline="1051" endline="1054">set_thread_lid</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int nest::Node::model_id_</definition>
        <argsstring></argsstring>
        <name>model_id_</name>
        <briefdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> ID. </para>
        </briefdescription>
        <detaileddescription>
<para>It is only set for actual node instances, not for instances of class <ref refid="classnest_1_1Node" kindref="compound">Node</ref> representing model prototypes. <ref refid="classnest_1_1Model" kindref="compound">Model</ref> prototypes always have model_id_==-1. <simplesect kind="see"><para><ref refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" kindref="member">get_model_id()</ref>, <ref refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" kindref="member">set_model_id()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="903" column="7" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="903" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" compoundref="node_8cpp" startline="119" endline="123">get_model_</referencedby>
        <referencedby refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="1000" endline="1003">get_model_id</referencedby>
        <referencedby refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">get_name</referencedby>
        <referencedby refid="classnest_1_1proxynode_1adca2ab6d0bee88577982522f07ea6649" compoundref="proxynode_8cpp" startline="89" endline="94">nest::proxynode::get_status</referencedby>
        <referencedby refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" compoundref="node_8h" startline="1006" endline="1009">set_model_id</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        <definition>thread nest::Node::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <briefdescription>
<para>thread node is assigned to </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="905" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="905" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" compoundref="node_8h" startline="1024" endline="1027">get_thread</referencedby>
        <referencedby refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" compoundref="node_8h" startline="1018" endline="1021">set_thread</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        <definition>thread nest::Node::vp_</definition>
        <argsstring></argsstring>
        <name>vp_</name>
        <briefdescription>
<para>virtual process node is assigned to </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="906" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="906" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" compoundref="node_8h" startline="1036" endline="1039">get_vp</referencedby>
        <referencedby refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" compoundref="node_8h" startline="1012" endline="1015">is_model_prototype</referencedby>
        <referencedby refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" compoundref="node_8h" startline="1030" endline="1033">set_vp</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::Node::frozen_</definition>
        <argsstring></argsstring>
        <name>frozen_</name>
        <briefdescription>
<para>node shall not be updated if true </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="907" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="907" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" compoundref="node_8h" startline="915" endline="918">is_frozen</referencedby>
        <referencedby refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" compoundref="node_8h" startline="870" endline="873">set_frozen_</referencedby>
        <referencedby refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" compoundref="node_8cpp" startline="173" endline="186">set_status_base</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::Node::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <briefdescription>
<para>state and buffers have been initialized </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="908" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="908" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" compoundref="node_8cpp" startline="78" endline="89">init</referencedby>
        <referencedby refid="structnest_1_1pp__psc__delta_1_1State___1a651a364c96badfc9aa87e59de9b57849" compoundref="pp__psc__delta_8cpp" startline="229" endline="235">nest::pp_psc_delta::State_::set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::Node::node_uses_wfr_</definition>
        <argsstring></argsstring>
        <name>node_uses_wfr_</name>
        <briefdescription>
<para>node uses waveform relaxation method </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="909" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="909" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" compoundref="node_8h" startline="921" endline="924">node_uses_wfr</referencedby>
        <referencedby refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" compoundref="node_8h" startline="933" endline="936">set_node_uses_wfr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::Node::nc_ptr_</definition>
        <argsstring></argsstring>
        <name>nc_ptr_</name>
        <briefdescription>
<para>Original <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> of this node, used to extract node-specific metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="911" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="911" bodyend="-1"/>
        <referencedby refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" compoundref="node_8h" startline="981" endline="984">get_nc</referencedby>
        <referencedby refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" compoundref="node_8h" startline="994" endline="997">set_nc_</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1Node_1a9c99a8caa89a3eb73e975f25678d5d58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>Node&amp; nest::Node::operator=</definition>
        <argsstring>(const Node &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
        </param>
        <briefdescription>
<para>not implemented </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="112" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_node_id_</definition>
        <argsstring>(index)</argsstring>
        <name>set_node_id_</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>Set global node id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="830" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="987" bodyend="990"/>
        <references refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" compoundref="node_8h" startline="890">node_id_</references>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1acc955f7172e28dd05d2d0496ecdf2423" compoundref="model__manager__impl_8h" startline="80" endline="87">nest::ModelManager::get_proxy_node</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a6eb03709d7f4617dda0104b306321596" compoundref="proxynode_8cpp" startline="36" endline="43">nest::proxynode::proxynode</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_nc_</definition>
        <argsstring>(NodeCollectionPTR)</argsstring>
        <name>set_nc_</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>nc_ptr</defname>
        </param>
        <briefdescription>
<para>Set the original <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="835" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="994" bodyend="997"/>
        <references refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" compoundref="node_8h" startline="911">nc_ptr_</references>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::Node::get_status_dict_</definition>
        <argsstring>()</argsstring>
        <name>get_status_dict_</name>
        <briefdescription>
<para>Return a new dictionary datum . </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by <ref refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" kindref="member">get_status_base()</ref> and returns a new empty dictionary by default. Some nodes may contain a permanent status dictionary which is then returned by <ref refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" kindref="member">get_status_dict_()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="844" column="27" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="126" bodyend="129"/>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Node::Node</definition>
        <argsstring>()</argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="115" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="41" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Node::Node</definition>
        <argsstring>(Node const &amp;)</argsstring>
        <name>Node</name>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> const &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="116" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="54" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>nest::Node::~Node</definition>
        <argsstring>()</argsstring>
        <name>~Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="117" column="11" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ad88edfd6f881579328b545d88372807d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>virtual Node* nest::Node::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
<para>Virtual copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should create a new object by calling the derived class&apos; copy constructor and return its pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="126" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::has_proxies</definition>
        <argsstring>() const</argsstring>
        <name>has_proxies</name>
        <reimplementedby refid="classnest_1_1correlation__detector_1aba8ab224f83829a70f89e7fc9dd988a9">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a8d8569bf770c010afeff6f5a38a7e3ab">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1ac1aecd8fd6880de3fc9c0667a727efb9">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1af451f253f56f84f0f3162982eb8c155c">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1aa8b7865765f6021b61f200342b4680ac">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1aa291f6eccb8e22891c5613e499e7b271">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1aff620297dad57721b0b20649d0e23d4c">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1a9cf2595fc5bf6401c8e6d295622f6dd2">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a56f8ecf2060f53a3fa18e87ed8a8ab2f">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1ad0ca2f451ec3814dc186178b6e13f093">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a800a7aa91f1dc9411b1f7e052999a3b5">has_proxies</reimplementedby>
        <briefdescription>
<para>Returns true if the node has proxies on remote threads. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to discriminate between different types of nodes, when adding new nodes to the network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="136" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="939" bodyend="942"/>
        <referencedby refid="classnest_1_1SparseNodeArray_1aadd91d887ae4a2a523385f9a0418e020" compoundref="sparse__node__array_8cpp" startline="70" endline="113">nest::SparseNodeArray::add_local_node</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="632">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="637" endline="784">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad376a94a0b04bdbe90d6d2205f133aed" compoundref="node__manager_8cpp" startline="458" endline="474">nest::NodeManager::get_mpi_local_node_or_device_head</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1ac2924f703d2138beea75f9bdf5783efb" compoundref="connection__creator__impl_8h" startline="255" endline="338">nest::ConnectionCreator::pairwise_bernoulli_on_target_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::supports_urbanczik_archiving</definition>
        <argsstring>() const</argsstring>
        <name>supports_urbanczik_archiving</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a8a0be565a145216772b9ff61e127a994">supports_urbanczik_archiving</reimplementedby>
        <briefdescription>
<para>Returns true if the node supports the Urbanczik-Senn plasticity rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="141" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="927" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::local_receiver</definition>
        <argsstring>() const</argsstring>
        <name>local_receiver</name>
        <reimplementedby refid="classnest_1_1ac__generator_1aa39430ebab95e2ed0cbfd951a8e08c6a">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1ab794e784ae2fc0cb50fa97b774a011f3">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a2e5c69ab75ee187a4f9e76aa547263cb">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a6fea6e050b13a1928c13f315809e179e">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1ad6a481ae249c5e67dd33072698f43445">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1a3879dacb0afb4c0277e428260b586b90">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1abe543eb1c52192c49ece0fd2bc2ca06d">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a99ab4018815774f9d614a2b741b09470">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a8afdebeedc92c3fcf92417dcb6e2b516">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a8405151fedb9c7e71d6c72859524e413">local_receiver</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1af17860220ee67edf40e4b5d204d66bbe">local_receiver</reimplementedby>
        <briefdescription>
<para>Returns true if the node only receives events from nodes/devices on the same thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="147" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="945" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::one_node_per_process</definition>
        <argsstring>() const</argsstring>
        <name>one_node_per_process</name>
        <briefdescription>
<para>Returns true if the node exists only once per process, but does not have proxies on remote threads. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to discriminate between different types of nodes, when adding new nodes to the network.</para>
<para>TODO: Is this true for <emphasis>any</emphasis> model at all? Maybe MUSIC related? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="157" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="951" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::is_off_grid</definition>
        <argsstring>() const</argsstring>
        <name>is_off_grid</name>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a3667e58d276d237f0b5ec397968182be">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1ad032a369663db69a8cf6ecc850e6ed32">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1aa2083efbd6e4905579f76d270ab181ef">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1acdc900e226b7c80858f94a319e568111">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1ab70ce33ffde1b702bc611e69cedf5e13">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1a0e0dbf5316ed81b85dc301055d2b3e39">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1a49f6d17f33d7b6255b72c50248a2ab2c">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1a3c59c449c4b83277920b01eb9ec52a41">is_off_grid</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1a3b82ccd1ca1445380167e967a28f2a1f">is_off_grid</reimplementedby>
        <briefdescription>
<para>Returns true if the node sends/receives off-grid events. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to discriminate between different types of nodes when adding new nodes to the network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="164" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="957" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::is_proxy</definition>
        <argsstring>() const</argsstring>
        <name>is_proxy</name>
        <reimplementedby refid="classnest_1_1proxynode_1a62ddd878060750beaf7f1c7806076876">is_proxy</reimplementedby>
        <briefdescription>
<para>Returns true if the node is a proxy node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is implemented because the use of RTTI is rather expensive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="170" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="963" bodyend="966"/>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="632">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="637" endline="784">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a0c2f6361c8cd9f8667f4e033f51d0ba5" compoundref="connection__creator__impl_8h" startline="180" endline="250">nest::ConnectionCreator::pairwise_bernoulli_on_source_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1ac2924f703d2138beea75f9bdf5783efb" compoundref="connection__creator__impl_8h" startline="255" endline="338">nest::ConnectionCreator::pairwise_bernoulli_on_target_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nest::Node::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Return class name. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns name of node model (e.g. &quot;iaf_psc_alpha&quot;) as string. This name is identical to the name that is used to identify the model in the interpreter&apos;s model dictionary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="178" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="108" bodyend="116"/>
        <references refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" compoundref="model_8h" startline="254" endline="257">nest::Model::get_name</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="267" endline="271">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" compoundref="node_8h" startline="903">model_id_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a1a95c36ab22b5e1687631c5f9f360ff1" compoundref="recording__backend__ascii_8cpp" startline="59" endline="74">nest::RecordingBackendASCII::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1ad38c6a48bf611386f204865b613c0794" compoundref="recording__backend__sionlib_8cpp" startline="74" endline="98">nest::RecordingBackendSIONlib::enroll</referencedby>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
        <referencedby refid="classnest_1_1ac__generator_1a92ca9096eb7bdd22f0f7243acb142def" compoundref="ac__generator_8h" startline="232" endline="239">nest::ac_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1dc__generator_1a8a9fce1d9733ac629e82587d42264c11" compoundref="dc__generator_8h" startline="193" endline="200">nest::dc_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1noise__generator_1a6270485566dc3930a1e9ddb05132db2c" compoundref="noise__generator_8h" startline="294" endline="306">nest::noise_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1sinusoidal__poisson__generator_1afcf5ef845de7e6eed21d0898bab94c4e" compoundref="sinusoidal__poisson__generator_8h" startline="295" endline="302">nest::sinusoidal_poisson_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1step__current__generator_1a181d5054d723e837404b141038bff49f" compoundref="step__current__generator_8h" startline="223" endline="230">nest::step_current_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1step__rate__generator_1adfbdab7e9f5698b29d1315bae6e7c7e3" compoundref="step__rate__generator_8h" startline="229" endline="236">nest::step_rate_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a9705b342fafc8e63ea4448f500cd5653" compoundref="iaf__psc__exp__ps__lossless_8h" startline="473" endline="480">nest::iaf_psc_exp_ps_lossless::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1amat2__psc__exp_1a7d82fb65dbbfb3abc4f434d3ab326d73" compoundref="amat2__psc__exp_8h" startline="412" endline="419">nest::amat2_psc_exp::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a3945ef56b7db6a93be1811d799015622" compoundref="cm__default_8h" startline="301" endline="311">nest::cm_default::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1correlation__detector_1a7dc084d35d1c86f1510debbe672b37d0" compoundref="correlation__detector_8h" startline="311" endline="319">nest::correlation_detector::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847" compoundref="correlomatrix__detector_8h" startline="301" endline="308">nest::correlomatrix_detector::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1correlospinmatrix__detector_1aa32cde8875786c86a21ac57f5a6a0dae" compoundref="correlospinmatrix__detector_8h" startline="297" endline="304">nest::correlospinmatrix_detector::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp_1af25237175ae7a245eb1c75bdd3dc3518" compoundref="gif__psc__exp_8h" startline="423" endline="430">nest::gif_psc_exp::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp__multisynapse_1ad6d456e8b64b011622333fccc09ad0f7" compoundref="gif__psc__exp__multisynapse_8h" startline="421" endline="430">nest::gif_psc_exp_multisynapse::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__chs__2007_1af04c73294bd50237be2a629c5836e2a6" compoundref="iaf__chs__2007_8h" startline="297" endline="304">nest::iaf_chs_2007::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha_1a2225445aab4561449392d4684dab2df4" compoundref="iaf__psc__alpha_8h" startline="368" endline="375">nest::iaf_psc_alpha::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="382" endline="391">nest::iaf_psc_alpha_multisynapse::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__ps_1a8da69ac6a81d12de6fab8e81ea2b730d" compoundref="iaf__psc__alpha__ps_8h" startline="470" endline="477">nest::iaf_psc_alpha_ps::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta_1a40da59b43d9e5e3aa3ec90e0906fcaac" compoundref="iaf__psc__delta_8h" startline="328" endline="335">nest::iaf_psc_delta::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta__ps_1ad8300166bd39b45e2e6486b9725e8c02" compoundref="iaf__psc__delta__ps_8h" startline="410" endline="417">nest::iaf_psc_delta_ps::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp_1a9189cfbe67319c4fe54c1a44a86bad80" compoundref="iaf__psc__exp_8h" startline="404" endline="411">nest::iaf_psc_exp::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" compoundref="iaf__psc__exp__htum_8h" startline="357" endline="364">nest::iaf_psc_exp_htum::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__multisynapse_1ac0894101e4b1d307ec51ba5221127ab9" compoundref="iaf__psc__exp__multisynapse_8cpp" startline="348" endline="357">nest::iaf_psc_exp_multisynapse::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps_1a1e8e69f499b6c26a7f37b3650b850441" compoundref="iaf__psc__exp__ps_8h" startline="426" endline="433">nest::iaf_psc_exp_ps::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1izhikevich_1a015518ced3a32518bf175c6cfdfd6b0f" compoundref="izhikevich_8h" startline="281" endline="288">nest::izhikevich::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1mat2__psc__exp_1addb30fb881dd8815ac4ef074e58bb283" compoundref="mat2__psc__exp_8h" startline="359" endline="366">nest::mat2_psc_exp::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1parrot__neuron_1a408b7efc01bb8bec1d72a4cbe470a2cd" compoundref="parrot__neuron_8h" startline="135" endline="147">nest::parrot_neuron::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1parrot__neuron__ps_1acba276c2f8377188781835be65a959be" compoundref="parrot__neuron__ps_8h" startline="136" endline="148">nest::parrot_neuron_ps::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1pp__psc__delta_1a9ff5de0b8ffcc2534143c1786588540d" compoundref="pp__psc__delta_8h" startline="403" endline="410">nest::pp_psc_delta::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1spike__dilutor_1aea24bf847b40dbbc427921b2f586cc7f" compoundref="spike__dilutor_8h" startline="174" endline="181">nest::spike_dilutor::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1spike__recorder_1adfe22aa11916872ebc6ce86270c8cefc" compoundref="spike__recorder_8h" startline="131" endline="138">nest::spike_recorder::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" compoundref="spin__detector_8h" startline="160" endline="167">nest::spin_detector::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1volume__transmitter_1a30e40b14d856ddd78f4a8f9d6fa0f2ed" compoundref="volume__transmitter_8h" startline="191" endline="198">nest::volume_transmitter::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1weight__recorder_1aa3514047cb68d630ba67dcb4a5fbacab" compoundref="weight__recorder_8h" startline="148" endline="155">nest::weight_recorder::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" compoundref="node_8cpp" startline="173" endline="186">set_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Name</type>
        <definition>Name nest::Node::get_element_type</definition>
        <argsstring>() const</argsstring>
        <name>get_element_type</name>
        <reimplementedby refid="classnest_1_1correlation__detector_1a920265899670f3321bd55152c388f920">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a69730a205c2c0fdf0370dd85af2b5910">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a895269b327360bb9406a6a20023564e0">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1ac300b14572033ccffd065bbe3e9fef6e">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a536cbacaf9edac51da0fee626da54e8f">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a93cd6ffe7c1ddf6d64225d6fc07eae06">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1a80609d7f33de8287fc8611f91700ee87">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1a50c19df0170a0e64aacaf4f6750c1352">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a957b01444bcff6e53be73989e1844816">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1abff92a4618d0b99cc395ae7d89b13115">get_element_type</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a07a29a4f1da521707bf0f8149fe9b9fb">get_element_type</reimplementedby>
        <briefdescription>
<para>Return the element type of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned Name is a free label describing the class of network elements a node belongs to. Currently used values are &quot;neuron&quot;, &quot;recorder&quot;, &quot;stimulator&quot;, and &quot;other&quot;, which are all defined as static Name objects in the names namespace. This function is overwritten with a corresponding value in the derived classes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="189" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="969" bodyend="972"/>
        <references refid="namespacenest_1_1names_1a68a39f064d15cd8b75cbf10bda92383d">nest::names::neuron</references>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Node::get_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_node_id</name>
        <briefdescription>
<para>Return global Network ID. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the global network ID of the <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. Each node has a unique network ID which can be used to access the <ref refid="classnest_1_1Node" kindref="compound">Node</ref> comparable to a pointer.</para>
<para>The smallest valid node ID is 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="199" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="975" bodyend="978"/>
        <references refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" compoundref="node_8h" startline="890">node_id_</references>
        <referencedby refid="classnest_1_1SparseNodeArray_1aadd91d887ae4a2a523385f9a0418e020" compoundref="sparse__node__array_8cpp" startline="70" endline="113">nest::SparseNodeArray::add_local_node</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1ae14172cd7bc3e95af782489ceaa5de3a" compoundref="recording__backend__ascii_8cpp" startline="157" endline="169">nest::RecordingBackendASCII::compute_vp_node_id_string_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a9406f2b55a5fdbb556a8c5642e150967" compoundref="connection__creator__impl_8h" startline="73" endline="111">nest::ConnectionCreator::connect_to_target_</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1aaf4fa1fb6c512492a91c53acb13f20ca" compoundref="recording__backend__ascii_8cpp" startline="77" endline="87">nest::RecordingBackendASCII::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1a6edc2880d0f57115a3ef41197b587749" compoundref="recording__backend__memory_8cpp" startline="66" endline="76">nest::RecordingBackendMemory::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1aa7ca898f0079c2380631ce812f20dcdf" compoundref="recording__backend__mpi_8cpp" startline="96" endline="106">nest::RecordingBackendMPI::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1ad6eaebc77b37876d4bf48e2ba7ed6313" compoundref="recording__backend__screen_8cpp" startline="60" endline="70">nest::RecordingBackendScreen::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a37a5b2e4697abc6a284f72c784b16ea9" compoundref="recording__backend__sionlib_8cpp" startline="101" endline="111">nest::RecordingBackendSIONlib::disenroll</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1a56c15b58587a99e1bcc813b97bed72b9" compoundref="stimulation__backend__mpi_8cpp" startline="86" endline="97">nest::StimulationBackendMPI::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a1a95c36ab22b5e1687631c5f9f360ff1" compoundref="recording__backend__ascii_8cpp" startline="59" endline="74">nest::RecordingBackendASCII::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1a1da48327a1cee8511bfd3cd83cea6d39" compoundref="recording__backend__memory_8cpp" startline="50" endline="63">nest::RecordingBackendMemory::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1aca238fd90a38083e517640f7b36d23cf" compoundref="recording__backend__mpi_8cpp" startline="72" endline="93">nest::RecordingBackendMPI::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1a8306eb9cb2dab1f970abc6509d9cc5dd" compoundref="recording__backend__screen_8cpp" startline="44" endline="57">nest::RecordingBackendScreen::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1ad38c6a48bf611386f204865b613c0794" compoundref="recording__backend__sionlib_8cpp" startline="74" endline="98">nest::RecordingBackendSIONlib::enroll</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1ac3af465f99360719a66c93e44a40a4bd" compoundref="stimulation__backend__mpi_8cpp" startline="66" endline="82">nest::StimulationBackendMPI::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1ac085ad5ab92cf03d494a9f12827fa837" compoundref="recording__backend__ascii_8cpp" startline="210" endline="220">nest::RecordingBackendASCII::get_device_status</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1ace8e14dbbd1cfb3eb9c2c78869bafc48" compoundref="recording__backend__memory_8cpp" startline="130" endline="140">nest::RecordingBackendMemory::get_device_status</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1a897e5dfc1afe602e58ba4a82756c736f" compoundref="recording__backend__screen_8cpp" startline="124" endline="134">nest::RecordingBackendScreen::get_device_status</referencedby>
        <referencedby refid="classnest_1_1NodePosParameter_1a16bebfcb9f69023219ad2e45c6d58f8b" compoundref="parameter_8cpp" startline="134" endline="169">nest::NodePosParameter::get_node_pos_</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1a1b4167e8f8555d8cf06b59429d72425d" compoundref="recording__backend__mpi_8cpp" startline="358" endline="361">nest::RecordingBackendMPI::get_port</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1a8bd04117ec9d75fc4b6e10192848c039" compoundref="stimulation__backend__mpi_8cpp" startline="286" endline="289">nest::StimulationBackendMPI::get_port</referencedby>
        <referencedby refid="classnest_1_1Event_1aaa1bfdd94c07c6a94547086f8139a960" compoundref="event_8cpp" startline="71" endline="74">nest::Event::get_receiver_node_id</referencedby>
        <referencedby refid="classnest_1_1weight__recorder_1ac9dfea06dc5c9d7f8e02b4ba0077d131" compoundref="weight__recorder_8cpp" startline="149" endline="172">nest::weight_recorder::get_status</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1a60b60f1790b78bdaca10bf6d30ac3930" compoundref="recording__device_8cpp" startline="177" endline="201">nest::RecordingDevice::get_status</referencedby>
        <referencedby refid="classnest_1_1STDPDopaCommonProperties_1acb1d886dbda434828d5964487623b8c6" compoundref="stdp__dopamine__synapse_8cpp" startline="55" endline="75">nest::STDPDopaCommonProperties::get_status</referencedby>
        <referencedby refid="classnest_1_1TargetIdentifierPtrRport_1a7fdf452d75d258b2729444e6451f618d" compoundref="target__identifier_8h" startline="63" endline="71">nest::TargetIdentifierPtrRport::get_status</referencedby>
        <referencedby refid="classnest_1_1StimulationDevice_1a3c17981ffa0b79bf9b2e559bcfba1573" compoundref="stimulation__device_8cpp" startline="166" endline="182">nest::StimulationDevice::get_status</referencedby>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
        <referencedby refid="classnest_1_1STDPDopaCommonProperties_1a8bee974e4fd52feb6fa0e7dc436b5472" compoundref="stdp__dopamine__synapse_8h" startline="176" endline="186">nest::STDPDopaCommonProperties::get_vt_node_id</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1a466c7b9ed8d05e9d42eed08009dc81e0" compoundref="recording__device_8cpp" startline="125" endline="174">nest::RecordingDevice::set_status</referencedby>
        <referencedby refid="classnest_1_1StimulationDevice_1a1ebf88604667e02e4070d73ffcc63845" compoundref="stimulation__device_8cpp" startline="123" endline="162">nest::StimulationDevice::set_status</referencedby>
        <referencedby refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" compoundref="node_8cpp" startline="173" endline="186">set_status_base</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a3f6ce3b2435231a21a70ed29aaedd5cd" compoundref="recording__backend__ascii_8cpp" startline="90" endline="100">nest::RecordingBackendASCII::set_value_names</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1af84c297eca863fece65d2823a73dceb5" compoundref="recording__backend__memory_8cpp" startline="79" endline="89">nest::RecordingBackendMemory::set_value_names</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a2250b3d3afeb4a4ef6ff041796e2bc8a" compoundref="recording__backend__sionlib_8cpp" startline="114" endline="137">nest::RecordingBackendSIONlib::set_value_names</referencedby>
        <referencedby refid="classnest_1_1NormalParameter_1af8f84653ced0e1db8f58882f4cc0a5bb" compoundref="parameter_8cpp" startline="99" endline="104">nest::NormalParameter::value</referencedby>
        <referencedby refid="classnest_1_1LognormalParameter_1aae79ab35ee3bbee67c84d21101bb5266" compoundref="parameter_8cpp" startline="125" endline="130">nest::LognormalParameter::value</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a83b10ed6b51d99ffa3592769b306d73a" compoundref="recording__backend__ascii_8cpp" startline="139" endline="154">nest::RecordingBackendASCII::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1a6e7bbff1b8b3f06ac6af0373a0edfb4b" compoundref="recording__backend__memory_8cpp" startline="104" endline="113">nest::RecordingBackendMemory::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1a66706a8e4259b49223922d02a3b6d12e" compoundref="recording__backend__mpi_8cpp" startline="319" endline="340">nest::RecordingBackendMPI::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1aa4472c8050ecc09d0f9e12fd96c69e04" compoundref="recording__backend__screen_8cpp" startline="93" endline="107">nest::RecordingBackendScreen::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1aae5a15742fb627fb2036da06d886720b" compoundref="recording__backend__sionlib_8cpp" startline="427" endline="518">nest::RecordingBackendSIONlib::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::Node::get_nc</definition>
        <argsstring>() const</argsstring>
        <name>get_nc</name>
        <briefdescription>
<para>Return lockpointer to the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> that created this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="204" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="981" bodyend="984"/>
        <references refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" compoundref="node_8h" startline="911">nc_ptr_</references>
        <referencedby refid="namespacenest_1a6443c6b38e840631d5173ba8392a9f70" compoundref="spatial_8cpp" startline="325" endline="366">nest::distance</referencedby>
        <referencedby refid="classnest_1_1NodePosParameter_1a16bebfcb9f69023219ad2e45c6d58f8b" compoundref="parameter_8cpp" startline="134" endline="169">nest::NodePosParameter::get_node_pos_</referencedby>
        <referencedby refid="namespacenest_1aed80cb7b194e1d7a6644e3585e76f1c8" compoundref="spatial_8cpp" startline="111" endline="136">nest::get_position</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int nest::Node::get_model_id</definition>
        <argsstring>() const</argsstring>
        <name>get_model_id</name>
        <briefdescription>
<para>Return model ID of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the model ID of the model for this node. <ref refid="classnest_1_1Model" kindref="compound">Model</ref> IDs start with 0. <simplesect kind="note"><para>The model ID is not stored in the model prototype instance. It is only set when actual nodes are created from a prototype. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="213" column="7" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1000" bodyend="1003"/>
        <references refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" compoundref="node_8h" startline="903">model_id_</references>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a38ee31043d430d96132c5110e784e3a5" compoundref="proxynode_8cpp" startline="46" endline="50">nest::proxynode::send_test_event</referencedby>
        <referencedby refid="classnest_1_1proxynode_1afdfb38f8d6bd5837527a75eb4c6ff76e" compoundref="proxynode_8cpp" startline="53" endline="56">nest::proxynode::sends_secondary_event</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a86ae0ceb13ec36aeaeaea6e0f1257ec0" compoundref="proxynode_8cpp" startline="83" endline="86">nest::proxynode::sends_signal</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string nest::Node::print_network</definition>
        <argsstring>(int, int, std::string=&quot;&quot;)</argsstring>
        <name>print_network</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>std::string</type>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Prints out one line of the tree view of the network. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="219" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Node::is_frozen</definition>
        <argsstring>() const</argsstring>
        <name>is_frozen</name>
        <briefdescription>
<para>Returns true if node is frozen, i.e., shall not be updated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="227" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="915" bodyend="918"/>
        <references refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" compoundref="node_8h" startline="907">frozen_</references>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Node::node_uses_wfr</definition>
        <argsstring>() const</argsstring>
        <name>node_uses_wfr</name>
        <briefdescription>
<para>Returns true if the node uses the waveform relaxation method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="232" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="921" bodyend="924"/>
        <references refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" compoundref="node_8h" startline="909">node_uses_wfr_</references>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_node_uses_wfr</definition>
        <argsstring>(const bool)</argsstring>
        <name>set_node_uses_wfr</name>
        <param>
          <type>const bool</type>
          <defname>uwfr</defname>
        </param>
        <briefdescription>
<para>Sets node_uses_wfr_ member variable (to be able to set it to &quot;true&quot; for any class derived from <ref refid="classnest_1_1Node" kindref="compound">Node</ref>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="238" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="933" bodyend="936"/>
        <references refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" compoundref="node_8h" startline="909">node_uses_wfr_</references>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a326d0e1390c83f0f98d454de4a8f49da" compoundref="rate__neuron__ipn__impl_8h" startline="189" endline="197">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::rate_neuron_ipn</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__opn_1a4eff3064fdc7e7ce6c743c55aa81ea3e" compoundref="rate__neuron__opn__impl_8h" startline="174" endline="182">nest::rate_neuron_opn&lt; TNonlinearities &gt;::rate_neuron_opn</referencedby>
        <referencedby refid="classnest_1_1rate__transformer__node_1a225f436297ca15e09e918a51612536a7" compoundref="rate__transformer__node__impl_8h" startline="128" endline="135">nest::rate_transformer_node&lt; TNonlinearities &gt;::rate_transformer_node</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>Initialize node prior to first simulation after node has been created. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" kindref="member">init()</ref> allows the node to configure internal data structures prior to being simulated. The method has an effect only the first time it is called on a given node, otherwise it returns immediately. <ref refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" kindref="member">init()</ref> calls virtual functions <ref refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" kindref="member">init_state_()</ref> and <ref refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453" kindref="member">init_buffers_()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="248" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="78" bodyend="89"/>
        <references refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453" compoundref="node_8cpp" startline="92" endline="94">init_buffers_</references>
        <references refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" compoundref="node_8cpp" startline="73" endline="75">init_state_</references>
        <references refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" compoundref="node_8h" startline="908">initialized_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Node::pre_run_hook</definition>
        <argsstring>()=0</argsstring>
        <name>pre_run_hook</name>
        <reimplementedby refid="classnest_1_1RecordingDevice_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1ac__generator_1ad46b2ee10a45923c52c9ec2ba29b4de8">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1ac2ff3d9c5ac2ec5cdcbd827c6af50f18">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a6bbdea3ac268b679ec0741101e2893b6">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a4d9fd53bdf0f7b40b9f47a91e711c33a">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1af76ba74baa02a75d9382d818e1fa4a97">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a5a7cf48e7001145523f26c8e7b658dc9">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a2709eaf7a0c740a010ad0816ff7ae725">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1ac420b56549ea7fa85ab3ccdb6b805500">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a9195ca49679fa202001dd6dcbdc1498f">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1af400b7dc659129ea7cd13bcf7d2fa2a8">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1ab38d8fa73028186075e78399920d1587">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1a4eaed8679f965d893a31c93014353ed0">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a94a241146fde8f1026a2af6ead05a706">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a72abd38a2c88ac9fe415924a0f60608f">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa149e3ab77ee62c93a39ab7fa8dadda2">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a42f939553c8a7daa6960cf2aece6bd09">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a4e60257e28068ca4062236a8f7edf5f6">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a68e3ba42b642047480e984a8aab543b7">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1aabe22b6edde52b1529ccaf0bd46a7ba3">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a0f0bfbd65e6c6c2d5de8501b5a19cdb7">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a0427d812da7c8be788dd5c1669a0b945">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a26cf4785020b121ebd9dd5aba4e17e95">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1afa50053c139d7867bfbca26997b448c5">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1a6e9d7eb9c5635c80ccf201261815a1f8">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1aba64075a31b36ec1bc6a2d2c68080fa9">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1a1222358054543d2d32e6e47a8ad89c05">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1aeb4de02037b155e1d2e7e14a0e4ffe35">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1a352fc50e020b737e61c56561194db8a6">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a885126416c46cb6a12072bb918414837">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1aa9c543d49704705f6baaf6746db16ee4">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1afd0d2828695e6435cc9ca92b1889d2b2">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1a216ff33c7f50e59357ebb8f4f4a9b05a">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1a3a60e7fe56562aa73fd078ec7ea87df6">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a66b25bd25cca6c053ff7f381e0b39c77">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1acafc670694a092e7beda61161e761546">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1a1250869dd296817cdd236764ed490485">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1aeacf4546d9ea0e2ea893ecba53d743a7">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1ac3a8f9ac2113808e9d09c160cdfa591f">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1abcbc67a332220d6d99e3d026ed65613e">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a9c2201ffb8fe2b96cc68f0d9afdb9005">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a590f71e93b4a29cd118fa03411dacf69">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a4e3d967e84bab3ad6bd6bb631388dc33">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1a16b90b25a38e5030a84ea62ba1bcbb71">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1a0075298b8d790fe6fd808a69f11442b3">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1aed2f1e3e033a7c87f00838beb0919bea">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1afbb7d65104c69970a7dcc7ebe9c4ea8d">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a5ba316fe701eead95774a8a8c1673c9b">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a3b3459f9af7dd9c62a9c23a2b2523278">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1a6544b6f863ff396eb0c7a2a6de531d2f">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1ConnTestDummyNodeBase_1a3cd4f0e3d7ba66763c8ef54ae8068ef6">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1aff7a8cc3e37e89c6b541cefe4ba1919c">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a53ca0035b5b2ddedbf5f5d7a5fc47718">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1RecordingDevice_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplementedby>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="257" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::calibrate_time</definition>
        <argsstring>(const TimeConverter &amp;)</argsstring>
        <name>calibrate_time</name>
        <reimplementedby refid="classnest_1_1binary__neuron_1a01ad621d3dba19ce30412a78cc8c461e">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1adba3ab31409b2592f84f5822a625ad7d">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a2fc7fb23335aeb594b102c2c2b1bd7ba">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a0bfcf0f65ac989ac3f8bc33d65335f1d">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1a5a60a9f98cb13adb2b071e5aa0cf3b1e">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a84619281ad832629fafb47463a68798b">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1aa50ebb9ee8fefc3728dff40806dd44cf">calibrate_time</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1acbb8014280f50802ed1eb789dba52e3c">calibrate_time</reimplementedby>
        <param>
          <type>const <ref refid="classnest_1_1TimeConverter" kindref="compound">TimeConverter</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Re-calculate time-based properties of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called after a change in resolution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="264" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::post_run_cleanup</definition>
        <argsstring>()</argsstring>
        <name>post_run_cleanup</name>
        <briefdescription>
<para>Cleanup node after Run. </para>
        </briefdescription>
        <detaileddescription>
<para>Override this function if a node needs to &quot;wrap up&quot; things after a call to Run, i.e., before <ref refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref> returns. Typical use-cases are devices that need to flush buffers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="275" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
<para>Finalize node. </para>
        </briefdescription>
        <detaileddescription>
<para>Override this function if a node needs to &quot;wrap up&quot; things after a full simulation, i.e., a cycle of Prepare, Run, Cleanup. Typical use-cases are devices that need to close files. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="286" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="286" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Node::update</definition>
        <argsstring>(Time const &amp;, const long, const long)=0</argsstring>
        <name>update</name>
        <reimplementedby refid="classnest_1_1ConnTestDummyNodeBase_1aa0238a34dad329cad3e1228b74819aaf">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a7d016fdc308961e45176270517931310">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1aae9549e793b3333b55295c25c2e129d7">update</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a82b242f2aa00edebf8d09404deba98f7">update</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1a991462dfe7560219ae1f1b8e06712dce">update</reimplementedby>
        <reimplementedby refid="classnest_1_1ac__generator_1a4705615637b1f0b825d1d383ca39b876">update</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1aeade54dfbec239411e5a51d6c98e46ae">update</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1aca374e9704d7c6b7e2e0b2baf16dd645">update</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a32a8a0a8d9720bb1aff55d2bca5b1fef">update</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1ae8f4a9cec7597a23d19d9f7bf0e1ab15">update</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a6a99fd6f081104a69d53d5d7401a9c06">update</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1ae673dcee1daa6200fa20a8919c824918">update</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1a9563668cf75ef013b2245126f3590a53">update</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a7b347ee7edef38f6f94393c3c3be4f0b">update</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1aefdc2fabaee2469d8373c5d900724f81">update</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1a08a2d4d9e728e9b11ddec66354b92855">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1ab9d9aa64a102d6b276d0588a12e6437e">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a9e745bf89178e504a285d0c40c6d2e49">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a421e244e7bf1400a2326ee75054aeee5">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a9e6a7c8866462dfb4619d2bbb2ec24fa">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1aa74239fcf47290e0f7b86e4403fbb84a">update</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1a60d840a269197f560d4400c167b1a251">update</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a4ed2beb7b2ccd8f757bc3f38ebce6de0">update</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1ae9f577854b433bb050ed603b995010cc">update</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1a480d772b54fef98b7a3f273d8d098467">update</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1abbad23126653a41a7590a55b971c6dd2">update</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a4e470deac0d4aabeeb3020250b42ca65">update</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a999a763bac330b4d8bec83eec5aebf06">update</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1a557dfb7872cdc45b8840b16ea755b4da">update</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1a4cebfa0a444930c045725ccf40d896a1">update</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1a61693db596fef528c2b52614d5d52622">update</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a2ea479d86c1470a335247ad32960ce47">update</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1ad9d25b379172d5363ef3b99df931e2cb">update</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1afc0ef90d6141445fee89e0856cb586e5">update</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1ae03a5b3abe2991c974ccba3a052f5e49">update</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a50b1abc719f2f906a280d701fa6b052c">update</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a4d49e62514785d4a2dd5a1a0fd562591">update</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1accf5d4be845204104fb67d3b193d3fc6">update</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a06800e67b58775edfd74890cb22ddc1e">update</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a1ed2922a414a4e4d8469398ea5c4f984">update</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1a9256816e8965849bb8f993226cd3b34e">update</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1a8db9ee62302a08463b2dc2d32e1e8472">update</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1acd1a3985a5a73299d4a3472177db9691">update</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a3e1950f9a332db79103df7636483c9aa">update</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1abd03c8783b41706942e5961ec2207c0c">update</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1abe83a049360c372ca96e6776b4d91d1a">update</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a423c87811fa0812e957c9867344ac217">update</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1af05954acb25332ea46fcc8d5b24a7a6c">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a36f9e294838630afac790d7b7537f309">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1aebf116502d0de4017dd16592625d8dff">update</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a2a10685c48e126fae2f936448c5f6f54">update</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$. </para>
        </briefdescription>
        <detaileddescription>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="302" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Node::wfr_update</definition>
        <argsstring>(Time const &amp;, const long, const long)</argsstring>
        <name>wfr_update</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a1cfd51f3e2295f9f2e890299916a9ac5">wfr_update</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a74f2d03740da9658df0c3ecb9e530f0a">wfr_update</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1ad8324d65d4dd79b54c7b2cb00cdf8f65">wfr_update</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$, sends SecondaryEvents (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of wfr_update just throws <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref>.</para>
<para><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref>) and resets state variables to values at $t$.</para>
<para>n-&gt;wfr_update(T, from, to) performs the update steps beginning at T+from .. T+to-1.</para>
<para>Does not emit spikes, does not log state variables.</para>
<para>throws <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> if not reimplemented in derived class</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="320" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Node::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;)=0</argsstring>
        <name>set_status</name>
        <reimplementedby refid="classnest_1_1ac__generator_1ae9f83a79b4f96a77a48dff3d5e1a5608">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a561382d0c3e8ddfa54b067e60841dc8e">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a8c0b8216efa7ce41ab718cfe4b9ef145">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a506d4ae17551d5d6b7d87cdb72852f16">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1aea50d3429d1a132bb531d6889708ac70">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a1c76fccf510cfb0ddc8a336526738830">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a3f80449a5d74294eae88b0ca38e58c45">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1ac5ec8e4c2c16a1977d9b4272480cf2b1">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a15799863292a105ce060d1dfa9c1525d">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1a8e4d3cd8661596d77845424451e99b3b">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1affc098fd776afec67b366506c2c506a9">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1ac71adf15350c54c2c1538c4ea777ba96">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a9f3e3e0a2daf3ea05e66938b6aace0bf">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a77cf8fd1866012f3f9f7ddc782c8267f">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1adbd9107e5712619349f2244a480b6cef">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a659b4545668e693d9af0960395ec9d0d">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a25c08355d2b214e55665ccb7309e6653">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a608857574d9260fd25cd1c3041ef07c3">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1a333f9b1b35f121a705f3fd96bfa38882">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a03f1a591aae55252d3db05b848c0509c">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a1dc814a5cc4c2ad380f856c1c3665b43">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a5d6e52c3928216d5577900dc77a55c7a">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a83dcb4e3c8e3ebe1b31e2a63b212cd31">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1aaabcd6b92565a9a52d440f69570783e6">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a31d6a4ff6343dd4be3ac1284ac28d0d0">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1aaaf10f3aae70fe0ae4d2712c0468a03d">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1a6c01e625adef44b8841556f4c7a8d369">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1a25c0c41b427eaa597f1efc7eb81c9cac">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a7138c8daaa65013034b97205d8a8bbcb">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1aedb70a5dca11b3784cc85d0ab8c2a2d6">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1ab28b9ebcfbdf103463d6f30094e1400e">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1a3907ee9a951f6af3dcccf80bccb94cf1">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1a1007f9bc3fa93c0000d0c29d362625a0">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1af8f707c00e9cd0d738978619604cac36">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1aa1060baa155aa29e5e780c62ba218c77">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1a8f50cffee796d6954ddbb9faf11aa4d5">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a588f8b86a494701f11a6c9e13fa71f35">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a9a803586f0129ca0fb633c633a0365d4">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a45ae6882e27ccefa0c3302c51b977dd5">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a2ce94ecdc6b74227d0440fbba8a170b4">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a339fdb52c7e0406c501dae0ac345d2b9">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a96e3acc90f2b41fb63cf4e558b9ab6f5">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1a623e5533311745a9bf08f8010ecdfbe1">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1afde64b352407573bfd9ead83f2c50eef">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1acf81fb512b99425a8e6d6b82aecbc38a">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a8a09385f3b632145a9e337b783f308d9">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a920d4e53dc3e1152dbaa8dc4321a8f52">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1a57830961d6384fdac5d3b9bffc0e5534">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ConnTestDummyNodeBase_1a5092d6cda27349b1e53760a36fdd1f33">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1afe676f263f8848ca1a6990cf1949f634">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1RecordingDevice_1a466c7b9ed8d05e9d42eed08009dc81e0">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a1ebf88604667e02e4070d73ffcc63845">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a7f8e84819f80de3650c5259f61ea498f">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ArchivingNode_1ac69d56c97bed5fd58fab9c3c745328c4">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ClopathArchivingNode_1a7ba4e2728b3bcbccf08c78944fee033d">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a024eac5832f6de6336014cac45b2ad10">set_status</reimplementedby>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a1b118e0208155781e44cbb9ccdb91a87">set_status</reimplementedby>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Change properties of the node according to the entries in the dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="344" column="16"/>
        <referencedby refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" compoundref="node_8cpp" startline="173" endline="186">set_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Node::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const =0</argsstring>
        <name>get_status</name>
        <reimplementedby refid="classnest_1_1ac__generator_1aef46661b64a798965c7b0e8f51f30b7b">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a961da12900f91fac709dd9de5833ff60">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1ac1ccc208a1c6bd50a25aeb22e12cae0b">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1af1387a3235882a16a359bf8796d5945e">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1ad6719b66043647cf0e71eb58cff7f4e7">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a4de936f891fccb9240b18f44900050ff">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1ab7a927118378d4e557c263ce72677145">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a0724e37d3e1cbe945309455ec9e951f1">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1af83620657dc2d00ef881936ce13784ec">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1a2161cb512d387917d5cf98a16ca68de8">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1ade3cf7e1587bce6b72bb69eccabec491">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a9072e8634e1a492095048bd52fd5893b">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1afb60d4c833835c4d719c57aa60c29c86">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a90d8bb22cd87cc9ac223d19723d910c3">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1ac3a7829476f1a6314403ad606f75cfaf">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a0ada9269bd39992cef02cfc5698f265a">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1ae346d5c88abc3d09ee102d3cbd4ef80d">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1acf0265d32e9036d6c80f58939896cf2b">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a4ffb83aae4d6e6a48665e236959156ae">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a3e37f8896e4732ec60700801cd040b72">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1adb1105159df7bab671533077096cd143">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a05da34c7007adc89d739dda5bdd6e989">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1a486c4258b82f9b14fd2c9ef322d536d8">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a0f0e48bad8115eaf817fc02c6ae5cbfd">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1a88195241337472a8b6075e882637781b">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1a05021ee19f1ac100e96493f89beffc5e">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1adcf15205a1624343eae90243e692c9e8">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1ac817838c90876f77d9fa913679de89fe">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a772387923fe7cbeced1c8e47c2d46a73">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1ad5586c63c0071ba7bc67b07c0d4a81a5">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1aa4bebb9311d48f1b312b7fe3ac283e63">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1a800d9e11958be048772e1af1bdc06f25">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a731d2ce80858da24c8b1d3f0048bc788">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1a8618c060385f11830fec81be83425da2">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1ab712c4aca7cbd90245d8fe125a1b2801">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1ae949a0d7f024bc09e9f8721871e39509">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1adca5d1c9c2b3a29557d73a78d2e9777c">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a0a79a4a8fcfa1423fe923cc6cfd7916d">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1ad31dd40997a2b931ec3fcee6c54d0b75">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1abc792a0300fac039a706b90087c8c0b8">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a5417629d73ff60b7774fdf533663b3df">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1ab186a323af2338b25eff0aae6cae94e7">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1a3b05c9cdace73650fae3f92ca252aa37">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1ac6c7cf6c7b0c28505fd96695f575a72b">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1ae0c7575db0cce9011d0760da461bc096">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1afa9606afa1898ea0dc46f6bf4d4ffc67">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1ac9dfea06dc5c9d7f8e02b4ba0077d131">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ConnTestDummyNodeBase_1ac98684d0fc231163a2f76c3fb05d9a8d">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1adca2ab6d0bee88577982522f07ea6649">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1RecordingDevice_1a60b60f1790b78bdaca10bf6d30ac3930">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1ac089e417f3f97d283547aa9df32ffa6c">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ArchivingNode_1acd46838612262b4a5d4cacdf7d901145">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1ClopathArchivingNode_1a5323ca3c863862b223b1c264b5a8d1a9">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1StimulationDevice_1a3c17981ffa0b79bf9b2e559bcfba1573">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1ab462ef1110549f1efb3b26f8e48f38d5">get_status</reimplementedby>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a54cac2900fc5fc3d7b66568de52d8fda">get_status</reimplementedby>
        <param>
          <type>DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="352" column="16"/>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::send_test_event</definition>
        <argsstring>(Node &amp;receiving_node, rport receptor_type, synindex syn_id, bool dummy_target)</argsstring>
        <name>send_test_event</name>
        <reimplementedby refid="classnest_1_1glif__psc_1a0fad7fed48c72cb7b3547a2f435d8e1e">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1ac__generator_1aa10c960e95bbfcdefb57abb76d2d043f">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a45107f98830893aaa1a6cd98f1e5dc67">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a8a136051ef5f81f4535993288b121eb0">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1acbe2e817a1d43b100d577d1004657b07">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1a1c29fde8e50ec8769a7278168adac40d">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a80d5d2f8ba7813080fa5224ccbd10077">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1adbe53f37ac2b1db6a41f48cc822878a8">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1a179f87f3808e3eece4134550c2e515d7">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1ad30ce8b443965f311dcece3da0e69a97">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a3ca063fd4a6ba53093230ae1903b7cbc">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a0fb8ed298ebcf6af357f37a4104ec911">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1acbf21707ce571f72135d18286c3af37b">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a6857526a832d7f37792d398f207c31eb">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1abdc3ccbdda3192acb57ec05b9d43d1c6">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1ae06952a705e460deb36aedcaefa226d5">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a52fc2d4a6e5b45cfe9686f10e81fcca3">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1ad10aaa7faf08654936fcf79780710c00">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a6cbb694f081c029c78ac474bb480f5be">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1acbbe1b8e6f8bd670a1539c15a1f8bb41">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1a7fb9b42fc245db6ba7361f2892279f95">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a806c5c9c07c34ec484ea8ef3f9fde1b3">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1a58afdd929704e63bd71f239f987de4db">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1a4c82550126657b9ff3a14d33dc18658f">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1acec86080d8ba5a879cedd4ff05376733">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1ad0d5f2c8083b93536cbe806ec2e59fa3">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1aa8a63906b0301a838115d5e93dfb6103">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1ad0d0e91e4e7739ac49943a2046f78b67">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1abb7fe39ae379a1b72f4263fc710b01ab">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a2b96c1d4fd2aa50dcda10bf7b18bc275">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1a079fbc1e3d3494cf3a494f914bd29d91">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1a9c295df13a0bb5e6f1ecf0dd23d74819">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1ac5afa5158c884a571d442be6fb63c560">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a46f70a93c5902c7cfbdbd22fde6d0147">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a12824146ea88e5dffa56da7c77cb9c7a">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1aeaec96c8575e70c563086be5c6e6ab17">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a8a1012498798bdcfcf46a4cf1285b3fa">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a7dba6511bdeb2a0cbf517c4170f17c1e">send_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1a38ee31043d430d96132c5110e784e3a5">send_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>receiving_node</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dummy_target</declname>
        </param>
        <briefdescription>
<para>Send an event to the receiving_node passed as an argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of check_connection just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para>This is required during the connection handshaking to test, if the receiving_node can handle the event type and receptor_type sent by the source node.</para>
<para>If dummy_target is true, this indicates that receiving_node is derived from <ref refid="classnest_1_1ConnTestDummyNodeBase" kindref="compound">ConnTestDummyNodeBase</ref> and used in the first call to <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>. This can be ignored in most cases, but Nodes sending DS*Events to their own event hooks and then *Events to their proper targets must send DS*Events when called with the dummy target, and *Events when called with the real target, see #478. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="381" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1glif__psc_1ab7112f5b34a0c9e205f5801fb102f958">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a9705b342fafc8e63ea4448f500cd5653">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a7d82fb65dbbfb3abc4f434d3ab326d73">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1bernoulli__synapse_1_1ConnTestDummyNode_1aa15fd2e8d610678d06abeddd7f942864">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1ac5f2d07c51509a47d0e6d4001efde53e">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1clopath__synapse_1_1ConnTestDummyNode_1acb1d8ad15b64eef2ccc9a9ea3e63d4f7">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a3945ef56b7db6a93be1811d799015622">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1afa229a84848315ab5216d0637197131a">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1a7dc084d35d1c86f1510debbe672b37d0">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a638f4df7d3cca9623fc5202a9b717847">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1aa32cde8875786c86a21ac57f5a6a0dae">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1af25237175ae7a245eb1c75bdd3dc3518">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1ad6d456e8b64b011622333fccc09ad0f7">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1ht__synapse_1_1ConnTestDummyNode_1aa4648aadbb08f716d4fe9504f82afe06">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1af04c73294bd50237be2a629c5836e2a6">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a2225445aab4561449392d4684dab2df4">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abe1d982b85969213a0ff977c7fea676f">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a8da69ac6a81d12de6fab8e81ea2b730d">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a40da59b43d9e5e3aa3ec90e0906fcaac">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1ad8300166bd39b45e2e6486b9725e8c02">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1a9189cfbe67319c4fe54c1a44a86bad80">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1ac0894101e4b1d307ec51ba5221127ab9">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a1e8e69f499b6c26a7f37b3650b850441">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a015518ced3a32518bf175c6cfdfd6b0f">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1jonke__synapse_1_1ConnTestDummyNode_1a81ad219714db80fe366281d63d92b6da">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1addb30fb881dd8815ac4ef074e58bb283">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a408b7efc01bb8bec1d72a4cbe470a2cd">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1acba276c2f8377188781835be65a959be">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a9ff5de0b8ffcc2534143c1786588540d">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1quantal__stp__synapse_1_1ConnTestDummyNode_1aaca54e0762d26fcdf3848d3f8c27f82f">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1aea24bf847b40dbbc427921b2f586cc7f">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1adfe22aa11916872ebc6ce86270c8cefc">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1ac0270453abcf5ba1bece0c896738cfb5">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1a1d7b38863d5fbf1f3fbe2e4775c8871b">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__dopamine__synapse_1_1ConnTestDummyNode_1a9c91a593a7ffcc98b764e4365fe71244">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__nn__pre__centered__synapse_1_1ConnTestDummyNode_1ac4f903c8d9ce13b8cb25771a44fb03e0">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__nn__restr__synapse_1_1ConnTestDummyNode_1a223ee93cb3c6d45154d3878edf13e2f3">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__nn__symm__synapse_1_1ConnTestDummyNode_1a595995542a176aa76d3b6745a472e61c">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__pl__synapse__hom_1_1ConnTestDummyNode_1a4c7bacec8464fc18c8b16b75d90465ce">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__synapse_1_1ConnTestDummyNode_1a804eac3236425336b87c8a53f7e40cae">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__facetshw__synapse__hom_1_1ConnTestDummyNode_1a0e2d2b94ee5075450d6977906ae6ce18">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__synapse__hom_1_1ConnTestDummyNode_1a66f1ecbc8dcec5faa123318511e75069">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1stdp__triplet__synapse_1_1ConnTestDummyNode_1a659de6f9d8ed9465d952dfd0ba0ba8da">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1tsodyks2__synapse_1_1ConnTestDummyNode_1a12a26bdebe410cd5915dc027f95c8120">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1tsodyks__synapse_1_1ConnTestDummyNode_1a203069ff0b6cc8bbce0db7f0a035bdc7">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1tsodyks__synapse__hom_1_1ConnTestDummyNode_1a6344221e000ee3c69284bf24bfac030e">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1urbanczik__synapse_1_1ConnTestDummyNode_1a7f2897933d832eb18f0858a5d2d98863">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1vogels__sprekeler__synapse_1_1ConnTestDummyNode_1a8bfcbae53b536df1bd451a8cf72f4605">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a30e40b14d856ddd78f4a8f9d6fa0f2ed">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="401" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
        <referencedby refid="classnest_1_1DiffusionConnection_1af7972b2f7c36ebcd7583daf222efbbd5" compoundref="diffusion__connection_8h" startline="121" endline="129">nest::DiffusionConnection&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1GapJunction_1a9e333a60c5d7bcc5dac49cc19f8d17d2" compoundref="gap__junction_8h" startline="112" endline="120">nest::GapJunction&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1RateConnectionDelayed_1a01a44b9005a58b87eca84f18d90a108d" compoundref="rate__connection__delayed_8h" startline="108" endline="116">nest::RateConnectionDelayed&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1RateConnectionInstantaneous_1a50e71ed886aae409f65dda3b1dd5d251" compoundref="rate__connection__instantaneous_8h" startline="109" endline="117">nest::RateConnectionInstantaneous&lt; targetidentifierT &gt;::check_connection</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1weight__recorder_1aa3514047cb68d630ba67dcb4a5fbacab">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="402" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1ae7f368c21cfcfd340c73566cf51921f3">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1adeb97e0c30cd4109391ffa9110791d28">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1adea0982b82a6bcaea0df76893615755d">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="403" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a6034a50bce8ad6faa34d1e91024213f1">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1ac__generator_1a92ca9096eb7bdd22f0f7243acb142def">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a8a127ed0834c026c6c8ffeccd42c6a78">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a5530bef9c36908821ccac80e011e782c">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a4c47a4dbc493de958ba48811a476696e">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1afd6db6bc902e898be7675760da1497cc">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1a8a9fce1d9733ac629e82587d42264c11">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1ab10245a97dae10e0fcb4b98222571351">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1af77e3c70808b6b21918df4c52228a8b1">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a4a54bfc183c71b0929189e6bc8da11f0">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a3dff7f5ba1e51fa1e71a32c787df885b">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a9f233f62984bac3bd9a55d25823837a6">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a617374bc0957983584569e3cfd1fbc50">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a17756b5c07e08f0fab9266c43389bd7d">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a090f703c6c97f8285a43a5642d787e29">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1aafd4f0ece6f9fc9ebeefc0714c022399">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a5b48a9821467151a1600ae68afe41863">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a33421d4558828bf201fe0ef28446b4df">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a353cec892a4995eba915508b5f90c7f7">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a7f787c68dc0857249d9e03db423c46f2">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1a582e2f3c46bc6316f4b974b1f574e09b">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a6270485566dc3930a1e9ddb05132db2c">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a5c6931af44601ce4e3da673f0d0e2f98">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a41d1073cd8ed22a2f3c55f9c082dcc9a">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a75af724de33defa6cbfbef92aee650d2">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a0773bc87aeb1506dfdd30c519fc153d2">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1afcf5ef845de7e6eed21d0898bab94c4e">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1aea85b327d0d6f741a1ebf6b9673072e6">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1aa766ad16179ebd432fe3cf7e2d213edf">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a181d5054d723e837404b141038bff49f">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1adfbdab7e9f5698b29d1315bae6e7c7e3">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1a94d6dd0e53e4ca3a080a5548558e9b8c">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="404" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a9dd47c81b642c30ad8fa7d3307376c5b">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a57b03bffb864d002f3eb2a46d04f4dfa">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a4572f908fff032e767d73f8a9ec9f452">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1a6ef1e02b9ae198e8bf3c6b6f59adc473">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1a70a63e4dfa5e6cd5e7faac51d8ad6abf">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1aafc4d3fa325606116dc8b1f7b411288a">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1ad0e7e02193f18d4848a1e0da725da903">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a872f77790ce784f67522b24ef49c8d9c">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a340f51a09d870fe9d3bb2c731dbd684e">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1aedd0f5d1d40a33b31cdc260dfb4d82fe">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1af1779d0c72898b31058bd053c2c7af59">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1a7e7e9c5fd184b6dd2daa577c3756fad8">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a2797a7ec7db9f5b919e20b4b2f2cdeee">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a3dbe88aa72e61736b7a99a786cb183f5">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a884fc4a7569d54910e3de308eff162ab">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a279cac94cfd9753de5402fbaafbf0ac4">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1aa6577ef4d81a43265ce3d426410b5ca7">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1afccefbaeb5853fc470b3c8656d2fe6dd">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1a4dcc7c5e373e2d1e696b0abcca61a619">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1aca3ed8d82e7770fd0306a33e2c8c5b86">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1a81e33640f3a55de7c31c3250fc90cd39">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="405" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1a0deaa08e6350be01534e7e2bfa167017">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1a8cdcfa976aa35d2daa3ca28ad72633dc">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1a029b11eb191ca8609960b81e89fee674">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="406" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1a02244868c16cc6f6ed2909a255cb8bdb">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1a0baf3ef42249b86aab32186d02efb46e">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1a56c37ae4890492d37ca1014d38ab3c26">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="407" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1a2e97808072ff14b2f3dac1edaa4896cf">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1a17d8606d68c4a173f79bbfa5c9522654">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1af8e3b392363089a98c819659738231b3">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="408" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1a25c3e2e92640361cd37b21ec68480e4c">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1a54e5e287f0fa14fe1efbff6c68b374da">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1a0187fbc5a5d9fb041aa12f0b7548489e">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="409" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="410" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1aa9fb3bcb21bce3f7de1fb4d84cf6226f">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a87685bb0c4baf41edde68426a23e8b1d">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a8ffb53154442fb620e4b944a497d0515">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="411" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="412" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1abab51113f559ca57222860178d678ddc">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1ade6c5ed48daa790966e3ce9efe7f734b">handles_test_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1affd0cfd1c18428987fef849df2dc6782">handles_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="413" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(GapJunctionEvent &amp;ge)</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1proxynode_1afdfb38f8d6bd5837527a75eb4c6ff76e">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>ge</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="422" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="342" bodyend="345"/>
        <referencedby refid="classnest_1_1DiffusionConnection_1af7972b2f7c36ebcd7583daf222efbbd5" compoundref="diffusion__connection_8h" startline="121" endline="129">nest::DiffusionConnection&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1GapJunction_1a9e333a60c5d7bcc5dac49cc19f8d17d2" compoundref="gap__junction_8h" startline="112" endline="120">nest::GapJunction&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1RateConnectionDelayed_1a01a44b9005a58b87eca84f18d90a108d" compoundref="rate__connection__delayed_8h" startline="108" endline="116">nest::RateConnectionDelayed&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1RateConnectionInstantaneous_1a50e71ed886aae409f65dda3b1dd5d251" compoundref="rate__connection__instantaneous_8h" startline="109" endline="117">nest::RateConnectionInstantaneous&lt; targetidentifierT &gt;::check_connection</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;re)</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a6a5aba45190bd20aeb5c708aee1b1c15">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a98c682a0ad4ee749a981de5035ed6b2b">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a71ad81cbd6feea526888bec3de270f78">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1ac211e3fbd950837944a19b0397a49bf7">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="431" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;de)</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1proxynode_1af4c165393526562c694aeee07fc62c31">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>de</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="440" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;re)</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a8c79869e456285547ac720f1fde49e5a">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a371aaf7d3d5bb4b31af3a1dab70b000a">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1ae21b25c5ded2248c1dedf6faf7530fff">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1ac334f61bf4382b7418eb466430c97670">sends_secondary_event</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1a2f9d087e4ad8a23bc023d1d17e927806">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="449" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::register_stdp_connection</definition>
        <argsstring>(double, double)</argsstring>
        <name>register_stdp_connection</name>
        <reimplementedby refid="classnest_1_1ArchivingNode_1a0f573e9b1e9f7f49a493aa2a533c2803">register_stdp_connection</reimplementedby>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Register a STDP connection. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of <ref refid="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" kindref="member">register_stdp_connection()</ref> just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="457" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="214" bodyend="217"/>
        <referencedby refid="classnest_1_1clopath__synapse_1a82e0f01777b3e1f30f0970c053c30e2b" compoundref="clopath__synapse_8h" startline="180" endline="187">nest::clopath_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1jonke__synapse_1a5da09d4d1a8570cf1f8ab81875c1eccb" compoundref="jonke__synapse_8h" startline="274" endline="281">nest::jonke_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__pre__centered__synapse_1af326eb37398a6035d8d83eb0a8a030b8" compoundref="stdp__nn__pre__centered__synapse_8h" startline="192" endline="199">nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__restr__synapse_1a02d1e4a0802ee845d659ba1b548cb62f" compoundref="stdp__nn__restr__synapse_8h" startline="187" endline="194">nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__symm__synapse_1a9c53b05c11c7d8c09b719580fc6c6eb6" compoundref="stdp__nn__symm__synapse_8h" startline="189" endline="196">nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__pl__synapse__hom_1a23c016c3633085698e96d193aa5d3d4a" compoundref="stdp__pl__synapse__hom_8h" startline="203" endline="210">nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse_1a8644cdf2bae1d50bb8ff857918fffcad" compoundref="stdp__synapse_8h" startline="179" endline="186">nest::stdp_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__facetshw__synapse__hom_1a2a9965e97314ccd75add69871198e808" compoundref="stdp__synapse__facetshw__hom_8h" startline="309" endline="316">nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse__hom_1a0d530a80687a13d80a68b1bb793ce40f" compoundref="stdp__synapse__hom_8h" startline="237" endline="243">nest::stdp_synapse_hom&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__triplet__synapse_1a9d06cd3553f8740df257e8834eb26978" compoundref="stdp__triplet__synapse_8h" startline="201" endline="208">nest::stdp_triplet_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1urbanczik__synapse_1a041a8ffcf2a886e33f84aaac2f42a102" compoundref="urbanczik__synapse_8h" startline="174" endline="181">nest::urbanczik_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1vogels__sprekeler__synapse_1abd7bec0a60dca349a7d35d7345d34069" compoundref="vogels__sprekeler__synapse_8h" startline="156" endline="163">nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
        <referencedby refid="classnest_1_1stdp__dopamine__synapse_1abf8a9abe9502a752b7939173bc0e2f44" compoundref="stdp__dopamine__synapse_8h" startline="285" endline="296">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::check_connection</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1glif__psc_1a253eb2bd5a6be377a4711b72ea6ac36e">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a2a87f03f9f6b53dcccb9902ef7e9556a">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1afc2c13e1f1e6f4d72cc4f66da94fb728">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1a7970ed77b27a84ecc28256eeb8e51316">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a84891b0d4ab3820b9777fe9fb1b9dda9">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a07028b46a5ee0b25290b33f945c3f096">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1a3eaf94510adb3ecb10d630caef892d5a">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1a0490c6d8284252a9403e41d4159b7c07">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a9d65717b729d137e81f452a831f695c1">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a7ffef66f807a67615a0302cb35cd95df">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a811191307b23ba1deced77632ca095fc">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a7d16fbbb770a2133162fcd75eb85f3fd">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1ae259efd5b67e67544298d0076c1aec38">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a186aa50b57e0bc598f6da6d3961174b2">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1ad43348fdd7f2a9819caa7971fd061977">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1aa54d77b806192c5c83a45fe21488204d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a424413d843b3db709c86cd5beeead335">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a0fcd90d605efb9571c40de45ce473f20">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a6c271be348584c8dc5f198810817de00">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1adbef5b29d70ad5e883b800ecd8014174">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1a33b06a58e890aae51a37c7d54ac0007f">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a07c5abe723443660ba1f843bb4d10e8d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1aaf63cdd0e51747b4929ba94afe942880">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a4d8e3bcd366bec6ae590546d7cd96915">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1aaa0ac22bffc48320557cbf9b2f8845da">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1a1e14fac82717814d69270951cf301946">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1a138100077d9fbf11497d3dfd636a73fa">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1abce2d0732de0c7c6d4d1f63f3e54be60">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1afee2333ceda2f29df27139c8703456c1">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="469" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
        <referencedby refid="classnest_1_1SpikeEvent_1a912766fd2f87c61e2ac70b723278043b" compoundref="event_8cpp" startline="77" endline="80">nest::SpikeEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1WeightRecorderEvent_1af82d5f6cc4d23c885dd92e70dc6b05a0" compoundref="event_8cpp" startline="83" endline="86">nest::WeightRecorderEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1RateEvent_1a688b75ab2f9992e0694637035dc60b8e" compoundref="event_8cpp" startline="95" endline="98">nest::RateEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1CurrentEvent_1afd45af1aca9dce3c66dfd7ceb57630fa" compoundref="event_8cpp" startline="101" endline="104">nest::CurrentEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1DataLoggingRequest_1a9bac30a4a5c21c70a994f751c21e03a6" compoundref="event_8cpp" startline="125" endline="128">nest::DataLoggingRequest::operator()</referencedby>
        <referencedby refid="classnest_1_1DataLoggingReply_1a2dc8b349347e1bdc409b583ab0c87c0b" compoundref="event_8cpp" startline="131" endline="134">nest::DataLoggingReply::operator()</referencedby>
        <referencedby refid="classnest_1_1ConductanceEvent_1a8e7f4a6d0a288c20d798b3233b97ac15" compoundref="event_8cpp" startline="113" endline="116">nest::ConductanceEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1DoubleDataEvent_1aff4a413b64cdb534466c1662ab15de92" compoundref="event_8cpp" startline="119" endline="122">nest::DoubleDataEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1GapJunctionEvent_1a6ffd954dc3a30a3f0cc58a73787ec368" compoundref="event_8cpp" startline="137" endline="140">nest::GapJunctionEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1InstantaneousRateConnectionEvent_1a474eee8e70b66474ce69613312467895" compoundref="event_8cpp" startline="143" endline="146">nest::InstantaneousRateConnectionEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1DelayedRateConnectionEvent_1a1eb689558cf6085a58bba77aadab8d1d" compoundref="event_8cpp" startline="149" endline="152">nest::DelayedRateConnectionEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1DiffusionConnectionEvent_1aa6b84f5b3136a7131f078c1cfab8a9f5" compoundref="event_8cpp" startline="155" endline="158">nest::DiffusionConnectionEvent::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1weight__recorder_1aa96e9631d164dd8750501fac70ba4132">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming weight recording events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept weight recording events. <simplesect kind="see"><para>class WeightRecordingEvent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="481" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="489" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1ac__generator_1af9035085d8c49aebac0a262ad304c46d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1acafeca43e3da59af5469bce58794de1e">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1adb83e264c23d145a02d3259c05603b3d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a502b735e683cdd663564a8650f603147">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1a4b19c2b19bc82d849cc8884c5766bbe5">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1ad69b2cc662f3b9ddaf2996fbd46fc9da">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1a278c810e139acf765054fa3d1d52efe3">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a35e5023ef47dd594848312fa4a42e245">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a54cd259ea63b60067d157849f62a9163">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a1a88e2e6d028a3e96adac98ea261cfa3">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a315cb0396dfb3dacb6da0c7683dfc541">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a02d10e892c31af5fc59e27c4106daf79">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a43d4c2efa319c0db069cc8298b8494eb">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1a0909865edc69c17ab678f54ada7930da">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1ad9b2f0adf2568a55f0903e4c7e18eb6d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a6882df8d80288cdef210e765b3863c6a">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1ac291a8c2bb149865175158e974ca5d9a">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a68f05cb5f493f5b883efb6b39b175274">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1a61bcfa4d1e3c4c01c9e37ad73ec07ca4">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1abf9cb222a30f6650a8355d5d136a586f">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a0a9971b012d7ddec08af2c9bdac7ca1d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1ad4c6d43fc5661d272ee6a9cc66096728">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a016bb5999f12ca091bf688082acd4aa0">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a7bab523f9a7845c026abaffd6478b325">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1ad08d6e4e86f5f3120d3dbf6500cc790f">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a80e98a1a2f7e7e33ae70437df95bda70">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a523c6725cf04d21ed7dda34ae7522e05">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a93ecc16f5e6a708dc76f42d35a42fe64">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1a9064a1dcc7866ada80236d112192c06d">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="497" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1multimeter_1a69851b4da90acd9a090bf2cde9c1f2d3">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>There is no connect_sender() for <ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref>, since this event is only used as &quot;back channel&quot; for <ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="507" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gadef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1a758e50b6233977a94d0528aefe112bc0">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a51128c5742b7cf169fc8250e127db7ee">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1cm__default_1a3b607b5ed036bfd77741be67af70fcca">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1adc11525986f2abb323529141792230cf">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1aa30761220145d4c4d9abaccb6041524c">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1a78357f3cb48b55392ecfe2db61d9b387">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a772b20b1cdad64b1fadc158464becfbc">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1ae266a1cd9568130bc5fbb67423355c48">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1af97a0096ec2dc86bacaa5cc8e317dead">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1aee8bfd548fdf28d4b34d095ef1c8a1bc">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1a7c3708ee16886f3e5f2ce5b4f2b9b97d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a1e474048278b8ad309aecf878ff42122">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1aea6ac44f4b796e7fe9e09e77149801d3">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1a542486a584d1983beba5d2eee089bcc2">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a32c672a1b087596125951bd7c82de8be">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1aab23ebcd42009878097b408916a43d74">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1ad8602ac7d62b5f11a42692f0a7261172">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1ab2687630d4d5cf36b81ead3a3aa2b0dd">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1a5f8692b9efd52ac29b3a21bd84c2468d">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for current events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="515" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for conductance events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="523" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for DoubleData events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="531" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for gap junction events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, GapJunctionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="539" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1afaa1c0d00b138aae85a5ebede4106349">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a5cb41e364f0cead935aa394e965cceb1">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1af37dcf8892c0cd3348015182a59f1421">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, InstantaneousRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="547" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, InstantaneousRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="555" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a15972284e7548900f73d422184c32f5d">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1a293557b20f03b33f4643a93c3eb3364b">handle</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a118208c946c3849738d93b547dcfe2d8">handle</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for delay rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, DelayedRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="563" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double nest::Node::get_Ca_minus</definition>
        <argsstring>() const</argsstring>
        <name>get_Ca_minus</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1afb8ec0a74d457fd285665b3ff8077213">get_Ca_minus</reimplementedby>
        <briefdescription>
<para>Return the Ca_minus value at time Ca_t which corresponds to the time of the last update in Calcium concentration which is performed each time a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> spikes. </para>
        </briefdescription>
        <detaileddescription>
<para>Return 0.0 if not overridden </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="580" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double nest::Node::get_synaptic_elements</definition>
        <argsstring>(Name) const</argsstring>
        <name>get_synaptic_elements</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1af2415c16f2edd606035f497d6003c392">get_synaptic_elements</reimplementedby>
        <param>
          <type>Name</type>
        </param>
        <briefdescription>
<para>Get the number of synaptic element for the current <ref refid="classnest_1_1Node" kindref="compound">Node</ref> at Ca_t which corresponds to the time of the last spike. </para>
        </briefdescription>
        <detaileddescription>
<para>Return 0.0 if not overridden </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="592" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="592" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int nest::Node::get_synaptic_elements_vacant</definition>
        <argsstring>(Name) const</argsstring>
        <name>get_synaptic_elements_vacant</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a893ba9023105eb3c68c988dc3f912d2f">get_synaptic_elements_vacant</reimplementedby>
        <param>
          <type>Name</type>
        </param>
        <briefdescription>
<para>Get the number of vacant synaptic element for the current <ref refid="classnest_1_1Node" kindref="compound">Node</ref> Return 0 if not overridden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="603" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="603" bodyend="606"/>
        <referencedby refid="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" compoundref="sp__manager_8cpp" startline="624" endline="683">nest::SPManager::get_synaptic_elements</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int nest::Node::get_synaptic_elements_connected</definition>
        <argsstring>(Name) const</argsstring>
        <name>get_synaptic_elements_connected</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a5708dead1beae2f0bccb87080356cd63">get_synaptic_elements_connected</reimplementedby>
        <param>
          <type>Name</type>
        </param>
        <briefdescription>
<para>Get the number of connected synaptic element for the current <ref refid="classnest_1_1Node" kindref="compound">Node</ref> Return 0 if not overridden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="614" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="614" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::map&lt; Name, double &gt;</type>
        <definition>virtual std::map&lt; Name, double &gt; nest::Node::get_synaptic_elements</definition>
        <argsstring>() const</argsstring>
        <name>get_synaptic_elements</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a84df4d213b9f22e9dae6b26c8fd9905d">get_synaptic_elements</reimplementedby>
        <briefdescription>
<para>Get the number of all synaptic elements for the current <ref refid="classnest_1_1Node" kindref="compound">Node</ref> at time t Return an empty map if not overridden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="625" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::update_synaptic_elements</definition>
        <argsstring>(double)</argsstring>
        <name>update_synaptic_elements</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a74fc8e9d9ef49af9c53b35e19ee3ddd9">update_synaptic_elements</reimplementedby>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Triggers the update of all SynapticElements stored in the synaptic_element_map_. </para>
        </briefdescription>
        <detaileddescription>
<para>It also updates the calcium concentration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>double time when the update is being performed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="637" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="637" bodyend="637"/>
        <referencedby refid="classnest_1_1SimulationManager_1a4ad2ea77edb56fb13176de0932bac835" compoundref="simulation__manager_8cpp" startline="776" endline="1074">nest::SimulationManager::update_</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::decay_synaptic_elements_vacant</definition>
        <argsstring>()</argsstring>
        <name>decay_synaptic_elements_vacant</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a0f11a1c88af75d6a51057d97fe1f6583">decay_synaptic_elements_vacant</reimplementedby>
        <briefdescription>
<para>Is used to reduce the number of synaptic elements in the node through time. </para>
        </briefdescription>
        <detaileddescription>
<para>This amount is defined by tau_vacant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="644" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="644" bodyend="644"/>
        <referencedby refid="classnest_1_1SimulationManager_1a4ad2ea77edb56fb13176de0932bac835" compoundref="simulation__manager_8cpp" startline="776" endline="1074">nest::SimulationManager::update_</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__SP__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::connect_synaptic_element</definition>
        <argsstring>(Name, int)</argsstring>
        <name>connect_synaptic_element</name>
        <reimplementedby refid="classnest_1_1StructuralPlasticityNode_1a8fb547186b1ee49384fddeb4e268481d">connect_synaptic_element</reimplementedby>
        <param>
          <type>Name</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Is used to update the number of connected synaptic elements (<ref refid="classnest_1_1SynapticElement_1a64d386c09fc78ecdc559aa2398310dfd" kindref="member">SynapticElement::z_connected_</ref>) when a synapse is formed or deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, name of the synaptic element to connect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>int number of new connections of the given type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="654" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="654" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_K_value</definition>
        <argsstring>(double t)</argsstring>
        <name>get_K_value</name>
        <reimplementedby refid="classnest_1_1ArchivingNode_1ab6c3dea0d46a9f24fc4d726bea34dd3a">get_K_value</reimplementedby>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>return the Kminus value at t (in ms). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="660" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_LTD_value</definition>
        <argsstring>(double t)</argsstring>
        <name>get_LTD_value</name>
        <reimplementedby refid="classnest_1_1ClopathArchivingNode_1a919f8a8c44b248c67c8ec7422f59cddb">get_LTD_value</reimplementedby>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="662" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::get_K_values</definition>
        <argsstring>(double t, double &amp;Kminus, double &amp;nearest_neighbor_Kminus, double &amp;Kminus_triplet)</argsstring>
        <name>get_K_values</name>
        <reimplementedby refid="classnest_1_1ArchivingNode_1aa756873904842e8e63e9144d1f49967f">get_K_values</reimplementedby>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>Kminus</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nearest_neighbor_Kminus</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>Kminus_triplet</declname>
        </param>
        <briefdescription>
<para>write the Kminus, nearest_neighbor_Kminus, and Kminus_triplet values at t (in ms) to the provided locations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="669" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::get_history</definition>
        <argsstring>(double t1, double t2, std::deque&lt; histentry &gt;::iterator *start, std::deque&lt; histentry &gt;::iterator *finish)</argsstring>
        <name>get_history</name>
        <reimplementedby refid="classnest_1_1ArchivingNode_1a17dd209382eae47cbb5f02b88fbb997a">get_history</reimplementedby>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1histentry" kindref="compound">histentry</ref> &gt;::iterator *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1histentry" kindref="compound">histentry</ref> &gt;::iterator *</type>
          <declname>finish</declname>
        </param>
        <briefdescription>
<para>return the spike history for (t1,t2]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="675" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::get_LTP_history</definition>
        <argsstring>(double t1, double t2, std::deque&lt; histentry_extended &gt;::iterator *start, std::deque&lt; histentry_extended &gt;::iterator *finish)</argsstring>
        <name>get_LTP_history</name>
        <reimplementedby refid="classnest_1_1ClopathArchivingNode_1ac8d8ff55a5ff9eda5e25d67a98685950">get_LTP_history</reimplementedby>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1histentry__extended" kindref="compound">histentry_extended</ref> &gt;::iterator *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1histentry__extended" kindref="compound">histentry_extended</ref> &gt;::iterator *</type>
          <declname>finish</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="681" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="428" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::get_urbanczik_history</definition>
        <argsstring>(double t1, double t2, std::deque&lt; histentry_extended &gt;::iterator *start, std::deque&lt; histentry_extended &gt;::iterator *finish, int)</argsstring>
        <name>get_urbanczik_history</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1ab72d9cc564354859a35ae98f30e2cd34">get_urbanczik_history</reimplementedby>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1histentry__extended" kindref="compound">histentry_extended</ref> &gt;::iterator *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1histentry__extended" kindref="compound">histentry_extended</ref> &gt;::iterator *</type>
          <declname>finish</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="686" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="437" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_C_m</definition>
        <argsstring>(int comp)</argsstring>
        <name>get_C_m</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a7618181ca45950065860e955e7b6ac31">get_C_m</reimplementedby>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="692" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_g_L</definition>
        <argsstring>(int comp)</argsstring>
        <name>get_g_L</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1af41824545b22c03f316faa364f4dfd92">get_g_L</reimplementedby>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="693" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="453" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_tau_L</definition>
        <argsstring>(int comp)</argsstring>
        <name>get_tau_L</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a39f4f0955f070e6f831d60c63b2ef705">get_tau_L</reimplementedby>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="694" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_tau_s</definition>
        <argsstring>(int comp)</argsstring>
        <name>get_tau_s</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="695" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_tau_syn_ex</definition>
        <argsstring>(int comp)</argsstring>
        <name>get_tau_syn_ex</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a11e5cdcec6cfeaf5580e404b851149df">get_tau_syn_ex</reimplementedby>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="696" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Node::get_tau_syn_in</definition>
        <argsstring>(int comp)</argsstring>
        <name>get_tau_syn_in</name>
        <reimplementedby refid="classnest_1_1UrbanczikArchivingNode_1a4fcf80407a6f7514f2b249fe800d274f">get_tau_syn_in</reimplementedby>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="697" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::event_hook</definition>
        <argsstring>(DSSpikeEvent &amp;)</argsstring>
        <name>event_hook</name>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a7183c2af094cc3da93aedc8a2884e171">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1a7044bfad819c1ec418da23a82af4739f">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1abd0c2c060dc2a93380c6625fc9d6dcc1">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1afbdf62663600b3e6932014bccf60bfc5">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1adc4906d29813d0f609b23efe52ad3fca">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1a566dc2e4a64e0da3b9ff77be0da54bbd">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a0443e2c5c94b18bd1cd38f898266d13b">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1ab5564617469b1eaf34aa1b8ccfa7f080">event_hook</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a6a36749469c5090d4fc120e81eb57501">event_hook</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
          <defname>e</defname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classnest_1_1Event" kindref="compound">Event</ref> object parameters during event delivery. </para>
        </briefdescription>
        <detaileddescription>
<para>Some Nodes want to perform a function on an event for each of their targets. An example is the <ref refid="classnest_1_1poisson__generator" kindref="compound">poisson_generator</ref> which needs to draw a random number for each target. The <ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref>, DirectSendingSpikeEvent, calls sender-&gt;event_hook(thread, *this) in its operator() function instead of calling target-&gt;<ref refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" kindref="member">handle()</ref>. The default implementation of <ref refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" kindref="member">Node::event_hook()</ref> just calls target-&gt;handle(DSSpikeEvent&amp;). Any reimplementation must also execute this call. Otherwise the event will not be delivered. If needed, target-&gt;handle(DSSpikeEvent) may be called more than once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="712" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="483" bodyend="486"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <referencedby refid="classnest_1_1DSSpikeEvent_1a0dd8578cd487f98857dcd627b718f53c" compoundref="event_8cpp" startline="89" endline="92">nest::DSSpikeEvent::operator()</referencedby>
        <referencedby refid="classnest_1_1DSCurrentEvent_1a40c7ce9c76e1b5329a5bb768f3bb6654" compoundref="event_8cpp" startline="107" endline="110">nest::DSCurrentEvent::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::event_hook</definition>
        <argsstring>(DSCurrentEvent &amp;)</argsstring>
        <name>event_hook</name>
        <reimplementedby refid="classnest_1_1noise__generator_1ae0169e7369adbb6835cab9f5c8915b54">event_hook</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
          <defname>e</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="714" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="489" bodyend="492"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_thread</definition>
        <argsstring>(thread)</argsstring>
        <name>set_thread</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Store the number of the thread to which the node is assigned. </para>
        </briefdescription>
        <detaileddescription>
<para>The assignment is done after node creation by the Network class. <simplesect kind="see"><para>: <ref refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" kindref="member">NodeManager::add_node()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="721" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1018" bodyend="1021"/>
        <references refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" compoundref="node_8h" startline="905">thread_</references>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        <definition>thread nest::Node::get_thread</definition>
        <argsstring>() const</argsstring>
        <name>get_thread</name>
        <briefdescription>
<para>Retrieve the number of the thread to which the node is assigned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="726" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1024" bodyend="1027"/>
        <references refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" compoundref="node_8h" startline="905">thread_</references>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1aaf4fa1fb6c512492a91c53acb13f20ca" compoundref="recording__backend__ascii_8cpp" startline="77" endline="87">nest::RecordingBackendASCII::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1a6edc2880d0f57115a3ef41197b587749" compoundref="recording__backend__memory_8cpp" startline="66" endline="76">nest::RecordingBackendMemory::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1aa7ca898f0079c2380631ce812f20dcdf" compoundref="recording__backend__mpi_8cpp" startline="96" endline="106">nest::RecordingBackendMPI::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1ad6eaebc77b37876d4bf48e2ba7ed6313" compoundref="recording__backend__screen_8cpp" startline="60" endline="70">nest::RecordingBackendScreen::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a37a5b2e4697abc6a284f72c784b16ea9" compoundref="recording__backend__sionlib_8cpp" startline="101" endline="111">nest::RecordingBackendSIONlib::disenroll</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1a56c15b58587a99e1bcc813b97bed72b9" compoundref="stimulation__backend__mpi_8cpp" startline="86" endline="97">nest::StimulationBackendMPI::disenroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a1a95c36ab22b5e1687631c5f9f360ff1" compoundref="recording__backend__ascii_8cpp" startline="59" endline="74">nest::RecordingBackendASCII::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1a1da48327a1cee8511bfd3cd83cea6d39" compoundref="recording__backend__memory_8cpp" startline="50" endline="63">nest::RecordingBackendMemory::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1aca238fd90a38083e517640f7b36d23cf" compoundref="recording__backend__mpi_8cpp" startline="72" endline="93">nest::RecordingBackendMPI::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1a8306eb9cb2dab1f970abc6509d9cc5dd" compoundref="recording__backend__screen_8cpp" startline="44" endline="57">nest::RecordingBackendScreen::enroll</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1ad38c6a48bf611386f204865b613c0794" compoundref="recording__backend__sionlib_8cpp" startline="74" endline="98">nest::RecordingBackendSIONlib::enroll</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1ac3af465f99360719a66c93e44a40a4bd" compoundref="stimulation__backend__mpi_8cpp" startline="66" endline="82">nest::StimulationBackendMPI::enroll</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="632">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="637" endline="784">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1ac085ad5ab92cf03d494a9f12827fa837" compoundref="recording__backend__ascii_8cpp" startline="210" endline="220">nest::RecordingBackendASCII::get_device_status</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1ace8e14dbbd1cfb3eb9c2c78869bafc48" compoundref="recording__backend__memory_8cpp" startline="130" endline="140">nest::RecordingBackendMemory::get_device_status</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1a897e5dfc1afe602e58ba4a82756c736f" compoundref="recording__backend__screen_8cpp" startline="124" endline="134">nest::RecordingBackendScreen::get_device_status</referencedby>
        <referencedby refid="classnest_1_1weight__recorder_1ac9dfea06dc5c9d7f8e02b4ba0077d131" compoundref="weight__recorder_8cpp" startline="149" endline="172">nest::weight_recorder::get_status</referencedby>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a3f6ce3b2435231a21a70ed29aaedd5cd" compoundref="recording__backend__ascii_8cpp" startline="90" endline="100">nest::RecordingBackendASCII::set_value_names</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1af84c297eca863fece65d2823a73dceb5" compoundref="recording__backend__memory_8cpp" startline="79" endline="89">nest::RecordingBackendMemory::set_value_names</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a2250b3d3afeb4a4ef6ff041796e2bc8a" compoundref="recording__backend__sionlib_8cpp" startline="114" endline="137">nest::RecordingBackendSIONlib::set_value_names</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a83b10ed6b51d99ffa3592769b306d73a" compoundref="recording__backend__ascii_8cpp" startline="139" endline="154">nest::RecordingBackendASCII::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1a6e7bbff1b8b3f06ac6af0373a0edfb4b" compoundref="recording__backend__memory_8cpp" startline="104" endline="113">nest::RecordingBackendMemory::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1aa4472c8050ecc09d0f9e12fd96c69e04" compoundref="recording__backend__screen_8cpp" startline="93" endline="107">nest::RecordingBackendScreen::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1aae5a15742fb627fb2036da06d886720b" compoundref="recording__backend__sionlib_8cpp" startline="427" endline="518">nest::RecordingBackendSIONlib::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_vp</definition>
        <argsstring>(thread)</argsstring>
        <name>set_vp</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <defname>vp</defname>
        </param>
        <briefdescription>
<para>Store the number of the virtual process to which the node is assigned. </para>
        </briefdescription>
        <detaileddescription>
<para>This is assigned to the node in <ref refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" kindref="member">NodeManager::add_node()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="732" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1030" bodyend="1033"/>
        <references refid="namespacenest_1_1names_1a69f9c342c45c3f44427ce00f808da0e4">nest::names::vp</references>
        <references refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" compoundref="node_8h" startline="906">vp_</references>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1acc955f7172e28dd05d2d0496ecdf2423" compoundref="model__manager__impl_8h" startline="80" endline="87">nest::ModelManager::get_proxy_node</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a6eb03709d7f4617dda0104b306321596" compoundref="proxynode_8cpp" startline="36" endline="43">nest::proxynode::proxynode</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        <definition>thread nest::Node::get_vp</definition>
        <argsstring>() const</argsstring>
        <name>get_vp</name>
        <briefdescription>
<para>Retrieve the number of the virtual process to which the node is assigned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="737" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1036" bodyend="1039"/>
        <references refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" compoundref="node_8h" startline="906">vp_</references>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1ae14172cd7bc3e95af782489ceaa5de3a" compoundref="recording__backend__ascii_8cpp" startline="157" endline="169">nest::RecordingBackendASCII::compute_vp_node_id_string_</referencedby>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1aae5a15742fb627fb2036da06d886720b" compoundref="recording__backend__sionlib_8cpp" startline="427" endline="518">nest::RecordingBackendSIONlib::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_model_id</definition>
        <argsstring>(int)</argsstring>
        <name>set_model_id</name>
        <param>
          <type>int</type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>Set the model id. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called by <ref refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" kindref="member">NodeManager::add_node()</ref> when a node is created. <simplesect kind="see"><para><ref refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" kindref="member">get_model_id()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="743" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1006" bodyend="1009"/>
        <references refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" compoundref="node_8h" startline="903">model_id_</references>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a0ad4bd5a087c2c6143ef01213e2b1aba" compoundref="model__manager_8cpp" startline="552" endline="557">nest::ModelManager::create_proxynode_</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a6eb03709d7f4617dda0104b306321596" compoundref="proxynode_8cpp" startline="36" endline="43">nest::proxynode::proxynode</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_initialized</definition>
        <argsstring>()</argsstring>
        <name>set_initialized</name>
        <briefdescription>
<para>Execute post-initialization actions in node models. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called by <ref refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" kindref="member">NodeManager::add_node()</ref> on a node once is fully initialized, i.e. after node ID, nc, model_id, thread, vp is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="750" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="97" bodyend="100"/>
        <references refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" compoundref="node_8cpp" startline="103" endline="105">set_initialized_</references>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>virtual SignalType nest::Node::sends_signal</definition>
        <argsstring>() const</argsstring>
        <name>sends_signal</name>
        <reimplementedby refid="classnest_1_1binary__neuron_1a0e4f84349fdd171d5956582a09e9052b">sends_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1multimeter_1a3537bccb753b03bc5acf2794ce9a8f50">sends_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1aeee41c36cccc54ab42cff4e5cd0db2bb">sends_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a08c95f0a449f7994721c539a89f7dec1">sends_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1adf050e1e83acc29983f8623725b688a3">sends_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1a86ae0ceb13ec36aeaeaea6e0f1257ec0">sends_signal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node produces used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="758" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="758" bodyend="761"/>
        <references refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a21716aa1ea006b59505bc8577cd50468" compoundref="nest__types_8h" startline="222">nest::SPIKE</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>virtual SignalType nest::Node::receives_signal</definition>
        <argsstring>() const</argsstring>
        <name>receives_signal</name>
        <reimplementedby refid="classnest_1_1binary__neuron_1a8a0a3815477b5c903011abe4ba08c925">receives_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a6a324bef0fde5992b605051ac59ac0cb">receives_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a56c741c110a0395008d04d7b6b5d1c83">receives_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__recorder_1aa3a48866acf5f0871fc97260755a5787">receives_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1ac06bac8bec1aeb7730088b2fed9a0542">receives_signal</reimplementedby>
        <reimplementedby refid="classnest_1_1weight__recorder_1a6d3f799fe7ca496d65db0dd6f768b0c5">receives_signal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node consumes used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="769" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="769" bodyend="772"/>
        <references refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a21716aa1ea006b59505bc8577cd50468" compoundref="nest__types_8h" startline="222">nest::SPIKE</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::Node::get_status_base</definition>
        <argsstring>()</argsstring>
        <name>get_status_base</name>
        <briefdescription>
<para>Return a dictionary with the node&apos;s properties. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" kindref="member">get_status_base()</ref> first gets a dictionary with the basic information of an element, using <ref refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" kindref="member">get_status_dict_()</ref>. It then calls the custom function get_status(DictionaryDatum) with the created status dictionary as argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="783" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="145" bodyend="170"/>
        <references refid="namespacenest_1_1names_1a0e17bef4e86ea2fddd9a034ad2cf9a47">nest::names::element_type</references>
        <references refid="namespacenest_1_1names_1a31dd210d0cb3745e0495fc61545f55f9">nest::names::frozen</references>
        <references refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" compoundref="node_8h" startline="969" endline="972">get_element_type</references>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="1000" endline="1003">get_model_id</references>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">get_name</references>
        <references refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" compoundref="node_8h" startline="975" endline="978">get_node_id</references>
        <references refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</references>
        <references refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" compoundref="node_8cpp" startline="126" endline="129">get_status_dict_</references>
        <references refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" compoundref="node_8h" startline="1024" endline="1027">get_thread</references>
        <references refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" compoundref="node_8h" startline="1057" endline="1060">get_thread_lid</references>
        <references refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" compoundref="node_8h" startline="1036" endline="1039">get_vp</references>
        <references refid="namespacenest_1_1names_1a62e2c93581829e16431c6f951d19be3f">nest::names::global_id</references>
        <references refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" compoundref="node_8h" startline="915" endline="918">is_frozen</references>
        <references refid="classnest_1_1NodeManager_1a178aff3a1bd286e6256c7146952ddaa6" compoundref="node__manager_8cpp" startline="396" endline="399">nest::NodeManager::is_local_node</references>
        <references refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" compoundref="node_8h" startline="963" endline="966">is_proxy</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenest_1_1names_1ac152763ca685a2346cd1d158ec810aa3">nest::names::local</references>
        <references refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3">nest::names::model</references>
        <references refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885">nest::names::model_id</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="254">nest::KernelManager::node_manager</references>
        <references refid="namespacenest_1_1names_1ac3b5c0544631e1bc2aed24d2f251912c">nest::names::node_uses_wfr</references>
        <references refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" compoundref="node_8h" startline="921" endline="924">node_uses_wfr</references>
        <references refid="namespacenest_1_1names_1a10274838c585277cd546d6fd7b20c43c">nest::names::thread</references>
        <references refid="namespacenest_1_1names_1a8ae438f98e72cb1ef5fc68bfaa3301a6">nest::names::thread_local_id</references>
        <references refid="namespacenest_1_1names_1a69f9c342c45c3f44427ce00f808da0e4">nest::names::vp</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_status_base</definition>
        <argsstring>(const DictionaryDatum &amp;)</argsstring>
        <name>set_status_base</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>dict</defname>
        </param>
        <briefdescription>
<para>Set status dictionary of a node. </para>
        </briefdescription>
        <detaileddescription>
<para>Forwards to <ref refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36" kindref="member">set_status()</ref> of the derived class. </para>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="791" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="173" bodyend="186"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="namespacenest_1_1names_1a31dd210d0cb3745e0495fc61545f55f9">nest::names::frozen</references>
        <references refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" compoundref="node_8h" startline="907">frozen_</references>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">get_name</references>
        <references refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" compoundref="node_8h" startline="975" endline="978">get_node_id</references>
        <references refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Node::is_model_prototype</definition>
        <argsstring>() const</argsstring>
        <name>is_model_prototype</name>
        <briefdescription>
<para>Returns true if node is model prototype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="796" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1012" bodyend="1015"/>
        <references refid="namespacenest_1a61457deac276cd5a380bf78610f30af7" compoundref="nest__types_8h" startline="161">nest::invalid_thread</references>
        <references refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" compoundref="node_8h" startline="906">vp_</references>
        <referencedby refid="classnest_1_1weight__recorder_1ac9dfea06dc5c9d7f8e02b4ba0077d131" compoundref="weight__recorder_8cpp" startline="149" endline="172">nest::weight_recorder::get_status</referencedby>
        <referencedby refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" compoundref="multimeter_8cpp" startline="49" endline="59">nest::multimeter::send_test_event</referencedby>
        <referencedby refid="classnest_1_1poisson__generator__ps_1abb7fe39ae379a1b72f4263fc710b01ab" compoundref="poisson__generator__ps_8h" startline="207" endline="228">nest::poisson_generator_ps::send_test_event</referencedby>
        <referencedby refid="classnest_1_1ppd__sup__generator_1a079fbc1e3d3494cf3a494f914bd29d91" compoundref="ppd__sup__generator_8h" startline="239" endline="260">nest::ppd_sup_generator::send_test_event</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_thread_lid</definition>
        <argsstring>(const index)</argsstring>
        <name>set_thread_lid</name>
        <param>
          <type>const</type>
          <declname>index</declname>
          <defname>tlid</defname>
        </param>
        <briefdescription>
<para>set thread local index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="802" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1051" bodyend="1054"/>
        <references refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" compoundref="node_8h" startline="895">thread_lid_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Node::get_thread_lid</definition>
        <argsstring>() const</argsstring>
        <name>get_thread_lid</name>
        <briefdescription>
<para>get thread local index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="807" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1057" bodyend="1060"/>
        <references refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" compoundref="node_8h" startline="895">thread_lid_</references>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">get_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::set_local_device_id</definition>
        <argsstring>(const index lsdid)</argsstring>
        <name>set_local_device_id</name>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a00b941d18588e7984bb16975b0546d10">set_local_device_id</reimplementedby>
        <reimplementedby refid="classnest_1_1DeviceNode_1a8c8b80f5be38584cb4b36a18a2977772">set_local_device_id</reimplementedby>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lsdid</declname>
        </param>
        <briefdescription>
<para>Sets the local device id. </para>
        </briefdescription>
        <detaileddescription>
<para>Throws an error if used on a non-device node. <simplesect kind="see"><para><ref refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" kindref="member">get_local_device_id</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="814" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="132" bodyend="135"/>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Node::get_local_device_id</definition>
        <argsstring>() const</argsstring>
        <name>get_local_device_id</name>
        <reimplementedby refid="classnest_1_1volume__transmitter_1a0bbb7c07b751dd4f9a95fdcf0c7148fa">get_local_device_id</reimplementedby>
        <reimplementedby refid="classnest_1_1DeviceNode_1a170639eec44df6f43d5f9a5403959ba4">get_local_device_id</reimplementedby>
        <briefdescription>
<para>Gets the local device id. </para>
        </briefdescription>
        <detaileddescription>
<para>Throws an error if used on a non-device node. <simplesect kind="see"><para><ref refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" kindref="member">set_local_device_id</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="821" column="17" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="138" bodyend="142"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::init_state_</definition>
        <argsstring>()</argsstring>
        <name>init_state_</name>
        <reimplementedby refid="classnest_1_1ac__generator_1a3c34d7b0c44f014f5247e7ec3e7b632f">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1a10cd09d636e65764c48ff6b7cdd44d9d">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a2fa32e1841acec6e77216053c568fe0d">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1aa1cd2ce72fe1da6d7c1841c2245cb27b">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1a287f73e525dd3729b37d6e358989437a">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1a731c7ba42c2f36b13be5f27f9cd9f266">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1adecaaa0d445559aba15873b2da2a57a6">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1a6664a7f620a2ff521f57f24a2640c09e">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a5e94f66af0a74d52ee6fbbb8e2fbc96a">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1a6738149f10e7eb899d1e8888f210fca4">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1a16ab0c36b26736a35f0850dbfdd21137">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a39a575f6181fdee49ca980581a5fab98">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1acb07a2984fb1028912d256193bf46d5c">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1ab5d23abc4e7ee6139c2f59ce806890ab">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a316967d19f203daf14b51cdeeb085b95">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a21e254adf677e3daeb6a367bbfaf8277">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1a86987b54b180cc4a18c6b8f785795f76">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1a02215bd46dfbbaaea82cf56beb602d3f">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a5367264a92d1a844318a41b23ec9d4c0">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a5706ff7c41edd6db75e76dc82d324787">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1ConnTestDummyNodeBase_1ab14303b4565015207f2d120c6600d05a">init_state_</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1ae20ada5a19b34560c124febd373e9b04">init_state_</reimplementedby>
        <briefdescription>
<para>Configure state variables depending on runtime information. </para>
        </briefdescription>
        <detaileddescription>
<para>Overload this method if the node needs to adapt state variables prior to first simulation to runtime information, e.g., the number of incoming connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="854" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="73" bodyend="75"/>
        <referencedby refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" compoundref="node_8cpp" startline="78" endline="89">init</referencedby>
        <referencedby refid="classnest_1_1spike__train__injector_1a02215bd46dfbbaaea82cf56beb602d3f" compoundref="spike__train__injector_8cpp" startline="279" endline="282">nest::spike_train_injector::init_state_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a5881b951d112d2c408865d080287f453" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::init_buffers_</definition>
        <argsstring>()</argsstring>
        <name>init_buffers_</name>
        <reimplementedby refid="classnest_1_1ac__generator_1a26c34c7db65a3508abe2f9ed3184245b">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1amat2__psc__exp_1af9d246429012685e7f94cc36732500d5">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1binary__neuron_1a2ca9623620316faf924754d7bf78bc50">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1correlation__detector_1ae28425bbe42bc5644a336533b3d29152">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1correlomatrix__detector_1a3da5bc33cb1bb217e0b1549df3acb5da">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1correlospinmatrix__detector_1a226a95e55af4a6a675e811143bae6a7d">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1dc__generator_1ab6b810714f5f3750e5005b22232f080f">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1gamma__sup__generator_1ad320410d1e11e51f5cac2a951f93d847">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp_1af8b049aed95d1a4b6d5e1f7acc86dd9f">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1gif__psc__exp__multisynapse_1ae38850323dbbf72150436e2dc149b240">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1glif__psc_1afa2351feef7116f9c6b9ceeeaedeb4e4">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__chs__2007_1a49a4803fc74104e0fed9c548bf8b8c79">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha_1afa44c416af14413c9a90d6c324f66694">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1aa4f4ea478626536298dec22a3c8d08f9">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__alpha__ps_1a08b1a92315f04d0ea5d2ab73112d3470">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta_1a5e06e948e9116b02b49d294a99fa3290">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__delta__ps_1a0d3026d296a5e2e49dbd51da616ade81">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp_1a6c1fbfea7e3cf95568ba667322df5dcf">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__htum_1a0f1f164d1eb7b3e148dbf65bb552e6b4">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a0f12672cd87a8f69c06389dc7eef7950">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps_1af09acdad9b4f20ff7a8227eec5021938">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a00c74f5bfec7cb282e961403aed88f3f">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1inhomogeneous__poisson__generator_1a6d08595621e439db698d833fbf2fa409">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1izhikevich_1af6bb8e4e869e5986108c8f413693e0be">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1mat2__psc__exp_1aa64575387e413d446ad0765630de0018">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1mip__generator_1a5d6b5a5e9fd1518a8d2a27d39895a387">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1noise__generator_1a53d220e13600f2cb348e55a803122717">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron_1a5545a6df78e6adc71296a2e5f00ab56c">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1parrot__neuron__ps_1a8bda6c1fc52e1555814c559357eab810">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator_1a5bad46efb72c25f198262fec4809a97c">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1poisson__generator__ps_1ae37bed64edc6f657455071e54e434ba6">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1pp__psc__delta_1a8d309cbc712c6d13760c14bbbcbdf252">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1ppd__sup__generator_1a7d8f544599196d6bc5cead5a63bdc88f">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1pulsepacket__generator_1a0e7c983041b242e3a0e9f9c7becdbc60">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__ipn_1a24c8070cea942180acbad89588f0ce54">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__neuron__opn_1af361f439c50e86c8d8e291a515aa6eb4">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1rate__transformer__node_1a4e3b162d550952eddd43cc6175e37473">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1sinusoidal__poisson__generator_1a0130b71067f5e9f774f8bbb8fedd2194">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__dilutor_1a866bf5cdbdec8ed083e2f714d7e22528">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__generator_1aca1abbeb50d56c692f759e8eee7a2eb3">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1spike__train__injector_1a6cbb33c0814b4e781aca0bc253db5c95">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1spin__detector_1addcfd6e7324d5ca1f9636d74d1b31abd">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1step__current__generator_1a59511dff7543f700cf5c20d8b62baaf5">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1step__rate__generator_1a3c7f11ff97645b0719a73e365b455e9e">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1volume__transmitter_1ac3ace39254c3499be3a065ca3fea4994">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1ConnTestDummyNodeBase_1a9e9303b5c466db71f8f65c23bc242d24">init_buffers_</reimplementedby>
        <reimplementedby refid="classnest_1_1proxynode_1a6816f94d8e9be4ff2a89ee27b36c178d">init_buffers_</reimplementedby>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="862" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="92" bodyend="94"/>
        <referencedby refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" compoundref="node_8cpp" startline="78" endline="89">init</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::set_initialized_</definition>
        <argsstring>()</argsstring>
        <name>set_initialized_</name>
        <reimplementedby refid="classnest_1_1StimulationDevice_1ac67e5262a139223625a3eea557e7aa45">set_initialized_</reimplementedby>
        <reimplementedby refid="classnest_1_1RecordingDevice_1ab77a88eadcacbb992e706e55aa88627a">set_initialized_</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="864" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="103" bodyend="105"/>
        <referencedby refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" compoundref="node_8cpp" startline="97" endline="100">set_initialized</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>Model &amp; nest::Node::get_model_</definition>
        <argsstring>() const</argsstring>
        <name>get_model_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="866" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="119" bodyend="123"/>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="267" endline="271">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" compoundref="node_8h" startline="903">model_id_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::set_frozen_</definition>
        <argsstring>(bool frozen)</argsstring>
        <name>set_frozen_</name>
        <param>
          <type>bool</type>
          <declname>frozen</declname>
        </param>
        <briefdescription>
<para>Mark node as frozen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="870" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="870" bodyend="873"/>
        <references refid="namespacenest_1_1names_1a31dd210d0cb3745e0495fc61545f55f9">nest::names::frozen</references>
        <references refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" compoundref="node_8h" startline="907">frozen_</references>
        <referencedby refid="classnest_1_1proxynode_1a6eb03709d7f4617dda0104b306321596" compoundref="proxynode_8cpp" startline="36" endline="43">nest::proxynode::proxynode</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConcreteNode</type>
          </param>
        </templateparamlist>
        <type>const ConcreteNode &amp;</type>
        <definition>const ConcreteNode &amp; nest::Node::downcast</definition>
        <argsstring>(const Node &amp;)</argsstring>
        <name>downcast</name>
        <param>
          <type>const <ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Auxiliary function to downcast a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> to a concrete class derived from <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is used to convert generic <ref refid="classnest_1_1Node" kindref="compound">Node</ref> references to specific ones when intializing parameters or state from a prototype. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="882" column="22" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="1043" bodyend="1048"/>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all NEST network objects. </para>
    </briefdescription>
    <detaileddescription>
<para>Class <ref refid="classnest_1_1Node" kindref="compound">Node</ref> is the top of the simulation object hierarchy. It defines the most general interface to a network element.</para>
<para>Class <ref refid="classnest_1_1Node" kindref="compound">Node</ref> provide the interface for<itemizedlist>
<listitem><para>updating the dynamic state of an object</para>
</listitem><listitem><para>connecting nodes, using particular Events</para>
</listitem><listitem><para>accepting connection requests</para>
</listitem><listitem><para>handling incoming events A new type of <ref refid="classnest_1_1Node" kindref="compound">Node</ref> must be derived from this base class and implement its interface. In order to keep the inheritance hierarchy flat, it is encouraged to directly subclass from base class <ref refid="classnest_1_1Node" kindref="compound">Node</ref>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para>class <ref refid="classnest_1_1Event" kindref="compound">Event</ref> @BeginDocumentation</para>
</simplesect>
Name: <ref refid="classnest_1_1Node" kindref="compound">Node</ref> - General properties of all nodes.</para>
<para>Parameters: frozen booltype - Whether the node is updated during simulation global_id integertype - The node ID of the node (cf. local_id) local booltype - Whether the node is available on the local process model literaltype - The model type the node was created from state integertype - The state of the node (see the help on elementstates for details) thread integertype - The id of the thread the node is assigned to (valid locally) vp integertype - The id of the virtual process the node is assigned to (valid globally)</para>
<para>SeeAlso: GetStatus, SetStatus, elementstates </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="57">
        <label>nest::gif_psc_exp_multisynapse</label>
        <link refid="classnest_1_1gif__psc__exp__multisynapse"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>nest::iaf_psc_alpha</label>
        <link refid="classnest_1_1iaf__psc__alpha"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>nest::gamma_sup_generator</label>
        <link refid="classnest_1_1gamma__sup__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="75">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;</label>
        <link refid="classnest_1_1rate__neuron__ipn"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="78">
        <label>nest::correlation_detector</label>
        <link refid="classnest_1_1correlation__detector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>nest::ClopathArchivingNode</label>
        <link refid="classnest_1_1ClopathArchivingNode"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>nest::voltmeter</label>
        <link refid="classnest_1_1voltmeter"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>nest::spin_detector</label>
        <link refid="classnest_1_1spin__detector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>nest::ac_generator</label>
        <link refid="classnest_1_1ac__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>nest::inhomogeneous_poisson_generator</label>
        <link refid="classnest_1_1inhomogeneous__poisson__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>nest::spike_dilutor</label>
        <link refid="classnest_1_1spike__dilutor"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>nest::poisson_generator</label>
        <link refid="classnest_1_1poisson__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="76">
        <label>nest::rate_neuron_opn&lt; TNonlinearities &gt;</label>
        <link refid="classnest_1_1rate__neuron__opn"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>nest::spike_train_injector</label>
        <link refid="classnest_1_1spike__train__injector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>nest::dc_generator</label>
        <link refid="classnest_1_1dc__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>nest::tsodyks_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1tsodyks__synapse__hom_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::cont_delay_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::clopath_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1clopath__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>nest::iaf_psc_exp_ps</label>
        <link refid="classnest_1_1iaf__psc__exp__ps"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>nest::ppd_sup_generator</label>
        <link refid="classnest_1_1ppd__sup__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>nest::iaf_psc_delta</label>
        <link refid="classnest_1_1iaf__psc__delta"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>nest::gif_psc_exp</label>
        <link refid="classnest_1_1gif__psc__exp"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>nest::urbanczik_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1urbanczik__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>nest::iaf_psc_alpha_multisynapse</label>
        <link refid="classnest_1_1iaf__psc__alpha__multisynapse"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>nest::pp_psc_delta</label>
        <link refid="classnest_1_1pp__psc__delta"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__nn__symm__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>nest::tsodyks_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1tsodyks__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>nest::RecordingDevice</label>
        <link refid="classnest_1_1RecordingDevice"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>nest::step_current_generator</label>
        <link refid="classnest_1_1step__current__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="66">
        <label>nest::iaf_psc_exp_htum</label>
        <link refid="classnest_1_1iaf__psc__exp__htum"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__nn__pre__centered__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__facetshw__synapse__hom_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>nest::sinusoidal_poisson_generator</label>
        <link refid="classnest_1_1sinusoidal__poisson__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>nest::spike_dilutor::DilutorStimulationDevice</label>
        <link refid="classnest_1_1spike__dilutor_1_1DilutorStimulationDevice"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__nn__restr__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>nest::correlomatrix_detector</label>
        <link refid="classnest_1_1correlomatrix__detector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__dopamine__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>nest::weight_recorder</label>
        <link refid="classnest_1_1weight__recorder"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>nest::proxynode</label>
        <link refid="classnest_1_1proxynode"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>nest::parrot_neuron_ps</label>
        <link refid="classnest_1_1parrot__neuron__ps"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="72">
        <label>nest::parrot_neuron</label>
        <link refid="classnest_1_1parrot__neuron"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1DeviceNode"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>nest::poisson_generator_ps</label>
        <link refid="classnest_1_1poisson__generator__ps"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>nest::amat2_psc_exp</label>
        <link refid="classnest_1_1amat2__psc__exp"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>nest::static_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1static__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="69">
        <label>nest::iaf_psc_exp_ps_lossless</label>
        <link refid="classnest_1_1iaf__psc__exp__ps__lossless"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__pl__synapse__hom_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>nest::multimeter</label>
        <link refid="classnest_1_1multimeter"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>nest::volume_transmitter</label>
        <link refid="classnest_1_1volume__transmitter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>nest::binary_neuron&lt; TGainfunction &gt;</label>
        <link refid="classnest_1_1binary__neuron"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>nest::stdp_triplet_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__triplet__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>nest::spike_recorder</label>
        <link refid="classnest_1_1spike__recorder"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>nest::static_synapse_hom_w&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="65">
        <label>nest::iaf_psc_exp</label>
        <link refid="classnest_1_1iaf__psc__exp"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="80">
        <label>nest::correlospinmatrix_detector</label>
        <link refid="classnest_1_1correlospinmatrix__detector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::bernoulli_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1bernoulli__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>nest::iaf_psc_alpha_ps</label>
        <link refid="classnest_1_1iaf__psc__alpha__ps"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>nest::pulsepacket_generator</label>
        <link refid="classnest_1_1pulsepacket__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>nest::iaf_psc_delta_ps</label>
        <link refid="classnest_1_1iaf__psc__delta__ps"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="59">
        <label>nest::iaf_chs_2007</label>
        <link refid="classnest_1_1iaf__chs__2007"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::jonke_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1jonke__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="67">
        <label>nest::iaf_psc_exp_multisynapse</label>
        <link refid="classnest_1_1iaf__psc__exp__multisynapse"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>nest::stdp_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__synapse__hom_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>nest::rate_transformer_node&lt; TNonlinearities &gt;</label>
        <link refid="classnest_1_1rate__transformer__node"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="70">
        <label>nest::izhikevich</label>
        <link refid="classnest_1_1izhikevich"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1vogels__sprekeler__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>nest::cm_default</label>
        <link refid="classnest_1_1cm__default"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>nest::step_rate_generator</label>
        <link refid="classnest_1_1step__rate__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>nest::mip_generator</label>
        <link refid="classnest_1_1mip__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>nest::tsodyks2_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1tsodyks2__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>nest::StimulationDevice</label>
        <link refid="classnest_1_1StimulationDevice"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::quantal_stp_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1quantal__stp__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>nest::UrbanczikArchivingNode&lt; urbanczik_parameters &gt;</label>
        <link refid="classnest_1_1UrbanczikArchivingNode"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>nest::mat2_psc_exp</label>
        <link refid="classnest_1_1mat2__psc__exp"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>nest::noise_generator</label>
        <link refid="classnest_1_1noise__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ConnTestDummyNodeBase</label>
        <link refid="classnest_1_1ConnTestDummyNodeBase"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>nest::stdp_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1stdp__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="58">
        <label>nest::glif_psc</label>
        <link refid="classnest_1_1glif__psc"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::ht_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode</label>
        <link refid="classnest_1_1ht__synapse_1_1ConnTestDummyNode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>nest::spike_generator</label>
        <link refid="classnest_1_1spike__generator"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="1">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" line="103" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="104" bodyend="912"/>
    <listofallmembers>
      <member refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::Node</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1Node_1ad88edfd6f881579328b545d88372807d" prot="public" virt="virtual"><scope>nest::Node</scope><name>clone</name></member>
      <member refid="group__SP__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" virt="virtual"><scope>nest::Node</scope><name>connect_synaptic_element</name></member>
      <member refid="group__SP__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" virt="virtual"><scope>nest::Node</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::Node</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::Node</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::Node</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::Node</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_C_m</name></member>
      <member refid="group__SP__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1Node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_history</name></member>
      <member refid="classnest_1_1Node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1Node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::Node</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_node_id</name></member>
      <member refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf" prot="public" virt="pure-virtual"><scope>nest::Node</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::Node</scope><name>get_status_dict_</name></member>
      <member refid="group__SP__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::Node</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>get_vp</name></member>
      <member refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::Node</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::Node</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" virt="virtual"><scope>nest::Node</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>init</name></member>
      <member refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453" prot="protected" virt="virtual"><scope>nest::Node</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::Node</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>initialized_</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::Node</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::Node</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::Node</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1Node_1a2bf2a0e9b454c55aa5dcb5aa4698697b" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>Model</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>model_id_</name></member>
      <member refid="classnest_1_1Node_1aa54a149299ea6a38d6cee1943b2bddf9" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>ModelManager</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1aa49a527d01a369f21afaddd4e13a9748" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>NodeManager</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::Node</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a9c99a8caa89a3eb73e975f25678d5d58" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>operator=</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::Node</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788" prot="public" virt="pure-virtual"><scope>nest::Node</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::Node</scope><name>print_network</name></member>
      <member refid="classnest_1_1Node_1a157176d1c5146d6a93a538de218cbe8e" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>proxynode</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::Node</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" virt="virtual"><scope>nest::Node</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" prot="public" virt="virtual"><scope>nest::Node</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::Node</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::Node</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::Node</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::Node</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::Node</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::Node</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::Node</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::Node</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_node_uses_wfr</name></member>
      <member refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36" prot="public" virt="pure-virtual"><scope>nest::Node</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::Node</scope><name>set_vp</name></member>
      <member refid="classnest_1_1Node_1a630a7fe19e19ffa310ad17522b70878e" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>SimulationManager</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::Node</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1Node_1a4b5b0493670970044a06856861cf3c86" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>Synapse</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5" prot="public" virt="pure-virtual"><scope>nest::Node</scope><name>update</name></member>
      <member refid="group__SP__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" virt="virtual"><scope>nest::Node</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::Node</scope><name>vp_</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::Node</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::Node</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
