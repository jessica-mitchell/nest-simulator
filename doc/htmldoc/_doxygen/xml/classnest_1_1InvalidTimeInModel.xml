<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1InvalidTimeInModel" kind="class" language="C++" prot="public">
    <compoundname>nest::InvalidTimeInModel</compoundname>
    <basecompoundref refid="classnest_1_1KernelException" prot="public" virt="non-virtual">nest::KernelException</basecompoundref>
    <includes refid="exceptions_8h" local="no">exceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1InvalidTimeInModel_1a041afc90b36a5cbbdb6f2ed83c2e3ddc" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string nest::InvalidTimeInModel::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <qualifiedname>nest::InvalidTimeInModel::model_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="767" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1InvalidTimeInModel_1a808953c3b05dae9616adbeb9a03e2507" prot="private" static="no" mutable="no">
        <type>const <ref refid="className" kindref="compound">Name</ref></type>
        <definition>const Name nest::InvalidTimeInModel::prop_</definition>
        <argsstring></argsstring>
        <name>prop_</name>
        <qualifiedname>nest::InvalidTimeInModel::prop_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="768" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1InvalidTimeInModel_1a2a303b7e5ed4fe34e4fdb165020725bc" prot="private" static="no" mutable="no">
        <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>const Time nest::InvalidTimeInModel::val_</definition>
        <argsstring></argsstring>
        <name>val_</name>
        <qualifiedname>nest::InvalidTimeInModel::val_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="769" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1InvalidTimeInModel_1aa664a6d7d5c20f1af03c36a7c9433bdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::InvalidTimeInModel::InvalidTimeInModel</definition>
        <argsstring>(const std::string &amp;model, const Name &amp;property, const Time &amp;value)</argsstring>
        <name>InvalidTimeInModel</name>
        <qualifiedname>nest::InvalidTimeInModel::InvalidTimeInModel</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const <ref refid="className" kindref="compound">Name</ref> &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>model should be passed from get_name() to ensure that names of copied models are reported correctly. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>name of model causing problem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>name of property conflicting </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value of property conflicting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="753" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="753" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1InvalidTimeInModel_1a9fbd89a1de62a58cb3cd899222530501" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::InvalidTimeInModel::~InvalidTimeInModel</definition>
        <argsstring>() override</argsstring>
        <name>~InvalidTimeInModel</name>
        <qualifiedname>nest::InvalidTimeInModel::~InvalidTimeInModel</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="760" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="760" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1InvalidTimeInModel_1ad5434eeeca9fb25901604a24c9a3900a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string nest::InvalidTimeInModel::message</definition>
        <argsstring>() const override</argsstring>
        <name>message</name>
        <qualifiedname>nest::InvalidTimeInModel::message</qualifiedname>
        <reimplements refid="classnest_1_1KernelException_1a485c64ff3ea756a5eb6118799e0f1c74">message</reimplements>
        <briefdescription>
<para>Returns a diagnostic message or empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="764" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.cpp" bodystart="302" bodyend="309"/>
        <references refid="classnest_1_1Time_1a6f14dc87dbd694a028020f00a5a92d7c" compoundref="nest__time_8h" startline="341" endline="344">nest::Time::get_resolution</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception to be thrown on instance construction if <ref refid="classnest_1_1Time" kindref="compound">Time</ref> objects incompatible. </para>
    </briefdescription>
    <detaileddescription>
<para>This exception is to be thrown by the copy constructor of nodes which require that <ref refid="classnest_1_1Time" kindref="compound">Time</ref> objects have properties wrt resolution.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1InvalidDefaultResolution" kindref="compound">InvalidDefaultResolution</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::InvalidTimeInModel</label>
        <link refid="classnest_1_1InvalidTimeInModel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::KernelException</label>
        <link refid="classnest_1_1KernelException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>Name</label>
        <link refid="className"/>
      </node>
      <node id="3">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::InvalidTimeInModel</label>
        <link refid="classnest_1_1InvalidTimeInModel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>prop_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>val_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::KernelException</label>
        <link refid="classnest_1_1KernelException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::Time</label>
        <link refid="classnest_1_1Time"/>
        <childnode refid="7" relation="usage">
          <edgelabel>LIM_MAX</edgelabel>
          <edgelabel>LIM_MIN</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>LIM_NEG_INF</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1Time_1_1Limit"/>
      </node>
      <node id="9">
        <label>nest::Time::LimitNegInf</label>
        <link refid="structnest_1_1Time_1_1LimitNegInf"/>
      </node>
      <node id="8">
        <label>nest::Time::LimitPosInf</label>
        <link refid="structnest_1_1Time_1_1LimitPosInf"/>
      </node>
      <node id="4">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="743" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="744" bodyend="770"/>
    <listofallmembers>
      <member refid="classnest_1_1InvalidTimeInModel_1aa664a6d7d5c20f1af03c36a7c9433bdf" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>InvalidTimeInModel</name></member>
      <member refid="classnest_1_1KernelException_1aeb4d5e1c6351372f03f535806264fb6d" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KernelException_1a587cc59f8f1fac92da4370934c03ab15" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KernelException_1a1a10edf2a54c9d48aeab137024cd3144" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>KernelException</name></member>
      <member refid="classnest_1_1InvalidTimeInModel_1ad5434eeeca9fb25901604a24c9a3900a" prot="public" virt="virtual"><scope>nest::InvalidTimeInModel</scope><name>message</name></member>
      <member refid="classnest_1_1InvalidTimeInModel_1a041afc90b36a5cbbdb6f2ed83c2e3ddc" prot="private" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>model_</name></member>
      <member refid="classnest_1_1InvalidTimeInModel_1a808953c3b05dae9616adbeb9a03e2507" prot="private" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>prop_</name></member>
      <member refid="classSLIException_1ace48f5938754e82931bab7f54471dd3f" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a5da1b6d493d134687d9ce01e9799b59d" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>SLIException</name></member>
      <member refid="classnest_1_1InvalidTimeInModel_1a2a303b7e5ed4fe34e4fdb165020725bc" prot="private" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>val_</name></member>
      <member refid="classSLIException_1a4ac56d362c7d86819a47c76571c9c031" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>what</name></member>
      <member refid="classSLIException_1af0e8f12a5e346db4c028d23a2974f016" prot="private" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>what_</name></member>
      <member refid="classnest_1_1InvalidTimeInModel_1a9fbd89a1de62a58cb3cd899222530501" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>~InvalidTimeInModel</name></member>
      <member refid="classnest_1_1KernelException_1aeaa4cd0b8db52d17bb0907ea6db41a44" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>~KernelException</name></member>
      <member refid="classSLIException_1a671677b69bcc3895df94a069067c0578" prot="public" virt="non-virtual"><scope>nest::InvalidTimeInModel</scope><name>~SLIException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
