<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="mpi__manager_8cpp" kind="file" language="C++">
    <compoundname>mpi_manager.cpp</compoundname>
    <includes refid="mpi__manager_8h" local="yes">mpi_manager.h</includes>
    <includes local="no">cstdlib</includes>
    <includes refid="stopwatch_8h" local="yes">stopwatch.h</includes>
    <includes refid="kernel__manager_8h" local="yes">kernel_manager.h</includes>
    <includes refid="mpi__manager__impl_8h" local="yes">mpi_manager_impl.h</includes>
    <includes refid="nest__types_8h" local="yes">nest_types.h</includes>
    <includes local="yes">dictutils.h</includes>
    <incdepgraph>
      <node id="108">
        <label>genericmodel.h</label>
        <link refid="genericmodel_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>target_table_devices.h</label>
        <link refid="target__table__devices_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="48">
        <label>ntree.h</label>
        <link refid="ntree_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>random_generators.h</label>
        <link refid="random__generators_8h"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>mpi_manager.cpp</label>
        <link refid="mpi__manager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>iterator</label>
      </node>
      <node id="40">
        <label>arraydatum.h</label>
      </node>
      <node id="12">
        <label>nest_types.h</label>
        <link refid="nest__types_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>mpi_manager_impl.h</label>
        <link refid="mpi__manager__impl_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>model_manager.h</label>
        <link refid="model__manager_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>connection_manager.h</label>
        <link refid="connection__manager_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cstdint</label>
      </node>
      <node id="94">
        <label>per_thread_bool_indicator.h</label>
        <link refid="per__thread__bool__indicator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>source_table.h</label>
        <link refid="source__table_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stdint.h</label>
      </node>
      <node id="58">
        <label>nest_names.h</label>
        <link refid="nest__names_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>deprecation_warning.h</label>
        <link refid="deprecation__warning_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>stimulation_backend.h</label>
        <link refid="stimulation__backend_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>music_manager.h</label>
        <link refid="music__manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>source_table_position.h</label>
        <link refid="source__table__position_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>dictutils.h</label>
      </node>
      <node id="43">
        <label>event.h</label>
        <link refid="event_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>vp_manager.h</label>
        <link refid="vp__manager_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="52">
        <label>position.h</label>
        <link refid="position_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>stdexcept</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="21">
        <label>exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>string</label>
      </node>
      <node id="35">
        <label>map</label>
      </node>
      <node id="121">
        <label>growth_curve.h</label>
        <link refid="growth__curve_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>generic_factory.h</label>
        <link refid="generic__factory_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>nest_time.h</label>
        <link refid="nest__time_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>aggregatedatum.h</label>
      </node>
      <node id="70">
        <label>dict.h</label>
      </node>
      <node id="39">
        <label>connection_id.h</label>
        <link refid="connection__id_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>source.h</label>
        <link refid="source_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cfloat</label>
      </node>
      <node id="20">
        <label>target.h</label>
        <link refid="target_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>ostream</label>
      </node>
      <node id="42">
        <label>nestmodule.h</label>
        <link refid="nestmodule_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>device_node.h</label>
        <link refid="device__node_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>static_assert.h</label>
        <link refid="static__assert_8h"/>
      </node>
      <node id="76">
        <label>connector_base.h</label>
        <link refid="connector__base_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>slitype.h</label>
      </node>
      <node id="100">
        <label>io_manager.h</label>
        <link refid="io__manager_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>common_synapse_properties.h</label>
        <link refid="common__synapse__properties_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>lockptr.h</label>
        <link refid="lockptr_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>nest_datums.h</label>
        <link refid="nest__datums_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>allocator.h</label>
      </node>
      <node id="88">
        <label>connection_label.h</label>
        <link refid="connection__label_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>node.h</label>
        <link refid="node_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>random_manager.h</label>
        <link refid="random__manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>enum_bitfield.h</label>
        <link refid="enum__bitfield_8h"/>
      </node>
      <node id="87">
        <label>histentry.h</label>
        <link refid="histentry_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>random</label>
      </node>
      <node id="73">
        <label>slimodule.h</label>
      </node>
      <node id="57">
        <label>parameter.h</label>
        <link refid="parameter_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>secondary_event.h</label>
        <link refid="secondary__event_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>bitset</label>
      </node>
      <node id="60">
        <label>ctime</label>
      </node>
      <node id="56">
        <label>token.h</label>
      </node>
      <node id="93">
        <label>nest_timeconverter.h</label>
        <link refid="nest__timeconverter_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
      <node id="19">
        <label>spike_data.h</label>
        <link refid="spike__data_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="71">
        <label>sharedptrdatum.h</label>
      </node>
      <node id="78">
        <label>block_vector.h</label>
        <link refid="block__vector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>new</label>
      </node>
      <node id="29">
        <label>target_data.h</label>
        <link refid="target__data_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>kernel_manager.h</label>
        <link refid="kernel__manager_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>utility</label>
      </node>
      <node id="53">
        <label>array</label>
      </node>
      <node id="54">
        <label>sstream</label>
      </node>
      <node id="72">
        <label>slifunction.h</label>
      </node>
      <node id="104">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>randutils.hpp</label>
      </node>
      <node id="23">
        <label>cstdlib</label>
      </node>
      <node id="118">
        <label>simulation_manager.h</label>
        <link refid="simulation__manager_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>node_manager.h</label>
        <link refid="node__manager_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>dictdatum.h</label>
      </node>
      <node id="31">
        <label>sys/time.h</label>
      </node>
      <node id="11">
        <label>manager_interface.h</label>
        <link refid="manager__interface_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="26">
        <label>name.h</label>
      </node>
      <node id="59">
        <label>node_collection.h</label>
        <link refid="node__collection_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cstddef</label>
      </node>
      <node id="85">
        <label>deque</label>
      </node>
      <node id="103">
        <label>stimulation_device.h</label>
        <link refid="stimulation__device_8h"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>target_table.h</label>
        <link refid="target__table_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>climits</label>
      </node>
      <node id="112">
        <label>modelrange_manager.h</label>
        <link refid="modelrange__manager_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>nest.h</label>
        <link refid="nest_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>model.h</label>
        <link refid="model_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>sliexceptions.h</label>
      </node>
      <node id="106">
        <label>logging_manager.h</label>
        <link refid="logging__manager_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>conn_parameter.h</label>
        <link refid="conn__parameter_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>event_delivery_manager.h</label>
        <link refid="event__delivery__manager_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>sparse_node_array.h</label>
        <link refid="sparse__node__array_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>growth_curve_factory.h</label>
        <link refid="growth__curve__factory_8h"/>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>modelrange.h</label>
        <link refid="modelrange_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>vector_util.h</label>
        <link refid="vector__util_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>type_traits</label>
      </node>
      <node id="119">
        <label>sp_manager.h</label>
        <link refid="sp__manager_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>set</label>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
      <node id="34">
        <label>conn_builder.h</label>
        <link refid="conn__builder_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>mpi_manager.h</label>
        <link refid="mpi__manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>cstring</label>
      </node>
      <node id="81">
        <label>connector_model.h</label>
        <link refid="connector__model_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>recording_backend.h</label>
        <link refid="recording__backend_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>memory</label>
      </node>
      <node id="92">
        <label>spikecounter.h</label>
        <link refid="spikecounter_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>logging.h</label>
        <link refid="logging_8h"/>
      </node>
      <node id="66">
        <label>initializer_list</label>
      </node>
      <node id="25">
        <label>numerics.h</label>
        <link refid="numerics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>compose.hpp</label>
      </node>
      <node id="77">
        <label>sort.h</label>
        <link refid="sort_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>stopwatch.h</label>
        <link refid="stopwatch_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>mpi_manager.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mpi__manager_8h" kindref="compound">mpi_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>libnestutil:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stopwatch_8h" kindref="compound">stopwatch.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mpi__manager__impl_8h" kindref="compound">mpi_manager_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nest__types_8h" kindref="compound">nest_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dictutils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">MPI_Datatype<sp/>MPI_Type&lt;<sp/>int<sp/>&gt;::type<sp/>=<sp/>MPI_INT;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">MPI_Datatype<sp/>MPI_Type&lt;<sp/>double<sp/>&gt;::type<sp/>=<sp/>MPI_DOUBLE;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">MPI_Datatype<sp/>MPI_Type&lt;<sp/>long<sp/>&gt;::type<sp/>=<sp/>MPI_LONG;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">MPI_Datatype<sp/>MPI_Type&lt;<sp/>unsigned<sp/>int<sp/>&gt;::type<sp/>=<sp/>MPI_INT;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">MPI_Datatype<sp/>MPI_Type&lt;<sp/>unsigned<sp/>long<sp/>&gt;::type<sp/>=<sp/>MPI_UNSIGNED_LONG;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classnest_1_1MPIManager_1a6aae08ff665103404592b801bee4fc8d" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a6aae08ff665103404592b801bee4fc8d" kindref="member">nest::MPIManager::MPIManager</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>:<sp/>num_processes_(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>,<sp/>rank_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>,<sp/>send_buffer_size_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>,<sp/>recv_buffer_size_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>,<sp/>use_mpi_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>,<sp/>buffer_size_target_data_(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>,<sp/>buffer_size_spike_data_(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>,<sp/>max_buffer_size_target_data_(<sp/>16777216<sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>,<sp/>max_buffer_size_spike_data_(<sp/>8388608<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>,<sp/>adaptive_target_buffers_(<sp/>true<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>,<sp/>adaptive_spike_buffers_(<sp/>true<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>,<sp/>growth_factor_buffer_spike_data_(<sp/>1.5<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>,<sp/>growth_factor_buffer_target_data_(<sp/>1.5<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>,<sp/>shrink_factor_buffer_spike_data_(<sp/>1.1<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>,<sp/>send_recv_count_spike_data_per_rank_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>,<sp/>send_recv_count_target_data_per_rank_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">#ifdef<sp/>HAVE_MPI</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>,<sp/>comm_step_(<sp/><ref refid="namespacenest_1_1names_1a5d090e9d6776885fbdb33f5d93d625f7" kindref="member">std</ref>::vector&lt;<sp/>int<sp/>&gt;()<sp/>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>,<sp/>COMM_OVERFLOW_ERROR(<sp/><ref refid="namespacenest_1_1names_1a5d090e9d6776885fbdb33f5d93d625f7" kindref="member">std</ref>::numeric_limits&lt;<sp/>unsigned<sp/>int<sp/>&gt;::<ref refid="namespacenest_1_1names_1a9426cabb2c0dd92562f8a017eecef730" kindref="member">max</ref>()<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>,<sp/>comm(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>,<sp/>MPI_OFFGRID_SPIKE(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classnest_1_1MPIManager_1a339bb79dd6ca362ef20da865ec7feca7" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a339bb79dd6ca362ef20da865ec7feca7" kindref="member">nest::MPIManager::init_mpi</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>!<sp/>HAVE_MPI,<sp/>initialize<sp/>process<sp/>entries<sp/>for<sp/>1<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>2<sp/>processes<sp/>entries<sp/>(need<sp/>at<sp/>least<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>entries<sp/>per<sp/>process<sp/>to<sp/>use<sp/>flag<sp/>of<sp/>first<sp/>entry<sp/>as<sp/>validity<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>entry<sp/>to<sp/>communicate<sp/>end<sp/>of<sp/>communication)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a73df0e7d6e7d2a93bc02860ada5d3b40" kindref="member">set_buffer_size_target_data</ref>(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a7b5822098592331c4fefa996c971e88b" kindref="member">set_buffer_size_spike_data</ref>(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>recv_counts_secondary_events_in_int_per_rank_.resize(<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>recv_displacements_secondary_events_in_int_per_rank_.resize(<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>send_counts_secondary_events_in_int_per_rank_.resize(<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>send_displacements_secondary_events_in_int_per_rank_.resize(<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">nest::MPIManager::set_communicator(<sp/>MPI_Comm<sp/>global_comm<sp/>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>comm<sp/>=<sp/>global_comm;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>MPI_Comm_size(<sp/>comm,<sp/>&amp;num_processes_<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>MPI_Comm_rank(<sp/>comm,<sp/>&amp;rank_<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>*<sp/>get_num_processes();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>at<sp/>least<sp/>2<sp/>*<sp/>number<sp/>of<sp/>processes<sp/>entries<sp/>(need<sp/>at<sp/>least<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>entries<sp/>per<sp/>process<sp/>to<sp/>use<sp/>flag<sp/>of<sp/>first<sp/>entry<sp/>as<sp/>validity<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>entry<sp/>to<sp/>communicate<sp/>end<sp/>of<sp/>communication)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a73df0e7d6e7d2a93bc02860ada5d3b40" kindref="member">set_buffer_size_target_data</ref>(<sp/>2<sp/>*<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().mpi_manager.get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a7b5822098592331c4fefa996c971e88b" kindref="member">set_buffer_size_spike_data</ref>(<sp/>2<sp/>*<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().mpi_manager.get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a339bb79dd6ca362ef20da865ec7feca7" kindref="member">nest::MPIManager::init_mpi</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv[]<sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>MPI_Initialized(<sp/>&amp;init<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>init<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MUSIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a1ee79f33da362c06ce4d394afbef2ae8" kindref="member">music_manager</ref>.<ref refid="classnest_1_1MUSICManager_1ae67f33184ee382cdb5d7e3203494c248" kindref="member">init_music</ref>(<sp/>argc,<sp/>argv<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>communicator<sp/>from<sp/>MUSIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>set_communicator(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/>MPI_Comm<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().music_manager.communicator()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MUSIC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>provided_thread_level;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Init_thread(<sp/>argc,<sp/>argv,<sp/>MPI_THREAD_FUNNELED,<sp/>&amp;provided_thread_level<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>set_communicator(<sp/>MPI_COMM_WORLD<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MUSIC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MUSIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" kindref="member">LOG</ref>(<sp/><ref refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaf8dec0ca154ba4dd8045accef88b46" kindref="member">M_ERROR</ref>,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MPIManager::init_mpi()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;When<sp/>compiled<sp/>with<sp/>MUSIC,<sp/>NEST<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>any<sp/>other<sp/>modules<sp/>that<sp/>call<sp/>MPI_Init().<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>MPI_Abort().&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>MPI_COMM_WORLD;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>mpi_abort(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>set_communicator(<sp/>MPI_COMM_WORLD<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>recv_counts_secondary_events_in_int_per_rank_.resize(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>recv_displacements_secondary_events_in_int_per_rank_.resize(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>send_counts_secondary_events_in_int_per_rank_.resize(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>send_displacements_secondary_events_in_int_per_rank_.resize(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>off-grid-spike<sp/>type<sp/>for<sp/>MPI<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>creating<sp/>derived<sp/>datatype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1MPIManager_1_1OffGridSpike_1a5c2564a2c330b41c20865d9cdc7407b4" kindref="member">OffGridSpike::assert_datatype_compatibility_</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>MPI_Datatype<sp/>source_types[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockcounts[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>MPI_Aint<sp/><ref refid="namespacenest_1_1names_1a93cf4adc441e21fca9b79ddb9c84878d" kindref="member">offsets</ref>[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>MPI_Aint<sp/>start_address,<sp/>address;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a05d262f7afd9018d9a067d3431035dd9" kindref="member">OffGridSpike</ref><sp/>ogs(<sp/>0,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OffGridSpike.node_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a93cf4adc441e21fca9b79ddb9c84878d" kindref="member">offsets</ref>[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>source_types[<sp/>0<sp/>]<sp/>=<sp/>MPI_DOUBLE;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>blockcounts[<sp/>0<sp/>]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OffGridSpike.offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>MPI_Get_address(<sp/>&amp;(<sp/>ogs.node_id_<sp/>),<sp/>&amp;start_address<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>MPI_Get_address(<sp/>&amp;(<sp/>ogs.offset_<sp/>),<sp/>&amp;address<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a93cf4adc441e21fca9b79ddb9c84878d" kindref="member">offsets</ref>[<sp/>1<sp/>]<sp/>=<sp/>address<sp/>-<sp/>start_address;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>source_types[<sp/>1<sp/>]<sp/>=<sp/>MPI_DOUBLE;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>blockcounts[<sp/>1<sp/>]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>and<sp/>commit<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>MPI_Type_create_struct(<sp/>2,<sp/>blockcounts,<sp/><ref refid="namespacenest_1_1names_1a93cf4adc441e21fca9b79ddb9c84878d" kindref="member">offsets</ref>,<sp/>source_types,<sp/>&amp;MPI_OFFGRID_SPIKE<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>MPI_Type_commit(<sp/>&amp;MPI_OFFGRID_SPIKE<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>use_mpi_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classnest_1_1MPIManager_1a255066ece2aedc9d6faef73e63286664" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a255066ece2aedc9d6faef73e63286664" kindref="member">nest::MPIManager::initialize</ref>()</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pmix_rank_set<sp/>=<sp/>std::getenv(<sp/></highlight><highlight class="stringliteral">&quot;PMIX_RANK&quot;</highlight><highlight class="normal"><sp/>);<sp/></highlight><highlight class="comment">//<sp/>set<sp/>by<sp/>OpenMPI&apos;s<sp/>launcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pmi_rank_set<sp/>=<sp/>std::getenv(<sp/></highlight><highlight class="stringliteral">&quot;PMI_RANK&quot;</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>by<sp/>MPICH&apos;s<sp/>launcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pmix_rank_set<sp/>or<sp/>pmi_rank_set<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" kindref="member">LOG</ref>(<sp/><ref refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a0c27831aefc07cf6c39ebc0cda2dc1fd" kindref="member">M_FATAL</ref>,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MPIManager::initialize()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>seem<sp/>to<sp/>be<sp/>using<sp/>NEST<sp/>via<sp/>an<sp/>MPI<sp/>launcher<sp/>like<sp/>mpirun,<sp/>mpiexec<sp/>or<sp/>srun<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;although<sp/>NEST<sp/>was<sp/>not<sp/>compiled<sp/>with<sp/>MPI<sp/>support.<sp/>Please<sp/>see<sp/>the<sp/>NEST<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;documentation<sp/>about<sp/>parallel<sp/>and<sp/>distributed<sp/>computing.<sp/>Exiting.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::exit(<sp/>127<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classnest_1_1MPIManager_1a09a36899c01cb8ca1acebddcd55cb380" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a09a36899c01cb8ca1acebddcd55cb380" kindref="member">nest::MPIManager::finalize</ref>()</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classnest_1_1MPIManager_1a97c0ce2af5728bb4b425edd45b010daf" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a97c0ce2af5728bb4b425edd45b010daf" kindref="member">nest::MPIManager::set_status</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DictionaryDatum&amp;<sp/>dict<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>bool<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1abf1813a486482afc62357c28441c4285" kindref="member">names::adaptive_target_buffers</ref>,<sp/>adaptive_target_buffers_<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>bool<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a7c89d8c0c34c14fccf5143b660162aaf" kindref="member">names::adaptive_spike_buffers</ref>,<sp/>adaptive_spike_buffers_<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>new_buffer_size_target_data<sp/>=<sp/>buffer_size_target_data_;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>long<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a288cee4f40c3ef2226b9e4b997f09f65" kindref="member">names::buffer_size_target_data</ref>,<sp/>new_buffer_size_target_data<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>new_buffer_size_target_data<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>buffer_size_target_data_<sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>and<sp/>new_buffer_size_target_data<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>max_buffer_size_target_data_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>set_buffer_size_target_data(<sp/>new_buffer_size_target_data<sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>new_buffer_size_spike_data<sp/>=<sp/>buffer_size_spike_data_;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>long<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1aa7e177205fe8bb0685e7537e55b4764d" kindref="member">names::buffer_size_spike_data</ref>,<sp/>new_buffer_size_spike_data<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>new_buffer_size_spike_data<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>buffer_size_spike_data_<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>and<sp/>new_buffer_size_spike_data<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>max_buffer_size_spike_data_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>set_buffer_size_spike_data(<sp/>new_buffer_size_spike_data<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>double<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1aefc2d46a4786877835b49adda459c0d1" kindref="member">names::growth_factor_buffer_spike_data</ref>,<sp/>growth_factor_buffer_spike_data_<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>double<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a851735c170a7fb9e9567122361fc1260" kindref="member">names::growth_factor_buffer_target_data</ref>,<sp/>growth_factor_buffer_target_data_<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>long<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a63ee23d2f649495c6c0c77ba8400f9f4" kindref="member">names::max_buffer_size_target_data</ref>,<sp/>max_buffer_size_target_data_<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>long<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a188865c7c631b2eb779c4762032e2562" kindref="member">names::max_buffer_size_spike_data</ref>,<sp/>max_buffer_size_spike_data_<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>updateValue&lt;<sp/>double<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a844bd1e51392a05358a90a830f41c4d7" kindref="member">names::shrink_factor_buffer_spike_data</ref>,<sp/>shrink_factor_buffer_spike_data_<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="classnest_1_1MPIManager_1aaa37ecf1d94ec3d8bb0b5f45033d8a6b" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1aaa37ecf1d94ec3d8bb0b5f45033d8a6b" kindref="member">nest::MPIManager::get_status</ref>(<sp/>DictionaryDatum&amp;<sp/>dict<sp/>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>def&lt;<sp/>long<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">names::num_processes</ref>,<sp/>num_processes_<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>def&lt;<sp/>bool<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a7c89d8c0c34c14fccf5143b660162aaf" kindref="member">names::adaptive_spike_buffers</ref>,<sp/>adaptive_spike_buffers_<sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>def&lt;<sp/>bool<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1abf1813a486482afc62357c28441c4285" kindref="member">names::adaptive_target_buffers</ref>,<sp/>adaptive_target_buffers_<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a288cee4f40c3ef2226b9e4b997f09f65" kindref="member">names::buffer_size_target_data</ref>,<sp/>buffer_size_target_data_<sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1aa7e177205fe8bb0685e7537e55b4764d" kindref="member">names::buffer_size_spike_data</ref>,<sp/>buffer_size_spike_data_<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a6839d674b4fcb0830c8930785bcdf212" kindref="member">names::send_buffer_size_secondary_events</ref>,<sp/>get_send_buffer_size_secondary_events_in_int()<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1ab150dd3362a58a27b941c5c8f8b2c4bd" kindref="member">names::recv_buffer_size_secondary_events</ref>,<sp/>get_recv_buffer_size_secondary_events_in_int()<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a188865c7c631b2eb779c4762032e2562" kindref="member">names::max_buffer_size_spike_data</ref>,<sp/>max_buffer_size_spike_data_<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>def&lt;<sp/>size_t<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a63ee23d2f649495c6c0c77ba8400f9f4" kindref="member">names::max_buffer_size_target_data</ref>,<sp/>max_buffer_size_target_data_<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1aefc2d46a4786877835b49adda459c0d1" kindref="member">names::growth_factor_buffer_spike_data</ref>,<sp/>growth_factor_buffer_spike_data_<sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dict,<sp/><ref refid="namespacenest_1_1names_1a851735c170a7fb9e9567122361fc1260" kindref="member">names::growth_factor_buffer_target_data</ref>,<sp/>growth_factor_buffer_target_data_<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a52182d4b13ae15f937d8f1a9d844b8ee" kindref="member">nest::MPIManager::mpi_finalize</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitcode<sp/>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>MPI_Type_free(<sp/>&amp;MPI_OFFGRID_SPIKE<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>finalized;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>MPI_Finalized(<sp/>&amp;finalized<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialized;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>MPI_Initialized(<sp/>&amp;initialized<sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>finalized<sp/>==<sp/>0<sp/>and<sp/>initialized<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>exitcode<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a1ee79f33da362c06ce4d394afbef2ae8" kindref="member">music_manager</ref>.<ref refid="classnest_1_1MUSICManager_1a56f209579bd0d23b294876cff282c422" kindref="member">music_finalize</ref>();<sp/></highlight><highlight class="comment">//<sp/>calls<sp/>MPI_Finalize()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" kindref="member">LOG</ref>(<sp/><ref refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac918263c6420db964adbf3a3375cf9ee" kindref="member">M_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;MPIManager::finalize()&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Calling<sp/>MPI_Abort()<sp/>due<sp/>to<sp/>errors<sp/>in<sp/>the<sp/>script.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mpi_abort(<sp/>exitcode<sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="classnest_1_1MPIManager_1a52182d4b13ae15f937d8f1a9d844b8ee" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a52182d4b13ae15f937d8f1a9d844b8ee" kindref="member">nest::MPIManager::mpi_finalize</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a5cabda0a34c4a3e579f9df617576d09f" kindref="member">nest::MPIManager::mpi_abort</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitcode<sp/>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>MPI_Abort(<sp/>comm,<sp/>exitcode<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a1135c22e6c613c5573fa05ef72427358" kindref="member">nest::MPIManager::get_processor_name</ref>()</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[<sp/>1024<sp/>];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>MPI_Get_processor_name(<sp/>name,<sp/>&amp;len<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>name[<sp/>len<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>long<sp/>&gt;&amp;<sp/>local_nodes,<sp/>std::vector&lt;<sp/>long<sp/>&gt;&amp;<sp/>global_nodes<sp/>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>np<sp/>=<sp/>get_num_processes();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>size<sp/>of<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>num_nodes_per_rank(<sp/>np<sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>num_nodes_per_rank[<sp/>get_rank()<sp/>]<sp/>=<sp/>local_nodes.size();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>communicate(<sp/>num_nodes_per_rank<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_globals<sp/>=<sp/>std::accumulate(<sp/>num_nodes_per_rank.begin(),<sp/>num_nodes_per_rank.end(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>global_nodes.resize(<sp/>num_globals,<sp/>0L<sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>displacements<sp/>vector.<sp/>Entry<sp/>i<sp/>specifies<sp/>the<sp/>displacement<sp/>(relative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>recv_buffer<sp/>)<sp/>at<sp/>which<sp/>to<sp/>place<sp/>the<sp/>incoming<sp/>data<sp/>from<sp/>process<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>displacements(<sp/>np,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>np;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements.at(<sp/>i<sp/>)<sp/>=<sp/>displacements.at(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>+<sp/>num_nodes_per_rank.at(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>MPI_Allgatherv(<sp/>&amp;(<sp/>*local_nodes.begin()<sp/>),</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>local_nodes.size(),</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>long<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;global_nodes[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;num_nodes_per_rank[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;displacements[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>long<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)<sp/></highlight><highlight class="comment">//<sp/>purely<sp/>thread-based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_buffer_size_<sp/>)<sp/>&lt;<sp/>send_buffer.size()<sp/>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>recv_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>communicate_Allgather(<sp/>send_buffer,<sp/>recv_buffer,<sp/>displacements<sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">nest::MPIManager::communicate_Allgather(<sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>recv_counts(<sp/>get_num_processes(),<sp/>send_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>attempt<sp/>Allgather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>send_buffer.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>send_buffer_size_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;send_buffer[<sp/>0<sp/>],<sp/>send_buffer_size_,<sp/>MPI_UNSIGNED,<sp/>&amp;recv_buffer[<sp/>0<sp/>],<sp/>send_buffer_size_,<sp/>MPI_UNSIGNED,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEC<sp/>cxx<sp/>required<sp/>0U<sp/>literal,<sp/>HEP<sp/>2007-03-26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>overflow_buffer(<sp/>send_buffer_size_,<sp/>0<ref refid="namespacenest_1_1names_1aae2af1fd4833432ad130e5cbcf41b638" kindref="member">U</ref><sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>overflow_buffer[<sp/>0<sp/>]<sp/>=<sp/>COMM_OVERFLOW_ERROR;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>overflow_buffer[<sp/>1<sp/>]<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(<sp/>&amp;overflow_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overflow<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_recv_count<sp/>=<sp/>send_buffer_size_;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid<sp/>=<sp/>0;<sp/>pid<sp/>&lt;<sp/>get_num_processes();<sp/>++pid<sp/>)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_disp<sp/>=<sp/>pid<sp/>*<sp/>send_buffer_size_;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements[<sp/>pid<sp/>]<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>recv_buffer[<sp/>block_disp<sp/>]<sp/>==<sp/>COMM_OVERFLOW_ERROR<sp/>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_counts[<sp/>pid<sp/>]<sp/>=<sp/>recv_buffer[<sp/>block_disp<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_counts[<sp/>pid<sp/>]<sp/>)<sp/>&gt;<sp/>max_recv_count<sp/>)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_recv_count<sp/>=<sp/>recv_counts[<sp/>pid<sp/>];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>disp<sp/>+=<sp/>recv_counts[<sp/>pid<sp/>];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>Allgatherv<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>overflow<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>disp,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgatherv(<sp/>&amp;send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer.size(),</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_counts[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>send_buffer_size_<sp/>=<sp/>max_recv_count;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>*<sp/>get_num_processes();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">nest::MPIManager::communicate_Allgather(<sp/>std::vector&lt;<sp/>T<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>T<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>recv_counts(<sp/>get_num_processes(),<sp/>send_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>attempt<sp/>Allgather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>send_buffer.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>send_buffer_size_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(<sp/>&amp;send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>T<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>T<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEC<sp/>cxx<sp/>required<sp/>0U<sp/>literal,<sp/>HEP<sp/>2007-03-26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>overflow_buffer(<sp/>send_buffer_size_,<sp/>0<ref refid="namespacenest_1_1names_1aae2af1fd4833432ad130e5cbcf41b638" kindref="member">U</ref><sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>overflow_buffer[<sp/>0<sp/>]<sp/>=<sp/>COMM_OVERFLOW_ERROR;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>overflow_buffer[<sp/>1<sp/>]<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(<sp/>&amp;overflow_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>T<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>T<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overflow<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_recv_count<sp/>=<sp/>send_buffer_size_;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid<sp/>=<sp/>0;<sp/>pid<sp/>&lt;<sp/>get_num_processes();<sp/>++pid<sp/>)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_disp<sp/>=<sp/>pid<sp/>*<sp/>send_buffer_size_;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements[<sp/>pid<sp/>]<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>recv_buffer[<sp/>block_disp<sp/>]<sp/>==<sp/>COMM_OVERFLOW_ERROR<sp/>)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_counts[<sp/>pid<sp/>]<sp/>=<sp/>recv_buffer[<sp/>block_disp<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_counts[<sp/>pid<sp/>]<sp/>)<sp/>&gt;<sp/>max_recv_count<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_recv_count<sp/>=<sp/>recv_counts[<sp/>pid<sp/>];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>disp<sp/>+=<sp/>recv_counts[<sp/>pid<sp/>];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>Allgatherv<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>overflow<sp/>)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>disp,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgatherv(<sp/>&amp;send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer.size(),</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>T<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_counts[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Type&lt;<sp/>T<sp/>&gt;::type,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>send_buffer_size_<sp/>=<sp/>max_recv_count;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>*<sp/>get_num_processes();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)<sp/></highlight><highlight class="comment">//<sp/>purely<sp/>thread-based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_buffer_size_<sp/>)<sp/>&lt;<sp/>send_buffer.size()<sp/>)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>recv_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>communicate_Allgather(<sp/>send_buffer,<sp/>recv_buffer,<sp/>displacements<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">nest::MPIManager::communicate_Allgather(<sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>recv_counts(<sp/>get_num_processes(),<sp/>send_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>attempt<sp/>Allgather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>send_buffer.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>send_buffer_size_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(<sp/>&amp;send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;<sp/>overflow_buffer(<sp/>send_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>overflow_buffer[<sp/>0<sp/>]<sp/>=<sp/><ref refid="namespacenest_1a05d262f7afd9018d9a067d3431035dd9" kindref="member">OffGridSpike</ref>(<sp/>COMM_OVERFLOW_ERROR,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>overflow_buffer[<sp/>1<sp/>]<sp/>=<sp/><ref refid="namespacenest_1a05d262f7afd9018d9a067d3431035dd9" kindref="member">OffGridSpike</ref>(<sp/>send_buffer.size(),<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(<sp/>&amp;overflow_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer_size_,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overflow<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>disp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_recv_count<sp/>=<sp/>send_buffer_size_;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid<sp/>=<sp/>0;<sp/>pid<sp/>&lt;<sp/>get_num_processes();<sp/>++pid<sp/>)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_disp<sp/>=<sp/>pid<sp/>*<sp/>send_buffer_size_;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements[<sp/>pid<sp/>]<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>recv_buffer[<sp/>block_disp<sp/>]<sp/>).get_node_id()<sp/>==<sp/>COMM_OVERFLOW_ERROR<sp/>)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recv_counts[<sp/>pid<sp/>]<sp/>=<sp/>(<sp/>recv_buffer[<sp/>block_disp<sp/>+<sp/>1<sp/>]<sp/>).get_node_id();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_counts[<sp/>pid<sp/>]<sp/>)<sp/>&gt;<sp/>max_recv_count<sp/>)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_recv_count<sp/>=<sp/>recv_counts[<sp/>pid<sp/>];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>disp<sp/>+=<sp/>recv_counts[<sp/>pid<sp/>];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>Allgatherv<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>overflow<sp/>)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>disp<sp/>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgatherv(<sp/>&amp;send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>send_buffer.size(),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv_counts[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>send_buffer_size_<sp/>=<sp/>max_recv_count;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>*<sp/>get_num_processes();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>size<sp/>of<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>n_nodes(<sp/>get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>n_nodes[<sp/>get_rank()<sp/>]<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>communicate(<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>displacements<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>get_num_processes();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements.at(<sp/>i<sp/>)<sp/>=<sp/>displacements.at(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>+<sp/>n_nodes.at(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>total<sp/>number<sp/>of<sp/>node<sp/>data<sp/>items<sp/>to<sp/>be<sp/>gathered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_globals<sp/>=<sp/>std::accumulate(<sp/>n_nodes.begin(),<sp/>n_nodes.end(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n_globals<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>n_globals,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>communicate_Allgatherv(<sp/>send_buffer,<sp/>recv_buffer,<sp/>displacements,<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.clear();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>unsigned<sp/>long<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>long<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>size<sp/>of<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>n_nodes(<sp/>num_processes_<sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>n_nodes[<sp/>rank_<sp/>]<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>communicate(<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>displacements<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>num_processes_;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements.at(<sp/>i<sp/>)<sp/>=<sp/>displacements.at(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>+<sp/>n_nodes.at(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>total<sp/>number<sp/>of<sp/>node<sp/>data<sp/>items<sp/>to<sp/>be<sp/>gathered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_globals<sp/>=<sp/>std::accumulate(<sp/>n_nodes.begin(),<sp/>n_nodes.end(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n_globals<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>n_globals,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>communicate_Allgatherv(<sp/>send_buffer,<sp/>recv_buffer,<sp/>displacements,<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.clear();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>size<sp/>of<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>n_nodes(<sp/>num_processes_<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>n_nodes[<sp/>rank_<sp/>]<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>communicate(<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>displacements<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>num_processes_;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements.at(<sp/>i<sp/>)<sp/>=<sp/>displacements.at(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>+<sp/>n_nodes.at(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>total<sp/>number<sp/>of<sp/>node<sp/>data<sp/>items<sp/>to<sp/>be<sp/>gathered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_globals<sp/>=<sp/>std::accumulate(<sp/>n_nodes.begin(),<sp/>n_nodes.end(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n_globals<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>n_globals,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>communicate_Allgatherv(<sp/>send_buffer,<sp/>recv_buffer,<sp/>displacements,<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.clear();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>send_val,<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>recv_buffer<sp/>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>recv_buffer.resize(<sp/>get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>MPI_Allgather(<sp/>&amp;send_val,<sp/>1,<sp/>MPI_DOUBLE,<sp/>&amp;recv_buffer[<sp/>0<sp/>],<sp/>1,<sp/>MPI_DOUBLE,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="686"><highlight class="normal">{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>communicate_Allgather(<sp/>buffer<sp/>);</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>long<sp/>&gt;&amp;<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>communicate_Allgather(<sp/>buffer<sp/>);</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">nest::MPIManager::communicate_Allgather(<sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>aliasing,<sp/>see<sp/>http://www.mpi-forum.org/docs/mpi-11-html/node10.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_val<sp/>=<sp/>buffer[<sp/>get_rank()<sp/>];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>MPI_Allgather(<sp/>&amp;my_val,<sp/>1,<sp/>MPI_INT,<sp/>&amp;buffer[<sp/>0<sp/>],<sp/>1,<sp/>MPI_INT,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>Sum<sp/>across<sp/>all<sp/>rank</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" kindref="member">nest::MPIManager::communicate_Allreduce_sum_in_place</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>MPI_Allreduce(<sp/>MPI_IN_PLACE,<sp/>&amp;buffer,<sp/>1,<sp/>MPI_Type&lt;<sp/>double<sp/>&gt;::type,<sp/>MPI_SUM,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" kindref="member">nest::MPIManager::communicate_Allreduce_sum_in_place</ref>(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>MPI_Allreduce(<sp/>MPI_IN_PLACE,<sp/>&amp;buffer[<sp/>0<sp/>],<sp/>buffer.size(),<sp/>MPI_Type&lt;<sp/>double<sp/>&gt;::type,<sp/>MPI_SUM,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" kindref="member">nest::MPIManager::communicate_Allreduce_sum_in_place</ref>(<sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>MPI_Allreduce(<sp/>MPI_IN_PLACE,<sp/>&amp;buffer[<sp/>0<sp/>],<sp/>buffer.size(),<sp/>MPI_Type&lt;<sp/>int<sp/>&gt;::type,<sp/>MPI_SUM,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a72072f9f17d9782a712920ebe70c9c7d" kindref="member">nest::MPIManager::communicate_Allreduce_sum</ref>(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>send_buffer,<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>recv_buffer<sp/>)</highlight></codeline>
<codeline lineno="727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>assert(<sp/>recv_buffer.size()<sp/>==<sp/>send_buffer.size()<sp/>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>MPI_Allreduce(<sp/>&amp;send_buffer[<sp/>0<sp/>],<sp/>&amp;recv_buffer[<sp/>0<sp/>],<sp/>send_buffer.size(),<sp/>MPI_Type&lt;<sp/>double<sp/>&gt;::type,<sp/>MPI_SUM,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1ad3ef1f745a7dea6644faa06cb0bf3389" kindref="member">nest::MPIManager::equal_cross_ranks</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>)</highlight></codeline>
<codeline lineno="734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flipping<sp/>the<sp/>sign<sp/>of<sp/>one<sp/>argument<sp/>to<sp/>check<sp/>both<sp/>min<sp/>and<sp/>max<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>values[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>values[<sp/>0<sp/>]<sp/>=<sp/>-value;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>values[<sp/>1<sp/>]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>MPI_Allreduce(<sp/>MPI_IN_PLACE,<sp/>&amp;values,<sp/>2,<sp/>MPI_DOUBLE,<sp/>MPI_MIN,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[<sp/>0<sp/>]<sp/>==<sp/>-values[<sp/>1<sp/>]<sp/>and<sp/>values[<sp/>1<sp/>]<sp/>!=<sp/>-std::numeric_limits&lt;<sp/>double<sp/>&gt;::infinity();</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">nest::MPIManager::communicate_Allgather(<sp/>std::vector&lt;<sp/>long<sp/>&gt;&amp;<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>aliasing,<sp/>see<sp/>http://www.mpi-forum.org/docs/mpi-11-html/node10.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>my_val<sp/>=<sp/>buffer[<sp/>get_rank()<sp/>];</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>MPI_Allgather(<sp/>&amp;my_val,<sp/>1,<sp/>MPI_LONG,<sp/>&amp;buffer[<sp/>0<sp/>],<sp/>1,<sp/>MPI_LONG,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">nest::MPIManager::communicate_Alltoall_(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>send_buffer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>recv_buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_recv_count<sp/>)</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>MPI_Alltoall(<sp/>send_buffer,<sp/>send_recv_count,<sp/>MPI_UNSIGNED,<sp/>recv_buffer,<sp/>send_recv_count,<sp/>MPI_UNSIGNED,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">nest::MPIManager::communicate_Alltoallv_(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>send_buffer,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>send_counts,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>send_displacements,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>recv_counts,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>recv_displacements<sp/>)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>MPI_Alltoallv(<sp/>send_buffer,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>send_counts,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>send_displacements,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_counts,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_displacements,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a664afc6040a9de3474310aab062a906a" kindref="member">nest::MPIManager::communicate_recv_counts_secondary_events</ref>()</highlight></codeline>
<codeline lineno="778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>communicate_Alltoall(</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_counts_secondary_events_in_int_per_rank_,<sp/>send_counts_secondary_events_in_int_per_rank_,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>std::partial_sum(<sp/>send_counts_secondary_events_in_int_per_rank_.begin(),</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>send_counts_secondary_events_in_int_per_rank_.end()<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>send_displacements_secondary_events_in_int_per_rank_.begin()<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a79d9980ccd091cc70c2992de2f13a9c3" kindref="member">nest::MPIManager::synchronize</ref>()</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>MPI_Barrier(<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any_true:<sp/>takes<sp/>a<sp/>single<sp/>bool,<sp/>exchanges<sp/>with<sp/>all<sp/>other<sp/>processes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>&quot;true&quot;<sp/>if<sp/>one<sp/>or<sp/>more<sp/>processes<sp/>provide<sp/>&quot;true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a3a49dc7c95b5a7e8daadb0480cae3c4c" kindref="member">nest::MPIManager::any_true</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>my_bool<sp/>)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>my_bool;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>my_int<sp/>=<sp/>my_bool;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_int;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>MPI_Allreduce(<sp/>&amp;my_int,<sp/>&amp;global_int,<sp/>1,<sp/>MPI_INT,<sp/>MPI_LOR,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>global_int<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>average<sp/>communication<sp/>time<sp/>for<sp/>a<sp/>packet<sp/>size<sp/>of<sp/>num_bytes<sp/>using<sp/>Allgather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1ac59befbcc83f0a423c942371f8bea65f" kindref="member">nest::MPIManager::time_communicate</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples<sp/>)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_length<sp/>=<sp/>num_bytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>packet_length<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>packet_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_send_buffer(<sp/>packet_length<sp/>);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_recv_buffer(<sp/>packet_length<sp/>*<sp/>get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>Stopwatch<sp/>foo;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>foo.start();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;test_send_buffer[<sp/>0<sp/>],<sp/>packet_length,<sp/>MPI_UNSIGNED,<sp/>&amp;test_recv_buffer[<sp/>0<sp/>],<sp/>packet_length,<sp/>MPI_UNSIGNED,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>foo.stop();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo.elapsed()<sp/>/<sp/>samples;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>average<sp/>communication<sp/>time<sp/>for<sp/>a<sp/>packet<sp/>size<sp/>of<sp/>num_bytes<sp/>using<sp/>Allgatherv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a35577b8a35a607547962f228d49ccbf4" kindref="member">nest::MPIManager::time_communicatev</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples<sp/>)</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_length<sp/>=<sp/>num_bytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>packet_length<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>packet_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_send_buffer(<sp/>packet_length<sp/>);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_recv_buffer(<sp/>packet_length<sp/>*<sp/>get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>n_nodes(<sp/>get_num_processes(),<sp/>packet_length<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>displacements(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>get_num_processes();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements.at(<sp/>i<sp/>)<sp/>=<sp/>displacements.at(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>+<sp/>n_nodes.at(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>Stopwatch<sp/>foo;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>foo.start();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>communicate_Allgatherv(<sp/>test_send_buffer,<sp/>test_recv_buffer,<sp/>displacements,<sp/>n_nodes<sp/>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>foo.stop();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo.elapsed()<sp/>/<sp/>samples;</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>average<sp/>communication<sp/>time<sp/>for<sp/>a<sp/>packet<sp/>size<sp/>of<sp/>num_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a040b1b11834b2cd4fa67aadb08d4ab2a" kindref="member">nest::MPIManager::time_communicate_offgrid</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples<sp/>)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_length<sp/>=<sp/>num_bytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="namespacenest_1a05d262f7afd9018d9a067d3431035dd9" kindref="member">OffGridSpike</ref><sp/>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>packet_length<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>packet_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;<sp/>test_send_buffer(<sp/>packet_length<sp/>);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;<sp/>test_recv_buffer(<sp/>packet_length<sp/>*<sp/>get_num_processes()<sp/>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>Stopwatch<sp/>foo;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>foo.start();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Allgather(<sp/>&amp;test_send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet_length,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;test_recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet_length,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_OFFGRID_SPIKE,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>foo.stop();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo.elapsed()<sp/>/<sp/>samples;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>average<sp/>communication<sp/>time<sp/>for<sp/>a<sp/>packet<sp/>size<sp/>of<sp/>num_bytes<sp/>using<sp/>Alltoall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1ab1a3608671ee3fd5a2088e7078ecfced" kindref="member">nest::MPIManager::time_communicate_alltoall</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples<sp/>)</highlight></codeline>
<codeline lineno="915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_length<sp/>=<sp/>num_bytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>size<sp/>should<sp/>be<sp/>sent<sp/>to<sp/>each<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_packet_length<sp/>=<sp/>packet_length<sp/>*<sp/>get_num_processes();<sp/></highlight><highlight class="comment">//<sp/>total<sp/>size<sp/>of<sp/>send<sp/>and<sp/>receive<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>total_packet_length<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>total_packet_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_send_buffer(<sp/>total_packet_length<sp/>);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_recv_buffer(<sp/>total_packet_length<sp/>);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>Stopwatch<sp/>foo;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>foo.start();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Alltoall(</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;test_send_buffer[<sp/>0<sp/>],<sp/>packet_length,<sp/>MPI_UNSIGNED,<sp/>&amp;test_recv_buffer[<sp/>0<sp/>],<sp/>packet_length,<sp/>MPI_UNSIGNED,<sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>foo.stop();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo.elapsed()<sp/>/<sp/>samples;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>average<sp/>communication<sp/>time<sp/>for<sp/>a<sp/>packet<sp/>size<sp/>of<sp/>num_bytes<sp/>using<sp/>Alltoallv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1aacfd5441fbe9e7f9bbb48534a20cd2c0" kindref="member">nest::MPIManager::time_communicate_alltoallv</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples<sp/>)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_num_processes()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_length<sp/>=<sp/>num_bytes<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>size<sp/>should<sp/>be<sp/>sent<sp/>to<sp/>each<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_packet_length<sp/>=<sp/>packet_length<sp/>*<sp/>get_num_processes();<sp/></highlight><highlight class="comment">//<sp/>total<sp/>size<sp/>of<sp/>send<sp/>and<sp/>receive<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>total_packet_length<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>total_packet_length<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_send_buffer(<sp/>total_packet_length<sp/>);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;<sp/>test_recv_buffer(<sp/>total_packet_length<sp/>);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>n_nodes(<sp/>get_num_processes(),<sp/>packet_length<sp/>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;<sp/>displacements(<sp/>get_num_processes(),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>get_num_processes();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>displacements.at(<sp/>i<sp/>)<sp/>=<sp/>displacements.at(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>+<sp/>n_nodes.at(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>Stopwatch<sp/>foo;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>foo.start();</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Alltoallv(<sp/>&amp;test_send_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n_nodes[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;test_recv_buffer[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n_nodes[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[<sp/>0<sp/>],</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>time<sp/>measurement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>foo.stop();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo.elapsed()<sp/>/<sp/>samples;</highlight></codeline>
<codeline lineno="983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="classnest_1_1MPIManager_1a3d071cc58ba12b005c083bf5a5e21d52" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_buffer_size_<sp/>)<sp/>&lt;<sp/>send_buffer.size()<sp/>)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>recv_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009" refid="classnest_1_1MPIManager_1a764b50e04fa606ebfc13b444d13193e1" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>OffGridSpike<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>recv_buffer_size_<sp/>)<sp/>&lt;<sp/>send_buffer.size()<sp/>)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer_size_<sp/>=<sp/>send_buffer_size_<sp/>=<sp/>send_buffer.size();</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>recv_buffer.resize(<sp/>recv_buffer_size_<sp/>);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024" refid="classnest_1_1MPIManager_1a39c902ba1913c492bf90a1da1fa1bebc" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034" refid="classnest_1_1MPIManager_1a28da093a648885b5f7636d0bd44ecb60" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>unsigned<sp/>long<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>long<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="classnest_1_1MPIManager_1aecb6fc37dcd91414e5ebea0cbde79ecc" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>send_buffer,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>displacements<sp/>)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>displacements.resize(<sp/>num_processes_,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>displacements[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054" refid="classnest_1_1MPIManager_1a9177a2672104bd517a0be8613e52d803" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>send_val,<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>recv_buffer<sp/>)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>recv_buffer.resize(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>recv_buffer[<sp/>0<sp/>]<sp/>=<sp/>send_val;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061" refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" kindref="member">nest::MPIManager::communicate</ref>(<sp/>std::vector&lt;<sp/>long<sp/>&gt;&amp;,<sp/>std::vector&lt;<sp/>long<sp/>&gt;&amp;<sp/>)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066" refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" kindref="member">nest::MPIManager::communicate_Allreduce_sum_in_place</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071" refid="classnest_1_1MPIManager_1add6ba165a09ff9a1cad316993f6c1bfd" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" kindref="member">nest::MPIManager::communicate_Allreduce_sum_in_place</ref>(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076" refid="classnest_1_1MPIManager_1a439afdf0a9307bba8f3d2332a5b7bdcf" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a086a7a137050c61329df3c7e74f4e21d" kindref="member">nest::MPIManager::communicate_Allreduce_sum_in_place</ref>(<sp/>std::vector&lt;<sp/>int<sp/>&gt;&amp;<sp/>)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081" refid="classnest_1_1MPIManager_1a72072f9f17d9782a712920ebe70c9c7d" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a72072f9f17d9782a712920ebe70c9c7d" kindref="member">nest::MPIManager::communicate_Allreduce_sum</ref>(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>send_buffer,<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>recv_buffer<sp/>)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>recv_buffer.swap(<sp/>send_buffer<sp/>);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087" refid="classnest_1_1MPIManager_1ad3ef1f745a7dea6644faa06cb0bf3389" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1ad3ef1f745a7dea6644faa06cb0bf3389" kindref="member">nest::MPIManager::equal_cross_ranks</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093" refid="classnest_1_1MPIManager_1a664afc6040a9de3474310aab062a906a" refkind="member"><highlight class="normal"><ref refid="classnest_1_1MPIManager_1a664afc6040a9de3474310aab062a906a" kindref="member">nest::MPIManager::communicate_recv_counts_secondary_events</ref>()</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>only<sp/>have<sp/>one<sp/>process,<sp/>the<sp/>send<sp/>count<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>recv<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>send_counts_secondary_events_in_int_per_rank_<sp/>=<sp/>recv_counts_secondary_events_in_int_per_rank_;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>only<sp/>have<sp/>one<sp/>process,<sp/>the<sp/>send<sp/>displacement<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>assert(<sp/>send_displacements_secondary_events_in_int_per_rank_.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>send_displacements_secondary_events_in_int_per_rank_[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>HAVE_MPI<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mpi_manager.cpp"/>
  </compounddef>
</doxygen>
