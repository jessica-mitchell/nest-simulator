<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_time" kind="class" language="C++" prot="public">
    <compoundname>nest::Time</compoundname>
    <includes refid="nest__time_8h" local="no">nest_time.h</includes>
    <innerclass refid="structnest_1_1_time_1_1_limit" prot="protected">nest::Time::Limit</innerclass>
    <innerclass refid="structnest_1_1_time_1_1_limit_neg_inf" prot="protected">nest::Time::LimitNegInf</innerclass>
    <innerclass refid="structnest_1_1_time_1_1_limit_pos_inf" prot="protected">nest::Time::LimitPosInf</innerclass>
    <innerclass refid="structnest_1_1_time_1_1ms" prot="public">nest::Time::ms</innerclass>
    <innerclass refid="structnest_1_1_time_1_1ms__stamp" prot="public">nest::Time::ms_stamp</innerclass>
    <innerclass refid="structnest_1_1_time_1_1_range" prot="protected">nest::Time::Range</innerclass>
    <innerclass refid="structnest_1_1_time_1_1step" prot="public">nest::Time::step</innerclass>
    <innerclass refid="structnest_1_1_time_1_1tic" prot="public">nest::Time::tic</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1_time_1a3f01bfd6ce987db2ced3439935d1777b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class TimeConverter</definition>
        <argsstring></argsstring>
        <name>TimeConverter</name>
        <param>
          <type><ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="147" column="3" bodyfile="nestkernel/nest_time.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a6d8d183308b48509a8b2ce27361cffed" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct step</definition>
        <argsstring></argsstring>
        <name>step</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1step" kindref="compound">step</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="185" column="3" bodyfile="nestkernel/nest_time.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a660dbc308a1cac2d1e7f1e488982a60e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct tic</definition>
        <argsstring></argsstring>
        <name>tic</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1tic" kindref="compound">tic</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="186" column="3" bodyfile="nestkernel/nest_time.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1afca952770bb510a78a30a587e39dcd7f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct ms</definition>
        <argsstring></argsstring>
        <name>ms</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1ms" kindref="compound">ms</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="187" column="3" bodyfile="nestkernel/nest_time.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1ab09a27c7668460aa1e2630aabecd5338" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct ms_stamp</definition>
        <argsstring></argsstring>
        <name>ms_stamp</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1ms__stamp" kindref="compound">ms_stamp</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="188" column="3" bodyfile="nestkernel/nest_time.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a4c6758c6509fd867645604dbf57d4484" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="190" column="15" bodyfile="nestkernel/nest_time.h" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1afa9563943abfa7738c37d869979d469d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="191" column="15" bodyfile="nestkernel/nest_time.h" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1ac30cca6ff0c3f29fb2eb77ecc7cc9d89" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="192" column="10" bodyfile="nestkernel/nest_time.h" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a73bdebfe3c6999dec36eea003220b83e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="193" column="15" bodyfile="nestkernel/nest_time.h" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a0ef9e740108aafd9ea4a662f953721b5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="194" column="10" bodyfile="nestkernel/nest_time.h" bodystart="599" bodyend="602"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a1e86856c41cce27530b1d62a90410a70" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="195" column="15" bodyfile="nestkernel/nest_time.h" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1ae2e555aa5b5c51e44b576d8baf48a2cd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time operator+</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="196" column="15" bodyfile="nestkernel/nest_time.h" bodystart="611" bodyend="614"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a09225563b0b317910b26c550ba74de64" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time operator-</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="197" column="15" bodyfile="nestkernel/nest_time.h" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1ae16b5a3b29d5b81739d54c38e7ec2254" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time operator*</definition>
        <argsstring>(const long factor, const Time &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const long</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="198" column="15" bodyfile="nestkernel/nest_time.h" bodystart="623" bodyend="639"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a3b52ac3c54fa16b9f9df81923b03842e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time operator*</definition>
        <argsstring>(const Time &amp;t, long factor)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="199" column="15" bodyfile="nestkernel/nest_time.h" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1_time_1a98ce69bb5e217af21beea192d75a5caf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;)</definition>
        <argsstring>(std::ostream &amp;, const Time &amp;)</argsstring>
        <name>operator&lt;&lt;)</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="200" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_time_1a79baa10eed4a7d111791b141bba3bc5f" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>tic_t nest::Time::tics</definition>
        <argsstring></argsstring>
        <name>tics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="179" column="9" bodyfile="nestkernel/nest_time.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classnest_1_1_time_1a9a8edf52ba4542af32f9ca19c0b3ebb5" prot="protected" static="yes" mutable="no">
        <type><ref refid="structnest_1_1_time_1_1_limit" kindref="compound">Limit</ref></type>
        <definition>Time::Limit Time::LIM_MAX</definition>
        <argsstring></argsstring>
        <name>LIM_MAX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="221" column="16" bodyfile="nestkernel/nest_time.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_time_1af0d3d20707c0a7539c1c88b3804da6c9" prot="protected" static="yes" mutable="no">
        <type><ref refid="structnest_1_1_time_1_1_limit" kindref="compound">Limit</ref></type>
        <definition>Time::Limit Time::LIM_MIN</definition>
        <argsstring></argsstring>
        <name>LIM_MIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="222" column="16" bodyfile="nestkernel/nest_time.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_time_1ae281b1252af8193d8a3aaa0ceda622e4" prot="protected" static="yes" mutable="no">
        <type>struct nest::Time::LimitPosInf</type>
        <definition>struct nest::Time::LimitPosInf nest::Time::LIM_POS_INF</definition>
        <argsstring></argsstring>
        <name>LIM_POS_INF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="232" column="15"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_time_1a6dc8144c4200de0c3763864f26e3878c" prot="protected" static="yes" mutable="no">
        <type>struct nest::Time::LimitNegInf</type>
        <definition>struct nest::Time::LimitNegInf nest::Time::LIM_NEG_INF</definition>
        <argsstring></argsstring>
        <name>LIM_NEG_INF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="239" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnest_1_1_time_1a726b3356786e80e8d16f4287f0770328" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>tic_t Time::compute_max</definition>
        <argsstring>()</argsstring>
        <name>compute_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="172" column="16" bodyfile="nestkernel/nest_time.cpp" bodystart="75" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1ab770bd16c70d2b04bea521a9d6118862" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>tic_t Time::fromstamp</definition>
        <argsstring>(ms_stamp)</argsstring>
        <name>fromstamp</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1ms__stamp" kindref="compound">ms_stamp</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="325" column="16" bodyfile="nestkernel/nest_time.cpp" bodystart="162" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a88a842c2c20510cfb5155abe250c7e43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Time::set_resolution</definition>
        <argsstring>(double tics_per_ms)</argsstring>
        <name>set_resolution</name>
        <param>
          <type>double</type>
          <declname>tics_per_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="335" column="15" bodyfile="nestkernel/nest_time.cpp" bodystart="105" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a0e757794c197e658bce5a3f886e4b3ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Time::set_resolution</definition>
        <argsstring>(double tics_per_ms, double ms_per_step)</argsstring>
        <name>set_resolution</name>
        <param>
          <type>double</type>
          <declname>tics_per_ms</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ms_per_step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="336" column="15" bodyfile="nestkernel/nest_time.cpp" bodystart="123" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a7c99d03e93b082552437e836c5b8ac34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Time::reset_resolution</definition>
        <argsstring>()</argsstring>
        <name>reset_resolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="337" column="15" bodyfile="nestkernel/nest_time.cpp" bodystart="131" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a6ae59bc0875851d47b36c82cfdceec85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Time::reset_to_defaults</definition>
        <argsstring>()</argsstring>
        <name>reset_to_defaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="338" column="15" bodyfile="nestkernel/nest_time.cpp" bodystart="186" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a6f14dc87dbd694a028020f00a5a92d7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>static Time nest::Time::get_resolution</definition>
        <argsstring>()</argsstring>
        <name>get_resolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="341" column="3" bodyfile="nestkernel/nest_time.h" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a6869b5b61a80cd24fb5340ee0484c750" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool nest::Time::resolution_is_default</definition>
        <argsstring>()</argsstring>
        <name>resolution_is_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="347" column="3" bodyfile="nestkernel/nest_time.h" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1ae9dee1ca672a6379a3864633c5da2ce9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>static Time nest::Time::max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="434" column="3" bodyfile="nestkernel/nest_time.h" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1aaaff952b882c00a4780f337f2742f3ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>static Time nest::Time::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="439" column="3" bodyfile="nestkernel/nest_time.h" bodystart="439" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1af3938e02f5caf1781b3f2ddae0aadd6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double nest::Time::get_ms_per_tic</definition>
        <argsstring>()</argsstring>
        <name>get_ms_per_tic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="444" column="3" bodyfile="nestkernel/nest_time.h" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1aced9f70610dd53cd35d58a2927d3f21b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>static Time nest::Time::neg_inf</definition>
        <argsstring>()</argsstring>
        <name>neg_inf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="449" column="3" bodyfile="nestkernel/nest_time.h" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1acb1c377c4d654c34797f9fef4c02250a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>static Time nest::Time::pos_inf</definition>
        <argsstring>()</argsstring>
        <name>pos_inf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="454" column="3" bodyfile="nestkernel/nest_time.h" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1ad66e429cdd2e6a1c234756936d225817" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>static tic_t nest::Time::get_tics_per_step</definition>
        <argsstring>()</argsstring>
        <name>get_tics_per_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="501" column="3" bodyfile="nestkernel/nest_time.h" bodystart="501" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a4151d087f2f2cee5b4992780a247db26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double nest::Time::get_tics_per_ms</definition>
        <argsstring>()</argsstring>
        <name>get_tics_per_ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="506" column="3" bodyfile="nestkernel/nest_time.h" bodystart="506" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a24d25307fd9f343ac6ae01ff0f17f0fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double nest::Time::delay_steps_to_ms</definition>
        <argsstring>(delay steps)</argsstring>
        <name>delay_steps_to_ms</name>
        <param>
          <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert between delays given in steps and milliseconds. This is not a reversible operation, since steps have a finite rounding resolution. This is not a truncation, but rounding as per ld_round, which is different from <ref refid="structnest_1_1_time_1_1ms__stamp" kindref="compound">ms_stamp</ref> --&gt; <ref refid="classnest_1_1_time" kindref="compound">Time</ref> mapping, which rounds up. See #903. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="550" column="3" bodyfile="nestkernel/nest_time.h" bodystart="550" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a817fe09798a12167761ce5711af5ce48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>static delay nest::Time::delay_ms_to_steps</definition>
        <argsstring>(double ms)</argsstring>
        <name>delay_ms_to_steps</name>
        <param>
          <type>double</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="556" column="3" bodyfile="nestkernel/nest_time.h" bodystart="556" bodyend="559"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1_time_1ad53913a3066f6ac86a21ea56b7f5c6a3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnest_1_1_time_1_1_limit" kindref="compound">Time::Limit</ref></type>
        <definition>Time::Limit nest::Time::limit</definition>
        <argsstring>(const tic_t &amp;)</argsstring>
        <name>limit</name>
        <param>
          <type>const <ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="223" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1ab667f00e9823b520ea01ffb4a094b1cf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Time::Time</definition>
        <argsstring>(tic_t tics)</argsstring>
        <name>Time</name>
        <param>
          <type><ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
          <declname>tics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="289" column="3" bodyfile="nestkernel/nest_time.h" bodystart="289" bodyend="292"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_time_1a4a9291fa58c3041f6a0ba578229869bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Time::Time</definition>
        <argsstring>()</argsstring>
        <name>Time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="297" column="3" bodyfile="nestkernel/nest_time.h" bodystart="297" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a66ed99eb47bf994d4b050d986c29c795" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Time::Time</definition>
        <argsstring>(tic t)</argsstring>
        <name>Time</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1tic" kindref="compound">tic</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="304" column="3" bodyfile="nestkernel/nest_time.h" bodystart="304" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a1987c65e39b3f9d3f859dac144da7e6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Time::Time</definition>
        <argsstring>(step t)</argsstring>
        <name>Time</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1step" kindref="compound">step</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="311" column="3" bodyfile="nestkernel/nest_time.h" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a6e9b2247df42954f0e949fc6cddbbed7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Time::Time</definition>
        <argsstring>(ms t)</argsstring>
        <name>Time</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1ms" kindref="compound">ms</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="318" column="3" bodyfile="nestkernel/nest_time.h" bodystart="318" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a9efd65550bb214ed92d8865ebb1b2a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Time::Time</definition>
        <argsstring>(ms_stamp t)</argsstring>
        <name>Time</name>
        <param>
          <type><ref refid="structnest_1_1_time_1_1ms__stamp" kindref="compound">ms_stamp</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="326" column="3" bodyfile="nestkernel/nest_time.h" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a18bc760f3802703c429243bd2685e249" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Time::set_to_zero</definition>
        <argsstring>()</argsstring>
        <name>set_to_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="357" column="3" bodyfile="nestkernel/nest_time.h" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1afb41f7272f6ff6e2fe741b76923c60b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Time::advance</definition>
        <argsstring>()</argsstring>
        <name>advance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="363" column="3" bodyfile="nestkernel/nest_time.h" bodystart="363" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a84cb0fa92ef5626f55797ef4bfac1823" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time nest::Time::succ</definition>
        <argsstring>() const</argsstring>
        <name>succ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="370" column="3" bodyfile="nestkernel/nest_time.h" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1acde7815a94fe37fcd6b02ad9c68f1c41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time nest::Time::pred</definition>
        <argsstring>() const</argsstring>
        <name>pred</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="375" column="3" bodyfile="nestkernel/nest_time.h" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a544e7b940882df61da1e7fcb94b660cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Time::is_finite</definition>
        <argsstring>() const</argsstring>
        <name>is_finite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="385" column="3" bodyfile="nestkernel/nest_time.h" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a69b31ea6f514162e960c3b5974e1826b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Time::is_neg_inf</definition>
        <argsstring>() const</argsstring>
        <name>is_neg_inf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="391" column="3" bodyfile="nestkernel/nest_time.h" bodystart="391" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a6093f9c1e896be47cf0976613a3d47db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Time::is_pos_inf</definition>
        <argsstring>() const</argsstring>
        <name>is_pos_inf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="406" column="3" bodyfile="nestkernel/nest_time.h" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1af4bee0999582f2d3ae868a671e9a1bf5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Time::is_grid_time</definition>
        <argsstring>() const</argsstring>
        <name>is_grid_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="412" column="3" bodyfile="nestkernel/nest_time.h" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a0958f0fc468dcf516fecd12050937821" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Time::is_step</definition>
        <argsstring>() const</argsstring>
        <name>is_step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="417" column="3" bodyfile="nestkernel/nest_time.h" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1ae5c8c4f753afff4affd54316f0b0d721" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Time::is_multiple_of</definition>
        <argsstring>(const Time &amp;divisor) const</argsstring>
        <name>is_multiple_of</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="423" column="3" bodyfile="nestkernel/nest_time.h" bodystart="423" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1adf6042589aa2cfebb7023c05738338dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Time::range</definition>
        <argsstring>()</argsstring>
        <name>range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="464" column="3" bodyfile="nestkernel/nest_time.h" bodystart="464" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1a35949d760fe0e0fe43f32a8db86a458f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Time::calibrate</definition>
        <argsstring>()</argsstring>
        <name>calibrate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="474" column="3" bodyfile="nestkernel/nest_time.h" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1aec1b71cfccf20a37df4a0a3a890e296a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
        <definition>Time&amp; nest::Time::operator+=</definition>
        <argsstring>(const Time &amp;t)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="484" column="3" bodyfile="nestkernel/nest_time.h" bodystart="484" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1aa6d82d03d2328ecabd07ac9288b7d2f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>tic_t nest::Time::get_tics</definition>
        <argsstring>() const</argsstring>
        <name>get_tics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="496" column="3" bodyfile="nestkernel/nest_time.h" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1aff831a8475d8060353c4cae73cc5748c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::Time::get_ms</definition>
        <argsstring>() const</argsstring>
        <name>get_ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="512" column="3" bodyfile="nestkernel/nest_time.h" bodystart="512" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_time_1afedb0e4fbf5d521e50573f2180016568" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::Time::get_steps</definition>
        <argsstring>() const</argsstring>
        <name>get_steps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/nest_time.h" line="526" column="3" bodyfile="nestkernel/nest_time.h" bodystart="526" bodyend="540"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>nest::Time::LimitPosInf</label>
      </node>
      <node id="2">
        <label>nest::Time::LimitNegInf</label>
      </node>
      <node id="1">
        <label>nest::Time</label>
        <link refid="classnest_1_1_time"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#LIM_NEG_INF</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>#LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>#LIM_MAX</edgelabel>
          <edgelabel>#LIM_MIN</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1_time_1_1_limit"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/nest_time.h" line="141" column="1" bodyfile="nestkernel/nest_time.h" bodystart="142" bodyend="560"/>
    <listofallmembers>
      <member refid="classnest_1_1_time_1afb41f7272f6ff6e2fe741b76923c60b3" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>advance</name></member>
      <member refid="classnest_1_1_time_1a35949d760fe0e0fe43f32a8db86a458f" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>calibrate</name></member>
      <member refid="classnest_1_1_time_1a726b3356786e80e8d16f4287f0770328" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>compute_max</name></member>
      <member refid="classnest_1_1_time_1a817fe09798a12167761ce5711af5ce48" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>delay_ms_to_steps</name></member>
      <member refid="classnest_1_1_time_1a24d25307fd9f343ac6ae01ff0f17f0fe" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>delay_steps_to_ms</name></member>
      <member refid="classnest_1_1_time_1ab770bd16c70d2b04bea521a9d6118862" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>fromstamp</name></member>
      <member refid="classnest_1_1_time_1aff831a8475d8060353c4cae73cc5748c" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_ms</name></member>
      <member refid="classnest_1_1_time_1af3938e02f5caf1781b3f2ddae0aadd6d" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_ms_per_tic</name></member>
      <member refid="classnest_1_1_time_1a6f14dc87dbd694a028020f00a5a92d7c" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_resolution</name></member>
      <member refid="classnest_1_1_time_1afedb0e4fbf5d521e50573f2180016568" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_steps</name></member>
      <member refid="classnest_1_1_time_1aa6d82d03d2328ecabd07ac9288b7d2f4" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_tics</name></member>
      <member refid="classnest_1_1_time_1a4151d087f2f2cee5b4992780a247db26" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_tics_per_ms</name></member>
      <member refid="classnest_1_1_time_1ad66e429cdd2e6a1c234756936d225817" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>get_tics_per_step</name></member>
      <member refid="classnest_1_1_time_1a544e7b940882df61da1e7fcb94b660cd" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>is_finite</name></member>
      <member refid="classnest_1_1_time_1af4bee0999582f2d3ae868a671e9a1bf5" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>is_grid_time</name></member>
      <member refid="classnest_1_1_time_1ae5c8c4f753afff4affd54316f0b0d721" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>is_multiple_of</name></member>
      <member refid="classnest_1_1_time_1a69b31ea6f514162e960c3b5974e1826b" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>is_neg_inf</name></member>
      <member refid="classnest_1_1_time_1a6093f9c1e896be47cf0976613a3d47db" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>is_pos_inf</name></member>
      <member refid="classnest_1_1_time_1a0958f0fc468dcf516fecd12050937821" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>is_step</name></member>
      <member refid="classnest_1_1_time_1a9a8edf52ba4542af32f9ca19c0b3ebb5" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>LIM_MAX</name></member>
      <member refid="classnest_1_1_time_1af0d3d20707c0a7539c1c88b3804da6c9" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>LIM_MIN</name></member>
      <member refid="classnest_1_1_time_1a6dc8144c4200de0c3763864f26e3878c" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>LIM_NEG_INF</name></member>
      <member refid="classnest_1_1_time_1ae281b1252af8193d8a3aaa0ceda622e4" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>LIM_POS_INF</name></member>
      <member refid="classnest_1_1_time_1ad53913a3066f6ac86a21ea56b7f5c6a3" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>limit</name></member>
      <member refid="classnest_1_1_time_1ae9dee1ca672a6379a3864633c5da2ce9" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>max</name></member>
      <member refid="classnest_1_1_time_1aaaff952b882c00a4780f337f2742f3ea" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>min</name></member>
      <member refid="classnest_1_1_time_1afca952770bb510a78a30a587e39dcd7f" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>ms</name></member>
      <member refid="classnest_1_1_time_1ab09a27c7668460aa1e2630aabecd5338" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>ms_stamp</name></member>
      <member refid="classnest_1_1_time_1aced9f70610dd53cd35d58a2927d3f21b" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>neg_inf</name></member>
      <member refid="classnest_1_1_time_1afa9563943abfa7738c37d869979d469d" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator!=</name></member>
      <member refid="classnest_1_1_time_1ae16b5a3b29d5b81739d54c38e7ec2254" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator*</name></member>
      <member refid="classnest_1_1_time_1a3b52ac3c54fa16b9f9df81923b03842e" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator*</name></member>
      <member refid="classnest_1_1_time_1ae2e555aa5b5c51e44b576d8baf48a2cd" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator+</name></member>
      <member refid="classnest_1_1_time_1aec1b71cfccf20a37df4a0a3a890e296a" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>operator+=</name></member>
      <member refid="classnest_1_1_time_1a09225563b0b317910b26c550ba74de64" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator-</name></member>
      <member refid="classnest_1_1_time_1ac30cca6ff0c3f29fb2eb77ecc7cc9d89" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator&lt;</name></member>
      <member refid="classnest_1_1_time_1a98ce69bb5e217af21beea192d75a5caf" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator&lt;&lt;)</name></member>
      <member refid="classnest_1_1_time_1a0ef9e740108aafd9ea4a662f953721b5" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator&lt;=</name></member>
      <member refid="classnest_1_1_time_1a4c6758c6509fd867645604dbf57d4484" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator==</name></member>
      <member refid="classnest_1_1_time_1a73bdebfe3c6999dec36eea003220b83e" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator&gt;</name></member>
      <member refid="classnest_1_1_time_1a1e86856c41cce27530b1d62a90410a70" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>operator&gt;=</name></member>
      <member refid="classnest_1_1_time_1acb1c377c4d654c34797f9fef4c02250a" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>pos_inf</name></member>
      <member refid="classnest_1_1_time_1acde7815a94fe37fcd6b02ad9c68f1c41" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>pred</name></member>
      <member refid="classnest_1_1_time_1adf6042589aa2cfebb7023c05738338dc" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>range</name></member>
      <member refid="classnest_1_1_time_1a7c99d03e93b082552437e836c5b8ac34" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>reset_resolution</name></member>
      <member refid="classnest_1_1_time_1a6ae59bc0875851d47b36c82cfdceec85" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>reset_to_defaults</name></member>
      <member refid="classnest_1_1_time_1a6869b5b61a80cd24fb5340ee0484c750" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>resolution_is_default</name></member>
      <member refid="classnest_1_1_time_1a88a842c2c20510cfb5155abe250c7e43" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>set_resolution</name></member>
      <member refid="classnest_1_1_time_1a0e757794c197e658bce5a3f886e4b3ed" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>set_resolution</name></member>
      <member refid="classnest_1_1_time_1a18bc760f3802703c429243bd2685e249" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>set_to_zero</name></member>
      <member refid="classnest_1_1_time_1a6d8d183308b48509a8b2ce27361cffed" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>step</name></member>
      <member refid="classnest_1_1_time_1a84cb0fa92ef5626f55797ef4bfac1823" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>succ</name></member>
      <member refid="classnest_1_1_time_1a660dbc308a1cac2d1e7f1e488982a60e" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>tic</name></member>
      <member refid="classnest_1_1_time_1a79baa10eed4a7d111791b141bba3bc5f" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>tics</name></member>
      <member refid="classnest_1_1_time_1ab667f00e9823b520ea01ffb4a094b1cf" prot="protected" virt="non-virtual"><scope>nest::Time</scope><name>Time</name></member>
      <member refid="classnest_1_1_time_1a4a9291fa58c3041f6a0ba578229869bc" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>Time</name></member>
      <member refid="classnest_1_1_time_1a66ed99eb47bf994d4b050d986c29c795" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>Time</name></member>
      <member refid="classnest_1_1_time_1a1987c65e39b3f9d3f859dac144da7e6b" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>Time</name></member>
      <member refid="classnest_1_1_time_1a6e9b2247df42954f0e949fc6cddbbed7" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>Time</name></member>
      <member refid="classnest_1_1_time_1a9efd65550bb214ed92d8865ebb1b2a39" prot="public" virt="non-virtual"><scope>nest::Time</scope><name>Time</name></member>
      <member refid="classnest_1_1_time_1a3f01bfd6ce987db2ced3439935d1777b" prot="private" virt="non-virtual"><scope>nest::Time</scope><name>TimeConverter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
