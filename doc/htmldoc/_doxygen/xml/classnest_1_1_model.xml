<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_model" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::Model</compoundname>
    <derivedcompoundref refid="classnest_1_1_generic_model" prot="public" virt="non-virtual">nest::GenericModel&lt; ElementT &gt;</derivedcompoundref>
    <includes refid="model_8h" local="no">model.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_model_1a9cb77c1e9e4ebe42eed089b96e175e24" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string nest::Model::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of the <ref refid="classnest_1_1_model" kindref="compound">Model</ref>. This name will be used to identify all Nodes which are created by this model object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="227" column="15" bodyfile="nestkernel/model.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_1afaedf8964aa194b484193cf8f06e2c5b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Model::type_id_</definition>
        <argsstring></argsstring>
        <name>type_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identifier of the model C++ type. For pristine models, the type_id equals the model_id. For copied models, the type_id equals the type_id of the base model. This number is needed to automatically save and restore copied models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="235" column="9" bodyfile="nestkernel/model.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_1a559c0e798d784a05c1c9efabc854471e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_node" kindref="compound">Node</ref> * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Node* &gt; &gt; nest::Model::memory_</definition>
        <argsstring></argsstring>
        <name>memory_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory for all nodes sorted by threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="240" column="15" bodyfile="nestkernel/model.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_model_1a2bd42999577fcb19a8b95e77674adc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Model::Model</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Model</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="59" column="3" bodyfile="nestkernel/model.cpp" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a46d3535a83b3c65b79ed0a0163de0c44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Model::Model</definition>
        <argsstring>(const Model &amp;m)</argsstring>
        <name>Model</name>
        <param>
          <type>const <ref refid="classnest_1_1_model" kindref="compound">Model</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="60" column="3" bodyfile="nestkernel/model.h" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1ab7aa38460a7562dc208a3487c8a682ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual nest::Model::~Model</definition>
        <argsstring>()</argsstring>
        <name>~Model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="67" column="11" bodyfile="nestkernel/model.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1ad3324ba8bb5565fde8110265d5ea161c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> *</type>
        <definition>virtual Model* nest::Model::clone</definition>
        <argsstring>(const std::string &amp;) const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classnest_1_1_generic_model_1aab0a0d0c8550321afe166f52ffadc141">clone</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create clone with new name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="74" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a3680de567f35d5c8f902f9a1b8278230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Model::set_threads</definition>
        <argsstring>()</argsstring>
        <name>set_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set number of threads based on number set in network. As long as no nodes of the model have been allocated, the number of threads may be changed. <simplesect kind="note"><para>Requires that network pointer in <ref refid="classnest_1_1_nest_module" kindref="compound">NestModule</ref> is initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="82" column="8" bodyfile="nestkernel/model.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1ac7ab9fb3c18ee5691918ea14672e6e33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::Model::create</definition>
        <argsstring>(thread t)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate new <ref refid="classnest_1_1_node" kindref="compound">Node</ref> and return its pointer. <ref refid="classnest_1_1_model_1ac7ab9fb3c18ee5691918ea14672e6e33" kindref="member">create()</ref> is not const, because it is allowed to modify the <ref refid="classnest_1_1_model" kindref="compound">Model</ref> object for &apos;administrative&apos; purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="90" column="8" bodyfile="nestkernel/model.h" bodystart="245" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1afdd10a4ae2d559c66a393c677a588b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Model::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes all nodes which belong to this model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="96" column="8" bodyfile="nestkernel/model.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a58d8e50642c26bd89664fa0e3887e8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Model::reserve_additional</definition>
        <argsstring>(thread t, size_t n)</argsstring>
        <name>reserve_additional</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reserve space for n additional Nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="101" column="8" bodyfile="nestkernel/model.cpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a44497c5d485772c2c527fbc2cac1bfdd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nest::Model::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return name of the <ref refid="classnest_1_1_model" kindref="compound">Model</ref>. This function returns the name of the <ref refid="classnest_1_1_model" kindref="compound">Model</ref> as C++ string. The name is defined by the constructor. The result is identical to the value of <ref refid="classnest_1_1_node_1a86602cc948413d6fbe10fe4fefaca0ef" kindref="member">Node::get_name()</ref>; <simplesect kind="see"><para><ref refid="classnest_1_1_model_1a2bd42999577fcb19a8b95e77674adc83" kindref="member">Model::Model()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_node_1a86602cc948413d6fbe10fe4fefaca0ef" kindref="member">Node::get_name()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="111" column="15" bodyfile="nestkernel/model.h" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a01aab6710f6f01f16dadb18955cb9d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::Model::mem_available</definition>
        <argsstring>()</argsstring>
        <name>mem_available</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the available memory. The result is given in number of elements, not in bytes. Note that this function reports a sum over all threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="118" column="10" bodyfile="nestkernel/model.cpp" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1ad669d7322cae68a0ff2c392ec680b505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::Model::mem_capacity</definition>
        <argsstring>()</argsstring>
        <name>mem_capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the memory capacity. The result is given in number of elements, not in bytes. Note that this function reports a sum over all threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="125" column="10" bodyfile="nestkernel/model.cpp" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a543b9f87792c1f7ad6078d855567d93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::Model::has_proxies</definition>
        <argsstring>()=0</argsstring>
        <name>has_proxies</name>
        <reimplementedby refid="classnest_1_1_generic_model_1ae15d5977a8ae64a2ed036c2b51637331">has_proxies</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="127" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a88fc1cc3b8ad741ca379ac1f4d32f3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::Model::one_node_per_process</definition>
        <argsstring>()=0</argsstring>
        <name>one_node_per_process</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a82bd670919d883206eb16245c4ac85e4">one_node_per_process</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="128" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a34418fd095a178c9db82ea080019c9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::Model::is_off_grid</definition>
        <argsstring>()=0</argsstring>
        <name>is_off_grid</name>
        <reimplementedby refid="classnest_1_1_generic_model_1aab14253559f8d35a88fb1a0e840e2657">is_off_grid</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="129" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1abb546e39bdb8588c0aa10bdd3e42f660" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::calibrate_time</definition>
        <argsstring>(const TimeConverter &amp;tc)=0</argsstring>
        <name>calibrate_time</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a1502a82251357e9409365a32af56251e">calibrate_time</reimplementedby>
        <param>
          <type>const <ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref> &amp;</type>
          <declname>tc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="130" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__status__interface_1ga320b94046161025ff8a388eec127392f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Model::set_status</definition>
        <argsstring>(DictionaryDatum)</argsstring>
        <name>set_status</name>
        <param>
          <type>DictionaryDatum</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change properties of the prototype node according to the entries in the dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="138" column="8" bodyfile="nestkernel/model.cpp" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__status__interface_1ga6b9f905cffe67e97a38715757cd31779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::Model::get_status</definition>
        <argsstring>()</argsstring>
        <name>get_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Export properties of the prototype node by setting entries in the status dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="146" column="19" bodyfile="nestkernel/model.cpp" bodystart="121" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a0f41844c1484178aa2cd56564cfb96f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>virtual port nest::Model::send_test_event</definition>
        <argsstring>(Node &amp;, rport, synindex, bool)=0</argsstring>
        <name>send_test_event</name>
        <reimplementedby refid="classnest_1_1_generic_model_1ace81185495d47ccd1d44e1b478ebee10">send_test_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="148" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a6d8c7b66a530f0cdea7e148aed1439f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::sends_secondary_event</definition>
        <argsstring>(GapJunctionEvent &amp;ge)=0</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a69fb2a33d21c2d2224e559b3ebcaed0d">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1_gap_junction_event" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>ge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="150" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1aa33cccc4bb86bba4a4845ec420948e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::sends_secondary_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;re)=0</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1_generic_model_1ab17ddf84e9aefb04601987dafd22874b">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1_instantaneous_rate_connection_event" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="151" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a71e525d40c459e031f4515bb38d01bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::sends_secondary_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;de)=0</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a90d332a82a74142415b4b04f2adbee7f">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1_diffusion_connection_event" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>de</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="152" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a36c758e38b32defcf81042d1ba5731f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::sends_secondary_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;re)=0</argsstring>
        <name>sends_secondary_event</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a9bf95830039b1254bc333413ec0c53f4">sends_secondary_event</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1_delayed_rate_connection_event" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="153" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a63cef74468717e015ee9f34ca4b2edab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>virtual SignalType nest::Model::sends_signal</definition>
        <argsstring>() const =0</argsstring>
        <name>sends_signal</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a2f326a21a02b39e4e8e9cb36a0297ade">sends_signal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check what type of signal this model is sending. Required so that proxynode can formward this call to model that in turn delegates the call to the underlying prototype. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="161" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a3a1c3d3ad388f2c9166bcae18277c8c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t nest::Model::get_element_size</definition>
        <argsstring>() const =0</argsstring>
        <name>get_element_size</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a16ddbcc6dadaa5df1e9d331306130fbc">get_element_size</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the size of the prototype. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="166" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1aa115f9a9660f39a0977f902dc4259e74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> const  &amp;</type>
        <definition>virtual Node const&amp; nest::Model::get_prototype</definition>
        <argsstring>() const =0</argsstring>
        <name>get_prototype</name>
        <reimplementedby refid="classnest_1_1_generic_model_1ad5a5aad367d63fda1698298616c520fe">get_prototype</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return const reference to the prototype. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="171" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a04633c49ed13bf0200288ee48872294d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::set_model_id</definition>
        <argsstring>(int)=0</argsstring>
        <name>set_model_id</name>
        <reimplementedby refid="classnest_1_1_generic_model_1af39f8234d641e6552b4553a7bff0c46c">set_model_id</reimplementedby>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the model id on the prototype. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="176" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a01a6830dc27a5a14e2dc5b570af662e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int nest::Model::get_model_id</definition>
        <argsstring>()=0</argsstring>
        <name>get_model_id</name>
        <reimplementedby refid="classnest_1_1_generic_model_1aa079b1dd50a24b4e8649e446e4618497">get_model_id</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the model id from the prototype. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="181" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1abf3f850cef6673cc3e252252ec14816a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::deprecation_warning</definition>
        <argsstring>(const std::string &amp;)=0</argsstring>
        <name>deprecation_warning</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a908cd2ad47c0d4338f3816cbe76e428f">deprecation_warning</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Issue deprecation warning on first call if model is deprecated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calling</parametername>
</parameternamelist>
<parameterdescription>
<para>function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="188" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a81d304c74b5f213778d397b91a9803dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Model::set_type_id</definition>
        <argsstring>(index id)</argsstring>
        <name>set_type_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the model id on the prototype. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="194" column="3" bodyfile="nestkernel/model.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1aa134e3dfda1ca349cd862099ac06495c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Model::get_type_id</definition>
        <argsstring>() const</argsstring>
        <name>get_type_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="200" column="3" bodyfile="nestkernel/model.h" bodystart="200" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_model_1acfde938ee82413d9e67b3d81d22f8282" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Model::set_status_</definition>
        <argsstring>(DictionaryDatum)=0</argsstring>
        <name>set_status_</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a56df8f829f2c148f52b00e4e0798ced7">set_status_</reimplementedby>
        <param>
          <type>DictionaryDatum</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="206" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1ae73d6149ca61a2e446fcb935d183c68e" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>DictionaryDatum</type>
        <definition>virtual DictionaryDatum nest::Model::get_status_</definition>
        <argsstring>()=0</argsstring>
        <name>get_status_</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a304997bf64c8ca627f7aa17b249d4a71">get_status_</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="208" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a5e51f48ea7d5ec50c32a1ab57ed57080" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Model::set_threads_</definition>
        <argsstring>(thread t)</argsstring>
        <name>set_threads_</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the number of threads. <simplesect kind="see"><para><ref refid="classnest_1_1_model_1a3680de567f35d5c8f902f9a1b8278230" kindref="member">set_threads()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="215" column="8" bodyfile="nestkernel/model.cpp" bodystart="55" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_1a69be0926091d382068e35ad69fe96992" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>virtual Node* nest::Model::create_</definition>
        <argsstring>()=0</argsstring>
        <name>create_</name>
        <reimplementedby refid="classnest_1_1_generic_model_1a7a77a96d0dfe9242466022ff0a08ef53">create_</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model.h" line="220" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for all Models. Each <ref refid="classnest_1_1_node" kindref="compound">Node</ref> class is associated with a corresponding <ref refid="classnest_1_1_model" kindref="compound">Model</ref> class. The <ref refid="classnest_1_1_model" kindref="compound">Model</ref> class is responsible for the creation and class wide parametrisation of its associated <ref refid="classnest_1_1_node" kindref="compound">Node</ref> objects.</para>
<para>class <ref refid="classnest_1_1_model" kindref="compound">Model</ref> manages the thread-sorted memory pool of the model. The default constructor uses one thread as default. Use <ref refid="classnest_1_1_model_1a3680de567f35d5c8f902f9a1b8278230" kindref="member">set_threads()</ref> to use more than one thread.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_node" kindref="compound">Node</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::GenericModel&lt; ElementT &gt;</label>
        <link refid="classnest_1_1_generic_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Model</label>
        <link refid="classnest_1_1_model"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::Model</label>
        <link refid="classnest_1_1_model"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/model.h" line="56" column="1" bodyfile="nestkernel/model.h" bodystart="57" bodyend="241"/>
    <listofallmembers>
      <member refid="classnest_1_1_model_1abb546e39bdb8588c0aa10bdd3e42f660" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1_model_1afdd10a4ae2d559c66a393c677a588b51" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>clear</name></member>
      <member refid="classnest_1_1_model_1ad3324ba8bb5565fde8110265d5ea161c" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>clone</name></member>
      <member refid="classnest_1_1_model_1ac7ab9fb3c18ee5691918ea14672e6e33" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>create</name></member>
      <member refid="classnest_1_1_model_1a69be0926091d382068e35ad69fe96992" prot="private" virt="pure-virtual"><scope>nest::Model</scope><name>create_</name></member>
      <member refid="classnest_1_1_model_1abf3f850cef6673cc3e252252ec14816a" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1_model_1a3a1c3d3ad388f2c9166bcae18277c8c9" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>get_element_size</name></member>
      <member refid="classnest_1_1_model_1a01a6830dc27a5a14e2dc5b570af662e9" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1_model_1a44497c5d485772c2c527fbc2cac1bfdd" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>get_name</name></member>
      <member refid="classnest_1_1_model_1aa115f9a9660f39a0977f902dc4259e74" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>get_prototype</name></member>
      <member refid="group__status__interface_1ga6b9f905cffe67e97a38715757cd31779" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>get_status</name></member>
      <member refid="classnest_1_1_model_1ae73d6149ca61a2e446fcb935d183c68e" prot="private" virt="pure-virtual"><scope>nest::Model</scope><name>get_status_</name></member>
      <member refid="classnest_1_1_model_1aa134e3dfda1ca349cd862099ac06495c" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>get_type_id</name></member>
      <member refid="classnest_1_1_model_1a543b9f87792c1f7ad6078d855567d93a" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1_model_1a34418fd095a178c9db82ea080019c9ac" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1_model_1a01aab6710f6f01f16dadb18955cb9d7e" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>mem_available</name></member>
      <member refid="classnest_1_1_model_1ad669d7322cae68a0ff2c392ec680b505" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>mem_capacity</name></member>
      <member refid="classnest_1_1_model_1a559c0e798d784a05c1c9efabc854471e" prot="private" virt="non-virtual"><scope>nest::Model</scope><name>memory_</name></member>
      <member refid="classnest_1_1_model_1a2bd42999577fcb19a8b95e77674adc83" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>Model</name></member>
      <member refid="classnest_1_1_model_1a46d3535a83b3c65b79ed0a0163de0c44" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>Model</name></member>
      <member refid="classnest_1_1_model_1a9cb77c1e9e4ebe42eed089b96e175e24" prot="private" virt="non-virtual"><scope>nest::Model</scope><name>name_</name></member>
      <member refid="classnest_1_1_model_1a88fc1cc3b8ad741ca379ac1f4d32f3a9" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1_model_1a58d8e50642c26bd89664fa0e3887e8fa" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>reserve_additional</name></member>
      <member refid="classnest_1_1_model_1a0f41844c1484178aa2cd56564cfb96f9" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>send_test_event</name></member>
      <member refid="classnest_1_1_model_1a6d8c7b66a530f0cdea7e148aed1439f1" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1_model_1aa33cccc4bb86bba4a4845ec420948e66" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1_model_1a71e525d40c459e031f4515bb38d01bd1" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1_model_1a36c758e38b32defcf81042d1ba5731f9" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1_model_1a63cef74468717e015ee9f34ca4b2edab" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1_model_1a04633c49ed13bf0200288ee48872294d" prot="public" virt="pure-virtual"><scope>nest::Model</scope><name>set_model_id</name></member>
      <member refid="group__status__interface_1ga320b94046161025ff8a388eec127392f" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>set_status</name></member>
      <member refid="classnest_1_1_model_1acfde938ee82413d9e67b3d81d22f8282" prot="private" virt="pure-virtual"><scope>nest::Model</scope><name>set_status_</name></member>
      <member refid="classnest_1_1_model_1a3680de567f35d5c8f902f9a1b8278230" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>set_threads</name></member>
      <member refid="classnest_1_1_model_1a5e51f48ea7d5ec50c32a1ab57ed57080" prot="private" virt="non-virtual"><scope>nest::Model</scope><name>set_threads_</name></member>
      <member refid="classnest_1_1_model_1a81d304c74b5f213778d397b91a9803dc" prot="public" virt="non-virtual"><scope>nest::Model</scope><name>set_type_id</name></member>
      <member refid="classnest_1_1_model_1afaedf8964aa194b484193cf8f06e2c5b" prot="private" virt="non-virtual"><scope>nest::Model</scope><name>type_id_</name></member>
      <member refid="classnest_1_1_model_1ab7aa38460a7562dc208a3487c8a682ca" prot="public" virt="virtual"><scope>nest::Model</scope><name>~Model</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
