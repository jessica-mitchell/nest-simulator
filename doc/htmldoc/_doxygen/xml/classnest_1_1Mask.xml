<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1Mask" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::Mask</compoundname>
    <basecompoundref refid="classnest_1_1AbstractMask" prot="public" virt="non-virtual">nest::AbstractMask</basecompoundref>
    <derivedcompoundref refid="classnest_1_1AllMask" prot="public" virt="non-virtual">nest::AllMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1AnchoredMask" prot="public" virt="non-virtual">nest::AnchoredMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1BallMask" prot="public" virt="non-virtual">nest::BallMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1BoxMask" prot="public" virt="non-virtual">nest::BoxMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ConverseMask" prot="public" virt="non-virtual">nest::ConverseMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1DifferenceMask" prot="public" virt="non-virtual">nest::DifferenceMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1EllipseMask" prot="public" virt="non-virtual">nest::EllipseMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1IntersectionMask" prot="public" virt="non-virtual">nest::IntersectionMask&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1UnionMask" prot="public" virt="non-virtual">nest::UnionMask&lt; D &gt;</derivedcompoundref>
    <includes refid="mask_8h" local="no">mask.h</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>D</declname>
        <defname>D</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1Mask_1a4361fce7b927c7b0f8f4f7e1384bb00f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Mask&lt; D &gt;::~Mask</definition>
        <argsstring>() override</argsstring>
        <name>~Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="107" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a43d1949f739d9bc932e2aadb25d573de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::Mask&lt; D &gt;::inside</definition>
        <argsstring>(const Position&lt; D &gt; &amp;) const =0</argsstring>
        <name>inside</name>
        <reimplementedby refid="classnest_1_1AllMask_1a4606012a8c4d7a7a446bc1dec921d029">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1IntersectionMask_1af98ed3b6f15fa235730b261d3912963b">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1UnionMask_1a485d2090f419ab681f7d385fd7d8c445">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceMask_1ac21318e7d0f67ca3696c9c32269a47d8">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1ConverseMask_1a33e5a2e02fa5cf33a30ccb499df455b4">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1AnchoredMask_1a71c77edf77f094e97c30df9bbd54a9a4">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1BoxMask_1a93d91095c71dce25fcca0a834d7f9fa3">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1BallMask_1aa1333e47b3ea84a0df6259f7afa6ca1b">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1EllipseMask_1a1d2f83d0cdadd877aa134b061e1dd1ea">inside</reimplementedby>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if point is inside mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="114" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a8f5f7b1b18f31e4a927705b536c05a72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Mask&lt; D &gt;::inside</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;pt) const override</argsstring>
        <name>inside</name>
        <reimplements refid="classnest_1_1AbstractMask_1a6576b96fe48031acfee534e60fc064ce">inside</reimplements>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if point is inside mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="119" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask_impl.h" bodystart="69" bodyend="72"/>
        <references refid="namespacenest_1af83e7e1d4ba3689610d5e9d44b60337b" compoundref="spatial_8cpp" startline="381" endline="384">nest::inside</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a4ca07f89ca3d3139c2903137a642c114" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::Mask&lt; D &gt;::inside</definition>
        <argsstring>(const Box&lt; D &gt; &amp;) const =0</argsstring>
        <name>inside</name>
        <reimplementedby refid="classnest_1_1AllMask_1a87a56059638111c957236e7f78114673">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1BallMask_1a1188f6d034f5a2cb112bc202605de8f9">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1EllipseMask_1ad7847bde34f128f8f66f7c051bea24ae">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1IntersectionMask_1ad7c29ac3f2faf7dd0ba04bce7d357b73">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1UnionMask_1add6c7bfb4a10d49c91e338b2793f148d">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceMask_1a3ed4c69b087ed5a1c0cad0a64a8c79c2">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1ConverseMask_1a03470e5fa16fddad3e441be0b7979252">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1AnchoredMask_1aadac8662743ac595a8c641f321715bdf">inside</reimplementedby>
        <reimplementedby refid="classnest_1_1BoxMask_1aea241631da9ecae255d4bd1ef66b01ee">inside</reimplementedby>
        <param>
          <type>const <ref refid="structnest_1_1Box" kindref="compound">Box</ref>&lt; D &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the whole box is inside the mask. </para>
</simplesect>
<simplesect kind="note"><para>a return value of false is not a guarantee that the whole box is not inside the mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="126" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a7b0e35f7bed34d2b143d322caad7b40d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::Mask&lt; D &gt;::outside</definition>
        <argsstring>(const Box&lt; D &gt; &amp;b) const</argsstring>
        <name>outside</name>
        <reimplementedby refid="classnest_1_1AllMask_1a3daa987b04b77eb7807fbe2d5f6f7731">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1IntersectionMask_1a9edbc98ac29ff15842141a0b7fd0f0d4">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1UnionMask_1ace8240b0e3b49ed4936aba7b55251186">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceMask_1a7c8a8e942970876ccd1340cbfaa947bf">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1ConverseMask_1aa2d242b9dbb50cf44e1098993a860bf8">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1AnchoredMask_1a07172e23c56ce5e5c90e77b87671fd07">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1BoxMask_1a322db758ec9f4d01613257696e47f14e">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1BallMask_1a9e776c941a7dbe9283dbe01c1e8c434b">outside</reimplementedby>
        <reimplementedby refid="classnest_1_1EllipseMask_1aea912e19bfb39eb9bafad15a3bce3b9c">outside</reimplementedby>
        <param>
          <type>const <ref refid="structnest_1_1Box" kindref="compound">Box</ref>&lt; D &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the whole box is outside the mask. </para>
</simplesect>
<simplesect kind="note"><para>a return value of false is not a guarantee that the whole box is not outside the mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="133" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask_impl.h" bodystart="76" bodyend="87"/>
        <references refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e">nest::names::b</references>
        <references refid="structnest_1_1Box_1a07258756c85bafcfcd7187707791e306" compoundref="position_8h" startline="325">nest::Box&lt; D &gt;::lower_left</references>
        <references refid="structnest_1_1Box_1abdae9440dd4d9e0a7bbb3586d440528c" compoundref="position_8h" startline="326">nest::Box&lt; D &gt;::upper_right</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a5762fcaec01449570b208b4de6923295" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structnest_1_1Box" kindref="compound">Box</ref>&lt; D &gt;</type>
        <definition>virtual Box&lt; D &gt; nest::Mask&lt; D &gt;::get_bbox</definition>
        <argsstring>() const =0</argsstring>
        <name>get_bbox</name>
        <reimplementedby refid="classnest_1_1AllMask_1adf8d6d11eeee0855aaf2598fc1f618e8">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1IntersectionMask_1a3093a52d626ca1b8363b8124b4299153">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1UnionMask_1a5d05be9a0c42df0b2fcc82ae0b502c93">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceMask_1a1badb3807d5b7c12fa1514115817684a">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1ConverseMask_1a14ae007c33bb42534c83955ded4f875e">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1AnchoredMask_1a0cb880e91532f0d303e2b4d26bedee54">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1BoxMask_1a6c1c222f2395dc1225cfdf7e88830e96">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1BallMask_1afa453afb7170dfe250771822e8a592ae">get_bbox</reimplementedby>
        <reimplementedby refid="classnest_1_1EllipseMask_1ad947dff3bfd811f39a0c3a7d83523e3d">get_bbox</reimplementedby>
        <briefdescription>
<para>The whole mask is inside (i.e., false everywhere outside) the bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bounding box </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="139" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a9d7b816374204f095198b9f949aebd78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1Mask" kindref="compound">Mask</ref> *</type>
        <definition>virtual Mask* nest::Mask&lt; D &gt;::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classnest_1_1AllMask_1a3b60fb85bc55d0ea6cdeafd34e512236">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1IntersectionMask_1a7d1bfde8434919e8cbf00d180550364b">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1UnionMask_1aeb1c46c09d667b5380c2fac2f85077c3">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceMask_1a612505a3b99f369e36f66cc75796ac7b">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1ConverseMask_1a8d085ed4cd4fd697594489b8438f10a6">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1AnchoredMask_1ac41968806bec80b9b6dc8617873f9176">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1BoxMask_1aec86bd53af1d2965c6074c2e7199a916">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1BallMask_1acd33fd08014eb4997e6ca73975d42790">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1EllipseMask_1a32fba5364c9a24e0db08dcf780a5c0da">clone</reimplementedby>
        <briefdescription>
<para>Clone method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dynamically allocated copy of mask object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="145" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a26c865ca83050e6dff23c56ef880f702" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> *</type>
        <definition>AbstractMask * nest::Mask&lt; D &gt;::intersect_mask</definition>
        <argsstring>(const AbstractMask &amp;other) const override</argsstring>
        <name>intersect_mask</name>
        <reimplements refid="classnest_1_1AbstractMask_1a5121551bc7fbcaacd71345726db56ec5">intersect_mask</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create the intersection of this mask with another. </para>
        </briefdescription>
        <detaileddescription>
<para>Masks must have the same dimension <simplesect kind="return"><para>a new dynamically allocated mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="147" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask_impl.h" bodystart="33" bodyend="41"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1ae6318d1bdb788014d3ab08b25c8cc240" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> *</type>
        <definition>AbstractMask * nest::Mask&lt; D &gt;::union_mask</definition>
        <argsstring>(const AbstractMask &amp;other) const override</argsstring>
        <name>union_mask</name>
        <reimplements refid="classnest_1_1AbstractMask_1a090d38b233591056609d0cf9b0d99ab7">union_mask</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create the union of this mask with another. </para>
        </briefdescription>
        <detaileddescription>
<para>Masks must have the same dimension. <simplesect kind="return"><para>a new dynamically allocated mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="148" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask_impl.h" bodystart="45" bodyend="53"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1ac19b409451836f97eeb0c884009ef6a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> *</type>
        <definition>AbstractMask * nest::Mask&lt; D &gt;::minus_mask</definition>
        <argsstring>(const AbstractMask &amp;other) const override</argsstring>
        <name>minus_mask</name>
        <reimplements refid="classnest_1_1AbstractMask_1abac67e0b2297650220534cc8e74a67a0">minus_mask</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create the difference of this mask and another. </para>
        </briefdescription>
        <detaileddescription>
<para>Masks must have the same dimension. <simplesect kind="return"><para>a new dynamically allocated mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="149" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask_impl.h" bodystart="57" bodyend="65"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Mask_1a20df18bae0e8e78e06c68b6654f1ca8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>virtual bool nest::AbstractMask::inside</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;) const=0</argsstring>
        <name>inside</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if point is inside mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="105" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base class for masks with given dimension. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>nest::DifferenceMask&lt; D &gt;</label>
        <link refid="classnest_1_1DifferenceMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::BoxMask&lt; D &gt;</label>
        <link refid="classnest_1_1BoxMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::AnchoredMask&lt; D &gt;</label>
        <link refid="classnest_1_1AnchoredMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>nest::UnionMask&lt; D &gt;</label>
        <link refid="classnest_1_1UnionMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>nest::EllipseMask&lt; D &gt;</label>
        <link refid="classnest_1_1EllipseMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>nest::IntersectionMask&lt; D &gt;</label>
        <link refid="classnest_1_1IntersectionMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::AbstractMask</label>
        <link refid="classnest_1_1AbstractMask"/>
      </node>
      <node id="3">
        <label>nest::AllMask&lt; D &gt;</label>
        <link refid="classnest_1_1AllMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::BallMask&lt; D &gt;</label>
        <link refid="classnest_1_1BallMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Mask&lt; D &gt;</label>
        <link refid="classnest_1_1Mask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::ConverseMask&lt; D &gt;</label>
        <link refid="classnest_1_1ConverseMask"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::AbstractMask</label>
        <link refid="classnest_1_1AbstractMask"/>
      </node>
      <node id="1">
        <label>nest::Mask&lt; D &gt;</label>
        <link refid="classnest_1_1Mask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="102" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" bodystart="103" bodyend="150"/>
    <listofallmembers>
      <member refid="classnest_1_1Mask_1a9d7b816374204f095198b9f949aebd78" prot="public" virt="pure-virtual"><scope>nest::Mask</scope><name>clone</name></member>
      <member refid="classnest_1_1Mask_1a5762fcaec01449570b208b4de6923295" prot="public" virt="pure-virtual"><scope>nest::Mask</scope><name>get_bbox</name></member>
      <member refid="classnest_1_1AbstractMask_1afaa2c932fb8581e1417eddc784754a94" prot="public" virt="virtual"><scope>nest::Mask</scope><name>get_dict</name></member>
      <member refid="classnest_1_1Mask_1a43d1949f739d9bc932e2aadb25d573de" prot="public" virt="pure-virtual"><scope>nest::Mask</scope><name>inside</name></member>
      <member refid="classnest_1_1Mask_1a8f5f7b1b18f31e4a927705b536c05a72" prot="public" virt="virtual"><scope>nest::Mask</scope><name>inside</name></member>
      <member refid="classnest_1_1Mask_1a4ca07f89ca3d3139c2903137a642c114" prot="public" virt="pure-virtual"><scope>nest::Mask</scope><name>inside</name></member>
      <member refid="classnest_1_1Mask_1a20df18bae0e8e78e06c68b6654f1ca8c" prot="public" virt="non-virtual"><scope>nest::Mask</scope><name>inside</name></member>
      <member refid="classnest_1_1Mask_1a26c865ca83050e6dff23c56ef880f702" prot="public" virt="virtual"><scope>nest::Mask</scope><name>intersect_mask</name></member>
      <member refid="classnest_1_1Mask_1ac19b409451836f97eeb0c884009ef6a2" prot="public" virt="virtual"><scope>nest::Mask</scope><name>minus_mask</name></member>
      <member refid="classnest_1_1Mask_1a7b0e35f7bed34d2b143d322caad7b40d" prot="public" virt="virtual"><scope>nest::Mask</scope><name>outside</name></member>
      <member refid="classnest_1_1Mask_1ae6318d1bdb788014d3ab08b25c8cc240" prot="public" virt="virtual"><scope>nest::Mask</scope><name>union_mask</name></member>
      <member refid="classnest_1_1AbstractMask_1a5933f9f222c335b21f90ef55c1caa430" prot="public" virt="virtual"><scope>nest::Mask</scope><name>~AbstractMask</name></member>
      <member refid="classnest_1_1Mask_1a4361fce7b927c7b0f8f4f7e1384bb00f" prot="public" virt="non-virtual"><scope>nest::Mask</scope><name>~Mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
