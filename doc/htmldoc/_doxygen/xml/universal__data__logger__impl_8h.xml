<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="universal__data__logger__impl_8h" kind="file" language="C++">
    <compoundname>universal_data_logger_impl.h</compoundname>
    <includes refid="universal__data__logger_8h" local="yes">universal_data_logger.h</includes>
    <includedby refid="ac__generator_8cpp" local="yes">ac_generator.cpp</includedby>
    <includedby refid="amat2__psc__exp_8cpp" local="yes">amat2_psc_exp.cpp</includedby>
    <includedby refid="cm__tree_8h" local="yes">cm_tree.h</includedby>
    <includedby refid="dc__generator_8cpp" local="yes">dc_generator.cpp</includedby>
    <includedby refid="gif__pop__psc__exp_8cpp" local="yes">gif_pop_psc_exp.cpp</includedby>
    <includedby refid="gif__psc__exp_8cpp" local="yes">gif_psc_exp.cpp</includedby>
    <includedby refid="gif__psc__exp__multisynapse_8cpp" local="yes">gif_psc_exp_multisynapse.cpp</includedby>
    <includedby refid="glif__psc_8cpp" local="yes">glif_psc.cpp</includedby>
    <includedby refid="iaf__chs__2007_8cpp" local="yes">iaf_chs_2007.cpp</includedby>
    <includedby refid="iaf__psc__alpha_8cpp" local="yes">iaf_psc_alpha.cpp</includedby>
    <includedby refid="iaf__psc__alpha__multisynapse_8cpp" local="yes">iaf_psc_alpha_multisynapse.cpp</includedby>
    <includedby refid="iaf__psc__alpha__ps_8cpp" local="yes">iaf_psc_alpha_ps.cpp</includedby>
    <includedby refid="iaf__psc__delta_8cpp" local="yes">iaf_psc_delta.cpp</includedby>
    <includedby refid="iaf__psc__delta__ps_8cpp" local="yes">iaf_psc_delta_ps.cpp</includedby>
    <includedby refid="iaf__psc__exp_8cpp" local="yes">iaf_psc_exp.cpp</includedby>
    <includedby refid="iaf__psc__exp__htum_8cpp" local="yes">iaf_psc_exp_htum.cpp</includedby>
    <includedby refid="iaf__psc__exp__multisynapse_8cpp" local="yes">iaf_psc_exp_multisynapse.cpp</includedby>
    <includedby refid="iaf__psc__exp__ps_8cpp" local="yes">iaf_psc_exp_ps.cpp</includedby>
    <includedby refid="iaf__psc__exp__ps__lossless_8cpp" local="yes">iaf_psc_exp_ps_lossless.cpp</includedby>
    <includedby refid="inhomogeneous__poisson__generator_8cpp" local="yes">inhomogeneous_poisson_generator.cpp</includedby>
    <includedby refid="izhikevich_8cpp" local="yes">izhikevich.cpp</includedby>
    <includedby refid="mat2__psc__exp_8cpp" local="yes">mat2_psc_exp.cpp</includedby>
    <includedby refid="noise__generator_8cpp" local="yes">noise_generator.cpp</includedby>
    <includedby refid="pp__psc__delta_8cpp" local="yes">pp_psc_delta.cpp</includedby>
    <includedby refid="rate__neuron__ipn__impl_8h" local="yes">rate_neuron_ipn_impl.h</includedby>
    <includedby refid="rate__neuron__opn__impl_8h" local="yes">rate_neuron_opn_impl.h</includedby>
    <includedby refid="rate__transformer__node__impl_8h" local="yes">rate_transformer_node_impl.h</includedby>
    <includedby refid="sinusoidal__poisson__generator_8cpp" local="yes">sinusoidal_poisson_generator.cpp</includedby>
    <includedby refid="step__current__generator_8cpp" local="yes">step_current_generator.cpp</includedby>
    <includedby refid="step__rate__generator_8cpp" local="yes">step_rate_generator.cpp</includedby>
    <incdepgraph>
      <node id="49">
        <label>lockptr.h</label>
        <link refid="lockptr_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>numerics.h</label>
        <link refid="numerics_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>event.h</label>
        <link refid="event_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>manager_interface.h</label>
        <link refid="manager__interface_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>nest_time.h</label>
        <link refid="nest__time_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>nest_types.h</label>
        <link refid="nest__types_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>recordables_map.h</label>
        <link refid="recordables__map_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>spike_data.h</label>
        <link refid="spike__data_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>static_assert.h</label>
        <link refid="static__assert_8h"/>
      </node>
      <node id="28">
        <label>target.h</label>
        <link refid="target_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>universal_data_logger.h</label>
        <link refid="universal__data__logger_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>universal_data_logger_impl.h</label>
        <link refid="universal__data__logger__impl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>vp_manager.h</label>
        <link refid="vp__manager_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>aggregatedatum.h</label>
        <link refid="aggregatedatum_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>arraydatum.h</label>
        <link refid="arraydatum_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>datum.h</label>
        <link refid="datum_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>dictdatum.h</label>
        <link refid="dictdatum_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>interpret.h</label>
        <link refid="interpret_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>lockptrdatum.h</label>
        <link refid="lockptrdatum_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>name.h</label>
        <link refid="name_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>namedatum.h</label>
        <link refid="namedatum_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sliactions.h</label>
        <link refid="sliactions_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>slibuiltins.h</label>
        <link refid="slibuiltins_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>sliexceptions.h</label>
        <link refid="sliexceptions_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>slifunction.h</label>
        <link refid="slifunction_8h"/>
      </node>
      <node id="44">
        <label>slimodule.h</label>
        <link refid="slimodule_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>slitype.h</label>
        <link refid="slitype_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>tarrayobj.h</label>
        <link refid="tarrayobj_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>token.h</label>
        <link refid="token_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>tokenarray.h</label>
        <link refid="tokenarray_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>tokenstack.h</label>
        <link refid="tokenstack_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>cfloat</label>
      </node>
      <node id="19">
        <label>climits</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="17">
        <label>config.h</label>
      </node>
      <node id="20">
        <label>cstddef</label>
      </node>
      <node id="22">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="24">
        <label>deque</label>
      </node>
      <node id="35">
        <label>iomanip</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>limits</label>
      </node>
      <node id="41">
        <label>list</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="50">
        <label>memory</label>
      </node>
      <node id="21">
        <label>stdint.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="36">
        <label>typeinfo</label>
      </node>
      <node id="52">
        <label>utility</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>ac_generator.cpp</label>
        <link refid="ac__generator_8cpp"/>
      </node>
      <node id="3">
        <label>amat2_psc_exp.cpp</label>
        <link refid="amat2__psc__exp_8cpp"/>
      </node>
      <node id="6">
        <label>cm_default.cpp</label>
        <link refid="cm__default_8cpp"/>
      </node>
      <node id="5">
        <label>cm_default.h</label>
        <link refid="cm__default_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cm_tree.cpp</label>
        <link refid="cm__tree_8cpp"/>
      </node>
      <node id="4">
        <label>cm_tree.h</label>
        <link refid="cm__tree_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>dc_generator.cpp</label>
        <link refid="dc__generator_8cpp"/>
      </node>
      <node id="32">
        <label>gauss_rate.cpp</label>
        <link refid="gauss__rate_8cpp"/>
      </node>
      <node id="31">
        <label>gauss_rate.h</label>
        <link refid="gauss__rate_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>gif_pop_psc_exp.cpp</label>
        <link refid="gif__pop__psc__exp_8cpp"/>
      </node>
      <node id="11">
        <label>gif_psc_exp.cpp</label>
        <link refid="gif__psc__exp_8cpp"/>
      </node>
      <node id="12">
        <label>gif_psc_exp_multisynapse.cpp</label>
        <link refid="gif__psc__exp__multisynapse_8cpp"/>
      </node>
      <node id="13">
        <label>glif_psc.cpp</label>
        <link refid="glif__psc_8cpp"/>
      </node>
      <node id="14">
        <label>iaf_chs_2007.cpp</label>
        <link refid="iaf__chs__2007_8cpp"/>
      </node>
      <node id="15">
        <label>iaf_psc_alpha.cpp</label>
        <link refid="iaf__psc__alpha_8cpp"/>
      </node>
      <node id="16">
        <label>iaf_psc_alpha_multisynapse.cpp</label>
        <link refid="iaf__psc__alpha__multisynapse_8cpp"/>
      </node>
      <node id="17">
        <label>iaf_psc_alpha_ps.cpp</label>
        <link refid="iaf__psc__alpha__ps_8cpp"/>
      </node>
      <node id="18">
        <label>iaf_psc_delta.cpp</label>
        <link refid="iaf__psc__delta_8cpp"/>
      </node>
      <node id="19">
        <label>iaf_psc_delta_ps.cpp</label>
        <link refid="iaf__psc__delta__ps_8cpp"/>
      </node>
      <node id="20">
        <label>iaf_psc_exp.cpp</label>
        <link refid="iaf__psc__exp_8cpp"/>
      </node>
      <node id="21">
        <label>iaf_psc_exp_htum.cpp</label>
        <link refid="iaf__psc__exp__htum_8cpp"/>
      </node>
      <node id="22">
        <label>iaf_psc_exp_multisynapse.cpp</label>
        <link refid="iaf__psc__exp__multisynapse_8cpp"/>
      </node>
      <node id="23">
        <label>iaf_psc_exp_ps.cpp</label>
        <link refid="iaf__psc__exp__ps_8cpp"/>
      </node>
      <node id="24">
        <label>iaf_psc_exp_ps_lossless.cpp</label>
        <link refid="iaf__psc__exp__ps__lossless_8cpp"/>
      </node>
      <node id="25">
        <label>inhomogeneous_poisson_generator.cpp</label>
        <link refid="inhomogeneous__poisson__generator_8cpp"/>
      </node>
      <node id="26">
        <label>izhikevich.cpp</label>
        <link refid="izhikevich_8cpp"/>
      </node>
      <node id="34">
        <label>lin_rate.cpp</label>
        <link refid="lin__rate_8cpp"/>
      </node>
      <node id="33">
        <label>lin_rate.h</label>
        <link refid="lin__rate_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>mat2_psc_exp.cpp</label>
        <link refid="mat2__psc__exp_8cpp"/>
      </node>
      <node id="7">
        <label>modelsmodule.cpp</label>
        <link refid="modelsmodule_8cpp"/>
      </node>
      <node id="28">
        <label>noise_generator.cpp</label>
        <link refid="noise__generator_8cpp"/>
      </node>
      <node id="29">
        <label>pp_psc_delta.cpp</label>
        <link refid="pp__psc__delta_8cpp"/>
      </node>
      <node id="30">
        <label>rate_neuron_ipn_impl.h</label>
        <link refid="rate__neuron__ipn__impl_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>rate_neuron_opn_impl.h</label>
        <link refid="rate__neuron__opn__impl_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>rate_transformer_node_impl.h</label>
        <link refid="rate__transformer__node__impl_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>sigmoid_rate.cpp</label>
        <link refid="sigmoid__rate_8cpp"/>
      </node>
      <node id="35">
        <label>sigmoid_rate.h</label>
        <link refid="sigmoid__rate_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>sigmoid_rate_gg_1998.cpp</label>
        <link refid="sigmoid__rate__gg__1998_8cpp"/>
      </node>
      <node id="37">
        <label>sigmoid_rate_gg_1998.h</label>
        <link refid="sigmoid__rate__gg__1998_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>sinusoidal_poisson_generator.cpp</label>
        <link refid="sinusoidal__poisson__generator_8cpp"/>
      </node>
      <node id="46">
        <label>step_current_generator.cpp</label>
        <link refid="step__current__generator_8cpp"/>
      </node>
      <node id="47">
        <label>step_rate_generator.cpp</label>
        <link refid="step__rate__generator_8cpp"/>
      </node>
      <node id="40">
        <label>tanh_rate.cpp</label>
        <link refid="tanh__rate_8cpp"/>
      </node>
      <node id="39">
        <label>tanh_rate.h</label>
        <link refid="tanh__rate_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>threshold_lin_rate.cpp</label>
        <link refid="threshold__lin__rate_8cpp"/>
      </node>
      <node id="41">
        <label>threshold_lin_rate.h</label>
        <link refid="threshold__lin__rate_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>universal_data_logger_impl.h</label>
        <link refid="universal__data__logger__impl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>universal_data_logger_impl.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UNIVERSAL_DATA_LOGGER_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNIVERSAL_DATA_LOGGER_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="universal__data__logger_8h" kindref="compound">universal_data_logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="event__delivery__manager__impl_8h" kindref="compound">event_delivery_manager_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nest__time_8h" kindref="compound">nest_time.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="node_8h" kindref="compound">node.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DynamicUniversalDataLogger(<sp/>HostNode&amp;<sp/>host<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>:<sp/>host_(<sp/>host<sp/>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>,<sp/>data_loggers_()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::reset()</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>DLiter_<sp/>it<sp/>=<sp/>data_loggers_.begin();<sp/>it<sp/>!=<sp/>data_loggers_.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;reset();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::init()</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>DLiter_<sp/>it<sp/>=<sp/>data_loggers_.begin();<sp/>it<sp/>!=<sp/>data_loggers_.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;init();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::record_data(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>DLiter_<sp/>it<sp/>=<sp/>data_loggers_.begin();<sp/>it<sp/>!=<sp/>data_loggers_.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;record_data(<sp/>host_,<sp/>step<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::handle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataLoggingRequest&amp;<sp/>dlr<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref><sp/><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref><sp/>=<sp/>dlr.get_rport();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>assert(<sp/>rport<sp/>&gt;=<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rport<sp/>)<sp/>&lt;=<sp/>data_loggers_.size()<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>data_loggers_[<sp/><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref><sp/>-<sp/>1<sp/>].handle(<sp/>host_,<sp/>dlr<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::reset()</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>data_.clear();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>next_rec_step_<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>flag<sp/>as<sp/>uninitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::init()</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num_vars_<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>not<sp/>recording<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>recording<sp/>step<sp/>is<sp/>in<sp/>current<sp/>slice<sp/>or<sp/>beyond,<sp/>indicates<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>is<sp/>properly<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next_rec_step_<sp/>&gt;=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_slice_origin().get_steps()<sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>the<sp/>buffer<sp/>has<sp/>either<sp/>never<sp/>been<sp/>initialized<sp/>or<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>dormant<sp/>during<sp/>a<sp/>period<sp/>when<sp/>the<sp/>host<sp/>node<sp/>was<sp/>frozen.<sp/>We<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(re-)initialize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>data_.clear();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>recording<sp/>time<sp/>in<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>rec_int_steps_<sp/>=<sp/>recording_interval_.get_steps();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>next<sp/>recording<sp/>step<sp/>to<sp/>first<sp/>multiple<sp/>of<sp/>rec_int_steps_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beyond<sp/>current<sp/>time,<sp/>shifted<sp/>one<sp/>to<sp/>left,<sp/>since<sp/>rec_step<sp/>marks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>of<sp/>update<sp/>intervals,<sp/>and<sp/>we<sp/>want<sp/>time<sp/>stamps<sp/>at<sp/>right<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>interval<sp/>to<sp/>be<sp/>multiples<sp/>of<sp/>recording<sp/>interval.<sp/>Need<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>because<sp/>the<sp/>division<sp/>result<sp/>is<sp/>rounded<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>next_rec_step_<sp/>=<sp/>(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_time().get_steps()<sp/>/<sp/>rec_int_steps_<sp/>+<sp/>1<sp/>)<sp/>*<sp/>rec_int_steps_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>offset<sp/>is<sp/>not<sp/>0,<sp/>adjust<sp/>next<sp/>recording<sp/>step<sp/>to<sp/>account<sp/>for<sp/>it<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>setting<sp/>next<sp/>recording<sp/>step<sp/>to<sp/>be<sp/>offset<sp/>and<sp/>then<sp/>iterating<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>variable<sp/>is<sp/>greater<sp/>than<sp/>current<sp/>simulation<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>recording_offset_.get_steps()<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>next_rec_step_<sp/>=<sp/>recording_offset_.get_steps()<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>shifted<sp/>one<sp/>to<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>next_rec_step_<sp/>&lt;=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_time().get_steps()<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_rec_step_<sp/>+=<sp/>rec_int_steps_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>data<sp/>points<sp/>per<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>recs_per_slice<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ceil(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay()<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rec_int_steps_<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>data_.resize(<sp/>2,<sp/>DataLoggingReply::Container(<sp/>recs_per_slice,<sp/>DataLoggingReply::Item(<sp/>num_vars_<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>next_rec_.resize(<sp/>2<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>for<sp/>safety&apos;s<sp/>sake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>next_rec_[<sp/>0<sp/>]<sp/>=<sp/>next_rec_[<sp/>1<sp/>]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>at<sp/>beginning<sp/>of<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::record_data(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HostNode&amp;,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num_vars_<sp/>&lt;<sp/>1<sp/>or<sp/>step<sp/>&lt;<sp/>next_rec_step_<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wt<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.write_toggle();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>assert(<sp/>wt<sp/>&lt;<sp/>next_rec_.size()<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>assert(<sp/>wt<sp/>&lt;<sp/>data_.size()<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>assertion<sp/>may<sp/>fire<sp/>if<sp/>the<sp/>multimeter<sp/>connected<sp/>to</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>this<sp/>logger<sp/>is<sp/>frozen.<sp/>In<sp/>that<sp/>case,<sp/>handle()<sp/>is<sp/>not<sp/>called<sp/>and</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>next_rec_[wt]<sp/>never<sp/>reset.<sp/>The<sp/>assert()<sp/>prevents<sp/>error<sp/>propagation.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>not<sp/>an<sp/>exception,<sp/>since<sp/>I<sp/>consider<sp/>the<sp/>chance<sp/>of<sp/>users</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>freezing<sp/>multimeters<sp/>very<sp/>slim.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>See<sp/>#464<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>assert(<sp/>next_rec_[<sp/>wt<sp/>]<sp/>&lt;<sp/>data_[<sp/>wt<sp/>].size()<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>DataLoggingReply::Item&amp;<sp/>dest<sp/>=<sp/>data_[<sp/>wt<sp/>][<sp/>next_rec_[<sp/>wt<sp/>]<sp/>];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>time<sp/>stamp:<sp/>step<sp/>is<sp/>left<sp/>end<sp/>of<sp/>update<sp/>interval,<sp/>so<sp/>add<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>dest.timestamp<sp/>=<sp/>Time::step(<sp/>step<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>data<sp/>through<sp/>access<sp/>functions,<sp/>calling<sp/>via<sp/>pointer-to-member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_vars_;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>dest.data[<sp/>j<sp/>]<sp/>=<sp/>(<sp/>*(<sp/>node_access_[<sp/>j<sp/>]<sp/>)<sp/>)();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>next_rec_step_<sp/>+=<sp/>rec_int_steps_;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>just<sp/>increment.<sp/>Construction<sp/>ensures<sp/>that<sp/>we<sp/>cannot<sp/>overflow,</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>read-out<sp/>resets.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Overflow<sp/>is<sp/>possible<sp/>if<sp/>the<sp/>multimeter<sp/>is<sp/>frozen,<sp/>see<sp/>#464.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>In<sp/>that<sp/>case,<sp/>the<sp/>assertion<sp/>above<sp/>will<sp/>trigger.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>++next_rec_[<sp/>wt<sp/>];</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">nest::DynamicUniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::handle(<sp/>HostNode&amp;<sp/>host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataLoggingRequest&amp;<sp/>request<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num_vars_<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>assertions<sp/>will<sp/>fire<sp/>if<sp/>the<sp/>user<sp/>forgot<sp/>to<sp/>call<sp/>init()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>data<sp/>logger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>assert(<sp/>next_rec_.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>assert(<sp/>data_.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>read<sp/>toggle<sp/>and<sp/>start<sp/>and<sp/>end<sp/>of<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rt<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.read_toggle();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>assert(<sp/>not<sp/>data_[<sp/>rt<sp/>].empty()<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>valid<sp/>data,<sp/>i.e.,<sp/>data<sp/>with<sp/>time<sp/>stamps<sp/>within<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>past<sp/>time<sp/>slice.<sp/>This<sp/>may<sp/>not<sp/>be<sp/>the<sp/>case<sp/>if<sp/>the<sp/>node<sp/>has<sp/>been<sp/>frozen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>that<sp/>case,<sp/>we<sp/>still<sp/>reset<sp/>the<sp/>recording<sp/>marker,<sp/>to<sp/>prepare<sp/>for<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>data_[<sp/>rt<sp/>][<sp/>0<sp/>].timestamp<sp/>&lt;=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_previous_slice_origin()<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>next_rec_[<sp/>rt<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>recording<sp/>interval<sp/>and<sp/>min_delay<sp/>are<sp/>not<sp/>commensurable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>entry<sp/>of<sp/>data_<sp/>will<sp/>not<sp/>contain<sp/>useful<sp/>data<sp/>for<sp/>every</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>slice.<sp/>We<sp/>mark<sp/>this<sp/>by<sp/>time<sp/>stamp<sp/>-infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Applying<sp/>this<sp/>mark<sp/>here<sp/>is<sp/>less<sp/>work<sp/>than<sp/>initializing<sp/>all<sp/>time<sp/>stamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>-infinity<sp/>after<sp/>each<sp/>call<sp/>to<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next_rec_[<sp/>rt<sp/>]<sp/>&lt;<sp/>data_[<sp/>rt<sp/>].size()<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>data_[<sp/>rt<sp/>][<sp/>next_rec_[<sp/>rt<sp/>]<sp/>].timestamp<sp/>=<sp/>Time::neg_inf();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>create<sp/>reply<sp/>event<sp/>and<sp/>rigg<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>DataLoggingReply<sp/>reply(<sp/>data_[<sp/>rt<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;clear&quot;<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>next_rec_[<sp/>rt<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>reply.set_sender(<sp/>host<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>reply.set_sender_node_id(<sp/>host.get_node_id()<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>reply.set_receiver(<sp/>request.get_sender()<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>reply.set_port(<sp/>request.get_port()<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>it<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.send_to_node(<sp/>reply<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::UniversalDataLogger(<sp/>HostNode&amp;<sp/>host<sp/>)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>:<sp/>host_(<sp/>host<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>,<sp/>data_loggers_()</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::reset()</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>DLiter_<sp/>it<sp/>=<sp/>data_loggers_.begin();<sp/>it<sp/>!=<sp/>data_loggers_.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;reset();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::init()</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>DLiter_<sp/>it<sp/>=<sp/>data_loggers_.begin();<sp/>it<sp/>!=<sp/>data_loggers_.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;init();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::record_data(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>DLiter_<sp/>it<sp/>=<sp/>data_loggers_.begin();<sp/>it<sp/>!=<sp/>data_loggers_.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;record_data(<sp/>host_,<sp/>step<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::handle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataLoggingRequest&amp;<sp/>dlr<sp/>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref><sp/><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref><sp/>=<sp/>dlr.get_rport();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>assert(<sp/>rport<sp/>&gt;=<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rport<sp/>)<sp/>&lt;=<sp/>data_loggers_.size()<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>data_loggers_[<sp/><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref><sp/>-<sp/>1<sp/>].handle(<sp/>host_,<sp/>dlr<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::reset()</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>data_.clear();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>next_rec_step_<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>flag<sp/>as<sp/>uninitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::init()</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num_vars_<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>recording<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>recording<sp/>step<sp/>is<sp/>in<sp/>current<sp/>slice<sp/>or<sp/>beyond,<sp/>indicates<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>is<sp/>properly<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next_rec_step_<sp/>&gt;=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_slice_origin().get_steps()<sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>the<sp/>buffer<sp/>has<sp/>either<sp/>never<sp/>been<sp/>initialized<sp/>or<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>dormant<sp/>during<sp/>a<sp/>period<sp/>when<sp/>the<sp/>host<sp/>node<sp/>was<sp/>frozen.<sp/>We<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(re-)initialize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>data_.clear();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>recording<sp/>time<sp/>in<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>rec_int_steps_<sp/>=<sp/>recording_interval_.get_steps();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>next<sp/>recording<sp/>step<sp/>to<sp/>first<sp/>multiple<sp/>of<sp/>rec_int_steps_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>beyond<sp/>current<sp/>time,<sp/>shifted<sp/>one<sp/>to<sp/>left,<sp/>since<sp/>rec_step<sp/>marks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>of<sp/>update<sp/>intervals,<sp/>and<sp/>we<sp/>want<sp/>time<sp/>stamps<sp/>at<sp/>right<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>interval<sp/>to<sp/>be<sp/>multiples<sp/>of<sp/>recording<sp/>interval.<sp/>Need<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>because<sp/>the<sp/>division<sp/>result<sp/>is<sp/>rounded<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>next_rec_step_<sp/>=<sp/>(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_time().get_steps()<sp/>/<sp/>rec_int_steps_<sp/>+<sp/>1<sp/>)<sp/>*<sp/>rec_int_steps_<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>offset<sp/>is<sp/>not<sp/>0,<sp/>adjust<sp/>next<sp/>recording<sp/>step<sp/>to<sp/>account<sp/>for<sp/>it<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>setting<sp/>next<sp/>recording<sp/>step<sp/>to<sp/>be<sp/>offset<sp/>and<sp/>then<sp/>iterating<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>variable<sp/>is<sp/>greater<sp/>than<sp/>current<sp/>simulation<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>recording_offset_.get_steps()<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>next_rec_step_<sp/>=<sp/>recording_offset_.get_steps()<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>shifted<sp/>one<sp/>to<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>next_rec_step_<sp/>&lt;=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_time().get_steps()<sp/>)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_rec_step_<sp/>+=<sp/>rec_int_steps_;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>data<sp/>points<sp/>per<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>recs_per_slice<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ceil(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay()<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rec_int_steps_<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>data_.resize(<sp/>2,<sp/>DataLoggingReply::Container(<sp/>recs_per_slice,<sp/>DataLoggingReply::Item(<sp/>num_vars_<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>next_rec_.resize(<sp/>2<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>for<sp/>safety&apos;s<sp/>sake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>next_rec_[<sp/>0<sp/>]<sp/>=<sp/>next_rec_[<sp/>1<sp/>]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>at<sp/>beginning<sp/>of<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::record_data(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HostNode&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num_vars_<sp/>&lt;<sp/>1<sp/>or<sp/>step<sp/>&lt;<sp/>next_rec_step_<sp/>)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wt<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.write_toggle();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>assert(<sp/>wt<sp/>&lt;<sp/>next_rec_.size()<sp/>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>assert(<sp/>wt<sp/>&lt;<sp/>data_.size()<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>assertion<sp/>may<sp/>fire<sp/>if<sp/>the<sp/>multimeter<sp/>connected<sp/>to</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>this<sp/>logger<sp/>is<sp/>frozen.<sp/>In<sp/>that<sp/>case,<sp/>handle()<sp/>is<sp/>not<sp/>called<sp/>and</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>next_rec_[wt]<sp/>never<sp/>reset.<sp/>The<sp/>assert()<sp/>prevents<sp/>error<sp/>propagation.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>not<sp/>an<sp/>exception,<sp/>since<sp/>I<sp/>consider<sp/>the<sp/>chance<sp/>of<sp/>users</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>freezing<sp/>multimeters<sp/>very<sp/>slim.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>See<sp/>#464<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>assert(<sp/>next_rec_[<sp/>wt<sp/>]<sp/>&lt;<sp/>data_[<sp/>wt<sp/>].size()<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>DataLoggingReply::Item&amp;<sp/>dest<sp/>=<sp/>data_[<sp/>wt<sp/>][<sp/>next_rec_[<sp/>wt<sp/>]<sp/>];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>time<sp/>stamp:<sp/>step<sp/>is<sp/>left<sp/>end<sp/>of<sp/>update<sp/>interval,<sp/>so<sp/>add<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>dest.timestamp<sp/>=<sp/>Time::step(<sp/>step<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>data<sp/>through<sp/>access<sp/>functions,<sp/>calling<sp/>via<sp/>pointer-to-member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_vars_;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>dest.data[<sp/>j<sp/>]<sp/>=<sp/>(<sp/>(<sp/>host<sp/>).*(<sp/>node_access_[<sp/>j<sp/>]<sp/>)<sp/>)();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>next_rec_step_<sp/>+=<sp/>rec_int_steps_;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>just<sp/>increment.<sp/>Construction<sp/>ensures<sp/>that<sp/>we<sp/>cannot<sp/>overflow,</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>read-out<sp/>resets.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Overflow<sp/>is<sp/>possible<sp/>if<sp/>the<sp/>multimeter<sp/>is<sp/>frozen,<sp/>see<sp/>#464.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>In<sp/>that<sp/>case,<sp/>the<sp/>assertion<sp/>above<sp/>will<sp/>trigger.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>++next_rec_[<sp/>wt<sp/>];</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HostNode<sp/>&gt;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">nest::UniversalDataLogger&lt;<sp/>HostNode<sp/>&gt;::DataLogger_::handle(<sp/>HostNode&amp;<sp/>host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataLoggingRequest&amp;<sp/>request<sp/>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num_vars_<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>assertions<sp/>will<sp/>fire<sp/>if<sp/>the<sp/>user<sp/>forgot<sp/>to<sp/>call<sp/>init()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>data<sp/>logger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>assert(<sp/>next_rec_.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>assert(<sp/>data_.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>read<sp/>toggle<sp/>and<sp/>start<sp/>and<sp/>end<sp/>of<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rt<sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.read_toggle();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>assert(<sp/>not<sp/>data_[<sp/>rt<sp/>].empty()<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>valid<sp/>data,<sp/>i.e.,<sp/>data<sp/>with<sp/>time<sp/>stamps<sp/>within<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>past<sp/>time<sp/>slice.<sp/>This<sp/>may<sp/>not<sp/>be<sp/>the<sp/>case<sp/>if<sp/>the<sp/>node<sp/>has<sp/>been<sp/>frozen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>that<sp/>case,<sp/>we<sp/>still<sp/>reset<sp/>the<sp/>recording<sp/>marker,<sp/>to<sp/>prepare<sp/>for<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>data_[<sp/>rt<sp/>][<sp/>0<sp/>].timestamp<sp/>&lt;=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_previous_slice_origin()<sp/>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>next_rec_[<sp/>rt<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>recording<sp/>interval<sp/>and<sp/>min_delay<sp/>are<sp/>not<sp/>commensurable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>entry<sp/>of<sp/>data_<sp/>will<sp/>not<sp/>contain<sp/>useful<sp/>data<sp/>for<sp/>every</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>slice.<sp/>We<sp/>mark<sp/>this<sp/>by<sp/>time<sp/>stamp<sp/>-infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Applying<sp/>this<sp/>mark<sp/>here<sp/>is<sp/>less<sp/>work<sp/>than<sp/>initializing<sp/>all<sp/>time<sp/>stamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>-infinity<sp/>after<sp/>each<sp/>call<sp/>to<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next_rec_[<sp/>rt<sp/>]<sp/>&lt;<sp/>data_[<sp/>rt<sp/>].size()<sp/>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>data_[<sp/>rt<sp/>][<sp/>next_rec_[<sp/>rt<sp/>]<sp/>].timestamp<sp/>=<sp/>Time::neg_inf();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>create<sp/>reply<sp/>event<sp/>and<sp/>rigg<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>DataLoggingReply<sp/>reply(<sp/>data_[<sp/>rt<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;clear&quot;<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>next_rec_[<sp/>rt<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>reply.set_sender(<sp/>host<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>reply.set_sender_node_id(<sp/>host.get_node_id()<sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>reply.set_receiver(<sp/>request.get_sender()<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>reply.set_port(<sp/>request.get_port()<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>it<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.send_to_node(<sp/>reply<sp/>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#ifndef<sp/>UNIVERSAL_DATA_LOGGER_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/universal_data_logger_impl.h"/>
  </compounddef>
</doxygen>
