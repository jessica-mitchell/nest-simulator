<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_node_manager" kind="class" language="C++" prot="public">
    <compoundname>nest::NodeManager</compoundname>
    <basecompoundref refid="classnest_1_1_manager_interface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="node__manager_8h" local="no">node_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a807cfe6cdac819360c1d64839c4f274b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_sparse_node_array" kindref="compound">SparseNodeArray</ref> &gt;</type>
        <definition>std::vector&lt; SparseNodeArray &gt; nest::NodeManager::local_nodes_</definition>
        <argsstring></argsstring>
        <name>local_nodes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The network as sparse array of local nodes. One entry per thread, which contains only the thread-local nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="297" column="15" bodyfile="nestkernel/node_manager.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a5a977ee49ab9a6ebf8090bda9e047d54" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_node" kindref="compound">Node</ref> * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Node* &gt; &gt; nest::NodeManager::wfr_nodes_vec_</definition>
        <argsstring></argsstring>
        <name>wfr_nodes_vec_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Nodelists for unfrozen nodes that use the waveform relaxation method </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="299" column="15" bodyfile="nestkernel/node_manager.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a52295870eeb56aa420d5447dbf5f3a28" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::NodeManager::wfr_is_used_</definition>
        <argsstring></argsstring>
        <name>wfr_is_used_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>there is at least one node that uses waveform relaxation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="301" column="8" bodyfile="nestkernel/node_manager.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1aebcb5f3d56a9fef4299a18898e495f7b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::wfr_network_size_</definition>
        <argsstring></argsstring>
        <name>wfr_network_size_</name>
        <briefdescription>
<para>Network size when wfr_nodes_vec_ was last updated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="304" column="9" bodyfile="nestkernel/node_manager.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a3783ae708ada8dcbde71fbc3b0bdf239" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::NodeManager::num_active_nodes_</definition>
        <argsstring></argsstring>
        <name>num_active_nodes_</name>
        <briefdescription>
<para>number of nodes created by prepare_nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="305" column="10" bodyfile="nestkernel/node_manager.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1ae5aa61b5677eaf447a588214f66da427" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt;</type>
        <definition>std::vector&lt; index &gt; nest::NodeManager::num_thread_local_devices_</definition>
        <argsstring></argsstring>
        <name>num_thread_local_devices_</name>
        <briefdescription>
<para>stores number of thread local devices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="307" column="15" bodyfile="nestkernel/node_manager.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a52f1f074e2f17109e68704897a9a2976" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::NodeManager::have_nodes_changed_</definition>
        <argsstring></argsstring>
        <name>have_nodes_changed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>true if new nodes have been created since startup or last call to simulate </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="309" column="8" bodyfile="nestkernel/node_manager.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a13587b920020ce4c7c157a8e54d5e17e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; WrappedThreadException &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; WrappedThreadException &gt; &gt; nest::NodeManager::exceptions_raised_</definition>
        <argsstring></argsstring>
        <name>exceptions_raised_</name>
        <briefdescription>
<para>Store exceptions raised in thread-parallel sections for later handling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="313" column="15" bodyfile="nestkernel/node_manager.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_node_manager_1a8c0b5c1af05747706bf5d7f6f624f13c" prot="private" static="no" mutable="no">
        <type>Stopwatch</type>
        <definition>Stopwatch nest::NodeManager::sw_construction_create_</definition>
        <argsstring></argsstring>
        <name>sw_construction_create_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="316" column="13" bodyfile="nestkernel/node_manager.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_node_manager_1a75edf1b8841759b88e502b28b0589766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeManager::NodeManager</definition>
        <argsstring>()</argsstring>
        <name>NodeManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="52" column="3" bodyfile="nestkernel/node_manager.cpp" bodystart="48" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a1533a039c29ab6a51bab1987a3136ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeManager::~NodeManager</definition>
        <argsstring>() override</argsstring>
        <name>~NodeManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="53" column="3" bodyfile="nestkernel/node_manager.cpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a1add23cb71fcdd7bba78421494f3dca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare manager for operation.</para>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1_kernel_manager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_node_manager_1ac08841a5dbcf756fb1796d690bcc73dc" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="55" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ac08841a5dbcf756fb1796d690bcc73dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take down manager after operation.</para>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1_kernel_manager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1_node_manager_1a1add23cb71fcdd7bba78421494f3dca1" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_node_manager_1a1add23cb71fcdd7bba78421494f3dca1" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="56" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a9700eb7f8939c4db871d9483b7c8d188" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::change_number_of_threads</definition>
        <argsstring>() override</argsstring>
        <name>change_number_of_threads</name>
        <reimplements refid="classnest_1_1_manager_interface_1aa88c28844a59b4791eab4b7930fc62b0">change_number_of_threads</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the number of threads</para>
<para>Many data structures within the different managers depend on the number of threads. This function is called on each manager upon a change of that number and allows the manager to re-allocate data structures accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="57" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a88ff132a048d366a6a24dada6add71f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="58" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="765" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a4c9026ded8f30c78fc99cc9ca690f601" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="59" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="758" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a8dff5dbae74f671b28513c2bfa402675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::NodeManager::get_status</definition>
        <argsstring>(index)</argsstring>
        <name>get_status</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>idx</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get properties of a node. The specified node must exist. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_unknown_node" kindref="compound">nest::UnknownNode</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_target" kindref="compound">Target</ref> does not exist in the network. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="65" column="19" bodyfile="nestkernel/node_manager.cpp" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ac3991ea302917428914481485f522207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_status</definition>
        <argsstring>(index, const DictionaryDatum &amp;)</argsstring>
        <name>set_status</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set properties of a <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. The specified node must exist. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_unknown_node" kindref="compound">nest::UnknownNode</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_target" kindref="compound">Target</ref> does not exist in the network. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nest::UnaccessedDictionaryEntry</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-proxy target did not read dict entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TypeMismatch</parametername>
</parameternamelist>
<parameterdescription>
<para>Array is not a flat &amp; homogeneous array of integers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="74" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="745" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a8e6c4a313d6bf3d30f0d0ef111567575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::NodeManager::add_node</definition>
        <argsstring>(index m, long n=1)</argsstring>
        <name>add_node</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a number of nodes to the network. This function creates n <ref refid="classnest_1_1_node" kindref="compound">Node</ref> objects of <ref refid="classnest_1_1_model" kindref="compound">Model</ref> m and adds them to the Network at the current position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>valid <ref refid="classnest_1_1_model" kindref="compound">Model</ref> ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Nodes to be created. Defaults to 1 if not specified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> as lock pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="85" column="21" bodyfile="nestkernel/node_manager.cpp" bodystart="105" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ae485df8e2fb82bca92d59d538e47aa99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::NodeManager::get_nodes</definition>
        <argsstring>(const DictionaryDatum &amp;dict, const bool local_only)</argsstring>
        <name>get_nodes</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>local_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get node ID&apos;s of all nodes with the given properties.</para>
<para>Only node ID&apos;s of nodes matching the properties given in the dictionary exactly will be returned. If the dictionary is empty, all nodes will be returned. If the local_only bool is true, only node IDs of nodes simulated on the local MPI process will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dict</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter dictionary of selection properties </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_only</parametername>
</parameternamelist>
<parameterdescription>
<para>bool indicating whether all nodes, or just mpi local nodes should be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> as lock pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="101" column="21" bodyfile="nestkernel/node_manager.cpp" bodystart="312" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a2ba50262a362b4b6b0d77047971b01da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return total number of network nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="106" column="9" bodyfile="nestkernel/node_manager.h" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1aa6e170165e803d3604b6bdc42912a6e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::get_max_num_local_nodes</definition>
        <argsstring>() const</argsstring>
        <name>get_max_num_local_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximal number of nodes per virtual process. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="111" column="9" bodyfile="nestkernel/node_manager.cpp" bodystart="409" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ae2839661293edec53d413cd5f3c2aabe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::get_num_thread_local_devices</definition>
        <argsstring>(thread t) const</argsstring>
        <name>get_num_thread_local_devices</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of devices per thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="116" column="9" bodyfile="nestkernel/node_manager.cpp" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a6c70952e62625a89a6b82a972d31e488" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::print</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print network information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="121" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="715" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a178aff3a1bd286e6256c7146952ddaa6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::is_local_node</definition>
        <argsstring>(Node *) const</argsstring>
        <name>is_local_node</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true, if the given <ref refid="classnest_1_1_node" kindref="compound">Node</ref> is on the local machine </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="126" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ad1aef057211358f9a75baa1ca8ba58c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::is_local_node_id</definition>
        <argsstring>(index node_id) const</argsstring>
        <name>is_local_node_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true, if the given node ID is on the local machine </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="131" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="402" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a166690647e1a88d96c67e83c4c72fa19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::get_node_or_proxy</definition>
        <argsstring>(index node_id, thread tid)</argsstring>
        <name>get_node_or_proxy</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the specified <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. The function expects that the given node ID and thread are valid. If they are not, an assertion will fail. In case the given <ref refid="classnest_1_1_node" kindref="compound">Node</ref> does not exist on the fiven thread, a proxy is returned instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the <ref refid="classnest_1_1_node" kindref="compound">Node</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>local thread index of the <ref refid="classnest_1_1_node" kindref="compound">Node</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="144" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="422" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1aa8bc8e084baa168cd5b4754031930d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::get_node_or_proxy</definition>
        <argsstring>(index)</argsstring>
        <name>get_node_or_proxy</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer of the specified <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="150" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="437" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ad376a94a0b04bdbe90d6d2205f133aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::get_mpi_local_node_or_device_head</definition>
        <argsstring>(index)</argsstring>
        <name>get_mpi_local_node_or_device_head</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="160" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="458" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a907f84fe45e7f1317bd4e1a67f530a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classnest_1_1_node" kindref="compound">Node</ref> * &gt;</type>
        <definition>std::vector&lt; Node * &gt; nest::NodeManager::get_thread_siblings</definition>
        <argsstring>(index n) const</argsstring>
        <name>get_thread_siblings</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector that contains the thread siblings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified <ref refid="classnest_1_1_node" kindref="compound">Node</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_no_thread_siblings_available" kindref="compound">nest::NoThreadSiblingsAvailable</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node" kindref="compound">Node</ref> does not have thread siblings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="170" column="15" bodyfile="nestkernel/node_manager.cpp" bodystart="477" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a801fd82238c17423ed9dfda3f512602a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::ensure_valid_thread_local_ids</definition>
        <argsstring>()</argsstring>
        <name>ensure_valid_thread_local_ids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensure that all nodes in the network have valid thread-local IDs. Create up-to-date vector of local nodes, nodes_vec_. This method also sets the thread-local ID on all local nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="177" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="496" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a8816e71de7be2cb90e6c740940440e0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::thread_lid_to_node</definition>
        <argsstring>(thread t, targetindex thread_local_id) const</argsstring>
        <name>thread_lid_to_node</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1adad102550a6102c0c0bea1d1083a233f" kindref="member">targetindex</ref></type>
          <declname>thread_local_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="179" column="8" bodyfile="nestkernel/node_manager.h" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1af001754f205f44b770d7955fe481ab8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classnest_1_1_node" kindref="compound">Node</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; Node * &gt; &amp; nest::NodeManager::get_wfr_nodes_on_thread</definition>
        <argsstring>(thread) const</argsstring>
        <name>get_wfr_nodes_on_thread</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get list of nodes on given thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="184" column="21" bodyfile="nestkernel/node_manager.h" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a5024846165430a49270e72e139407db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::prepare_nodes</definition>
        <argsstring>()</argsstring>
        <name>prepare_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare nodes for simulation and register nodes in node_list. Calls prepare_node_() for each pertaining <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. <simplesect kind="see"><para>prepare_node_() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="191" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="608" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a765e9cedbe4ae1d8da9c7e03c07667c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::NodeManager::get_num_active_nodes</definition>
        <argsstring>()</argsstring>
        <name>get_num_active_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of nodes created by last <ref refid="classnest_1_1_node_manager_1a5024846165430a49270e72e139407db5" kindref="member">prepare_nodes()</ref> call <simplesect kind="see"><para><ref refid="classnest_1_1_node_manager_1a5024846165430a49270e72e139407db5" kindref="member">prepare_nodes()</ref> </para>
</simplesect>
<simplesect kind="return"><para>number of active nodes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="199" column="3" bodyfile="nestkernel/node_manager.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ac99133b91c8280ca9ec6dca876ea9634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::post_run_cleanup</definition>
        <argsstring>()</argsstring>
        <name>post_run_cleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke <ref refid="classnest_1_1_node_manager_1ac99133b91c8280ca9ec6dca876ea9634" kindref="member">post_run_cleanup()</ref> on all nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="207" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="671" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a4dcd6368bfc2a47cefae88e7264a9893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::finalize_nodes</definition>
        <argsstring>()</argsstring>
        <name>finalize_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invoke <ref refid="classnest_1_1_node_manager_1ac08841a5dbcf756fb1796d690bcc73dc" kindref="member">finalize()</ref> on all nodes.</para>
<para>This function is called only if the thread data structures are properly set up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="212" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="689" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a820f607f75fb1f804e538d4e218cca26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::wfr_is_used</definition>
        <argsstring>() const</argsstring>
        <name>wfr_is_used</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether any node uses waveform relaxation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="217" column="8" bodyfile="nestkernel/node_manager.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a834b299d80a29979238589e61d413378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::check_wfr_use</definition>
        <argsstring>()</argsstring>
        <name>check_wfr_use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether waveform relaxation is used by any node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="222" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="703" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a264043547cdea9a9c528384bcd655e2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_sparse_node_array" kindref="compound">SparseNodeArray</ref> &amp;</type>
        <definition>const SparseNodeArray &amp; nest::NodeManager::get_local_nodes</definition>
        <argsstring>(thread) const</argsstring>
        <name>get_local_nodes</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a reference to the thread-local nodes of thread t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="227" column="25" bodyfile="nestkernel/node_manager.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1af4085fa328254a18d3e9f9967ea20df1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::have_nodes_changed</definition>
        <argsstring>() const</argsstring>
        <name>have_nodes_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="229" column="8" bodyfile="nestkernel/node_manager.h" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ac2e430ac232c535b40656af2568a111b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_have_nodes_changed</definition>
        <argsstring>(const bool changed)</argsstring>
        <name>set_have_nodes_changed</name>
        <param>
          <type>const bool</type>
          <declname>changed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="230" column="8" bodyfile="nestkernel/node_manager.h" bodystart="356" bodyend="359"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_node_manager_1a44edc2e28e545c891c87a4edb5993e7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::init_</definition>
        <argsstring>()</argsstring>
        <name>init_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the network data structures. init_() is used by the constructor and by reset(). <simplesect kind="see"><para>reset() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="238" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a9b271216cabc00dd720e6ee280e5c7ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::destruct_nodes_</definition>
        <argsstring>()</argsstring>
        <name>destruct_nodes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="239" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="567" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1aa0db2bfeb38e55cfdc8252a41845141c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_status_single_node_</definition>
        <argsstring>(Node &amp;, const DictionaryDatum &amp;, bool clear_flags=true)</argsstring>
        <name>set_status_single_node_</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <defname>target</defname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_flags</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to set properties on single node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>to set properties for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>containing properties </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para>true (default), access flags are called before each call so Node::set_status_() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>UnaccessedDictionaryEntry</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="249" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="581" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1aa58e4f4dd0009bcdd9547d04375b694f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::prepare_node_</definition>
        <argsstring>(Node *)</argsstring>
        <name>prepare_node_</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialized buffers, register in list of nodes to update/finalize. <simplesect kind="see"><para>prepare_nodes_() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="255" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="599" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a2fdd0174dbf1bf97c20a37bea8867140" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::add_neurons_</definition>
        <argsstring>(Model &amp;model, index min_node_id, index max_node_id, NodeCollectionPTR nc_ptr)</argsstring>
        <name>add_neurons_</name>
        <param>
          <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>min_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>max_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add normal neurons.</para>
<para>Each neuron is added to exactly one virtual process. On all other VPs, it is represented by a proxy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_model" kindref="compound">Model</ref> of neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of first neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of last neuron to create (inclusive). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="267" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="187" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1a0c14759edc75eb1c32c8d1ba475a69b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::add_devices_</definition>
        <argsstring>(Model &amp;model, index min_node_id, index max_node_id, NodeCollectionPTR nc_ptr)</argsstring>
        <name>add_devices_</name>
        <param>
          <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>min_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>max_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add device nodes.</para>
<para>For device nodes, a clone of the node is added to every virtual process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_model" kindref="compound">Model</ref> of neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of first neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of last neuron to create (inclusive). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="278" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="235" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_node_manager_1ad949c0a73a73c3be7b24d7ba4ed0175a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::add_music_nodes_</definition>
        <argsstring>(Model &amp;model, index min_node_id, index max_node_id, NodeCollectionPTR nc_ptr)</argsstring>
        <name>add_music_nodes_</name>
        <param>
          <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>min_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>max_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add MUSIC nodes.</para>
<para>Nodes for MUSIC communication are added once per MPI process and are always placed on thread 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_model" kindref="compound">Model</ref> of neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of first neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of last neuron to create (inclusive). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_manager.h" line="290" column="8" bodyfile="nestkernel/node_manager.cpp" bodystart="274" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::NodeManager</label>
        <link refid="classnest_1_1_node_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::NodeManager</label>
        <link refid="classnest_1_1_node_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/node_manager.h" line="49" column="1" bodyfile="nestkernel/node_manager.h" bodystart="50" bodyend="317"/>
    <listofallmembers>
      <member refid="classnest_1_1_node_manager_1a0c14759edc75eb1c32c8d1ba475a69b2" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_devices_</name></member>
      <member refid="classnest_1_1_node_manager_1ad949c0a73a73c3be7b24d7ba4ed0175a" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_music_nodes_</name></member>
      <member refid="classnest_1_1_node_manager_1a2fdd0174dbf1bf97c20a37bea8867140" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_neurons_</name></member>
      <member refid="classnest_1_1_node_manager_1a8e6c4a313d6bf3d30f0d0ef111567575" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_node</name></member>
      <member refid="classnest_1_1_node_manager_1a9700eb7f8939c4db871d9483b7c8d188" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1_node_manager_1a834b299d80a29979238589e61d413378" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>check_wfr_use</name></member>
      <member refid="classnest_1_1_manager_interface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1_node_manager_1a9b271216cabc00dd720e6ee280e5c7ec" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>destruct_nodes_</name></member>
      <member refid="classnest_1_1_node_manager_1a801fd82238c17423ed9dfda3f512602a" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>ensure_valid_thread_local_ids</name></member>
      <member refid="classnest_1_1_node_manager_1a13587b920020ce4c7c157a8e54d5e17e" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>exceptions_raised_</name></member>
      <member refid="classnest_1_1_node_manager_1ac08841a5dbcf756fb1796d690bcc73dc" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1_node_manager_1a4dcd6368bfc2a47cefae88e7264a9893" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>finalize_nodes</name></member>
      <member refid="classnest_1_1_node_manager_1a264043547cdea9a9c528384bcd655e2b" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_local_nodes</name></member>
      <member refid="classnest_1_1_node_manager_1aa6e170165e803d3604b6bdc42912a6e9" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_max_num_local_nodes</name></member>
      <member refid="classnest_1_1_node_manager_1ad376a94a0b04bdbe90d6d2205f133aed" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_mpi_local_node_or_device_head</name></member>
      <member refid="classnest_1_1_node_manager_1a166690647e1a88d96c67e83c4c72fa19" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_node_or_proxy</name></member>
      <member refid="classnest_1_1_node_manager_1aa8bc8e084baa168cd5b4754031930d34" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_node_or_proxy</name></member>
      <member refid="classnest_1_1_node_manager_1ae485df8e2fb82bca92d59d538e47aa99" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_nodes</name></member>
      <member refid="classnest_1_1_node_manager_1a765e9cedbe4ae1d8da9c7e03c07667c9" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_num_active_nodes</name></member>
      <member refid="classnest_1_1_node_manager_1ae2839661293edec53d413cd5f3c2aabe" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_num_thread_local_devices</name></member>
      <member refid="classnest_1_1_node_manager_1a4c9026ded8f30c78fc99cc9ca690f601" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1_node_manager_1a8dff5dbae74f671b28513c2bfa402675" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1_node_manager_1a907f84fe45e7f1317bd4e1a67f530a61" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_thread_siblings</name></member>
      <member refid="classnest_1_1_node_manager_1af001754f205f44b770d7955fe481ab8d" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_wfr_nodes_on_thread</name></member>
      <member refid="classnest_1_1_node_manager_1af4085fa328254a18d3e9f9967ea20df1" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>have_nodes_changed</name></member>
      <member refid="classnest_1_1_node_manager_1a52f1f074e2f17109e68704897a9a2976" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>have_nodes_changed_</name></member>
      <member refid="classnest_1_1_node_manager_1a44edc2e28e545c891c87a4edb5993e7d" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>init_</name></member>
      <member refid="classnest_1_1_node_manager_1a1add23cb71fcdd7bba78421494f3dca1" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1_node_manager_1a178aff3a1bd286e6256c7146952ddaa6" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>is_local_node</name></member>
      <member refid="classnest_1_1_node_manager_1ad1aef057211358f9a75baa1ca8ba58c1" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>is_local_node_id</name></member>
      <member refid="classnest_1_1_node_manager_1a807cfe6cdac819360c1d64839c4f274b" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>local_nodes_</name></member>
      <member refid="classnest_1_1_manager_interface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_manager_interface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_node_manager_1a75edf1b8841759b88e502b28b0589766" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>NodeManager</name></member>
      <member refid="classnest_1_1_node_manager_1a3783ae708ada8dcbde71fbc3b0bdf239" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>num_active_nodes_</name></member>
      <member refid="classnest_1_1_node_manager_1ae5aa61b5677eaf447a588214f66da427" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>num_thread_local_devices_</name></member>
      <member refid="classnest_1_1_manager_interface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1_node_manager_1ac99133b91c8280ca9ec6dca876ea9634" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1_manager_interface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1_node_manager_1aa58e4f4dd0009bcdd9547d04375b694f" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>prepare_node_</name></member>
      <member refid="classnest_1_1_node_manager_1a5024846165430a49270e72e139407db5" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>prepare_nodes</name></member>
      <member refid="classnest_1_1_node_manager_1a6c70952e62625a89a6b82a972d31e488" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>print</name></member>
      <member refid="classnest_1_1_node_manager_1ac2e430ac232c535b40656af2568a111b" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>set_have_nodes_changed</name></member>
      <member refid="classnest_1_1_node_manager_1a88ff132a048d366a6a24dada6add71f4" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1_node_manager_1ac3991ea302917428914481485f522207" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1_node_manager_1aa0db2bfeb38e55cfdc8252a41845141c" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>set_status_single_node_</name></member>
      <member refid="classnest_1_1_node_manager_1a2ba50262a362b4b6b0d77047971b01da" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>size</name></member>
      <member refid="classnest_1_1_node_manager_1a8c0b5c1af05747706bf5d7f6f624f13c" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>sw_construction_create_</name></member>
      <member refid="classnest_1_1_node_manager_1a8816e71de7be2cb90e6c740940440e0f" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>thread_lid_to_node</name></member>
      <member refid="classnest_1_1_node_manager_1a820f607f75fb1f804e538d4e218cca26" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_is_used</name></member>
      <member refid="classnest_1_1_node_manager_1a52295870eeb56aa420d5447dbf5f3a28" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_is_used_</name></member>
      <member refid="classnest_1_1_node_manager_1aebcb5f3d56a9fef4299a18898e495f7b" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_network_size_</name></member>
      <member refid="classnest_1_1_node_manager_1a5a977ee49ab9a6ebf8090bda9e047d54" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_nodes_vec_</name></member>
      <member refid="classnest_1_1_manager_interface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1_node_manager_1a1533a039c29ab6a51bab1987a3136ab3" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>~NodeManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
