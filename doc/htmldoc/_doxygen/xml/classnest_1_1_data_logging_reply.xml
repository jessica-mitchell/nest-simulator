<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_data_logging_reply" kind="class" language="C++" prot="public">
    <compoundname>nest::DataLoggingReply</compoundname>
    <basecompoundref refid="classnest_1_1_event" prot="public" virt="non-virtual">nest::Event</basecompoundref>
    <includes refid="event_8h" local="no">event.h</includes>
    <innerclass refid="structnest_1_1_data_logging_reply_1_1_item" prot="public">nest::DataLoggingReply::Item</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1_data_logging_reply_1a9fd7e321c167f63293e01d5ec24e30ce" prot="public" static="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>typedef std::vector&lt; double &gt; nest::DataLoggingReply::DataItem</definition>
        <argsstring></argsstring>
        <name>DataItem</name>
        <briefdescription>
<para>Data type data at single recording time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="719" column="23" bodyfile="nestkernel/event.h" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_data_logging_reply_1a1c65bd4d53e10ed523ac04ef9892d3c3" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structnest_1_1_data_logging_reply_1_1_item" kindref="compound">Item</ref> &gt;</type>
        <definition>typedef std::vector&lt; Item &gt; nest::DataLoggingReply::Container</definition>
        <argsstring></argsstring>
        <name>Container</name>
        <briefdescription>
<para>Container for entries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="740" column="23" bodyfile="nestkernel/event.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_data_logging_reply_1a0a37b6c40e637f9c26ca0b5b93ce63ea" prot="private" static="no" mutable="no">
        <type>const <ref refid="classnest_1_1_data_logging_reply_1a1c65bd4d53e10ed523ac04ef9892d3c3" kindref="member">Container</ref> &amp;</type>
        <definition>const Container&amp; nest::DataLoggingReply::info_</definition>
        <argsstring></argsstring>
        <name>info_</name>
        <briefdescription>
<para>data to be transmitted, with time stamps </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="767" column="19" bodyfile="nestkernel/event.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_data_logging_reply_1a1dd56afe394d03866a4afecd74782154" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::DataLoggingReply::DataLoggingReply</definition>
        <argsstring>(const Container &amp;)</argsstring>
        <name>DataLoggingReply</name>
        <param>
          <type>const <ref refid="classnest_1_1_data_logging_reply_1a1c65bd4d53e10ed523ac04ef9892d3c3" kindref="member">Container</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>Construct with reference to data and time stamps to transmit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="743" column="3" bodyfile="nestkernel/event.h" bodystart="770" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_logging_reply_1a2dc8b349347e1bdc409b583ab0c87c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::DataLoggingReply::operator()</definition>
        <argsstring>() override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_event_1a5d94fae6ba8645be63749c08289adcbe">operator()</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deliver the event to receiver.</para>
<para>This operator calls the handler for the specific event type at the receiver. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="745" column="8" bodyfile="nestkernel/event.cpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_logging_reply_1adff530c7a4c657a29b5303266d43e5b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_data_logging_reply_1a1c65bd4d53e10ed523ac04ef9892d3c3" kindref="member">Container</ref> &amp;</type>
        <definition>const Container&amp; nest::DataLoggingReply::get_info</definition>
        <argsstring>() const</argsstring>
        <name>get_info</name>
        <briefdescription>
<para>Access referenced data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="749" column="3" bodyfile="nestkernel/event.h" bodystart="749" bodyend="752"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_data_logging_reply_1a1f28552776eea7bb69dada568e6d340f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::DataLoggingReply::DataLoggingReply</definition>
        <argsstring>(const DataLoggingReply &amp;)</argsstring>
        <name>DataLoggingReply</name>
        <param>
          <type>const <ref refid="classnest_1_1_data_logging_reply" kindref="compound">DataLoggingReply</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Prohibit copying. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="756" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_logging_reply_1a3fa925daf5d72c6bbb027f6426d315a6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classnest_1_1_data_logging_reply" kindref="compound">DataLoggingReply</ref> *</type>
        <definition>DataLoggingReply* nest::DataLoggingReply::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classnest_1_1_event_1a3eeb581400e38c8fd62a105ef812a549">clone</reimplements>
        <briefdescription>
<para>Prohibit cloning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="760" column="3" bodyfile="nestkernel/event.h" bodystart="760" bodyend="764"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Provide logged data through request transmitting reference. <simplesect kind="see"><para><ref refid="classnest_1_1_data_logging_request" kindref="compound">DataLoggingRequest</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
      </node>
      <node id="1">
        <label>nest::DataLoggingReply</label>
        <link refid="classnest_1_1_data_logging_reply"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1_deprecation_warning"/>
      </node>
      <node id="7">
        <label>nest::Time::LimitPosInf</label>
      </node>
      <node id="9">
        <label>nest::SpikeData</label>
        <link refid="classnest_1_1_spike_data"/>
      </node>
      <node id="6">
        <label>nest::Time::LimitNegInf</label>
      </node>
      <node id="5">
        <label>nest::Time</label>
        <link refid="classnest_1_1_time"/>
        <childnode refid="6" relation="usage">
          <edgelabel>#LIM_NEG_INF</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>#LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#LIM_MAX</edgelabel>
          <edgelabel>#LIM_MIN</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
        <childnode refid="3" relation="usage">
          <edgelabel>#receiver_</edgelabel>
          <edgelabel>#sender_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>#stamp_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>#sender_spike_data_</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1_time_1_1_limit"/>
      </node>
      <node id="1">
        <label>nest::DataLoggingReply</label>
        <link refid="classnest_1_1_data_logging_reply"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::Node</label>
        <link refid="classnest_1_1_node"/>
        <childnode refid="4" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/event.h" line="715" column="1" bodyfile="nestkernel/event.h" bodystart="716" bodyend="768"/>
    <listofallmembers>
      <member refid="classnest_1_1_data_logging_reply_1a3fa925daf5d72c6bbb027f6426d315a6" prot="private" virt="virtual"><scope>nest::DataLoggingReply</scope><name>clone</name></member>
      <member refid="classnest_1_1_data_logging_reply_1a1c65bd4d53e10ed523ac04ef9892d3c3" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>Container</name></member>
      <member refid="classnest_1_1_event_1a206e330b6cbc6e93887fc21908d4df43" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>d_</name></member>
      <member refid="classnest_1_1_data_logging_reply_1a9fd7e321c167f63293e01d5ec24e30ce" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>DataItem</name></member>
      <member refid="classnest_1_1_data_logging_reply_1a1dd56afe394d03866a4afecd74782154" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>DataLoggingReply</name></member>
      <member refid="classnest_1_1_data_logging_reply_1a1f28552776eea7bb69dada568e6d340f" prot="private" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>DataLoggingReply</name></member>
      <member refid="classnest_1_1_event_1a5fd02c2d20b0caf43899f563d419e0bd" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>Event</name></member>
      <member refid="classnest_1_1_event_1a7f3dc0d0bb05d4f98ad2bf13cc67b940" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_delay_steps</name></member>
      <member refid="classnest_1_1_data_logging_reply_1adff530c7a4c657a29b5303266d43e5b2" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_info</name></member>
      <member refid="classnest_1_1_event_1ad2fcc703a758e0dba77c00385cb5041c" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_offset</name></member>
      <member refid="classnest_1_1_event_1a583d84f37d575fbc7f2ab711fb494b66" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_port</name></member>
      <member refid="classnest_1_1_event_1a8c1d83bbbebd23bb85b7ba3dd743d38c" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_receiver</name></member>
      <member refid="classnest_1_1_event_1aaa1bfdd94c07c6a94547086f8139a960" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_receiver_node_id</name></member>
      <member refid="classnest_1_1_event_1a4802a116b9b4e4f3ffcd71a7cfb1729e" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_rel_delivery_steps</name></member>
      <member refid="classnest_1_1_event_1a54709441635d23d80acd9d18eb869856" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_rport</name></member>
      <member refid="classnest_1_1_event_1aca5d7f11547cb61848956360d656ccfc" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_sender</name></member>
      <member refid="classnest_1_1_event_1a32291607d1143c5c7ade223a12ddd54e" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a02f02f11531fefd932a1ac9c0c0891d0" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_stamp</name></member>
      <member refid="classnest_1_1_event_1abf2d6610c35bd35cf67910f5c39b7cc4" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>get_weight</name></member>
      <member refid="classnest_1_1_data_logging_reply_1a0a37b6c40e637f9c26ca0b5b93ce63ea" prot="private" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>info_</name></member>
      <member refid="classnest_1_1_event_1aa1d8adc602682b70876729e830956dce" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>is_valid</name></member>
      <member refid="classnest_1_1_event_1afd698f1dc0985f25ac821060e060c64b" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>offset_</name></member>
      <member refid="classnest_1_1_data_logging_reply_1a2dc8b349347e1bdc409b583ab0c87c0b" prot="public" virt="virtual"><scope>nest::DataLoggingReply</scope><name>operator()</name></member>
      <member refid="classnest_1_1_event_1a8515d7a39d4f3c8ba47bde7bcfdf80a7" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>p_</name></member>
      <member refid="classnest_1_1_event_1aba7585287096e9d1189007fa60244eef" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>receiver_</name></member>
      <member refid="classnest_1_1_event_1acf9f5b244e87b4d2d83b0a67463b76f6" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>receiver_is_valid</name></member>
      <member refid="classnest_1_1_event_1aaf68e08591d41518b70181862a6b4877" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>retrieve_sender_node_id_from_source_table</name></member>
      <member refid="classnest_1_1_event_1aaff33b6ca47aa351962509ba81ac7ed7" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>rp_</name></member>
      <member refid="classnest_1_1_event_1ac23f2f4beb8407a1cb01560a316268fd" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>sender_</name></member>
      <member refid="classnest_1_1_event_1a43ca356032fe29a848b9d72f7a43eafd" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>sender_is_valid</name></member>
      <member refid="classnest_1_1_event_1a7221735e8c788ee4a730f7ba6595483b" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>sender_node_id_</name></member>
      <member refid="classnest_1_1_event_1af6213aa38ebec48b1fc8be9e00a62d1c" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>sender_spike_data_</name></member>
      <member refid="classnest_1_1_event_1ae662ecac352f57893c104563dd53c7fe" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_delay_steps</name></member>
      <member refid="classnest_1_1_event_1a488b68c43fe5d4d29d87d2578487264d" prot="public" virt="virtual"><scope>nest::DataLoggingReply</scope><name>set_diffusion_factor</name></member>
      <member refid="classnest_1_1_event_1a956496d418cf58ca78925a22dfe2e21d" prot="public" virt="virtual"><scope>nest::DataLoggingReply</scope><name>set_drift_factor</name></member>
      <member refid="classnest_1_1_event_1a950cfc88c56d3098f1445dcc2b6f4805" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_offset</name></member>
      <member refid="classnest_1_1_event_1a934d28b25e817dd9ed45fbbab3436288" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_port</name></member>
      <member refid="classnest_1_1_event_1a16234c886ae93c42bf120bf77abece30" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_receiver</name></member>
      <member refid="classnest_1_1_event_1aeac7ec4158ac45bf8e503ee04888d367" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_rport</name></member>
      <member refid="classnest_1_1_event_1a63cf602cb38d901021bbe9096f161850" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_sender</name></member>
      <member refid="classnest_1_1_event_1a7ba2a5690a5345624a8ed57c7633cc03" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a5bb763582d2d6a09987d1d91a0646b05" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_sender_node_id_info</name></member>
      <member refid="classnest_1_1_event_1a47c5bdb5473b5b8971b2a077aec754e0" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_stamp</name></member>
      <member refid="classnest_1_1_event_1ab5269d296a67598c7d6cbb9117756de0" prot="public" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>set_weight</name></member>
      <member refid="classnest_1_1_event_1a8ccecfeabf8f8a5bc3166dd3408f8295" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>stamp_</name></member>
      <member refid="classnest_1_1_event_1af35dca186785c4b12995f35d2b51a3de" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>stamp_steps_</name></member>
      <member refid="classnest_1_1_event_1a2e85d3a413ae97d1dbf9cf6dbd791259" prot="protected" virt="non-virtual"><scope>nest::DataLoggingReply</scope><name>w_</name></member>
      <member refid="classnest_1_1_event_1af3f85780e2fab06dd2d934bf965dd142" prot="public" virt="virtual"><scope>nest::DataLoggingReply</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
