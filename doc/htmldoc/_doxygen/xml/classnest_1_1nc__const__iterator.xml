<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1nc__const__iterator" kind="class" language="C++" prot="public">
    <compoundname>nest::nc_const_iterator</compoundname>
    <includes refid="node__collection_8h" local="no">node_collection.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1nc__const__iterator_1ac47865cca60476c552d866b690002cc5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class NodeCollectionPrimitive</definition>
        <argsstring></argsstring>
        <name>NodeCollectionPrimitive</name>
        <param>
          <type><ref refid="classnest_1_1_node_collection_primitive" kindref="compound">NodeCollectionPrimitive</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="93" column="3" bodyfile="nestkernel/node_collection.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1nc__const__iterator_1aa936a14665d93c1d5262194da6eb6a3b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class NodeCollectionComposite</definition>
        <argsstring></argsstring>
        <name>NodeCollectionComposite</name>
        <param>
          <type><ref refid="classnest_1_1_node_collection_composite" kindref="compound">NodeCollectionComposite</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="94" column="3" bodyfile="nestkernel/node_collection.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1nc__const__iterator_1acb86cd5616aea1aa7a74a0ae4c899a1a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::nc_const_iterator::coll_ptr_</definition>
        <argsstring></argsstring>
        <name>coll_ptr_</name>
        <briefdescription>
<para>holds pointer reference in safe iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="97" column="21" bodyfile="nestkernel/node_collection.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::nc_const_iterator::element_idx_</definition>
        <argsstring></argsstring>
        <name>element_idx_</name>
        <briefdescription>
<para>index into (current) primitive node collection </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="98" column="10" bodyfile="nestkernel/node_collection.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::nc_const_iterator::part_idx_</definition>
        <argsstring></argsstring>
        <name>part_idx_</name>
        <briefdescription>
<para>index into parts vector of composite collection </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="99" column="10" bodyfile="nestkernel/node_collection.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1nc__const__iterator_1a8facb355c74899dbf61e507b5adc74d6" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::nc_const_iterator::step_</definition>
        <argsstring></argsstring>
        <name>step_</name>
        <briefdescription>
<para>step for skipping due to e.g. slicing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="100" column="10" bodyfile="nestkernel/node_collection.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_node_collection_primitive" kindref="compound">NodeCollectionPrimitive</ref> const  *const</type>
        <definition>NodeCollectionPrimitive const* const nest::nc_const_iterator::primitive_collection_</definition>
        <argsstring></argsstring>
        <name>primitive_collection_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to primitive collection to iterate over. Zero if iterator is for composite collection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="106" column="39" bodyfile="nestkernel/node_collection.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_node_collection_composite" kindref="compound">NodeCollectionComposite</ref> const  *const</type>
        <definition>NodeCollectionComposite const* const nest::nc_const_iterator::composite_collection_</definition>
        <argsstring></argsstring>
        <name>composite_collection_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to composite collection to iterate over. Zero if iterator is for primitive collection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="112" column="39" bodyfile="nestkernel/node_collection.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1aab9b6e632bf54c087e6ba5216f507062" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::nc_const_iterator::nc_const_iterator</definition>
        <argsstring>(NodeCollectionPTR collection_ptr, const NodeCollectionPrimitive &amp;collection, size_t offset, size_t step=1)</argsstring>
        <name>nc_const_iterator</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>collection_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_node_collection_primitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
          <declname>collection</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create safe iterator for <ref refid="classnest_1_1_node_collection_primitive" kindref="compound">NodeCollectionPrimitive</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>collection_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>smart pointer to collection to keep collection alive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>collection</parametername>
</parameternamelist>
<parameterdescription>
<para>Collection to iterate over </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of collection element iterator points to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Step for skipping due to e.g. slicing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="121" column="12" bodyfile="nestkernel/node_collection.cpp" bodystart="48" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1ad4a0991d2234c80f72834153ff7639b2" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::nc_const_iterator::nc_const_iterator</definition>
        <argsstring>(NodeCollectionPTR collection_ptr, const NodeCollectionComposite &amp;collection, size_t part, size_t offset, size_t step=1)</argsstring>
        <name>nc_const_iterator</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>collection_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_node_collection_composite" kindref="compound">NodeCollectionComposite</ref> &amp;</type>
          <declname>collection</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>part</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create safe iterator for <ref refid="classnest_1_1_node_collection_composite" kindref="compound">NodeCollectionComposite</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>collection_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>smart pointer to collection to keep collection alive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>collection</parametername>
</parameternamelist>
<parameterdescription>
<para>Collection to iterate over </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of part of collection iterator points to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of element in NC part that iterator points to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Step for skipping due to e.g. slicing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="134" column="12" bodyfile="nestkernel/node_collection.cpp" bodystart="67" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a9eeb7b86dc05b4280acf6e29bc2af306" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::nc_const_iterator::composite_update_indices_</definition>
        <argsstring>()</argsstring>
        <name>composite_update_indices_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conditionally update element_idx and part_idx for composite NodeCollections </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="143" column="8" bodyfile="nestkernel/node_collection.cpp" bodystart="90" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1af794a9d0659af3c180b5323750fa8037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::nc_const_iterator::nc_const_iterator</definition>
        <argsstring>(const nc_const_iterator &amp;nci)=default</argsstring>
        <name>nc_const_iterator</name>
        <param>
          <type>const <ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref> &amp;</type>
          <declname>nci</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="146" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a1490eb640a2ae6262eb5025558c03844" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::nc_const_iterator::get_current_part_offset</definition>
        <argsstring>(size_t &amp;, size_t &amp;) const</argsstring>
        <name>get_current_part_offset</name>
        <param>
          <type>size_t &amp;</type>
          <defname>part</defname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <defname>offset</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="147" column="8" bodyfile="nestkernel/node_collection.h" bodystart="680" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a4e6c5c727d55c7197afe2e8ce5b60f77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_node_i_d_triple" kindref="compound">NodeIDTriple</ref></type>
        <definition>NodeIDTriple nest::nc_const_iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="149" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1ac612caf883f6fde4cce91a79bcd14ee9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::nc_const_iterator::operator!=</definition>
        <argsstring>(const nc_const_iterator &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="150" column="8" bodyfile="nestkernel/node_collection.h" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a8c146358d65f368f87889efa5bcc4b31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::nc_const_iterator::operator&lt;</definition>
        <argsstring>(const nc_const_iterator &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="151" column="3" bodyfile="nestkernel/node_collection.h" bodystart="668" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a76fab01af8396d9241f3c7b9ddb9ea64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::nc_const_iterator::operator&lt;=</definition>
        <argsstring>(const nc_const_iterator &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="152" column="3" bodyfile="nestkernel/node_collection.h" bodystart="674" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a15ac6619abbe005f0ae4741b98369e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref> &amp;</type>
        <definition>nc_const_iterator&amp; nest::nc_const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="154" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a9c2b91078ba46e8293c3c9adf17d4cff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref> &amp;</type>
        <definition>nc_const_iterator &amp; nest::nc_const_iterator::operator+=</definition>
        <argsstring>(const size_t)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const</type>
          <declname>size_t</declname>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="155" column="21" bodyfile="nestkernel/node_collection.h" bodystart="644" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1ace4eed32c4a2fdc91949247cb9b51ee6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref></type>
        <definition>nc_const_iterator nest::nc_const_iterator::operator+</definition>
        <argsstring>(const size_t) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const</type>
          <declname>size_t</declname>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="156" column="21" bodyfile="nestkernel/node_collection.h" bodystart="655" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1nc__const__iterator_1a3a1db3f4904fbadc21cb3c65ba16d2c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::nc_const_iterator::print_me</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print_me</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/node_collection.h" line="158" column="8" bodyfile="nestkernel/node_collection.cpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Iterator for NodeCollections.</para>
<para>This iterator can iterate over primitive and composite NodeCollections. Behavior is determined by the constructor used to create the iterator. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::nc_const_iterator</label>
        <link refid="classnest_1_1nc__const__iterator"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/node_collection.h" line="91" column="1" bodyfile="nestkernel/node_collection.h" bodystart="92" bodyend="159"/>
    <listofallmembers>
      <member refid="classnest_1_1nc__const__iterator_1acb86cd5616aea1aa7a74a0ae4c899a1a" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>coll_ptr_</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>composite_collection_</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a9eeb7b86dc05b4280acf6e29bc2af306" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>composite_update_indices_</name></member>
      <member refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>element_idx_</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a1490eb640a2ae6262eb5025558c03844" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>get_current_part_offset</name></member>
      <member refid="classnest_1_1nc__const__iterator_1aab9b6e632bf54c087e6ba5216f507062" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>nc_const_iterator</name></member>
      <member refid="classnest_1_1nc__const__iterator_1ad4a0991d2234c80f72834153ff7639b2" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>nc_const_iterator</name></member>
      <member refid="classnest_1_1nc__const__iterator_1af794a9d0659af3c180b5323750fa8037" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>nc_const_iterator</name></member>
      <member refid="classnest_1_1nc__const__iterator_1aa936a14665d93c1d5262194da6eb6a3b" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>NodeCollectionComposite</name></member>
      <member refid="classnest_1_1nc__const__iterator_1ac47865cca60476c552d866b690002cc5" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>NodeCollectionPrimitive</name></member>
      <member refid="classnest_1_1nc__const__iterator_1ac612caf883f6fde4cce91a79bcd14ee9" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator!=</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a4e6c5c727d55c7197afe2e8ce5b60f77" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator*</name></member>
      <member refid="classnest_1_1nc__const__iterator_1ace4eed32c4a2fdc91949247cb9b51ee6" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator+</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a15ac6619abbe005f0ae4741b98369e18" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator++</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a9c2b91078ba46e8293c3c9adf17d4cff" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator+=</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a8c146358d65f368f87889efa5bcc4b31" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator&lt;</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a76fab01af8396d9241f3c7b9ddb9ea64" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>operator&lt;=</name></member>
      <member refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>part_idx_</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>primitive_collection_</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a3a1db3f4904fbadc21cb3c65ba16d2c5" prot="public" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>print_me</name></member>
      <member refid="classnest_1_1nc__const__iterator_1a8facb355c74899dbf61e507b5adc74d6" prot="private" virt="non-virtual"><scope>nest::nc_const_iterator</scope><name>step_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
