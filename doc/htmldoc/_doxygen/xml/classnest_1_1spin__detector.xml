<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1spin__detector" kind="class" language="C++" prot="public">
    <compoundname>nest::spin_detector</compoundname>
    <basecompoundref refid="classnest_1_1RecordingDevice" prot="public" virt="non-virtual">nest::RecordingDevice</basecompoundref>
    <includes refid="spin__detector_8h" local="no">spin_detector.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1spin__detector_1a1b17053596d4f686ecbc13a1346f86a8" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::spin_detector::last_in_node_id_</definition>
        <argsstring></argsstring>
        <name>last_in_node_id_</name>
        <qualifiedname>nest::spin_detector::last_in_node_id_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="154" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1spin__detector_1a2d212b0f60bbabc97200d73a62f39cfd" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></type>
        <definition>SpikeEvent nest::spin_detector::last_event_</definition>
        <argsstring></argsstring>
        <name>last_event_</name>
        <qualifiedname>nest::spin_detector::last_event_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="155" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1spin__detector_1a91adbd5f52c88c399f8faedff56170a3" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time nest::spin_detector::t_last_in_spike_</definition>
        <argsstring></argsstring>
        <name>t_last_in_spike_</name>
        <qualifiedname>nest::spin_detector::t_last_in_spike_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="156" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1spin__detector_1a2fcb765ab0b320794b65def14a5b6b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::spin_detector::spin_detector</definition>
        <argsstring>()</argsstring>
        <name>spin_detector</name>
        <qualifiedname>nest::spin_detector::spin_detector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="99" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1af3fda2f25289a210e572d59b20647acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::spin_detector::spin_detector</definition>
        <argsstring>(const spin_detector &amp;)</argsstring>
        <name>spin_detector</name>
        <qualifiedname>nest::spin_detector::spin_detector</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1spin__detector" kindref="compound">spin_detector</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="100" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a9cf2595fc5bf6401c8e6d295622f6dd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::spin_detector::has_proxies</definition>
        <argsstring>() const override</argsstring>
        <name>has_proxies</name>
        <qualifiedname>nest::spin_detector::has_proxies</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf">has_proxies</reimplements>
        <briefdescription>
<para>Returns true if the node has proxies on remote threads. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to discriminate between different types of nodes, when adding new nodes to the network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="103" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1abe543eb1c52192c49ece0fd2bc2ca06d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::spin_detector::local_receiver</definition>
        <argsstring>() const override</argsstring>
        <name>local_receiver</name>
        <qualifiedname>nest::spin_detector::local_receiver</qualifiedname>
        <reimplements refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2">local_receiver</reimplements>
        <briefdescription>
<para>Returns true if the node only receives events from nodes/devices on the same thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="108" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a50c19df0170a0e64aacaf4f6750c1352" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="className" kindref="compound">Name</ref></type>
        <definition>Name nest::spin_detector::get_element_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_element_type</name>
        <qualifiedname>nest::spin_detector::get_element_type</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56">get_element_type</reimplements>
        <briefdescription>
<para>Return the element type of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="className" kindref="compound">Name</ref> is a free label describing the class of network elements a node belongs to. Currently used values are &quot;neuron&quot;, &quot;recorder&quot;, &quot;stimulator&quot;, and &quot;other&quot;, which are all defined as static <ref refid="className" kindref="compound">Name</ref> objects in the names namespace. This function is overwritten with a corresponding value in the derived classes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="114" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="114" bodyend="117"/>
        <references refid="namespacenest_1_1names_1ac06afa5c1ac719fd7354600f769f8dfe" compoundref="nest__names_8h" startline="405">nest::names::recorder</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a138100077d9fbf11497d3dfd636a73fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::handle</definition>
        <argsstring>(SpikeEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="128" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="109" bodyend="163"/>
        <references refid="classnest_1_1RecordingBackend_1a5e2d33fff60f794c9bf4b78a66d544bc" compoundref="recording__backend_8h" startline="323">nest::RecordingBackend::NO_DOUBLE_VALUES</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::spin_detector::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="130" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="160" bodyend="167"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a46a470ae210fd2375d669d70001dad19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33" kindref="member">Type</ref></type>
        <definition>nest::RecordingDevice::Type nest::spin_detector::get_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_type</name>
        <qualifiedname>nest::spin_detector::get_type</qualifiedname>
        <reimplements refid="classnest_1_1RecordingDevice_1a6e4f1c6055f5aeda01bd5b51579703e5">get_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="132" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="72" bodyend="75"/>
        <references refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a7c9a979265a7db7007976fe57b6f2e42" compoundref="recording__device_8h" startline="145">nest::RecordingDevice::SPIN_DETECTOR</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1ac06bac8bec1aeb7730088b2fed9a0542" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>SignalType nest::spin_detector::receives_signal</definition>
        <argsstring>() const override</argsstring>
        <name>receives_signal</name>
        <qualifiedname>nest::spin_detector::receives_signal</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a">receives_signal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node consumes used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="133" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="170" bodyend="173"/>
        <references refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a6892450af22ccc78e1663b9f000ab084" compoundref="nest__types_8h" startline="223">nest::BINARY</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1ac6c7cf6c7b0c28505fd96695f575a72b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::spin_detector::get_status</qualifiedname>
        <reimplements refid="classnest_1_1Device_1ad04b50c499901228d9c672f8a677962e">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="135" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="78" bodyend="99"/>
        <references refid="classnest_1_1RecordingDevice_1a60b60f1790b78bdaca10bf6d30ac3930" compoundref="recording__device_8cpp" startline="177" endline="201">nest::RecordingDevice::get_status</references>
        <references refid="classnest_1_1NodeManager_1a907f84fe45e7f1317bd4e1a67f530a61" compoundref="node__manager_8cpp" startline="477" endline="493">nest::NodeManager::get_thread_siblings</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1acf81fb512b99425a8e6d6b82aecbc38a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::spin_detector::set_status</qualifiedname>
        <reimplements refid="classnest_1_1Device_1a7e7f029d1c677e8d5727fc80b103e990">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="136" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="102" bodyend="105"/>
        <references refid="classnest_1_1RecordingDevice_1a466c7b9ed8d05e9d42eed08009dc81e0" compoundref="recording__device_8cpp" startline="125" endline="174">nest::RecordingDevice::set_status</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1acbb8014280f50802ed1eb789dba52e3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::calibrate_time</definition>
        <argsstring>(const TimeConverter &amp;tc) override</argsstring>
        <name>calibrate_time</name>
        <qualifiedname>nest::spin_detector::calibrate_time</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7">calibrate_time</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1TimeConverter" kindref="compound">TimeConverter</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Re-calculate time-based properties of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called after a change in resolution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="138" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="176" bodyend="179"/>
        <references refid="classnest_1_1TimeConverter_1a6dd858c951ee0d6d846c5fc11a9eadc3" compoundref="nest__timeconverter_8cpp" startline="49" endline="57">nest::TimeConverter::from_old_tics</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::spin_detector::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="124" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::spin_detector::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="125" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1a6d7d70e46c22988d76160cc00f93127a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>virtual SignalType nest::Node::receives_signal</definition>
        <argsstring>() const</argsstring>
        <name>receives_signal</name>
        <qualifiedname>nest::spin_detector::receives_signal</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a">receives_signal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node consumes used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="126" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="769" bodyend="772"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1spin__detector_1addcfd6e7324d5ca1f9636d74d1b31abd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::init_buffers_</definition>
        <argsstring>() override</argsstring>
        <name>init_buffers_</name>
        <qualifiedname>nest::spin_detector::init_buffers_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453">init_buffers_</reimplements>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="141" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1aed2f1e3e033a7c87f00838beb0919bea" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <qualifiedname>nest::spin_detector::pre_run_hook</qualifiedname>
        <reimplements refid="classnest_1_1Device_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplements>
        <briefdescription>
<para>Set internal variables before calls to <ref refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="142" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="56" bodyend="59"/>
        <references refid="classnest_1_1RecordingBackend_1aeff21cf2021e4bbca3bb97bdbf105b42" compoundref="recording__backend_8h" startline="321">nest::RecordingBackend::NO_DOUBLE_VALUE_NAMES</references>
        <references refid="classnest_1_1RecordingDevice_1a56f87d667d7b32a2cd3f95459e424834" compoundref="device_8cpp" startline="144" endline="153">nest::RecordingDevice::pre_run_hook</references>
        <references refid="namespacenest_1_1names_1a2c7c2c6d78a38838cd53427e9f5c5ab0" compoundref="nest__names_8h" startline="449">nest::names::state</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1spin__detector_1acd1a3985a5a73299d4a3472177db9691" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::spin_detector::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <qualifiedname>nest::spin_detector::update</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Update detector by recording spikes. </para>
        </briefdescription>
        <detaileddescription>
<para>All spikes in the read_toggle() half of the spike buffer are used to detect binary states.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1RecordingDevice" kindref="compound">RecordingDevice</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="152" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.cpp" bodystart="62" bodyend="69"/>
        <references refid="classnest_1_1RecordingBackend_1a5e2d33fff60f794c9bf4b78a66d544bc" compoundref="recording__backend_8h" startline="323">nest::RecordingBackend::NO_DOUBLE_VALUES</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Spin detector class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class decodes binary states based on incoming spikes. It receives spikes via its <ref refid="classnest_1_1spin__detector_1a138100077d9fbf11497d3dfd636a73fa" kindref="member">handle(SpikeEvent&amp;)</ref> method, decodes the state, and stores them via its <ref refid="classnest_1_1RecordingDevice" kindref="compound">RecordingDevice</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>nest::Device</label>
        <link refid="classnest_1_1Device"/>
      </node>
      <node id="3">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1DeviceNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="2">
        <label>nest::RecordingDevice</label>
        <link refid="classnest_1_1RecordingDevice"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::spin_detector</label>
        <link refid="classnest_1_1spin__detector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>Datum</label>
        <link refid="classDatum"/>
        <childnode refid="20" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>action</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>Name</label>
        <link refid="className"/>
      </node>
      <node id="21">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
      <node id="20">
        <label>SLIType</label>
        <link refid="classSLIType"/>
        <childnode refid="14" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>defaultaction</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>TypedDatum&lt; slt &gt;</label>
        <link refid="classTypedDatum"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>lockPTR&lt; D &gt;</label>
        <link refid="classlockPTR"/>
      </node>
      <node id="17">
        <label>lockPTR&lt; D &gt;</label>
        <link refid="classlockPTR"/>
      </node>
      <node id="22">
        <label>lockPTRDatum&lt; D, slt &gt;</label>
        <link refid="classlockPTRDatum"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>lockPTRDatum&lt; Dictionary, &amp;SLIInterpreter::Dictionarytype &gt;</label>
        <link refid="classlockPTRDatum"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; Dictionary, &amp;SLIInterpreter::Dictionarytype &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="6">
        <label>nest::Device</label>
        <link refid="classnest_1_1Device"/>
        <childnode refid="7" relation="usage">
          <edgelabel>P_</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>V_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>nest::Device::Parameters_</label>
        <link refid="structnest_1_1Device_1_1Parameters__"/>
        <childnode refid="8" relation="usage">
          <edgelabel>origin_</edgelabel>
          <edgelabel>start_</edgelabel>
          <edgelabel>stop_</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>nest::Device::Variables_</label>
        <link refid="structnest_1_1Device_1_1Variables__"/>
      </node>
      <node id="3">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1DeviceNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>nest::Event</label>
        <link refid="classnest_1_1Event"/>
        <childnode refid="26" relation="usage">
          <edgelabel>sender_spike_data_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>receiver_</edgelabel>
          <edgelabel>sender_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>stamp_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::RecordingDevice</label>
        <link refid="classnest_1_1RecordingDevice"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>P_</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>S_</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>backend_params_</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>nest::RecordingDevice::Parameters_</label>
        <link refid="structnest_1_1RecordingDevice_1_1Parameters__"/>
        <childnode refid="14" relation="usage">
          <edgelabel>record_to_</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>nest::RecordingDevice::State_</label>
        <link refid="structnest_1_1RecordingDevice_1_1State__"/>
      </node>
      <node id="26">
        <label>nest::SpikeData</label>
        <link refid="classnest_1_1SpikeData"/>
      </node>
      <node id="24">
        <label>nest::SpikeEvent</label>
        <link refid="classnest_1_1SpikeEvent"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::Time</label>
        <link refid="classnest_1_1Time"/>
        <childnode refid="9" relation="usage">
          <edgelabel>LIM_MAX</edgelabel>
          <edgelabel>LIM_MIN</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>LIM_NEG_INF</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1Time_1_1Limit"/>
      </node>
      <node id="11">
        <label>nest::Time::LimitNegInf</label>
        <link refid="structnest_1_1Time_1_1LimitNegInf"/>
      </node>
      <node id="10">
        <label>nest::Time::LimitPosInf</label>
        <link refid="structnest_1_1Time_1_1LimitPosInf"/>
      </node>
      <node id="1">
        <label>nest::spin_detector</label>
        <link refid="classnest_1_1spin__detector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>last_event_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>t_last_in_spike_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" line="95" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/spin_detector.h" bodystart="96" bodyend="157"/>
    <listofallmembers>
      <member refid="classnest_1_1RecordingDevice_1a25fccd5c6a3eee4937e3250ff5e0eec3" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>backend_params_</name></member>
      <member refid="classnest_1_1spin__detector_1acbb8014280f50802ed1eb789dba52e3c" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1Node_1a09632867c7096c814eeceea1be42fc6b" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>clone</name></member>
      <member refid="group__SP__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>connect_synaptic_element</name></member>
      <member refid="group__SP__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Device_1aea88c464444468044c92ed53ec521334" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>Device</name></member>
      <member refid="classnest_1_1Device_1a2ff1a2fd348f7109db47e1bbac3b5ac5" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>Device</name></member>
      <member refid="classnest_1_1DeviceNode_1a528097bccee9d8364ba626c9ac573221" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>DeviceNode</name></member>
      <member refid="classnest_1_1DeviceNode_1acb8cad4e7bc743f7469fe145cbf318f0" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>DeviceNode</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::spin_detector</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_C_m</name></member>
      <member refid="group__SP__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1spin__detector_1a50c19df0170a0e64aacaf4f6750c1352" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1Node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_history</name></member>
      <member refid="classnest_1_1Node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1Node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1RecordingDevice_1a4bb1a250312df89c7b5c96907043493b" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_label</name></member>
      <member refid="classnest_1_1DeviceNode_1a170639eec44df6f43d5f9a5403959ba4" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1Device_1aa971ee0786f8fb04f3d76c65429d3d06" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_origin</name></member>
      <member refid="classnest_1_1Device_1a38b889e483489692ba03d3910167c30f" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_start</name></member>
      <member refid="classnest_1_1spin__detector_1ac6c7cf6c7b0c28505fd96695f575a72b" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::spin_detector</scope><name>get_status_dict_</name></member>
      <member refid="classnest_1_1Device_1a398741486c43d247d75ba784b6b14b1f" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_stop</name></member>
      <member refid="group__SP__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Device_1ab78b2c8c5dd25d5328790c3d2d77bc02" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_t_max_</name></member>
      <member refid="classnest_1_1Device_1a84e4ade576e165a46597963ae943b829" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_t_min_</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1spin__detector_1a46a470ae210fd2375d669d70001dad19" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_type</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>get_vp</name></member>
      <member refid="classnest_1_1spin__detector_1a138100077d9fbf11497d3dfd636a73fa" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1ae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1adef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handle</name></member>
      <member refid="classnest_1_1spin__detector_1ab74985da6724c00684b26f0d0e1c9768" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1spin__detector_1a9cf2595fc5bf6401c8e6d295622f6dd2" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>init</name></member>
      <member refid="classnest_1_1Device_1aac3d7dd71fd9f86cd8306b2faeefa6a0" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>init_buffers</name></member>
      <member refid="classnest_1_1spin__detector_1addcfd6e7324d5ca1f9636d74d1b31abd" prot="private" virt="virtual"><scope>nest::spin_detector</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1Device_1acfb7d327f43c0bcf3c86920b188c5830" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>init_state</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::spin_detector</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>initialized_</name></member>
      <member refid="classnest_1_1RecordingDevice_1afbc0cc70ae3ba2eff8a0d765aa59adb5" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>is_active</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1spin__detector_1a2d212b0f60bbabc97200d73a62f39cfd" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>last_event_</name></member>
      <member refid="classnest_1_1spin__detector_1a1b17053596d4f686ecbc13a1346f86a8" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>last_in_node_id_</name></member>
      <member refid="classnest_1_1DeviceNode_1aa345406ceab967b0dd50907ac380747c" prot="protected" virt="non-virtual"><scope>nest::spin_detector</scope><name>local_device_id_</name></member>
      <member refid="classnest_1_1spin__detector_1abe543eb1c52192c49ece0fd2bc2ca06d" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>model_id_</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a4f56e4007d9f3ea3fe582738727ec24c" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>MULTIMETER</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a4b28c19bfaa4ac475f5248389ed911e6" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>operator=</name></member>
      <member refid="classnest_1_1RecordingDevice_1aa5b9b08f6ee49f4f127761b4ec1eb4a9" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>P_</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1spin__detector_1aed2f1e3e033a7c87f00838beb0919bea" prot="private" virt="virtual"><scope>nest::spin_detector</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1RecordingDevice_1a2d1416e38bec46975b4b79ba2e042fed" prot="public" virt="non-virtual" ambiguityscope="nest::RecordingDevice::"><scope>nest::spin_detector</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>print_network</name></member>
      <member refid="classnest_1_1spin__detector_1ac06bac8bec1aeb7730088b2fed9a0542" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1spin__detector_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1RecordingDevice_1ad53e191fdc3d060ffba1345ffc077df1" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>RecordingDevice</name></member>
      <member refid="classnest_1_1RecordingDevice_1a18449921045976fc3bb3c63677515ad8" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>RecordingDevice</name></member>
      <member refid="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1RecordingDevice_1ad59ad8688c8df49b3665044ed0fc8b96" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>S_</name></member>
      <member refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1RecordingDevice_1ab77a88eadcacbb992e706e55aa88627a" prot="protected" virt="virtual"><scope>nest::spin_detector</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1DeviceNode_1a8c8b80f5be38584cb4b36a18a2977772" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1spin__detector_1acf81fb512b99425a8e6d6b82aecbc38a" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>set_vp</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a778e708f1fcba2df5abe761ce5d5a0a7" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>SPIKE_RECORDER</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33a7c9a979265a7db7007976fe57b6f2e42" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>SPIN_DETECTOR</name></member>
      <member refid="classnest_1_1spin__detector_1a2fcb765ab0b320794b65def14a5b6b54" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>spin_detector</name></member>
      <member refid="classnest_1_1spin__detector_1af3fda2f25289a210e572d59b20647acb" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>spin_detector</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1spin__detector_1a91adbd5f52c88c399f8faedff56170a3" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>t_last_in_spike_</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>Type</name></member>
      <member refid="classnest_1_1spin__detector_1acd1a3985a5a73299d4a3472177db9691" prot="private" virt="virtual"><scope>nest::spin_detector</scope><name>update</name></member>
      <member refid="group__SP__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1Device_1aba9db825c8f7e3631f8baf67f69a3beb" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>V_</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::spin_detector</scope><name>vp_</name></member>
      <member refid="classnest_1_1RecordingDevice_1af47db1b7d4b4301d53bffb71bd26ea33af51c666ce117b58b1c233f5cbbd1afe8" prot="public" virt="non-virtual"><scope>nest::spin_detector</scope><name>WEIGHT_RECORDER</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1RecordingDevice_1a79b4d2540dc042282d81d1e7d41fdf81" prot="protected" virt="non-virtual"><scope>nest::spin_detector</scope><name>write</name></member>
      <member refid="classnest_1_1Device_1adabaff79bdfe01d0986f94241bcbd027" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>~Device</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::spin_detector</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
