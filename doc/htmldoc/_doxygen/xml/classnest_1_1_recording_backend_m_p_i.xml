<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_recording_backend_m_p_i" kind="class" language="C++" prot="public">
    <compoundname>nest::RecordingBackendMPI</compoundname>
    <basecompoundref refid="classnest_1_1_recording_backend" prot="public" virt="non-virtual">nest::RecordingBackend</basecompoundref>
    <includes refid="recording__backend__mpi_8h" local="no">recording_backend_mpi.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnest_1_1_recording_backend_m_p_i_1a0fa783d91bbba306d7e92fbafd2204c4" prot="private" static="no">
        <type>std::vector&lt; std::map&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref>, std::tuple&lt; int, MPI_Comm *, const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> * &gt; &gt; &gt;</type>
        <definition>typedef std::vector&lt; std::map&lt; index, std::tuple&lt; int, MPI_Comm*, const RecordingDevice* &gt; &gt; &gt; nest::RecordingBackendMPI::device_map</definition>
        <argsstring></argsstring>
        <name>device_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A map for the enrolled devices. We have a vector with one map per local thread. The map associates the node ID of a device on a given thread with its MPI index and device. Only the master thread has a valid MPI communicator pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="154" column="23" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_recording_backend_m_p_i_1a64afa69e40fe2971a03b79078b921b85" prot="private" static="no">
        <type>std::map&lt; std::string, std::tuple&lt; int, MPI_Comm *, int &gt; &gt;</type>
        <definition>typedef std::map&lt; std::string, std::tuple&lt; int, MPI_Comm*, int &gt; &gt; nest::RecordingBackendMPI::comm_map</definition>
        <argsstring></argsstring>
        <name>comm_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A map of MPI communicators used by the master thread for the MPI communication. The values of the map are tuples containing the index of the MPI communicator, the MPI communicator itself, and the number of devices linked to that MPI communicator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="163" column="20" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_recording_backend_m_p_i_1a73e18f094b15baddfa71ead6cdbd6149" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::RecordingBackendMPI::enrolled_</definition>
        <argsstring></argsstring>
        <name>enrolled_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="136" column="8" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_recording_backend_m_p_i_1a09d2e71bafb1c12531ddcdf013862e1e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::RecordingBackendMPI::prepared_</definition>
        <argsstring></argsstring>
        <name>prepared_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="137" column="8" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_recording_backend_m_p_i_1a34693d82b12053b3a73bd4b47ac969c7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; std::array&lt; double, 3 &gt; &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::vector&lt; std::array&lt; double, 3 &gt; &gt; &gt; &gt; nest::RecordingBackendMPI::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Buffer for saving events before they are sent. The buffer has 3 dimensions: thread_id, MPI_communicator_index and number of events elements. The events elements are described as an array with three components: id of device, id of neurons and data ( one double ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="146" column="15" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_recording_backend_m_p_i_1a0228c90455dbd1ceae6ce036421aa8ab" prot="private" static="no" mutable="no">
        <type>device_map</type>
        <definition>device_map nest::RecordingBackendMPI::devices_</definition>
        <argsstring></argsstring>
        <name>devices_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="155" column="14" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_recording_backend_m_p_i_1af2632c9172dcf6501d1e7bc289942583" prot="private" static="no" mutable="no">
        <type>comm_map</type>
        <definition>comm_map nest::RecordingBackendMPI::commMap_</definition>
        <argsstring></argsstring>
        <name>commMap_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="164" column="12" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a1f957ff079992f1ceeaf75fb32a67db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RecordingBackendMPI::RecordingBackendMPI</definition>
        <argsstring>()</argsstring>
        <name>RecordingBackendMPI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="101" column="3" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a8b7f02b299c9681373cfdc8de5c3a617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RecordingBackendMPI::~RecordingBackendMPI</definition>
        <argsstring>()</argsstring>
        <name>~RecordingBackendMPI</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="102" column="3" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a0fcdcb78829faf69e47fa9dac76f29bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1_recording_backend_1afea5fb11d197500a3c8b2a92159eb84a">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="104" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1ac7a47988eeb34f8bcd517f773480fa01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1_recording_backend_1aecc10d169c8c316339a42729687f2a79">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="105" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1aca238fd90a38083e517640f7b36d23cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::enroll</definition>
        <argsstring>(const RecordingDevice &amp;device, const DictionaryDatum &amp;params) override</argsstring>
        <name>enroll</name>
        <reimplements refid="classnest_1_1_recording_backend_1a1462573b81e625e6cae0acda2a4e80c9">enroll</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enroll a <computeroutput><ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref></computeroutput> with the <computeroutput><ref refid="classnest_1_1_recording_backend" kindref="compound">RecordingBackend</ref></computeroutput>.</para>
<para>When this function is called by a <computeroutput><ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref></computeroutput> <computeroutput>device</computeroutput>, the <computeroutput><ref refid="classnest_1_1_recording_backend" kindref="compound">RecordingBackend</ref></computeroutput> can set up per-device data structures and properties. Individual device instances can be identified using the <computeroutput>thread</computeroutput> and <computeroutput>node_id</computeroutput> of the <computeroutput>device</computeroutput>.</para>
<para>This function is called from the set_initialized_() function of the <computeroutput>device</computeroutput> and their <ref refid="classnest_1_1_recording_backend_m_p_i_1a5c9a9b23df5ff2423cf94d81b32d0d41" kindref="member">set_status()</ref> function. The companion function <computeroutput><ref refid="classnest_1_1_recording_backend_m_p_i_1ac724027e289f2afd907701fed5b131fa" kindref="member">set_value_names()</ref></computeroutput> is called from <ref refid="classnest_1_1_node_1ad51550af656588536bcdf5afecdbf788" kindref="member">Node::pre_run_hook()</ref> and makes the names of values to be recorded known.</para>
<para>A backend needs to be able to cope with multiple calls to this function, as multiple calls to <ref refid="classnest_1_1_recording_backend_m_p_i_1a5c9a9b23df5ff2423cf94d81b32d0d41" kindref="member">set_status()</ref> may occur on the <computeroutput>device</computeroutput>. For already enrolled devices this usually means that only the parameters in <computeroutput>params</computeroutput> have to be set, but no further actions are needed.</para>
<para>Each recording backend must ensure that enrollment (including all settings made by the user) is persistent over multiple calls to Prepare, while the enrollment of all devices should end with a call to <ref refid="classnest_1_1_recording_backend_m_p_i_1ac7a47988eeb34f8bcd517f773480fa01" kindref="member">finalize()</ref>.</para>
<para>A common implementation of this function will create an entry in a thread-local map, associating the device&apos;s node ID with the device-specific backend properties and an output facility of some kind.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> to be enrolled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>device-specific backend parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1ac724027e289f2afd907701fed5b131fa" kindref="member">set_value_names()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1aa7ca898f0079c2380631ce812f20dcdf" kindref="member">disenroll()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1a66706a8e4259b49223922d02a3b6d12e" kindref="member">write()</ref>, </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="107" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="72" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1aa7ca898f0079c2380631ce812f20dcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::disenroll</definition>
        <argsstring>(const RecordingDevice &amp;device) override</argsstring>
        <name>disenroll</name>
        <reimplements refid="classnest_1_1_recording_backend_1ac820e6f3fbfe275c32649336194f5151">disenroll</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disenroll a <computeroutput><ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref></computeroutput> from the <computeroutput><ref refid="classnest_1_1_recording_backend" kindref="compound">RecordingBackend</ref></computeroutput>.</para>
<para>This function is considered to be the opposite of <ref refid="classnest_1_1_recording_backend_m_p_i_1aca238fd90a38083e517640f7b36d23cf" kindref="member">enroll()</ref> in the sense that it cancels the enrollment of a <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> from a <ref refid="classnest_1_1_recording_backend" kindref="compound">RecordingBackend</ref> by deleting all device specific data. When setting a new recording backend for a recording device, this function is called for each backend the device is not enrolled with.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> to be disenrolled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1aca238fd90a38083e517640f7b36d23cf" kindref="member">enroll()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="109" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1ac724027e289f2afd907701fed5b131fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::set_value_names</definition>
        <argsstring>(const RecordingDevice &amp;device, const std::vector&lt; Name &gt; &amp;double_value_names, const std::vector&lt; Name &gt; &amp;long_value_names) override</argsstring>
        <name>set_value_names</name>
        <reimplements refid="classnest_1_1_recording_backend_1a9ff4b28195fd3a1e1c82e75084cfe396">set_value_names</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const std::vector&lt; Name &gt; &amp;</type>
          <declname>double_value_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; Name &gt; &amp;</type>
          <declname>long_value_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To make the names of recorded quantities known to the <computeroutput><ref refid="classnest_1_1_recording_backend" kindref="compound">RecordingBackend</ref></computeroutput>, the vectors <computeroutput>double_value_names</computeroutput> and <computeroutput>long_value_names</computeroutput> can be set appropriately. If no values of a certain type (or none at all) will be recorded by <computeroutput>device</computeroutput>, the constants <ref refid="classnest_1_1_recording_backend_1aeff21cf2021e4bbca3bb97bdbf105b42" kindref="member">NO_DOUBLE_VALUE_NAMES</ref> and <ref refid="classnest_1_1_recording_backend_1aff668c3a4fbfca1219efbe740d69a8d4" kindref="member">NO_LONG_VALUE_NAMES</ref> can be used. Please note that the lengths of the value names vectors <emphasis>must</emphasis> correspond to the length of the data vectors written during calls to <computeroutput><ref refid="classnest_1_1_recording_backend_m_p_i_1a66706a8e4259b49223922d02a3b6d12e" kindref="member">write()</ref></computeroutput>, although this is not enforced by the API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device to set the value names for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>double_value_names</parametername>
</parameternamelist>
<parameterdescription>
<para>the names for double values to be recorded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long_value_names</parametername>
</parameternamelist>
<parameterdescription>
<para>the names for long values to be recorded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1aca238fd90a38083e517640f7b36d23cf" kindref="member">enroll()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1aa7ca898f0079c2380631ce812f20dcdf" kindref="member">disenroll()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1a66706a8e4259b49223922d02a3b6d12e" kindref="member">write()</ref>, </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="111" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1af08f3f771cef6363f8b4be4dc84992fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::cleanup</definition>
        <argsstring>() override</argsstring>
        <name>cleanup</name>
        <reimplements refid="classnest_1_1_recording_backend_1a9df790a3a7bef137ca6e8ed1406685d3">cleanup</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clean up the backend at the end of a user level call to the NEST Simulate function.</para>
<para>This function is called by <computeroutput><ref refid="classnest_1_1_simulation_manager_1af2d373b936e4d432a688a78af29be0ce" kindref="member">SimulationManager::cleanup()</ref></computeroutput> and allows the backend to close open files or network connections or take similar action.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1a15529b16af1c77a4333fc5dda5220e38" kindref="member">prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="115" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="268" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a15529b16af1c77a4333fc5dda5220e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::prepare</definition>
        <argsstring>() override</argsstring>
        <name>prepare</name>
        <reimplements refid="classnest_1_1_recording_backend_1ac85dde69420fc2482b77683955a72ecb">prepare</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare the backend at begin of the NEST Simulate function.</para>
<para>This function is called by <computeroutput><ref refid="classnest_1_1_kernel_manager_1aa04eacfced16ba64667115aea94ff79a" kindref="member">KernelManager::prepare()</ref></computeroutput> and allows the backend to open files or establish network connections or take similar action.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1af08f3f771cef6363f8b4be4dc84992fa" kindref="member">cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="117" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="117" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a66706a8e4259b49223922d02a3b6d12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::write</definition>
        <argsstring>(const RecordingDevice &amp;, const Event &amp;, const std::vector&lt; double &gt; &amp;, const std::vector&lt; long &gt; &amp;) override</argsstring>
        <name>write</name>
        <reimplements refid="classnest_1_1_recording_backend_1a930dda24c880fbe74509016c351b796a">write</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>double_values</declname>
        </param>
        <param>
          <type>const std::vector&lt; long &gt; &amp;</type>
          <declname>long_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the data from the event to the backend specific channel together with the values given.</para>
<para>This function needs to respect the time_in_steps property of the device and should return as quickly as possible if the <computeroutput><ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref></computeroutput> <computeroutput>device</computeroutput> is not enrolled with the backend.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref>, backend-specific channel to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>double_values</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of double valued to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long_values</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of long values to be written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="119" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="319" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a5c9a9b23df5ff2423cf94d81b32d0d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_recording_backend_1ac294b26457928c8b82041926c5d317ff">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the status of the recording backend using the key-value pairs contained in the params dictionary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the status of the recording backend</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1ac306cf8443090e39916032cbd7803f2f" kindref="member">get_status()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="121" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1ac306cf8443090e39916032cbd7803f2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_recording_backend_1aa09ea03bc4c94ae1ecaf2019e151b74b">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the status of the recording backend by writing it to the given params dictionary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the status of the recording backend</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1a5c9a9b23df5ff2423cf94d81b32d0d41" kindref="member">set_status()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="123" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a7acfbdb39b2f3b4c279a610ca78239c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1_recording_backend_1a41bfbf56b3272217d511eeea968ab6f1">pre_run_hook</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize global backend-specific data structures.</para>
<para>This function is called on each backend right at the very beginning of <computeroutput><ref refid="classnest_1_1_simulation_manager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref></computeroutput>. It can be used for initializations which have to be repeated at the beginning of every single call to run in a prepare-run-run-...-run-run-cleanup sequence.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1ab4716e0fe1d7185149dd878795083d47" kindref="member">post_run_hook()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="125" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="203" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1ab4716e0fe1d7185149dd878795083d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::post_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>post_run_hook</name>
        <reimplements refid="classnest_1_1_recording_backend_1a1659f4599e18c7f9bb2f2b2a0748c3dd">post_run_hook</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clean up the backend at the end of a Run.</para>
<para>This is called right before <computeroutput><ref refid="classnest_1_1_simulation_manager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref></computeroutput> terminates. It allows the backend to flush open files, write remaining data to the screen, or perform similar operations that make sure that the user has access to all data from the previous simulation run.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1a7acfbdb39b2f3b4c279a610ca78239c4" kindref="member">pre_run_hook()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="127" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="224" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1acfb3cad5eccb54776a2c7ff33771708a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::post_step_hook</definition>
        <argsstring>() override</argsstring>
        <name>post_step_hook</name>
        <reimplements refid="classnest_1_1_recording_backend_1ac353f6544c4d1fd4328fa45ae8e840e9">post_step_hook</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Do work required at the end of each simulation step.</para>
<para>This is called at the very end of each simulation step. It can for example be used to carry out writing to files in a synchronized way, all threads on all MPI processes performing it at the same time.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1a7acfbdb39b2f3b4c279a610ca78239c4" kindref="member">pre_run_hook()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="129" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a51e8770de46db69a26f05ef642bd3508" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::check_device_status</definition>
        <argsstring>(const DictionaryDatum &amp;) const override</argsstring>
        <name>check_device_status</name>
        <reimplements refid="classnest_1_1_recording_backend_1ad6f15d31003ff10e147519d781fdf56e">check_device_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the given per-device properties are valid and usable by the backend.</para>
<para>This function is used to validate properties when SetDefaults is called on a recording device. If the properties are found to be valid, they will be cached in the recording device and set for individual instances by means of the call to enroll from the device&apos;s set_initialized_() function. In case the properties are invalid, this function is expected to throw <ref refid="classnest_1_1_bad_property" kindref="compound">BadProperty</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameter dictionary to validate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1a4391b8d7e19bb999a00f41162d898d60" kindref="member">get_device_defaults()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1a8e9e1b3b5b44b09ed744fc5177581ccb" kindref="member">get_device_status()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="131" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a4391b8d7e19bb999a00f41162d898d60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::get_device_defaults</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_device_defaults</name>
        <reimplements refid="classnest_1_1_recording_backend_1a1552641c8605ca75b8c8ae960902f06a">get_device_defaults</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the per-device defaults by writing it to the given params dictionary.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the dictionary to add device-specific backend parameters to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1a51e8770de46db69a26f05ef642bd3508" kindref="member">check_device_status()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1a8e9e1b3b5b44b09ed744fc5177581ccb" kindref="member">get_device_status()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="132" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a8e9e1b3b5b44b09ed744fc5177581ccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::get_device_status</definition>
        <argsstring>(const RecordingDevice &amp;device, DictionaryDatum &amp;params_dictionary) const override</argsstring>
        <name>get_device_status</name>
        <reimplements refid="classnest_1_1_recording_backend_1ae00920960a524518414a31e3fafc5d21">get_device_status</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the per-device status of the given recording device by writing it to the given params dictionary.</para>
<para>Please note that a corresponding setter function does not exist. Device-specific backend parameters are given in the call to enroll.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the recording device for which the status is returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the dictionary to add device-specific backend parameters to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_recording_backend_m_p_i_1aca238fd90a38083e517640f7b36d23cf" kindref="member">enroll()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1a51e8770de46db69a26f05ef642bd3508" kindref="member">check_device_status()</ref>, <ref refid="classnest_1_1_recording_backend_m_p_i_1a4391b8d7e19bb999a00f41162d898d60" kindref="member">get_device_defaults()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="133" column="8" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a1b4167e8f8555d8cf06b59429d72425d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::get_port</definition>
        <argsstring>(const RecordingDevice *device, std::string *port_name)</argsstring>
        <name>get_port</name>
        <param>
          <type>const <ref refid="classnest_1_1_recording_device" kindref="compound">RecordingDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>port_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="166" column="15" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1ab513bfa6fb5e91f64f5823081810949e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::get_port</definition>
        <argsstring>(index index_node, const std::string &amp;label, std::string *port_name)</argsstring>
        <name>get_port</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>index_node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>port_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="167" column="15" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="364" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_recording_backend_m_p_i_1a9bd027144498303d84e24ba6385c4bb3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::RecordingBackendMPI::send_data</definition>
        <argsstring>(const MPI_Comm *comm, const double data[], int size)</argsstring>
        <name>send_data</name>
        <param>
          <type>const MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/recording_backend_mpi.h" line="168" column="15" bodyfile="nestkernel/recording_backend_mpi.cpp" bodystart="396" bodyend="403"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A recording backend for sending information with MPI. Communication protocol diagram: <image type="html" name="MPI_backend_protocol_of_communication.svg"></image>
 General state machine diagram of NEST communication with the MPI backend: <image type="html" name="MPI_backend_state_Nest.svg"></image>
 Example of state machine diagram for the communication with NEST: <image type="html" name="MPI_backend_example_state_machine_communication_with_Nest.svg"></image>
 </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::RecordingBackendMPI</label>
        <link refid="classnest_1_1_recording_backend_m_p_i"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::RecordingBackend</label>
        <link refid="classnest_1_1_recording_backend"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::RecordingBackendMPI</label>
        <link refid="classnest_1_1_recording_backend_m_p_i"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::RecordingBackend</label>
        <link refid="classnest_1_1_recording_backend"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/recording_backend_mpi.h" line="98" column="1" bodyfile="nestkernel/recording_backend_mpi.h" bodystart="99" bodyend="169"/>
    <listofallmembers>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a34693d82b12053b3a73bd4b47ac969c7" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>buffer_</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a51e8770de46db69a26f05ef642bd3508" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>check_device_status</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1af08f3f771cef6363f8b4be4dc84992fa" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>cleanup</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a64afa69e40fe2971a03b79078b921b85" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>comm_map</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1af2632c9172dcf6501d1e7bc289942583" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>commMap_</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a0fa783d91bbba306d7e92fbafd2204c4" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>device_map</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a0228c90455dbd1ceae6ce036421aa8ab" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>devices_</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1aa7ca898f0079c2380631ce812f20dcdf" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>disenroll</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1aca238fd90a38083e517640f7b36d23cf" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>enroll</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a73e18f094b15baddfa71ead6cdbd6149" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>enrolled_</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1ac7a47988eeb34f8bcd517f773480fa01" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>finalize</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a4391b8d7e19bb999a00f41162d898d60" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>get_device_defaults</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a8e9e1b3b5b44b09ed744fc5177581ccb" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>get_device_status</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a1b4167e8f8555d8cf06b59429d72425d" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>get_port</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1ab513bfa6fb5e91f64f5823081810949e" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>get_port</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1ac306cf8443090e39916032cbd7803f2f" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>get_status</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a0fcdcb78829faf69e47fa9dac76f29bc" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>initialize</name></member>
      <member refid="classnest_1_1_recording_backend_1aeff21cf2021e4bbca3bb97bdbf105b42" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>NO_DOUBLE_VALUE_NAMES</name></member>
      <member refid="classnest_1_1_recording_backend_1a5e2d33fff60f794c9bf4b78a66d544bc" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>NO_DOUBLE_VALUES</name></member>
      <member refid="classnest_1_1_recording_backend_1aff668c3a4fbfca1219efbe740d69a8d4" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>NO_LONG_VALUE_NAMES</name></member>
      <member refid="classnest_1_1_recording_backend_1a6881478b0e2f8b699f6af4457459c571" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>NO_LONG_VALUES</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1ab4716e0fe1d7185149dd878795083d47" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>post_run_hook</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1acfb3cad5eccb54776a2c7ff33771708a" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>post_step_hook</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a7acfbdb39b2f3b4c279a610ca78239c4" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a15529b16af1c77a4333fc5dda5220e38" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>prepare</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a09d2e71bafb1c12531ddcdf013862e1e" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>prepared_</name></member>
      <member refid="classnest_1_1_recording_backend_1a06c31da0c6062cfc1a82a5a2be73d221" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>RecordingBackend</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a1f957ff079992f1ceeaf75fb32a67db4" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>RecordingBackendMPI</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a9bd027144498303d84e24ba6385c4bb3" prot="private" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>send_data</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a5c9a9b23df5ff2423cf94d81b32d0d41" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>set_status</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1ac724027e289f2afd907701fed5b131fa" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>set_value_names</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a66706a8e4259b49223922d02a3b6d12e" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>write</name></member>
      <member refid="classnest_1_1_recording_backend_1a5e9b823652be8a8eca58c421e9bbbc9b" prot="public" virt="virtual"><scope>nest::RecordingBackendMPI</scope><name>~RecordingBackend</name></member>
      <member refid="classnest_1_1_recording_backend_m_p_i_1a8b7f02b299c9681373cfdc8de5c3a617" prot="public" virt="non-virtual"><scope>nest::RecordingBackendMPI</scope><name>~RecordingBackendMPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
