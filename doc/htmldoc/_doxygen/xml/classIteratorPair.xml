<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classIteratorPair" kind="class" language="C++" prot="public">
    <compoundname>IteratorPair</compoundname>
    <basecompoundref prot="public" virt="non-virtual">boost::iterator_facade&lt; IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::value_type, std::random_access_iterator_tag, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type &gt;</basecompoundref>
    <includes refid="iterator__pair_8h" local="no">iterator_pair.h</includes>
    <templateparamlist>
      <param>
        <type>typename sort_iter_type_</type>
      </param>
      <param>
        <type>typename perm_iter_type_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classIteratorPair_1ac09f73e325921cc50ebcd96bed0f8096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class boost::iterator_core_access</definition>
        <argsstring></argsstring>
        <name>boost::iterator_core_access</name>
        <param>
          <type>boost::iterator_core_access</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="103" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classIteratorPair_1a12e89209da2412f4a9523c2936dbd092" prot="private" static="no" mutable="no">
        <type>sort_iter_type_</type>
        <definition>sort_iter_type_ IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::sort_iter_</definition>
        <argsstring></argsstring>
        <name>sort_iter_</name>
        <briefdescription>
<para>Iterator of the container being sorted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="106" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classIteratorPair_1a13467d96d0bfc82b60a7d7e212f5661b" prot="private" static="no" mutable="no">
        <type>perm_iter_type_</type>
        <definition>perm_iter_type_ IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::perm_iter_</definition>
        <argsstring></argsstring>
        <name>perm_iter_</name>
        <briefdescription>
<para>Iterator of the container being permuted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="108" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classIteratorPair_1ac723216dd445b13d0ed0d4c8cdd18878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::IteratorPair</definition>
        <argsstring>()=default</argsstring>
        <name>IteratorPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="99" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classIteratorPair_1a9a1e93eef0a8b2a5863b614af84b5a67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::IteratorPair</definition>
        <argsstring>(sort_iter_type_, perm_iter_type_)</argsstring>
        <name>IteratorPair</name>
        <param>
          <type>sort_iter_type_</type>
          <defname>sort_iter</defname>
        </param>
        <param>
          <type>perm_iter_type_</type>
          <defname>perm_iter</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="100" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="181" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classIteratorPair_1ac2cf5ca02b556683e8417532b417dd35" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::increment</definition>
        <argsstring>()</argsstring>
        <name>increment</name>
        <briefdescription>
<para>Advance by one position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="116" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classIteratorPair_1a06e93fcd4d290f1ef439000a945656e0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::decrement</definition>
        <argsstring>()</argsstring>
        <name>decrement</name>
        <briefdescription>
<para>Retreat by one position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="121" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classIteratorPair_1a79f316416f39664780b25bcee5c24226" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::equal</definition>
        <argsstring>(IteratorPair const &amp;) const</argsstring>
        <name>equal</name>
        <param>
          <type><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Compare for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="126" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="206" bodyend="209"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classIteratorPair_1a1c1523279dee6276b0926d4c22cd187a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::advance</definition>
        <argsstring>(typename iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type)</argsstring>
        <name>advance</name>
        <param>
          <type>typename <ref refid="structiterator__pair__types" kindref="compound">iterator_pair_types</ref>&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Advance by a number of positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="131" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="213" bodyend="218"/>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
      </memberdef>
      <memberdef kind="function" id="classIteratorPair_1a3e2bc550fbfc57d4a357e079dcfb385c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structiterator__pair__types" kindref="compound">iterator_pair_types</ref>&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type</type>
        <definition>iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
<para>Access the value referred to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boost::tuple with two values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="137" column="43" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classIteratorPair_1a2a8510c2853a750ac21632cc6e0c64f2" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structiterator__pair__types" kindref="compound">iterator_pair_types</ref>&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type</type>
        <definition>iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::distance_to</definition>
        <argsstring>(IteratorPair const &amp;) const</argsstring>
        <name>distance_to</name>
        <param>
          <type><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref> const &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Measure the distance to another iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="142" column="50" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="229" bodyend="232"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A combinator of two iterators that can be used to apply permutations on a second container when sorting the first. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>sort_iter_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator type of the container being sorted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm_iter_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator type of the container being permuted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;</label>
        <link refid="classIteratorPair"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>boost::iterator_facade&lt; IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::value_type, std::random_access_iterator_tag, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;</label>
        <link refid="classIteratorPair"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>boost::iterator_facade&lt; IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::value_type, std::random_access_iterator_tag, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type, iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="92" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="97" bodyend="144"/>
    <listofallmembers>
      <member refid="classIteratorPair_1a1c1523279dee6276b0926d4c22cd187a" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>advance</name></member>
      <member refid="classIteratorPair_1ac09f73e325921cc50ebcd96bed0f8096" prot="public" virt="non-virtual"><scope>IteratorPair</scope><name>boost::iterator_core_access</name></member>
      <member refid="classIteratorPair_1a06e93fcd4d290f1ef439000a945656e0" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>decrement</name></member>
      <member refid="classIteratorPair_1a3e2bc550fbfc57d4a357e079dcfb385c" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>dereference</name></member>
      <member refid="classIteratorPair_1a2a8510c2853a750ac21632cc6e0c64f2" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>distance_to</name></member>
      <member refid="classIteratorPair_1a79f316416f39664780b25bcee5c24226" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>equal</name></member>
      <member refid="classIteratorPair_1ac2cf5ca02b556683e8417532b417dd35" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>increment</name></member>
      <member refid="classIteratorPair_1ac723216dd445b13d0ed0d4c8cdd18878" prot="public" virt="non-virtual"><scope>IteratorPair</scope><name>IteratorPair</name></member>
      <member refid="classIteratorPair_1a9a1e93eef0a8b2a5863b614af84b5a67" prot="public" virt="non-virtual"><scope>IteratorPair</scope><name>IteratorPair</name></member>
      <member refid="classIteratorPair_1a13467d96d0bfc82b60a7d7e212f5661b" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>perm_iter_</name></member>
      <member refid="classIteratorPair_1a12e89209da2412f4a9523c2936dbd092" prot="private" virt="non-virtual"><scope>IteratorPair</scope><name>sort_iter_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
