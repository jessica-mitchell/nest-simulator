<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="sinusoidal__gamma__generator_8cpp" kind="file" language="C++">
    <compoundname>sinusoidal_gamma_generator.cpp</compoundname>
    <includes refid="sinusoidal__gamma__generator_8h" local="yes">sinusoidal_gamma_generator.h</includes>
    <incdepgraph>
      <node id="1">
        <label>sinusoidal_gamma_generator.cpp</label>
        <link refid="sinusoidal__gamma__generator_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sinusoidal_gamma_generator.h</label>
        <link refid="sinusoidal__gamma__generator_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>sinusoidal_gamma_generator.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sinusoidal__gamma__generator_8h" kindref="compound">sinusoidal_gamma_generator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>External<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl_sf_gamma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>libnestutil:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__util_8h" kindref="compound">dict_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="numerics_8h" kindref="compound">numerics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="event__delivery__manager__impl_8h" kindref="compound">event_delivery_manager_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exceptions_8h" kindref="compound">exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="universal__data__logger__impl_8h" kindref="compound">universal_data_logger_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;booldatum.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dict.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dictutils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doubledatum.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenest" kindref="compound">nest</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">RecordablesMap&lt;<sp/>sinusoidal_gamma_generator<sp/>&gt;<sp/>sinusoidal_gamma_generator::recordablesMap_;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classnest_1_1RecordablesMap_1a303b1d32c8f72ab936b4afe76bca9588" kindref="member">RecordablesMap&lt; sinusoidal_gamma_generator &gt;::create</ref>()</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>insert_(<sp/><ref refid="namespacenest_1_1names_1a3789ad4b8875f756eea3a5234dbc1269" kindref="member">names::rate</ref>,<sp/>&amp;sinusoidal_gamma_generator::get_rate_<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">nest::sinusoidal_gamma_generator::Parameters_::Parameters_()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>:<sp/>om_(<sp/>0.0<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>radian/ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>,<sp/>phi_(<sp/>0.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>radian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>,<sp/>order_(<sp/>1.0<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>,<sp/>rate_(<sp/>0.0<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spikes/ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>,<sp/>amplitude_(<sp/>0.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>spikes/ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>,<sp/>individual_spike_trains_(<sp/>true<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>,<sp/>num_trains_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">nest::sinusoidal_gamma_generator::Parameters_::Parameters_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref><sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>:<sp/>om_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.om_<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>,<sp/>phi_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.phi_<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>,<sp/>order_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.order_<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>,<sp/>rate_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.rate_<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>,<sp/>amplitude_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.amplitude_<sp/>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>,<sp/>individual_spike_trains_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.individual_spike_trains_<sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>,<sp/>num_trains_(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.num_trains_<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">nest::sinusoidal_gamma_generator::Parameters_&amp;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">nest::sinusoidal_gamma_generator::Parameters_::operator=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref><sp/>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;<ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref><sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>om_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.om_;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>phi_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.phi_;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>order_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.order_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>rate_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.rate_;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>amplitude_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.amplitude_;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>individual_spike_trains_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.individual_spike_trains_;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>num_trains_<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.num_trains_;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">nest::sinusoidal_gamma_generator::State_::State_()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>:<sp/>rate_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">nest::sinusoidal_gamma_generator::Buffers_::Buffers_(<sp/>sinusoidal_gamma_generator&amp;<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>,<sp/>t0_ms_()</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>,<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>set<sp/>in<sp/>init_buffers_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Lambda_t0_()</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>set<sp/>in<sp/>init_buffers_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>P_prev_(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref>.P_<sp/>)<sp/></highlight><highlight class="comment">//<sp/>when<sp/>creating<sp/>Buffer,<sp/>base<sp/>on<sp/>current<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">nest::sinusoidal_gamma_generator::Buffers_::Buffers_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffers_&amp;<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref>,<sp/>sinusoidal_gamma_generator&amp;<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>,<sp/>t0_ms_(<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref>.t0_ms_<sp/>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>,<sp/>Lambda_t0_(<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref>.Lambda_t0_<sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>,<sp/>P_prev_(<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref>.P_prev_<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>extraction<sp/>and<sp/>manipulation<sp/>functions</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">nest::sinusoidal_gamma_generator::Parameters_::get(<sp/>DictionaryDatum&amp;<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="133"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1a3789ad4b8875f756eea3a5234dbc1269" kindref="member">names::rate</ref><sp/>]<sp/>=<sp/>rate_<sp/>*<sp/>1000.0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1ae4e7071873c572f54f06b3eceb10ccd9" kindref="member">names::frequency</ref><sp/>]<sp/>=<sp/>om_<sp/>/<sp/>(<sp/>2.0<sp/>*<sp/><ref refid="namespacenumerics_1a0effada298f73ccb99be98760ac8f8f0" kindref="member">numerics::pi</ref><sp/>/<sp/>1000.0<sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1a67e6b9b36382f634f76a5d8d56a55dae" kindref="member">names::phase</ref><sp/>]<sp/>=<sp/>180.0<sp/>/<sp/><ref refid="namespacenumerics_1a0effada298f73ccb99be98760ac8f8f0" kindref="member">numerics::pi</ref><sp/>*<sp/>phi_;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1a7a2a67df69308ffc56af5e698959f728" kindref="member">names::amplitude</ref><sp/>]<sp/>=<sp/>amplitude_<sp/>*<sp/>1000.0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1ae66d70a5d7c886ccfad6a874425b91df" kindref="member">names::order</ref><sp/>]<sp/>=<sp/>order_;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1ab283bb163c9aabb90c0fe7dd22d013fb" kindref="member">names::individual_spike_trains</ref><sp/>]<sp/>=<sp/>individual_spike_trains_;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">nest::sinusoidal_gamma_generator::Parameters_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DictionaryDatum&amp;<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sinusoidal_gamma_generator&amp;<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref>,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref>.is_model_prototype()<sp/>and<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>-&gt;known(<sp/><ref refid="namespacenest_1_1names_1ab283bb163c9aabb90c0fe7dd22d013fb" kindref="member">names::individual_spike_trains</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>individual_spike_trains<sp/>property<sp/>can<sp/>only<sp/>be<sp/>set<sp/>as&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>a<sp/>model<sp/>default<sp/>using<sp/>SetDefaults<sp/>or<sp/>upon<sp/>CopyModel.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValue&lt;<sp/>bool<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/><ref refid="namespacenest_1_1names_1ab283bb163c9aabb90c0fe7dd22d013fb" kindref="member">names::individual_spike_trains</ref>,<sp/>individual_spike_trains_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>happen<sp/>only<sp/>on<sp/>model<sp/>prototypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>individual_spike_trains_<sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>counted<sp/>up<sp/>as<sp/>connections<sp/>are<sp/>made</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_trains_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_trains_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/><ref refid="namespacenest_1_1names_1ae4e7071873c572f54f06b3eceb10ccd9" kindref="member">names::frequency</ref>,<sp/>om_,<sp/>node<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>om_<sp/>*=<sp/>2.0<sp/>*<sp/><ref refid="namespacenumerics_1a0effada298f73ccb99be98760ac8f8f0" kindref="member">numerics::pi</ref><sp/>/<sp/>1000.0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/><ref refid="namespacenest_1_1names_1a67e6b9b36382f634f76a5d8d56a55dae" kindref="member">names::phase</ref>,<sp/>phi_,<sp/>node<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>phi_<sp/>*=<sp/><ref refid="namespacenumerics_1a0effada298f73ccb99be98760ac8f8f0" kindref="member">numerics::pi</ref><sp/>/<sp/>180.0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/><ref refid="namespacenest_1_1names_1ae66d70a5d7c886ccfad6a874425b91df" kindref="member">names::order</ref>,<sp/>order_,<sp/>node<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>order_<sp/>&lt;<sp/>1.0<sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>gamma<sp/>order<sp/>must<sp/>be<sp/>at<sp/>least<sp/>1.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>*_unscaled<sp/>variables<sp/>here<sp/>are<sp/>introduced<sp/>to<sp/>avoid<sp/>spurious</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>floating-point<sp/>comparison<sp/>issues<sp/>under<sp/>32-bit<sp/>Linux.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dc_unscaled<sp/>=<sp/>1e3<sp/>*<sp/>rate_;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/><ref refid="namespacenest_1_1names_1a3789ad4b8875f756eea3a5234dbc1269" kindref="member">names::rate</ref>,<sp/>dc_unscaled,<sp/>node<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>rate_<sp/>=<sp/>1<ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>-3<sp/>*<sp/>dc_unscaled;<sp/></highlight><highlight class="comment">//<sp/>scale<sp/>to<sp/>1/ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ac_unscaled<sp/>=<sp/>1e3<sp/>*<sp/>amplitude_;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/><ref refid="namespacenest_1_1names_1a7a2a67df69308ffc56af5e698959f728" kindref="member">names::amplitude</ref>,<sp/>ac_unscaled,<sp/>node<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>amplitude_<sp/>=<sp/>1<ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>-3<sp/>*<sp/>ac_unscaled;<sp/></highlight><highlight class="comment">//<sp/>scale<sp/>to<sp/>1/ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/>0.0<sp/>&lt;=<sp/>ac_unscaled<sp/>and<sp/>ac_unscaled<sp/>&lt;=<sp/>dc_unscaled<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Rate<sp/>parameters<sp/>must<sp/>fulfill<sp/>0<sp/>&lt;=<sp/>amplitude<sp/>&lt;=<sp/>rate.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>Default<sp/>and<sp/>copy<sp/>constructor<sp/>for<sp/>node</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">nest::sinusoidal_gamma_generator::sinusoidal_gamma_generator()</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>:<sp/>StimulationDevice()</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>,<sp/>P_()</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>,<sp/>S_()</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>recordablesMap_.create();</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">nest::sinusoidal_gamma_generator::sinusoidal_gamma_generator(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sinusoidal_gamma_generator&amp;<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>:<sp/>StimulationDevice(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>,<sp/>P_(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref>.P_<sp/>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref>.S_<sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/><ref refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319" kindref="member">n</ref>.B_,<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>Node<sp/>initialization<sp/>functions</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">nest::sinusoidal_gamma_generator::init_state_()</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>StimulationDevice::init_state();</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">nest::sinusoidal_gamma_generator::init_buffers_()</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>StimulationDevice::init_buffers();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>B_.logger_.reset();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;(<sp/>P_.num_trains_,<sp/><ref refid="namespacenest_1_1names_1aadba2f0b7a68681ccc21276c77dc8b19" kindref="member">kernel</ref>().simulation_manager.get_time().get_ms()<sp/>).swap(<sp/>B_.t0_ms_<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;(<sp/>P_.num_trains_,<sp/>0.0<sp/>).swap(<sp/>B_.Lambda_t0_<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>B_.P_prev_<sp/>=<sp/>P_;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">nest::sinusoidal_gamma_generator::deltaLambda_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_b<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="255"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t_a<sp/>==<sp/>t_b<sp/>)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaLambda<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.order_<sp/>*<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.rate_<sp/>*<sp/>(<sp/>t_b<sp/>-<sp/>t_a<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>std::abs(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.amplitude_<sp/>)<sp/>&gt;<sp/>0<sp/>and<sp/>std::abs(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.om_<sp/>)<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>deltaLambda<sp/>+=</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.order_<sp/>*<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.amplitude_<sp/>/<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.om_<sp/>*<sp/>(<sp/>std::cos(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.om_<sp/>*<sp/>t_b<sp/>+<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.phi_<sp/>)<sp/>-<sp/>std::cos(<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.om_<sp/>*<sp/>t_a<sp/>+<sp/><ref refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d" kindref="member">p</ref>.phi_<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deltaLambda;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">nest::sinusoidal_gamma_generator::pre_run_hook()</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensures<sp/>initialization<sp/>in<sp/>case<sp/>mm<sp/>connected<sp/>after<sp/>Simulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>B_.logger_.init();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>StimulationDevice::pre_run_hook();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>V_.h_<sp/>=<sp/>Time::get_resolution().get_ms();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>V_.rng_<sp/>=<sp/><ref refid="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" kindref="member">get_vp_specific_rng</ref>(<sp/>get_thread()<sp/>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_ms<sp/>=<sp/><ref refid="namespacenest_1_1names_1aadba2f0b7a68681ccc21276c77dc8b19" kindref="member">kernel</ref>().simulation_manager.get_time().get_ms();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>new<sp/>connections<sp/>were<sp/>created<sp/>during<sp/>simulation<sp/>break,<sp/>resize<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>no-op<sp/>if<sp/>no<sp/>new<sp/>connections<sp/>were<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>B_.t0_ms_.resize(<sp/>P_.num_trains_,<sp/>t_ms<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>B_.Lambda_t0_.resize(<sp/>P_.num_trains_,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>Lambda<sp/>up<sp/>to<sp/>current<sp/>time<sp/>and<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>no-op<sp/>for<sp/>any<sp/>new<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>P_.num_trains_;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.Lambda_t0_[<sp/>i<sp/>]<sp/>+=<sp/>deltaLambda_(<sp/>B_.P_prev_,<sp/>B_.t0_ms_[<sp/>i<sp/>],<sp/>t_ms<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.t0_ms_[<sp/>i<sp/>]<sp/>=<sp/>t_ms;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>B_.P_prev_<sp/>=<sp/>P_;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">nest::sinusoidal_gamma_generator::hazard_(<sp/><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref><sp/>tgt_idx<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="301"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>We<sp/>compute<sp/>Lambda<sp/>for<sp/>the<sp/>entire<sp/>interval<sp/>since<sp/>the<sp/>last<sp/>spike/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter<sp/>change<sp/>each<sp/>time<sp/>for<sp/>better<sp/>accuracy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lambda<sp/>=<sp/>B_.Lambda_t0_[<sp/>tgt_idx<sp/>]<sp/>+<sp/>deltaLambda_(<sp/>P_,<sp/>B_.t0_ms_[<sp/>tgt_idx<sp/>],<sp/>V_.t_ms_<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>V_.h_<sp/>*<sp/>P_.order_<sp/>*<sp/>S_.rate_<sp/>*<sp/>std::pow(<sp/>Lambda,<sp/>P_.order_<sp/>-<sp/>1<sp/>)<sp/>*<sp/>std::exp(<sp/>-Lambda<sp/>)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>/<sp/>gsl_sf_gamma_inc(<sp/>P_.order_,<sp/>Lambda<sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">nest::sinusoidal_gamma_generator::update(<sp/>Time<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e" kindref="member">origin</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to<sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lag<sp/>=<sp/>from;<sp/>lag<sp/>&lt;<sp/>to;<sp/>++lag<sp/>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Time<sp/>t<sp/>=<sp/>Time(<sp/>Time::step(<sp/><ref refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>+<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.t_ms_<sp/>=<sp/>t.get_ms();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.t_steps_<sp/>=<sp/>t.get_steps();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>S_.rate_<sp/>=<sp/>P_.rate_<sp/>+<sp/>P_.amplitude_<sp/>*<sp/>std::sin(<sp/>P_.om_<sp/>*<sp/>V_.t_ms_<sp/>+<sp/>P_.phi_<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>t_steps_-1<sp/>since<sp/>t_steps<sp/>is<sp/>end<sp/>of<sp/>interval,<sp/>while<sp/>activity<sp/>det<sp/>by<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>P_.num_trains_<sp/>&gt;<sp/>0<sp/>and<sp/>S_.rate_<sp/>&gt;<sp/>0<sp/>and<sp/>StimulationDevice::is_active(<sp/>Time::step(<sp/>V_.t_steps_<sp/>-<sp/>1<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>P_.individual_spike_trains_<sp/>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DSSpikeEvent<sp/>se;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1aadba2f0b7a68681ccc21276c77dc8b19" kindref="member">kernel</ref>().event_delivery_manager.send(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>se,<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>V_.rng_-&gt;drand()<sp/>&lt;<sp/>hazard_(<sp/>0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpikeEvent<sp/>se;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1aadba2f0b7a68681ccc21276c77dc8b19" kindref="member">kernel</ref>().event_delivery_manager.send(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>se,<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.t0_ms_[<sp/>0<sp/>]<sp/>=<sp/>V_.t_ms_;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.Lambda_t0_[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.logger_.record_data(<sp/><ref refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">nest::sinusoidal_gamma_generator::event_hook(<sp/>DSSpikeEvent&amp;<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref><sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>port<sp/>number<sp/>---<sp/>see<sp/>#737</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref><sp/>tgt_idx<sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_port();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>tgt_idx<sp/>and<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>tgt_idx<sp/>)<sp/>&lt;<sp/>B_.t0_ms_.size()<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>V_.rng_-&gt;drand()<sp/>&lt;<sp/>hazard_(<sp/>tgt_idx<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_receiver().handle(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref><sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.t0_ms_[<sp/>tgt_idx<sp/>]<sp/>=<sp/>V_.t_ms_;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.Lambda_t0_[<sp/>tgt_idx<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">nest::sinusoidal_gamma_generator::handle(<sp/>DataLoggingRequest&amp;<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref><sp/>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>B_.logger_.handle(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref><sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>Other<sp/>functions</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">nest::sinusoidal_gamma_generator::set_data_from_stimulation_backend(<sp/>std::vector&lt;<sp/>double<sp/>&gt;&amp;<sp/>input_param<sp/>)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>Parameters_<sp/>ptmp<sp/>=<sp/>P_;<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy<sp/>in<sp/>case<sp/>of<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>input<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>input_param.empty()<sp/>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>input_param.size()<sp/>!=<sp/>6<sp/>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadParameterValue(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>size<sp/>of<sp/>the<sp/>data<sp/>for<sp/>the<sp/>sinusoidal_gamma_generator<sp/>needs<sp/>to<sp/>6<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[frequency,<sp/>phase,<sp/>order,<sp/>rate,<sp/>amplitude,<sp/>individual_spike_trains].&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>DictionaryDatum<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref><sp/>=<sp/>DictionaryDatum(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Dictionary<sp/>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1ae4e7071873c572f54f06b3eceb10ccd9" kindref="member">names::frequency</ref><sp/>]<sp/>=<sp/>DoubleDatum(<sp/>input_param[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1a67e6b9b36382f634f76a5d8d56a55dae" kindref="member">names::phase</ref><sp/>]<sp/>=<sp/>DoubleDatum(<sp/>input_param[<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1ae66d70a5d7c886ccfad6a874425b91df" kindref="member">names::order</ref><sp/>]<sp/>=<sp/>DoubleDatum(<sp/>input_param[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1a3789ad4b8875f756eea3a5234dbc1269" kindref="member">names::rate</ref><sp/>]<sp/>=<sp/>DoubleDatum(<sp/>input_param[<sp/>3<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1a7a2a67df69308ffc56af5e698959f728" kindref="member">names::amplitude</ref><sp/>]<sp/>=<sp/>DoubleDatum(<sp/>input_param[<sp/>4<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/><ref refid="namespacenest_1_1names_1ab283bb163c9aabb90c0fe7dd22d013fb" kindref="member">names::individual_spike_trains</ref><sp/>]<sp/>=<sp/>BoolDatum(<sp/>input_param[<sp/>5<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>ptmp.set(<sp/><ref refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5" kindref="member">d</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>get<sp/>here,<sp/>temporary<sp/>contains<sp/>consistent<sp/>set<sp/>of<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>P_<sp/>=<sp/>ptmp;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/sinusoidal_gamma_generator.cpp"/>
  </compounddef>
</doxygen>
