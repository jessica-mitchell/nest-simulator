<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_sparse_node_array" kind="class" language="C++" prot="public">
    <compoundname>nest::SparseNodeArray</compoundname>
    <includes refid="sparse__node__array_8h" local="no">sparse_node_array.h</includes>
    <innerclass refid="classnest_1_1_sparse_node_array_1_1_node_entry" prot="public">nest::SparseNodeArray::NodeEntry</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1_sparse_node_array_1a57176711763b2dde5f4847a804670f4c" prot="public" static="no">
        <type>BlockVector&lt; <ref refid="classnest_1_1_sparse_node_array_1_1_node_entry" kindref="compound">SparseNodeArray::NodeEntry</ref> &gt;::<ref refid="classnest_1_1_sparse_node_array_1a57176711763b2dde5f4847a804670f4c" kindref="member">const_iterator</ref></type>
        <definition>typedef BlockVector&lt; SparseNodeArray::NodeEntry &gt;::const_iterator nest::SparseNodeArray::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Iterator inherited from BlockVector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="126" column="40" bodyfile="nestkernel/sparse_node_array.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1abadab1e2f4c3cf06b803dfd03329e71f" prot="private" static="no" mutable="no">
        <type>BlockVector&lt; <ref refid="classnest_1_1_sparse_node_array_1_1_node_entry" kindref="compound">NodeEntry</ref> &gt;</type>
        <definition>BlockVector&lt; NodeEntry &gt; nest::SparseNodeArray::nodes_</definition>
        <argsstring></argsstring>
        <name>nodes_</name>
        <briefdescription>
<para>stores local node information </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="189" column="15" bodyfile="nestkernel/sparse_node_array.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a672d0e9c0625285db5c575cec90c53b5" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::SparseNodeArray::global_max_node_id_</definition>
        <argsstring></argsstring>
        <name>global_max_node_id_</name>
        <briefdescription>
<para>globally largest node ID </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="190" column="9" bodyfile="nestkernel/sparse_node_array.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a2a9d9c3b35cd3e826203b3a4e4ce4ad9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::SparseNodeArray::local_min_node_id_</definition>
        <argsstring></argsstring>
        <name>local_min_node_id_</name>
        <briefdescription>
<para>smallest local node ID </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="191" column="9" bodyfile="nestkernel/sparse_node_array.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1ad3365c01cd0359228289dbb5f629cf0f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::SparseNodeArray::local_max_node_id_</definition>
        <argsstring></argsstring>
        <name>local_max_node_id_</name>
        <briefdescription>
<para>largest local node ID </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="192" column="9" bodyfile="nestkernel/sparse_node_array.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a93ca0154d2b791a1575f973cdd5e66ab" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::SparseNodeArray::left_scale_</definition>
        <argsstring></argsstring>
        <name>left_scale_</name>
        <briefdescription>
<para>scale factor for left side of array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="194" column="10" bodyfile="nestkernel/sparse_node_array.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a8d7cb28b7f30885581d5412d2a4c649d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::SparseNodeArray::right_scale_</definition>
        <argsstring></argsstring>
        <name>right_scale_</name>
        <briefdescription>
<para>scale factor for right side of array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="195" column="10" bodyfile="nestkernel/sparse_node_array.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1aab65a31bb9b5d79178d2f5d16de39370" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::SparseNodeArray::split_node_id_</definition>
        <argsstring></argsstring>
        <name>split_node_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Globally smallest node ID in right side of array.</para>
<para><itemizedlist>
<listitem><para>Is updated by <ref refid="classnest_1_1_sparse_node_array_1a4966040b51e4d31b1a6c801227118a92" kindref="member">set_max_node_id()</ref></para>
</listitem><listitem><para>Is global_max_node_id_ + 1 as long as right side is empty. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="203" column="9" bodyfile="nestkernel/sparse_node_array.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a61e0a94dd202dc8e0b81820aca86b26f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::SparseNodeArray::split_idx_</definition>
        <argsstring></argsstring>
        <name>split_idx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array index of first element in right side of array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="208" column="10" bodyfile="nestkernel/sparse_node_array.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a966206cfcbc79ac17f6cfa4bafb44722" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::SparseNodeArray::have_split_</definition>
        <argsstring></argsstring>
        <name>have_split_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark whether split has happened during network construction.</para>
<para>False as long as only one kind of neuron has been added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="215" column="8" bodyfile="nestkernel/sparse_node_array.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_sparse_node_array_1a4afc2591483c053dfbc15a744ac266b5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::SparseNodeArray::left_side_has_proxies_</definition>
        <argsstring></argsstring>
        <name>left_side_has_proxies_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Proxy status of nodes on left side of array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="220" column="8" bodyfile="nestkernel/sparse_node_array.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a8450ea61a4e54929091ff1b2aa5f757f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::SparseNodeArray::SparseNodeArray</definition>
        <argsstring>()</argsstring>
        <name>SparseNodeArray</name>
        <briefdescription>
<para>Create empty sparse node array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="129" column="3" bodyfile="nestkernel/sparse_node_array.cpp" bodystart="38" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a3d4e9814c504ce4b8fbdbaae1a1d7769" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::SparseNodeArray::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return size of container.</para>
<para>This is the number of local nodes.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_sparse_node_array_1ad8425767573ac33d73c347269f32b1c7" kindref="member">get_max_node_id()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="138" column="10" bodyfile="nestkernel/sparse_node_array.h" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a51ee97fc3c0c6f22769e273fbab3e9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SparseNodeArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="141" column="8" bodyfile="nestkernel/sparse_node_array.cpp" bodystart="54" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1aadd91d887ae4a2a523385f9a0418e020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SparseNodeArray::add_local_node</definition>
        <argsstring>(Node &amp;)</argsstring>
        <name>add_local_node</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add single local node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="146" column="8" bodyfile="nestkernel/sparse_node_array.cpp" bodystart="70" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a4966040b51e4d31b1a6c801227118a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SparseNodeArray::set_max_node_id</definition>
        <argsstring>(index)</argsstring>
        <name>set_max_node_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set max node ID to maximum in network.</para>
<para>This also sets split_node_id_ to max node ID + 1 as long as we have not split.</para>
<para><simplesect kind="note"><para>Must be called by any method adding nodes to the network at end of each batch of nodes added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="157" column="8" bodyfile="nestkernel/sparse_node_array.cpp" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1ad8425767573ac33d73c347269f32b1c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>nest::index nest::SparseNodeArray::get_max_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_max_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Globally largest node ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="162" column="9" bodyfile="nestkernel/sparse_node_array.h" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a1dbd2f4985f192de76aeca7acecc80b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>nest::Node * nest::SparseNodeArray::get_node_by_node_id</definition>
        <argsstring>(index) const</argsstring>
        <name>get_node_by_node_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to node or nullptr if node is not local.</para>
<para><simplesect kind="note"><para>The caller is responsible for providing proper proxy-node pointers for non-local nodes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="171" column="8" bodyfile="nestkernel/sparse_node_array.cpp" bodystart="128" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1ad01ffd36b79b417c33acb4ac786d2203" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>nest::Node * nest::SparseNodeArray::get_node_by_index</definition>
        <argsstring>(size_t) const</argsstring>
        <name>get_node_by_index</name>
        <param>
          <type>size_t</type>
          <defname>idx</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lookup node based on index into container.</para>
<para><simplesect kind="note"><para>Required for target lookup by HPC synapses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="178" column="8" bodyfile="nestkernel/sparse_node_array.h" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a5e621396e30b098cbb9fac0afea7de5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_sparse_node_array_1a57176711763b2dde5f4847a804670f4c" kindref="member">const_iterator</ref></type>
        <definition>nest::SparseNodeArray::const_iterator nest::SparseNodeArray::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constant iterators for safe iteration of <ref refid="classnest_1_1_sparse_node_array" kindref="compound">SparseNodeArray</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="183" column="18" bodyfile="nestkernel/sparse_node_array.h" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a93393a4f5435a71467f775c682173dcd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_sparse_node_array_1a57176711763b2dde5f4847a804670f4c" kindref="member">const_iterator</ref></type>
        <definition>nest::SparseNodeArray::const_iterator nest::SparseNodeArray::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="184" column="18" bodyfile="nestkernel/sparse_node_array.h" bodystart="233" bodyend="236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_sparse_node_array_1a40200ee688cf2f37f305904f70a0c8c9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::SparseNodeArray::is_consistent_</definition>
        <argsstring>() const</argsstring>
        <name>is_consistent_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sparse_node_array.h" line="187" column="8" bodyfile="nestkernel/sparse_node_array.h" bodystart="258" bodyend="261"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Sparse representation of local nodes.</para>
<para><ref refid="classnest_1_1_sparse_node_array" kindref="compound">SparseNodeArray</ref> maps node IDs of thread-local nodes to Node*. It provides a const iterator interface for iteration over all local nodes, lookup by node ID and lookup by numeric index into local nodes. The latter is provided to support HPC synapses using <ref refid="classnest_1_1_target_identifier_index" kindref="compound">TargetIdentifierIndex</ref> representation.</para>
<para>For efficient lookup, all normal nodes (with proxies) need to be created together and all devices need to be created together. It does not matter which are created first. If nodes and devices are created alternatingly, lookup performance may suffer significantly if many devices are present. This mainly affects network connection.</para>
<para>As nodes are added to an initially empty <ref refid="classnest_1_1_sparse_node_array" kindref="compound">SparseNodeArray</ref>, the array tracks whether nodes have proxies or not. Array lookup is split at the point of the first proxy/no-proxy (or no-proxy/proxy) transition between nodes. In the no-proxy region, where all nodes are represented locally, <ref refid="classnest_1_1_node" kindref="compound">Node</ref> IDs are mapped directly to array indices. In the proxy region, they are scaled by 1/n_vp.</para>
<para>To reliably reject requests for node IDs beyond the globally maximal node ID, the latter must be set explicitly. A <ref refid="classnest_1_1_sparse_node_array" kindref="compound">SparseNodeArray</ref> is said to be in <emphasis>consistent state</emphasis> if the global maximal node ID has been set. Once <ref refid="classnest_1_1_sparse_node_array_1aadd91d887ae4a2a523385f9a0418e020" kindref="member">add_local_node()</ref> is called, the array is not in consistent state until the global maximal node ID is set again. This is indicated by setting the max_node_id_ == 0. Looking up nodes while the array is not in a consistent state triggers an assertion.</para>
<para>To also support cases in which users alternate creation of nodes with and without proxies or use nodes with special behavior (e.g., MUSIC nodes), we perform a linear search from the estimated location of the node in the array.</para>
<para>The following invariants hold when the array is in consistent state:</para>
<para><orderedlist>
<listitem><para>Entries are sorted by strictly increasing node ID (nid).</para>
</listitem><listitem><para>All entries with index i &lt; split_idx_ belong to the left part of the array, all remaining entries to the right part.</para>
</listitem><listitem><para>All entries with node ID nid &lt; split_node_id_ belong to the left part of the array, all remaining entries to the right part.</para>
</listitem><listitem><para>nodes_[0].get_node()-&gt;has_proxies() == nodes_[i].get_node()-&gt;has_proxies() for 0 &lt;= i &lt; lookup_split_idx_</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="note"><para><itemizedlist>
<listitem><para>The last invariant simply means that all nodes in the left part of the array have the same value of has_proxies(). </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::SparseNodeArray</label>
        <link refid="classnest_1_1_sparse_node_array"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/sparse_node_array.h" line="84" column="1" bodyfile="nestkernel/sparse_node_array.h" bodystart="85" bodyend="221"/>
    <listofallmembers>
      <member refid="classnest_1_1_sparse_node_array_1aadd91d887ae4a2a523385f9a0418e020" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>add_local_node</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a5e621396e30b098cbb9fac0afea7de5d" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>begin</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a51ee97fc3c0c6f22769e273fbab3e9a3" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>clear</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a57176711763b2dde5f4847a804670f4c" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>const_iterator</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a93393a4f5435a71467f775c682173dcd" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>end</name></member>
      <member refid="classnest_1_1_sparse_node_array_1ad8425767573ac33d73c347269f32b1c7" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>get_max_node_id</name></member>
      <member refid="classnest_1_1_sparse_node_array_1ad01ffd36b79b417c33acb4ac786d2203" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>get_node_by_index</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a1dbd2f4985f192de76aeca7acecc80b5" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>get_node_by_node_id</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a672d0e9c0625285db5c575cec90c53b5" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>global_max_node_id_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a966206cfcbc79ac17f6cfa4bafb44722" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>have_split_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a40200ee688cf2f37f305904f70a0c8c9" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>is_consistent_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a93ca0154d2b791a1575f973cdd5e66ab" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>left_scale_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a4afc2591483c053dfbc15a744ac266b5" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>left_side_has_proxies_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1ad3365c01cd0359228289dbb5f629cf0f" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>local_max_node_id_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a2a9d9c3b35cd3e826203b3a4e4ce4ad9" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>local_min_node_id_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1abadab1e2f4c3cf06b803dfd03329e71f" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>nodes_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a8d7cb28b7f30885581d5412d2a4c649d" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>right_scale_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a4966040b51e4d31b1a6c801227118a92" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>set_max_node_id</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a3d4e9814c504ce4b8fbdbaae1a1d7769" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>size</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a8450ea61a4e54929091ff1b2aa5f757f" prot="public" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>SparseNodeArray</name></member>
      <member refid="classnest_1_1_sparse_node_array_1a61e0a94dd202dc8e0b81820aca86b26f" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>split_idx_</name></member>
      <member refid="classnest_1_1_sparse_node_array_1aab65a31bb9b5d79178d2f5d16de39370" prot="private" virt="non-virtual"><scope>nest::SparseNodeArray</scope><name>split_node_id_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
