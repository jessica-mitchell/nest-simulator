<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1DataEvent" kind="class" language="C++" prot="public">
    <compoundname>nest::DataEvent</compoundname>
    <basecompoundref refid="classnest_1_1Event" prot="public" virt="non-virtual">nest::Event</basecompoundref>
    <includes refid="event_8h" local="no">event.h</includes>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1DataEvent_1a87a14f82689848435606963f2e5f69c2" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; D &gt;</type>
        <definition>std::shared_ptr&lt; D &gt; nest::DataEvent&lt; D &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>nest::DataEvent::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" line="830" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" bodystart="830" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1DataEvent_1ab1d193c06d641ea0ec8a2c651da51e61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DataEvent&lt; D &gt;::set_pointer</definition>
        <argsstring>(D &amp;data)</argsstring>
        <name>set_pointer</name>
        <qualifiedname>nest::DataEvent::set_pointer</qualifiedname>
        <param>
          <type>D &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" line="833" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" bodystart="839" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DataEvent_1a27ad24c9662ceecc66ab98c498b8adb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; D &gt;</type>
        <definition>std::shared_ptr&lt; D &gt; nest::DataEvent&lt; D &gt;::get_pointer</definition>
        <argsstring>() const</argsstring>
        <name>get_pointer</name>
        <qualifiedname>nest::DataEvent::get_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" line="834" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" bodystart="846" bodyend="849"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> for transmitting arbitrary data. </para>
    </briefdescription>
    <detaileddescription>
<para>This event type may be used for transmitting arbitrary data between events, e.g., images or their FFTs. A shared_ptr to the data is transmitted. The date type is given as a template parameter. <simplesect kind="note"><para>: Data is passed via a shared_ptr. The receiver should copy the data at once, otherwise it may be modified by the sender. I hope this scheme is thread-safe, as long as the receiver copies the data at once. HEP. </para>
</simplesect>
<simplesect kind="note"><para>: This is a base class. Actual event types had to be derived, since operator() cannot be instantiated otherwise. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>nest::DataEvent&lt; double &gt;</label>
        <link refid="classnest_1_1DataEvent"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::DataEvent&lt; D &gt;</label>
        <link refid="classnest_1_1DataEvent"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::DoubleDataEvent</label>
        <link refid="classnest_1_1DoubleDataEvent"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::Event</label>
        <link refid="classnest_1_1Event"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::DataEvent&lt; D &gt;</label>
        <link refid="classnest_1_1DataEvent"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="2">
        <label>nest::Event</label>
        <link refid="classnest_1_1Event"/>
        <childnode refid="3" relation="usage">
          <edgelabel>sender_spike_data_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>receiver_</edgelabel>
          <edgelabel>sender_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>stamp_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::SpikeData</label>
        <link refid="classnest_1_1SpikeData"/>
      </node>
      <node id="6">
        <label>nest::Time</label>
        <link refid="classnest_1_1Time"/>
        <childnode refid="7" relation="usage">
          <edgelabel>LIM_MAX</edgelabel>
          <edgelabel>LIM_MIN</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>LIM_NEG_INF</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1Time_1_1Limit"/>
      </node>
      <node id="9">
        <label>nest::Time::LimitNegInf</label>
        <link refid="structnest_1_1Time_1_1LimitNegInf"/>
      </node>
      <node id="8">
        <label>nest::Time::LimitPosInf</label>
        <link refid="structnest_1_1Time_1_1LimitPosInf"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" line="828" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/event.h" bodystart="829" bodyend="835"/>
    <listofallmembers>
      <member refid="classnest_1_1Event_1a54bdbff0b4bdd199f22fe1a26a89995d" prot="public" virt="pure-virtual"><scope>nest::DataEvent</scope><name>clone</name></member>
      <member refid="classnest_1_1Event_1a206e330b6cbc6e93887fc21908d4df43" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>d_</name></member>
      <member refid="classnest_1_1DataEvent_1a87a14f82689848435606963f2e5f69c2" prot="private" virt="non-virtual"><scope>nest::DataEvent</scope><name>data_</name></member>
      <member refid="classnest_1_1Event_1a5fd02c2d20b0caf43899f563d419e0bd" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>Event</name></member>
      <member refid="classnest_1_1Event_1a7f3dc0d0bb05d4f98ad2bf13cc67b940" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_delay_steps</name></member>
      <member refid="classnest_1_1Event_1ad2fcc703a758e0dba77c00385cb5041c" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_offset</name></member>
      <member refid="classnest_1_1DataEvent_1a27ad24c9662ceecc66ab98c498b8adb0" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_pointer</name></member>
      <member refid="classnest_1_1Event_1a583d84f37d575fbc7f2ab711fb494b66" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_port</name></member>
      <member refid="classnest_1_1Event_1a8c1d83bbbebd23bb85b7ba3dd743d38c" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_receiver</name></member>
      <member refid="classnest_1_1Event_1aaa1bfdd94c07c6a94547086f8139a960" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_receiver_node_id</name></member>
      <member refid="classnest_1_1Event_1a4802a116b9b4e4f3ffcd71a7cfb1729e" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_rel_delivery_steps</name></member>
      <member refid="classnest_1_1Event_1a54709441635d23d80acd9d18eb869856" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_rport</name></member>
      <member refid="classnest_1_1Event_1aca5d7f11547cb61848956360d656ccfc" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_sender</name></member>
      <member refid="classnest_1_1Event_1a32291607d1143c5c7ade223a12ddd54e" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_sender_node_id</name></member>
      <member refid="classnest_1_1Event_1a02f02f11531fefd932a1ac9c0c0891d0" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_stamp</name></member>
      <member refid="classnest_1_1Event_1abf2d6610c35bd35cf67910f5c39b7cc4" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>get_weight</name></member>
      <member refid="classnest_1_1Event_1aa1d8adc602682b70876729e830956dce" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>is_valid</name></member>
      <member refid="classnest_1_1Event_1afd698f1dc0985f25ac821060e060c64b" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>offset_</name></member>
      <member refid="classnest_1_1Event_1a5d94fae6ba8645be63749c08289adcbe" prot="public" virt="pure-virtual"><scope>nest::DataEvent</scope><name>operator()</name></member>
      <member refid="classnest_1_1Event_1a8515d7a39d4f3c8ba47bde7bcfdf80a7" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>p_</name></member>
      <member refid="classnest_1_1Event_1aba7585287096e9d1189007fa60244eef" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>receiver_</name></member>
      <member refid="classnest_1_1Event_1acf9f5b244e87b4d2d83b0a67463b76f6" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>receiver_is_valid</name></member>
      <member refid="classnest_1_1Event_1aaf68e08591d41518b70181862a6b4877" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>retrieve_sender_node_id_from_source_table</name></member>
      <member refid="classnest_1_1Event_1aaff33b6ca47aa351962509ba81ac7ed7" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>rp_</name></member>
      <member refid="classnest_1_1Event_1ac23f2f4beb8407a1cb01560a316268fd" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>sender_</name></member>
      <member refid="classnest_1_1Event_1a43ca356032fe29a848b9d72f7a43eafd" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>sender_is_valid</name></member>
      <member refid="classnest_1_1Event_1a7221735e8c788ee4a730f7ba6595483b" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>sender_node_id_</name></member>
      <member refid="classnest_1_1Event_1af6213aa38ebec48b1fc8be9e00a62d1c" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>sender_spike_data_</name></member>
      <member refid="classnest_1_1Event_1ae662ecac352f57893c104563dd53c7fe" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_delay_steps</name></member>
      <member refid="classnest_1_1Event_1a488b68c43fe5d4d29d87d2578487264d" prot="public" virt="virtual"><scope>nest::DataEvent</scope><name>set_diffusion_factor</name></member>
      <member refid="classnest_1_1Event_1a956496d418cf58ca78925a22dfe2e21d" prot="public" virt="virtual"><scope>nest::DataEvent</scope><name>set_drift_factor</name></member>
      <member refid="classnest_1_1Event_1a950cfc88c56d3098f1445dcc2b6f4805" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_offset</name></member>
      <member refid="classnest_1_1DataEvent_1ab1d193c06d641ea0ec8a2c651da51e61" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_pointer</name></member>
      <member refid="classnest_1_1Event_1a934d28b25e817dd9ed45fbbab3436288" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_port</name></member>
      <member refid="classnest_1_1Event_1a16234c886ae93c42bf120bf77abece30" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_receiver</name></member>
      <member refid="classnest_1_1Event_1aeac7ec4158ac45bf8e503ee04888d367" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_rport</name></member>
      <member refid="classnest_1_1Event_1a63cf602cb38d901021bbe9096f161850" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_sender</name></member>
      <member refid="classnest_1_1Event_1a7ba2a5690a5345624a8ed57c7633cc03" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_sender_node_id</name></member>
      <member refid="classnest_1_1Event_1a5bb763582d2d6a09987d1d91a0646b05" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_sender_node_id_info</name></member>
      <member refid="classnest_1_1Event_1a47c5bdb5473b5b8971b2a077aec754e0" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_stamp</name></member>
      <member refid="classnest_1_1Event_1ab5269d296a67598c7d6cbb9117756de0" prot="public" virt="non-virtual"><scope>nest::DataEvent</scope><name>set_weight</name></member>
      <member refid="classnest_1_1Event_1a8ccecfeabf8f8a5bc3166dd3408f8295" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>stamp_</name></member>
      <member refid="classnest_1_1Event_1af35dca186785c4b12995f35d2b51a3de" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>stamp_steps_</name></member>
      <member refid="classnest_1_1Event_1a2e85d3a413ae97d1dbf9cf6dbd791259" prot="protected" virt="non-virtual"><scope>nest::DataEvent</scope><name>w_</name></member>
      <member refid="classnest_1_1Event_1af3f85780e2fab06dd2d934bf965dd142" prot="public" virt="virtual"><scope>nest::DataEvent</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
