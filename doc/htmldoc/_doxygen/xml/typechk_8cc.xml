<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="typechk_8cc" kind="file" language="C++">
    <compoundname>typechk.cc</compoundname>
    <includes refid="typechk_8h" local="yes">typechk.h</includes>
    <includes refid="arraydatum_8h" local="yes">arraydatum.h</includes>
    <includes refid="namedatum_8h" local="yes">namedatum.h</includes>
    <includes refid="sliexceptions_8h" local="yes">sliexceptions.h</includes>
    <incdepgraph>
      <node id="35">
        <label>lockptr.h</label>
        <link refid="lockptr_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>aggregatedatum.h</label>
        <link refid="aggregatedatum_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>arraydatum.h</label>
        <link refid="arraydatum_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>datum.h</label>
        <link refid="datum_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>interpret.h</label>
        <link refid="interpret_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>lockptrdatum.h</label>
        <link refid="lockptrdatum_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>name.h</label>
        <link refid="name_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>namedatum.h</label>
        <link refid="namedatum_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sliactions.h</label>
        <link refid="sliactions_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>slibuiltins.h</label>
        <link refid="slibuiltins_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>sliexceptions.h</label>
        <link refid="sliexceptions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>slifunction.h</label>
        <link refid="slifunction_8h"/>
      </node>
      <node id="33">
        <label>slimodule.h</label>
        <link refid="slimodule_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>slinames.h</label>
        <link refid="slinames_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>slitype.h</label>
        <link refid="slitype_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>tarrayobj.h</label>
        <link refid="tarrayobj_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>token.h</label>
        <link refid="token_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tokenarray.h</label>
        <link refid="tokenarray_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>tokenstack.h</label>
        <link refid="tokenstack_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>typearray.h</label>
        <link refid="typearray_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>typechk.cc</label>
        <link refid="typechk_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>typechk.h</label>
        <link refid="typechk_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="20">
        <label>config.h</label>
      </node>
      <node id="15">
        <label>cstddef</label>
      </node>
      <node id="28">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>deque</label>
      </node>
      <node id="19">
        <label>iomanip</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="30">
        <label>list</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="36">
        <label>memory</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="4">
        <label>typeinfo</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>typechk.cc</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>typechk.cc</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************</highlight></codeline>
<codeline lineno="28"><highlight class="comment">Project:<sp/><sp/><sp/>SLI-2.0,<sp/>taken<sp/>from:<sp/>SLIDE<sp/>-<sp/>GUI<sp/>for<sp/>SLI</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">Task:<sp/><sp/><sp/><sp/><sp/><sp/>With<sp/>a<sp/>TypeTrie<sp/>it<sp/>will<sp/>be<sp/>possible<sp/>to<sp/>perfrom<sp/>a<sp/>type</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check<sp/>of<sp/>(SLI)<sp/>function<sp/>input<sp/>parameters.<sp/>A<sp/>TypeNode</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>represents<sp/>the<sp/>position<sp/>and<sp/>the<sp/>datatype<sp/>of<sp/>a<sp/>single</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>parameter.<sp/>The<sp/>leaves<sp/>of<sp/>the<sp/>tree<sp/>will<sp/>contain<sp/>the</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpreter<sp/>function<sp/>of<sp/>correct<sp/>input<sp/>parameters.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>simple<sp/>add<sp/>type<sp/>tree:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----------------------</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*root</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>-----------------&gt;<sp/>double<sp/>-&gt;0</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>-&gt;<sp/><sp/>double-&gt;0<sp/><sp/><sp/><sp/><sp/><sp/>long<sp/><sp/>-&gt;<sp/><sp/>double<sp/>-&gt;<sp/>0</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(add)-&gt;0<sp/>(add)-&gt;0<sp/><sp/><sp/><sp/><sp/><sp/>(add)-&gt;0<sp/><sp/>(add)-&gt;0</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">Baseclass:<sp/>None</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">Inherit<sp/>:</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">Author:<sp/><sp/><sp/><sp/>Marc-Oliver<sp/>Gewaltig,<sp/>Thomas<sp/>Matyak</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">Date:<sp/><sp/><sp/><sp/><sp/><sp/>18.11.95</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="typechk_8h" kindref="compound">typechk.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arraydatum_8h" kindref="compound">arraydatum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="namedatum_8h" kindref="compound">namedatum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sliexceptions_8h" kindref="compound">sliexceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classTypeTrie_1_1TypeNode_1af742917a541b937a4fa42120c18a9ac5" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1_1TypeNode_1af742917a541b937a4fa42120c18a9ac5" kindref="member">TypeTrie::TypeNode::toTokenArray</ref>(<sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>a<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>assert(<sp/>a.size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>and<sp/>not<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref><sp/>)<sp/></highlight><highlight class="comment">//<sp/>Leaf<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>a.push_back(<sp/><ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref><sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>a.push_back(<sp/><ref refid="classLiteralDatum" kindref="compound">LiteralDatum</ref>(<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref><sp/>a_next;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1af742917a541b937a4fa42120c18a9ac5" kindref="member">toTokenArray</ref>(<sp/>a_next<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>a.push_back(<sp/><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref>(<sp/>a_next<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref><sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref><sp/>a_alt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1af742917a541b937a4fa42120c18a9ac5" kindref="member">toTokenArray</ref>(<sp/>a_alt<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.push_back(<sp/><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref>(<sp/>a_alt<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>assert(<sp/>a.size()<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classTypeTrie_1_1TypeNode_1ad2e347ac48171be93d72ddd6ea46b254" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1_1TypeNode_1ad2e347ac48171be93d72ddd6ea46b254" kindref="member">TypeTrie::TypeNode::info</ref>(<sp/>std::ostream&amp;<sp/>out,<sp/>std::vector&lt;<sp/>TypeNode<sp/>const*<sp/>&gt;&amp;<sp/>tl<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>next<sp/>and<sp/>not<sp/>alt<sp/>)<sp/></highlight><highlight class="comment">//<sp/>Leaf<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>type<sp/>list<sp/>then<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tl.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i<sp/>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(<sp/>15<sp/>)<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/><ref refid="classLiteralDatum" kindref="compound">LiteralDatum</ref>(<sp/>tl[<sp/>i<sp/>]-&gt;type<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;calls<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>func<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>next<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>tl.push_back(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>next-&gt;info(<sp/>out,<sp/>tl<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>tl.pop_back();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alt<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alt-&gt;info(<sp/>out,<sp/>tl<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeTrie::TypeNode</ref>*</highlight></codeline>
<codeline lineno="119" refid="classTypeTrie_1ad35f33cb9ecd3f174b703e62c80a4696" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1ad35f33cb9ecd3f174b703e62c80a4696" kindref="member">TypeTrie::newnode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>ta<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>assert(<sp/>ta.<ref refid="classTokenArray_1ad6bd1a13ab4eae2de7c05e311a3c4207" kindref="member">size</ref>()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>assert(<sp/>ta.<ref refid="classTokenArray_1ad6bd1a13ab4eae2de7c05e311a3c4207" kindref="member">size</ref>()<sp/>&lt;=<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/>n<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ta.<ref refid="classTokenArray_1ad6bd1a13ab4eae2de7c05e311a3c4207" kindref="member">size</ref>()<sp/>==<sp/>1<sp/>)<sp/></highlight><highlight class="comment">//<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>(<sp/><ref refid="namespacesli_1a4fcea40a5a1b1949c4155f5bdfff1556" kindref="member">sli::object</ref>,<sp/>ta[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>object<sp/>in<sp/>the<sp/>array<sp/>must<sp/>be<sp/>a<sp/>literal,<sp/>indicating<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>second<sp/>and<sp/>third<sp/>object<sp/>must<sp/>be<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classLiteralDatum" kindref="compound">LiteralDatum</ref>*<sp/>typed<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classLiteralDatum" kindref="compound">LiteralDatum</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ta[<sp/>0<sp/>].datum()<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>typed<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref>*<sp/>nextd<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ta[<sp/>1<sp/>].datum()<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>nextd<sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>(<sp/>*typed<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>n-&gt;next<sp/>=<sp/><ref refid="classTypeTrie_1ad35f33cb9ecd3f174b703e62c80a4696" kindref="member">newnode</ref>(<sp/>*nextd<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ta.<ref refid="classTokenArray_1ad6bd1a13ab4eae2de7c05e311a3c4207" kindref="member">size</ref>()<sp/>==<sp/>3<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref>*<sp/>altd<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classAggregateDatum" kindref="compound">ArrayDatum</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ta[<sp/>2<sp/>].datum()<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>altd<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;alt<sp/>=<sp/><ref refid="classTypeTrie_1ad35f33cb9ecd3f174b703e62c80a4696" kindref="member">newnode</ref>(<sp/>*altd<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment">Task:<sp/><sp/><sp/><sp/><sp/><sp/>Destructor<sp/>removes<sp/>the<sp/>complete<sp/>tree.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">Author:<sp/><sp/><sp/><sp/>Marc<sp/>Oliver<sp/>Gewaltig</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">Date:<sp/><sp/><sp/><sp/><sp/><sp/>18.11.95</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">Parameter:<sp/>None</highlight></codeline>
<codeline lineno="156"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeTrie::TypeNode</ref>*</highlight></codeline>
<codeline lineno="160" refid="classTypeTrie_1ab5a3623db41b0a42c07c9c21e1ba2ee8" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1ab5a3623db41b0a42c07c9c21e1ba2ee8" kindref="member">TypeTrie::getalternative</ref>(<sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeTrie::TypeNode</ref>*<sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref>&amp;<sp/>type<sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finds<sp/>Node<sp/>for<sp/>the<sp/>current<sp/>type<sp/>in<sp/>the<sp/>alternative<sp/>List,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>at<sp/>pos.<sp/>If<sp/>the<sp/>type<sp/>is<sp/>not<sp/>already<sp/>present,<sp/>a<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Node<sp/>will<sp/>be<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref><sp/>empty;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>==<sp/>empty<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>!=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref><sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>==<sp/><ref refid="namespacesli_1ab9a4380b334ceb97044ad963264037c8" kindref="member">sli::any</ref><sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>entering<sp/>this<sp/>if,<sp/>the<sp/>previous<sp/>if<sp/>added<sp/>an<sp/>extra<sp/>Node,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thus<sp/>pos-&gt;alt-&gt;alt<sp/>will<sp/>not<sp/>be<sp/>defined<sp/>yet<sp/>(nullptr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/>new_tail<sp/>=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>wildcard<sp/>to<sp/>the<sp/>tail<sp/>Node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_tail-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>=<sp/><ref refid="namespacesli_1ab9a4380b334ceb97044ad963264037c8" kindref="member">sli::any</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_tail-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref>.<ref refid="classToken_1aa787cbbbbb9c31a2ccec9cf7c0421785" kindref="member">swap</ref>(<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref><sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_tail-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/><sp/>while()<sp/>cycle<sp/>will<sp/>terminate,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pos-&gt;type==type<sp/>by<sp/>assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9d968feddbc117b6d3659fe40f06150e" kindref="member">alt</ref>;<sp/></highlight><highlight class="comment">//<sp/>pos-&gt;alt<sp/>is<sp/>always<sp/>defined<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="classTypeTrie_1a004f4e995e02879d9dfde8e80ad897d7" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1a004f4e995e02879d9dfde8e80ad897d7" kindref="member">TypeTrie::insert_move</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="typearray_8h_1a6a6749dbe567b56ca734934e8418743e" kindref="member">TypeArray</ref>&amp;<sp/>a,<sp/><ref refid="classToken" kindref="compound">Token</ref>&amp;<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>Task:<sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>&apos;a&apos;<sp/>adds<sp/>a<sp/>correct<sp/>parameter<sp/>list<sp/>into<sp/>the</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;TypeTrie&apos;.<sp/>Function<sp/>&apos;f&apos;<sp/>will<sp/>manage<sp/>the<sp/>handling</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>a<sp/>correct<sp/>parameter<sp/>list.<sp/>If<sp/>&apos;array&apos;<sp/>is<sp/>empty,</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>&apos;f&apos;<sp/>will<sp/>handle<sp/>a<sp/>SLI<sp/>procedure<sp/>without</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>parameter.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Insert<sp/>will<sp/>overwrite<sp/>a<sp/>function<sp/>with<sp/>identical<sp/>parameter</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>which<sp/>might<sp/>be<sp/>already<sp/>in<sp/>the<sp/>trie.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>Bugs:<sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>represents<sp/>a<sp/>parameter-list<sp/>which<sp/>is<sp/>already</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>present,<sp/>nothing<sp/>happens,<sp/>just<sp/>a<sp/>warning<sp/>is</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>issued.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/>Author:<sp/><sp/><sp/><sp/>Marc<sp/>Oliver<sp/>Gewaltig</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>Date:<sp/><sp/><sp/><sp/><sp/><sp/>15.Apr.1998,<sp/>18.11.95</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>completely<sp/>rewritten,<sp/>16.Apr.<sp/>1998</highlight></codeline>
<codeline lineno="227"><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>Parameter:<sp/>a<sp/>=<sp/>array<sp/>of<sp/>datatypes</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>interpreter<sp/>function</highlight></codeline>
<codeline lineno="230"><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>*<sp/>pos<sp/>=<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="className" kindref="compound">Name</ref><sp/>empty;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>assert(<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Functions<sp/>with<sp/>no<sp/>parameters<sp/>are<sp/>possible,<sp/>but<sp/>useless<sp/>in<sp/>trie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>structures,<sp/>so<sp/>it<sp/>is<sp/>best<sp/>to<sp/>forbid<sp/>them!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>assert(<sp/>not<sp/>a.empty()<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>0;<sp/>level<sp/>&lt;<sp/>a.size();<sp/>++level<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/><ref refid="classTypeTrie_1ab5a3623db41b0a42c07c9c21e1ba2ee8" kindref="member">getalternative</ref>(<sp/>pos,<sp/>a[<sp/>level<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classTypeTrie_1_1TypeNode" kindref="compound">TypeNode</ref>(<sp/>empty<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>conditions:</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>1.<sp/>If<sp/>pos-&gt;next<sp/>!=<sp/>nullptr,<sp/>the<sp/>parameter<sp/>list<sp/>overlaps<sp/>with</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>an<sp/>existing<sp/>function<sp/>definition.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>2.<sp/>If<sp/>pos-&gt;alt<sp/>!=<sp/>nullptr,<sp/>something<sp/>undefined<sp/>must<sp/>have<sp/>happened.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>should<sp/>be<sp/>impossible.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a85cf5bd90762997f56b3fbae770b0aa0" kindref="member">next</ref><sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a9a86d3e8f5d56838e8c4914af130316e" kindref="member">type</ref><sp/>=<sp/><ref refid="namespacesli_1a4fcea40a5a1b1949c4155f5bdfff1556" kindref="member">sli::object</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>pos-&gt;<ref refid="classTypeTrie_1_1TypeNode_1a0d73c92d2756f2224beff0bc08f5a1bf" kindref="member">func</ref>.<ref refid="classToken_1a2f61f1702fa6214de27ccff368df11f5" kindref="member">move</ref>(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Method<sp/>&apos;TypeTrie::InsertFunction&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning!<sp/>Ambigous<sp/>Function<sp/>Definition<sp/>.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>function<sp/>with<sp/>longer,<sp/>but<sp/>identical<sp/>initial<sp/>parameter<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>is<sp/>already<sp/>present!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nothing<sp/>was<sp/>changed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">/*_____<sp/>end<sp/>InsertFunction()<sp/>_____________________________________*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classTypeTrie_1ab3054ff54c173e6f523b2103704b3967" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1ab3054ff54c173e6f523b2103704b3967" kindref="member">TypeTrie::toTokenArray</ref>(<sp/><ref refid="classTokenArray" kindref="compound">TokenArray</ref>&amp;<sp/>a<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="278"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>a.clear();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1af742917a541b937a4fa42120c18a9ac5" kindref="member">toTokenArray</ref>(<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classTypeTrie_1af75874239a6274d6babfbcb64496da4a" refkind="member"><highlight class="normal"><ref refid="classTypeTrie_1af75874239a6274d6babfbcb64496da4a" kindref="member">TypeTrie::info</ref>(<sp/>std::ostream&amp;<sp/>out<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="288"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>TypeNode<sp/>const*<sp/>&gt;<sp/>tl;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>tl.reserve(<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref><sp/>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTypeTrie_1a51ffbbc564927ad81a83cb047ed29957" kindref="member">root</ref>-&gt;<ref refid="classTypeTrie_1_1TypeNode_1ad2e347ac48171be93d72ddd6ea46b254" kindref="member">info</ref>(<sp/>out,<sp/>tl<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/typechk.cc"/>
  </compounddef>
</doxygen>
