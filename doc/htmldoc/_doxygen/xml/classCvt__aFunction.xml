<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classCvt__aFunction" kind="class" language="C++" prot="public">
    <compoundname>Cvt_aFunction</compoundname>
    <basecompoundref refid="classSLIFunction" prot="public" virt="non-virtual">SLIFunction</basecompoundref>
    <includes refid="slitypecheck_8h" local="no">slitypecheck.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCvt__aFunction_1a623de1955d7f21ad6f5ec43159506939" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Cvt_aFunction::Cvt_aFunction</definition>
        <argsstring>()</argsstring>
        <name>Cvt_aFunction</name>
        <qualifiedname>Cvt_aFunction::Cvt_aFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/slitypecheck.h" line="71" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/slitypecheck.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classCvt__aFunction_1a87592d8d63fbc05452337a37eda7b0d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Cvt_aFunction::execute</definition>
        <argsstring>(SLIInterpreter *) const override</argsstring>
        <name>execute</name>
        <qualifiedname>Cvt_aFunction::execute</qualifiedname>
        <reimplements refid="classSLIFunction_1abb5b37eaff928b43534627ed6f668e7d">execute</reimplements>
        <param>
          <type><ref refid="classSLIInterpreter" kindref="compound">SLIInterpreter</ref> *</type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>@BeginDocumentation </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="className" kindref="compound">Name</ref>: cvt_a - Converts an array to the equivalent type trie.</para>
<para>Synopsis: /name array cvt_a -&gt; trie</para>
<para>Description: cvt_a tries to construct a type-trie object from a given array. The supplied literal is used as name for the trie-object.</para>
<para>WARNING: Be very careful when using this function. If the supplied array is not well formed, the interpreter will abort ungracefully!</para>
<para>Tries should not be constructed fron scratch using cvt_a. Use the operators trie and addtotrie for this purpose. Rather, cvt_a is provided to correct minor errors in tries with the help of cva_t.</para>
<para>Parameters:</para>
<para>The supplied array is the root trie node. The layout of each trie node must conform to the following pattern: [/type [next] [alt]] for non-leaf nodes and [object] for leaf nodes.</para>
<para>/type is a literal, representing the expected type. object is any type of token. It is returned when this leaf of the trie is reached. [next] is an array, representig the next parameter levels. [alt] is an array, representig parameter alternatives at the current level.</para>
<para>This pattern recursively defines a type-trie. Note, however, that violations of this definition are handled ungracefully.</para>
<para>Examples: /pop [/anytype [-pop-]] cvt_a -&gt; trie</para>
<para>Diagnostics: This operation is low level and does not raise errors. If the array is ill-formed, the interpreter will abort!</para>
<para>Bugs: Errors should be handled gracefully.</para>
<para>Author: Marc-Oliver Gewaltig</para>
<para>FirstVersion: May 20 1999</para>
<para>Remarks: cvt_a is the inverse function to cva_t. If cvt_a is applied to the result of cva_t, it yields the original argument: /name [array] cvt_a cva_t -&gt; /name [array]</para>
<para>SeeAlso: cva_t, trie, addtotrie, type, cst, cva, cv1d, cv2d, cvd, cvi, cvlit, cvn, cvs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/slitypecheck.h" line="74" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/slitypecheck.cc" bodystart="302" bodyend="317"/>
        <references refid="classToken_1a309bb2d7f89471b3aa7ca63cfbde65e4" compoundref="token_8h" startline="360" endline="364">Token::datum</references>
        <references refid="classSLIInterpreter_1a3fe2d135bbae0ac57317ff6db9e39055" compoundref="interpret_8h" startline="251">SLIInterpreter::EStack</references>
        <references refid="classSLIInterpreter_1ab50b50d10259d50fd78939273af5e4f5" compoundref="interpret_8h" startline="250">SLIInterpreter::OStack</references>
        <references refid="classTokenStack_1ac861cc2282484dd2a27dd1304aa719a4" compoundref="tokenstack_8h" startline="127" endline="130">TokenStack::pick</references>
        <references refid="classTokenStack_1a759f4b3c1c8955ab6f236de28a7f1cc0" compoundref="tokenstack_8h" startline="96" endline="99">TokenStack::pop</references>
        <references refid="classTokenStack_1a9d3b72926bfa2090389f0782cd2b6e76" compoundref="tokenstack_8h" startline="68" endline="71">TokenStack::push_move</references>
        <references refid="classTokenStack_1a9773ab5ea14e36d433002f99cde84a94" compoundref="tokenstack_8h" startline="179" endline="182">TokenStack::size</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Cvt_aFunction</label>
        <link refid="classCvt__aFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Cvt_aFunction</label>
        <link refid="classCvt__aFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/slitypecheck.h" line="68" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/slitypecheck.h" bodystart="69" bodyend="75"/>
    <listofallmembers>
      <member refid="classSLIFunction_1a68fd2ac46dd904673f3a8c96009221ba" prot="public" virt="virtual"><scope>Cvt_aFunction</scope><name>backtrace</name></member>
      <member refid="classCvt__aFunction_1a623de1955d7f21ad6f5ec43159506939" prot="public" virt="non-virtual"><scope>Cvt_aFunction</scope><name>Cvt_aFunction</name></member>
      <member refid="classCvt__aFunction_1a87592d8d63fbc05452337a37eda7b0d3" prot="public" virt="virtual"><scope>Cvt_aFunction</scope><name>execute</name></member>
      <member refid="classSLIFunction_1a3c4393dfc6f80af057a81d34a1a8bbad" prot="public" virt="non-virtual"><scope>Cvt_aFunction</scope><name>SLIFunction</name></member>
      <member refid="classSLIFunction_1a1d35138a5956abbaf4a57d051bcb397b" prot="public" virt="virtual"><scope>Cvt_aFunction</scope><name>~SLIFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
