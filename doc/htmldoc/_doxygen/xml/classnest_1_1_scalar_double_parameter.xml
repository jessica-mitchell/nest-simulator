<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_scalar_double_parameter" kind="class" language="C++" prot="public">
    <compoundname>nest::ScalarDoubleParameter</compoundname>
    <basecompoundref refid="classnest_1_1_conn_parameter" prot="public" virt="non-virtual">nest::ConnParameter</basecompoundref>
    <includes refid="conn__parameter_8h" local="no">conn_parameter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_scalar_double_parameter_1ae044e4d7709f1106273d8c5a4f5188ae" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::ScalarDoubleParameter::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="166" column="10" bodyfile="nestkernel/conn_parameter.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_scalar_double_parameter_1a092fba2e4930366bc5ad234ec364fca0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::ScalarDoubleParameter::ScalarDoubleParameter</definition>
        <argsstring>(double value, const size_t)</argsstring>
        <name>ScalarDoubleParameter</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="131" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_scalar_double_parameter_1abc773033c6f6614873b3c550222227fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::ScalarDoubleParameter::value_double</definition>
        <argsstring>(thread, RngPtr, index, Node *) const override</argsstring>
        <name>value_double</name>
        <reimplements refid="classnest_1_1_conn_parameter_1a891c9bf68a5c8f8f5416d090c4fc02f9">value_double</reimplements>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return parameter value.</para>
<para>The parameter value may depend on target threads and random numbers. Both must be supplied, even if a concrete parameter type does not use them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>will be ignored except for array parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>random number generator pointer will be ignored except for random parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="137" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_scalar_double_parameter_1abed441b867905987ad18828cc218243e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>long</type>
        <definition>long nest::ScalarDoubleParameter::value_int</definition>
        <argsstring>(thread, RngPtr, index, Node *) const override</argsstring>
        <name>value_int</name>
        <reimplements refid="classnest_1_1_conn_parameter_1a26c4ff5169680f2ba4a7c8a1694110f4">value_int</reimplements>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="143" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_scalar_double_parameter_1a9858044db72915e264f01e95bac5a370" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::ScalarDoubleParameter::is_array</definition>
        <argsstring>() const override</argsstring>
        <name>is_array</name>
        <reimplements refid="classnest_1_1_conn_parameter_1a574bb23d4cd5514b7bf5d51a440abb55">is_array</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="149" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_scalar_double_parameter_1a4c2d7806b311e68a0dda594ddbfb3ec6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::ScalarDoubleParameter::reset</definition>
        <argsstring>() const override</argsstring>
        <name>reset</name>
        <reimplements refid="classnest_1_1_conn_parameter_1a13d36c79f25051910c1ffe937e31ab1b">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="155" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_scalar_double_parameter_1aca891eb0eb4eb83cebbffd13339d67e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::ScalarDoubleParameter::is_scalar</definition>
        <argsstring>() const override</argsstring>
        <name>is_scalar</name>
        <reimplements refid="classnest_1_1_conn_parameter_1a2bd64986d7840e5cb839fbc9b083c0f6">is_scalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="160" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="160" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Single double value.</para>
<para>On each request, it returns the same value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::ScalarDoubleParameter</label>
        <link refid="classnest_1_1_scalar_double_parameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ConnParameter</label>
        <link refid="classnest_1_1_conn_parameter"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::ScalarDoubleParameter</label>
        <link refid="classnest_1_1_scalar_double_parameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ConnParameter</label>
        <link refid="classnest_1_1_conn_parameter"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/conn_parameter.h" line="128" column="1" bodyfile="nestkernel/conn_parameter.h" bodystart="129" bodyend="167"/>
    <listofallmembers>
      <member refid="classnest_1_1_conn_parameter_1aeba222e75a9c6e4021394160c8f0fc9a" prot="public" virt="non-virtual"><scope>nest::ScalarDoubleParameter</scope><name>ConnParameter</name></member>
      <member refid="classnest_1_1_conn_parameter_1a27fc06b23ad2d6605169b576b0cc2407" prot="public" virt="non-virtual"><scope>nest::ScalarDoubleParameter</scope><name>create</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1a9858044db72915e264f01e95bac5a370" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>is_array</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1aca891eb0eb4eb83cebbffd13339d67e6" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>is_scalar</name></member>
      <member refid="classnest_1_1_conn_parameter_1a5be9d99e7d8036723e673cb1d25a6ee1" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>number_of_values</name></member>
      <member refid="classnest_1_1_conn_parameter_1a89cec93b5a09f8b41ec0c48e9fa3434a" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>provides_long</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1a4c2d7806b311e68a0dda594ddbfb3ec6" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>reset</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1a092fba2e4930366bc5ad234ec364fca0" prot="public" virt="non-virtual"><scope>nest::ScalarDoubleParameter</scope><name>ScalarDoubleParameter</name></member>
      <member refid="classnest_1_1_conn_parameter_1a07bb81308cbcd25b6766faa704680b50" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>skip</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1ae044e4d7709f1106273d8c5a4f5188ae" prot="private" virt="non-virtual"><scope>nest::ScalarDoubleParameter</scope><name>value_</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1abc773033c6f6614873b3c550222227fc" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>value_double</name></member>
      <member refid="classnest_1_1_scalar_double_parameter_1abed441b867905987ad18828cc218243e" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>value_int</name></member>
      <member refid="classnest_1_1_conn_parameter_1ad56f5b8e66ba9cd627f5c0cdd05dfbb4" prot="public" virt="virtual"><scope>nest::ScalarDoubleParameter</scope><name>~ConnParameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
