<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_ntree_1_1masked__iterator" kind="class" language="C++" prot="public">
    <compoundname>nest::Ntree::masked_iterator</compoundname>
    <includes refid="ntree_8h" local="no">ntree.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1_ntree_1_1masked__iterator_1aebb228d5a7be39b370b88ab84d0aa3b3" prot="public" static="no">
        <type>std::forward_iterator_tag</type>
        <definition>using nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::iterator_category =  std::forward_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="154" column="5" bodyfile="nestkernel/ntree.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_ntree_1_1masked__iterator_1a628fbd53ba620023318ab955acf3161c" prot="public" static="no">
        <type>std::pair&lt; <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;, T &gt;</type>
        <definition>using nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::value_type =  std::pair&lt; Position&lt; D &gt;, T &gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="155" column="5" bodyfile="nestkernel/ntree.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_ntree_1_1masked__iterator_1a267c40566250be982f7da0da332849ec" prot="public" static="no">
        <type><ref refid="classnest_1_1_ntree_1_1masked__iterator_1a628fbd53ba620023318ab955acf3161c" kindref="member">value_type</ref> *</type>
        <definition>using nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::pointer =  value_type*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="156" column="5" bodyfile="nestkernel/ntree.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_ntree_1_1masked__iterator_1ad5b88489462449125980af90c3f833a0" prot="public" static="no">
        <type><ref refid="classnest_1_1_ntree_1_1masked__iterator_1a628fbd53ba620023318ab955acf3161c" kindref="member">value_type</ref> &amp;</type>
        <definition>using nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="157" column="5" bodyfile="nestkernel/ntree.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_ntree_1_1masked__iterator_1a44ad78be40d684798ce93c4d4c31dc5e" prot="public" static="no">
        <type>long int</type>
        <definition>using nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::difference_type =  long int</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="158" column="5" bodyfile="nestkernel/ntree.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> *</type>
        <definition>Ntree* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::ntree_</definition>
        <argsstring></argsstring>
        <name>ntree_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="258" column="11" bodyfile="nestkernel/ntree.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1aba9d88f915e2e30426e468d992e4fbd3" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> *</type>
        <definition>Ntree* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::top_</definition>
        <argsstring></argsstring>
        <name>top_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="259" column="11" bodyfile="nestkernel/ntree.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a57e13dc386be1d207a59fd9feb12869d" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> *</type>
        <definition>Ntree* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::allin_top_</definition>
        <argsstring></argsstring>
        <name>allin_top_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="260" column="11" bodyfile="nestkernel/ntree.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a680112c5e3b4603ffd794d9e2d4f61cf" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::node_</definition>
        <argsstring></argsstring>
        <name>node_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="261" column="11" bodyfile="nestkernel/ntree.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a525de527d9f810ed43de01633c2ead12" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>const Mask&lt; D &gt;* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::mask_</definition>
        <argsstring></argsstring>
        <name>mask_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="262" column="16" bodyfile="nestkernel/ntree.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a736be9a1bf5f0d250c6192d94706a9ee" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::anchor_</definition>
        <argsstring></argsstring>
        <name>anchor_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="263" column="14" bodyfile="nestkernel/ntree.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1ae5e7e1883828b6f3cfc49517df99775e" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::anchored_position_</definition>
        <argsstring></argsstring>
        <name>anchored_position_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="264" column="14" bodyfile="nestkernel/ntree.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a04b0a7559a53ef42dffe632b7a70b6b8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &gt;</type>
        <definition>std::vector&lt; Position&lt; D &gt; &gt; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::anchors_</definition>
        <argsstring></argsstring>
        <name>anchors_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="265" column="17" bodyfile="nestkernel/ntree.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1masked__iterator_1a3beca60aaccdef82400968c8a729c140" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::current_anchor_</definition>
        <argsstring></argsstring>
        <name>current_anchor_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="266" column="11" bodyfile="nestkernel/ntree.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a626e58c2b76c2d79d1798fb294a70984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::masked_iterator</definition>
        <argsstring>()</argsstring>
        <name>masked_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an invalid iterator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="162" column="5" bodyfile="nestkernel/ntree.h" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a573e9a6c350f7d5c0b691a82ceeaeb67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::masked_iterator</definition>
        <argsstring>(Ntree &amp;q, const Mask&lt; D &gt; &amp;mask, const Position&lt; D &gt; &amp;anchor)</argsstring>
        <name>masked_iterator</name>
        <param>
          <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an iterator to point to the first leaf node inside the mask within the tree below this <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="175" column="5" bodyfile="nestkernel/ntree_impl.h" bodystart="124" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1ad0b51acff9b5d6ec5df2adf8ab3573a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1_1masked__iterator_1a628fbd53ba620023318ab955acf3161c" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type&amp; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="178" column="5" bodyfile="nestkernel/ntree.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a2ac3b6b520e7e0b4fa30531ea14e362c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1_1masked__iterator_1a628fbd53ba620023318ab955acf3161c" kindref="member">value_type</ref> *</type>
        <definition>value_type* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="183" column="5" bodyfile="nestkernel/ntree.h" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a3bd89cf67a8c7ce380cff281eaaf66c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1_1masked__iterator" kindref="compound">masked_iterator</ref> &amp;</type>
        <definition>Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator &amp; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the iterator to the next node inside the mask within the tree. May cause the iterator to become invalid if there are no more nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="193" column="21" bodyfile="nestkernel/ntree_impl.h" bodystart="353" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a0a9c278ac92200d1e0fd36ae8194d711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1_1masked__iterator" kindref="compound">masked_iterator</ref></type>
        <definition>masked_iterator nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Postfix increment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="199" column="5" bodyfile="nestkernel/ntree.h" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a8d73db880121b314e00d663e1a4b4ca3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator==</definition>
        <argsstring>(const masked_iterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classnest_1_1_ntree_1_1masked__iterator" kindref="compound">masked_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterators are equal if they point to the same node in the same ntree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="211" column="5" bodyfile="nestkernel/ntree.h" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a61f3e34e297c42b6f4025c4d239e9066" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator!=</definition>
        <argsstring>(const masked_iterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnest_1_1_ntree_1_1masked__iterator" kindref="compound">masked_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="216" column="5" bodyfile="nestkernel/ntree.h" bodystart="216" bodyend="219"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a351e1e9404df59ea78a1b5e08c3e6911" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::init_</definition>
        <argsstring>()</argsstring>
        <name>init_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="225" column="10" bodyfile="nestkernel/ntree_impl.h" bodystart="183" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1ac0dbf7a25f913e88683273110449f427" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::next_leaf_</definition>
        <argsstring>()</argsstring>
        <name>next_leaf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the next leaf which is not outside the mask. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="230" column="10" bodyfile="nestkernel/ntree_impl.h" bodystart="233" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1ae10405ba912ab3c4e6cccc1a42f3e5ed" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::first_leaf_</definition>
        <argsstring>()</argsstring>
        <name>first_leaf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the first leaf which is not outside the mask. If no leaf is found below the current quadrant, will continue to <ref refid="classnest_1_1_ntree_1_1masked__iterator_1ac0dbf7a25f913e88683273110449f427" kindref="member">next_leaf_()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="236" column="10" bodyfile="nestkernel/ntree_impl.h" bodystart="318" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1a318e492bd4d9f83828ad7a834b0684b2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::first_leaf_inside_</definition>
        <argsstring>()</argsstring>
        <name>first_leaf_inside_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the allin_top_ to the current quadrant, and find the first leaf below the current quadrant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="242" column="10" bodyfile="nestkernel/ntree_impl.h" bodystart="340" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1ac104c1ff8b7b62d84abbc22b3426f415" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::next_anchor_</definition>
        <argsstring>()</argsstring>
        <name>next_anchor_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Go to the next anchor image. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="247" column="10" bodyfile="nestkernel/ntree_impl.h" bodystart="215" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1masked__iterator_1affd440bb9f6c5ec849958a8071dbd6df" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::anchored_position_inside_mask</definition>
        <argsstring>(const Position&lt; D &gt; &amp;position)</argsstring>
        <name>anchored_position_inside_mask</name>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="250" column="5" bodyfile="nestkernel/ntree.h" bodystart="250" bodyend="256"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Iterator iterating the nodes in a Quadtree inside a <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;</label>
        <link refid="classnest_1_1_ntree"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#children_</edgelabel>
          <edgelabel>#parent_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator</label>
        <link refid="classnest_1_1_ntree_1_1masked__iterator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#allin_top_</edgelabel>
          <edgelabel>#ntree_</edgelabel>
          <edgelabel>#top_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/ntree.h" line="151" column="3" bodyfile="nestkernel/ntree.h" bodystart="152" bodyend="267"/>
    <listofallmembers>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a57e13dc386be1d207a59fd9feb12869d" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>allin_top_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a736be9a1bf5f0d250c6192d94706a9ee" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>anchor_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1ae5e7e1883828b6f3cfc49517df99775e" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>anchored_position_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1affd440bb9f6c5ec849958a8071dbd6df" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>anchored_position_inside_mask</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a04b0a7559a53ef42dffe632b7a70b6b8" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>anchors_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a3beca60aaccdef82400968c8a729c140" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>current_anchor_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a44ad78be40d684798ce93c4d4c31dc5e" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>difference_type</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1ae10405ba912ab3c4e6cccc1a42f3e5ed" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>first_leaf_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a318e492bd4d9f83828ad7a834b0684b2" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>first_leaf_inside_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a351e1e9404df59ea78a1b5e08c3e6911" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>init_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1aebb228d5a7be39b370b88ab84d0aa3b3" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>iterator_category</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a525de527d9f810ed43de01633c2ead12" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>mask_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a626e58c2b76c2d79d1798fb294a70984" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>masked_iterator</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a573e9a6c350f7d5c0b691a82ceeaeb67" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>masked_iterator</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1ac104c1ff8b7b62d84abbc22b3426f415" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>next_anchor_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1ac0dbf7a25f913e88683273110449f427" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>next_leaf_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a680112c5e3b4603ffd794d9e2d4f61cf" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>node_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>ntree_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a61f3e34e297c42b6f4025c4d239e9066" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>operator!=</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1ad0b51acff9b5d6ec5df2adf8ab3573a2" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>operator*</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a3bd89cf67a8c7ce380cff281eaaf66c5" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>operator++</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a0a9c278ac92200d1e0fd36ae8194d711" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>operator++</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a2ac3b6b520e7e0b4fa30531ea14e362c" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>operator-&gt;</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a8d73db880121b314e00d663e1a4b4ca3" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>operator==</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a267c40566250be982f7da0da332849ec" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>pointer</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1ad5b88489462449125980af90c3f833a0" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>reference</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1aba9d88f915e2e30426e468d992e4fbd3" prot="protected" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>top_</name></member>
      <member refid="classnest_1_1_ntree_1_1masked__iterator_1a628fbd53ba620023318ab955acf3161c" prot="public" virt="non-virtual"><scope>nest::Ntree::masked_iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
