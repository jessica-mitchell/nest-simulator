<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlockPTR" kind="class" language="C++" prot="public">
    <compoundname>lockPTR</compoundname>
    <includes refid="lockptr_8h" local="no">lockptr.h</includes>
    <innerclass refid="classlockPTR_1_1PointerObject" prot="private">lockPTR::PointerObject</innerclass>
    <templateparamlist>
      <param>
        <type>class D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classlockPTR_1_1PointerObject" kindref="compound">PointerObject</ref> &gt;</type>
        <definition>std::shared_ptr&lt; PointerObject &gt; lockPTR&lt; D &gt;::obj</definition>
        <argsstring></argsstring>
        <name>obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="158" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="158" bodyend="-1"/>
        <referencedby refid="classlockPTR_1af0b1814c7e7a3c73be409390a67969a9" compoundref="lockptr_8h" startline="311" endline="315">lockPTR&lt; D &gt;::deletable</referencedby>
        <referencedby refid="classlockPTR_1a14e741f296ce60c7b2c43d652e83557f" compoundref="lockptr_8h" startline="218" endline="223">lockPTR&lt; D &gt;::get</referencedby>
        <referencedby refid="classlockPTR_1a98bbf66c05024b0d5e842e53c9fed3eb" compoundref="lockptr_8h" startline="304" endline="308">lockPTR&lt; D &gt;::islocked</referencedby>
        <referencedby refid="classlockPTR_1aa5bd01fb321778b9032285c7c061a93f" compoundref="lockptr_8h" startline="318" endline="322">lockPTR&lt; D &gt;::lock</referencedby>
        <referencedby refid="classlockPTR_1aef32ab3c38d295eeff823306910d9eb7" compoundref="lockptr_8h" startline="167" endline="171">lockPTR&lt; D &gt;::lockPTR</referencedby>
        <referencedby refid="classlockPTR_1ade7233c9cb744671a70a5ca12f443eab" compoundref="lockptr_8h" startline="267" endline="270">lockPTR&lt; D &gt;::operator not</referencedby>
        <referencedby refid="classlockPTR_1aa9be143c1b7ccb7dc00db4dc06fbec3a" compoundref="lockptr_8h" startline="290" endline="293">lockPTR&lt; D &gt;::operator!=</referencedby>
        <referencedby refid="classlockPTR_1a35ec50b0d201bddfdf85e0479252dd56" compoundref="lockptr_8h" startline="251" endline="256">lockPTR&lt; D &gt;::operator*</referencedby>
        <referencedby refid="classlockPTR_1a493137fe74bf9bca351f26bc67d3e7e0" compoundref="lockptr_8h" startline="235" endline="240">lockPTR&lt; D &gt;::operator-&gt;</referencedby>
        <referencedby refid="classlockPTR_1abaff4386ca13149487bad5d20f135e85" compoundref="lockptr_8h" startline="191" endline="199">lockPTR&lt; D &gt;::operator=</referencedby>
        <referencedby refid="classlockPTR_1ad2c2a1f38ec8b669b0581681cee74667" compoundref="lockptr_8h" startline="284" endline="287">lockPTR&lt; D &gt;::operator==</referencedby>
        <referencedby refid="classlockPTR_1a08984bae832803026b2ab12d960658db" compoundref="lockptr_8h" startline="339" endline="342">lockPTR&lt; D &gt;::references</referencedby>
        <referencedby refid="classlockPTR_1a25301a41a012d4e4a9daf42596f5e71e" compoundref="lockptr_8h" startline="325" endline="329">lockPTR&lt; D &gt;::unlock</referencedby>
        <referencedby refid="classlockPTR_1a0b8f1e953c32f47296c2b3491d860a48" compoundref="lockptr_8h" startline="297" endline="301">lockPTR&lt; D &gt;::valid</referencedby>
        <referencedby refid="classlockPTR_1a720470568cf88ac3ea0dbb79741e8098" compoundref="lockptr_8h" startline="185" endline="188">lockPTR&lt; D &gt;::~lockPTR</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlockPTR_1aef32ab3c38d295eeff823306910d9eb7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lockPTR&lt; D &gt;::lockPTR</definition>
        <argsstring>(D *p=nullptr)</argsstring>
        <name>lockPTR</name>
        <param>
          <type>D *</type>
          <declname>p</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="167" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="167" bodyend="171"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a07c5b029ab3d4d4e74969e10fa0c1aa8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lockPTR&lt; D &gt;::lockPTR</definition>
        <argsstring>(D &amp;p_o)</argsstring>
        <name>lockPTR</name>
        <param>
          <type>D &amp;</type>
          <declname>p_o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="173" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="173" bodyend="177"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1ae1118f4a0c02ba5dc47185c37101c5c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lockPTR&lt; D &gt;::lockPTR</definition>
        <argsstring>(const lockPTR&lt; D &gt; &amp;spd)</argsstring>
        <name>lockPTR</name>
        <param>
          <type>const <ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt; &amp;</type>
          <declname>spd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="179" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="179" bodyend="183"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a720470568cf88ac3ea0dbb79741e8098" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual lockPTR&lt; D &gt;::~lockPTR</definition>
        <argsstring>()</argsstring>
        <name>~lockPTR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="185" column="11" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="185" bodyend="188"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1abaff4386ca13149487bad5d20f135e85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt;</type>
        <definition>lockPTR&lt; D &gt; lockPTR&lt; D &gt;::operator=</definition>
        <argsstring>(const lockPTR&lt; D &gt; &amp;spd)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt; &amp;</type>
          <declname>spd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="191" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="191" bodyend="199"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1ab0032e3e5319585585f2c48081dec437" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt;</type>
        <definition>lockPTR&lt; D &gt; lockPTR&lt; D &gt;::operator=</definition>
        <argsstring>(D &amp;s)</argsstring>
        <name>operator=</name>
        <param>
          <type>D &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="202" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="202" bodyend="207"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a256ee6b685f3cdc3d7f9493773de077b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt;</type>
        <definition>lockPTR&lt; D &gt; lockPTR&lt; D &gt;::operator=</definition>
        <argsstring>(D const &amp;s)</argsstring>
        <name>operator=</name>
        <param>
          <type>D const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="210" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="210" bodyend="215"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a14e741f296ce60c7b2c43d652e83557f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D *</type>
        <definition>D* lockPTR&lt; D &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="218" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="218" bodyend="223"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a0a655737b5cd7a60bdcaea0d60647c7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>D *</type>
        <definition>D* lockPTR&lt; D &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="226" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="226" bodyend="232"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a493137fe74bf9bca351f26bc67d3e7e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>D *</type>
        <definition>D* lockPTR&lt; D &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="235" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="235" bodyend="240"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a32dc5b58013861fd81cddd710719cd02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D *</type>
        <definition>D* lockPTR&lt; D &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="243" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="243" bodyend="248"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a35ec50b0d201bddfdf85e0479252dd56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D &amp;</type>
        <definition>D&amp; lockPTR&lt; D &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="251" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="251" bodyend="256"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1ab4c7cecea7ae78d2305617ee239e1cb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const D &amp;</type>
        <definition>const D&amp; lockPTR&lt; D &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="259" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="259" bodyend="263"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1ade7233c9cb744671a70a5ca12f443eab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lockPTR&lt; D &gt;::operator not</definition>
        <argsstring>() const</argsstring>
        <name>operator not</name>
        <briefdescription>
<para>&lt; returns true if and only if not obj-&gt;pointee </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="267" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="267" bodyend="270"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1ad2c2a1f38ec8b669b0581681cee74667" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lockPTR&lt; D &gt;::operator==</definition>
        <argsstring>(const lockPTR&lt; D &gt; &amp;p) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="284" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="284" bodyend="287"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1aa9be143c1b7ccb7dc00db4dc06fbec3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lockPTR&lt; D &gt;::operator!=</definition>
        <argsstring>(const lockPTR&lt; D &gt; &amp;p) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classlockPTR" kindref="compound">lockPTR</ref>&lt; D &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="290" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="290" bodyend="293"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a0b8f1e953c32f47296c2b3491d860a48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lockPTR&lt; D &gt;::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <briefdescription>
<para>&lt; returns true if and only if obj-&gt;pointee </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="297" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="297" bodyend="301"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a98bbf66c05024b0d5e842e53c9fed3eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lockPTR&lt; D &gt;::islocked</definition>
        <argsstring>() const</argsstring>
        <name>islocked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="304" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="304" bodyend="308"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1af0b1814c7e7a3c73be409390a67969a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lockPTR&lt; D &gt;::deletable</definition>
        <argsstring>() const</argsstring>
        <name>deletable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="311" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="311" bodyend="315"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1aa5bd01fb321778b9032285c7c061a93f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lockPTR&lt; D &gt;::lock</definition>
        <argsstring>() const</argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="318" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="318" bodyend="322"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a25301a41a012d4e4a9daf42596f5e71e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lockPTR&lt; D &gt;::unlock</definition>
        <argsstring>() const</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="325" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="325" bodyend="329"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1ae9a9195ce48b6c379072102bfe9a15bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lockPTR&lt; D &gt;::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="332" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="332" bodyend="336"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      <memberdef kind="function" id="classlockPTR_1a08984bae832803026b2ab12d960658db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t lockPTR&lt; D &gt;::references</definition>
        <argsstring>() const</argsstring>
        <name>references</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="339" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="339" bodyend="342"/>
        <references refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" compoundref="lockptr_8h" startline="158">lockPTR&lt; D &gt;::obj</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This template is the standard safe-pointer implementation of NEST. </para>
    </briefdescription>
    <detaileddescription>
<para>In order for this scheme to work smoothly, the user has to take some precautions:<orderedlist>
<listitem><para>each pointer should only be used ONCE to initialize a <ref refid="classlockPTR" kindref="compound">lockPTR</ref>.</para>
</listitem><listitem><para>The <ref refid="classlockPTR" kindref="compound">lockPTR</ref> assumes that there are no other access points to the protected pointer.</para>
</listitem><listitem><para>The <ref refid="classlockPTR" kindref="compound">lockPTR</ref> can freely be copied and passed between objects and functions.</para>
</listitem><listitem><para><ref refid="classlockPTR" kindref="compound">lockPTR</ref> objects should be used like the pointer to the object.</para>
</listitem><listitem><para><ref refid="classlockPTR" kindref="compound">lockPTR</ref> objects should be passed as objects in function calls and function return values.</para>
</listitem><listitem><para>There should be no pointers to <ref refid="classlockPTR" kindref="compound">lockPTR</ref> objects.</para>
</listitem></orderedlist>
</para>
<para>Class <ref refid="classlockPTR" kindref="compound">lockPTR</ref> is designed to behave just like the pointer would. You can use the dereference operators (* and -&gt;) to access the protected object. However, the pointer itself is (with exceptions) never exposed to the user.</para>
<para>Since all access to the referenced object is done via a <ref refid="classlockPTR" kindref="compound">lockPTR</ref>, it is possible to maintain a count of all active references. If this count drops to zero, the referenced object can safely be destroyed. For dynamically allocated objects, delete is invoked on the stored pointer.</para>
<para>class <ref refid="classlockPTR" kindref="compound">lockPTR</ref> distinguishes between dynamically and automatically allocated objects by the way it is initialised:</para>
<para>If a <ref refid="classlockPTR" kindref="compound">lockPTR</ref> is initialised with a pointer, it assumes that the referenced object was dynamically allocated and will call the destructor once the reference count drops to zero.</para>
<para>If the <ref refid="classlockPTR" kindref="compound">lockPTR</ref> is initialised with a reference, it assumes that the object is automatically allocated. Thus, the <ref refid="classlockPTR" kindref="compound">lockPTR</ref> will NOT call the destructor.</para>
<para>In some cases it is necessary for a routine to actually get hold of the pointer, contained in the <ref refid="classlockPTR" kindref="compound">lockPTR</ref> object. This can be done by using the member function <ref refid="classlockPTR_1a14e741f296ce60c7b2c43d652e83557f" kindref="member">get()</ref>. After the pointer has been exposed this way, the <ref refid="classlockPTR" kindref="compound">lockPTR</ref> will regard the referenced object as unsafe, since the user might call delete on the pointer. Thus, <ref refid="classlockPTR" kindref="compound">lockPTR</ref> will &quot;lock&quot; the referenced object and deny all further access. The object can be unlocked by calling the <ref refid="classlockPTR_1ae9a9195ce48b6c379072102bfe9a15bc" kindref="member">unlock()</ref> member.</para>
<para>Equality for lockPTRs is defined as identity of the data object. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>lockPTR&lt; D &gt;</label>
        <link refid="classlockPTR"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" line="86" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/lockptr.h" bodystart="87" bodyend="343"/>
    <listofallmembers>
      <member refid="classlockPTR_1af0b1814c7e7a3c73be409390a67969a9" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>deletable</name></member>
      <member refid="classlockPTR_1a14e741f296ce60c7b2c43d652e83557f" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>get</name></member>
      <member refid="classlockPTR_1a0a655737b5cd7a60bdcaea0d60647c7d" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>get</name></member>
      <member refid="classlockPTR_1a98bbf66c05024b0d5e842e53c9fed3eb" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>islocked</name></member>
      <member refid="classlockPTR_1aa5bd01fb321778b9032285c7c061a93f" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>lock</name></member>
      <member refid="classlockPTR_1aef32ab3c38d295eeff823306910d9eb7" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>lockPTR</name></member>
      <member refid="classlockPTR_1a07c5b029ab3d4d4e74969e10fa0c1aa8" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>lockPTR</name></member>
      <member refid="classlockPTR_1ae1118f4a0c02ba5dc47185c37101c5c0" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>lockPTR</name></member>
      <member refid="classlockPTR_1ae9f233d2653f97743cc47b62ea21f709" prot="private" virt="non-virtual"><scope>lockPTR</scope><name>obj</name></member>
      <member refid="classlockPTR_1ade7233c9cb744671a70a5ca12f443eab" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator not</name></member>
      <member refid="classlockPTR_1aa9be143c1b7ccb7dc00db4dc06fbec3a" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator!=</name></member>
      <member refid="classlockPTR_1a35ec50b0d201bddfdf85e0479252dd56" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator*</name></member>
      <member refid="classlockPTR_1ab4c7cecea7ae78d2305617ee239e1cb5" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator*</name></member>
      <member refid="classlockPTR_1a493137fe74bf9bca351f26bc67d3e7e0" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator-&gt;</name></member>
      <member refid="classlockPTR_1a32dc5b58013861fd81cddd710719cd02" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator-&gt;</name></member>
      <member refid="classlockPTR_1abaff4386ca13149487bad5d20f135e85" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator=</name></member>
      <member refid="classlockPTR_1ab0032e3e5319585585f2c48081dec437" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator=</name></member>
      <member refid="classlockPTR_1a256ee6b685f3cdc3d7f9493773de077b" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator=</name></member>
      <member refid="classlockPTR_1ad2c2a1f38ec8b669b0581681cee74667" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>operator==</name></member>
      <member refid="classlockPTR_1a08984bae832803026b2ab12d960658db" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>references</name></member>
      <member refid="classlockPTR_1a25301a41a012d4e4a9daf42596f5e71e" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>unlock</name></member>
      <member refid="classlockPTR_1ae9a9195ce48b6c379072102bfe9a15bc" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>unlock</name></member>
      <member refid="classlockPTR_1a0b8f1e953c32f47296c2b3491d860a48" prot="public" virt="non-virtual"><scope>lockPTR</scope><name>valid</name></member>
      <member refid="classlockPTR_1a720470568cf88ac3ea0dbb79741e8098" prot="public" virt="virtual"><scope>lockPTR</scope><name>~lockPTR</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
