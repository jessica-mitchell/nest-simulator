<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_normal_parameter" kind="class" language="C++" prot="public">
    <compoundname>nest::NormalParameter</compoundname>
    <basecompoundref refid="classnest_1_1_parameter" prot="public" virt="non-virtual">nest::Parameter</basecompoundref>
    <includes refid="parameter_8h" local="no">parameter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_normal_parameter_1a34b3d07f0a23689845c6b6e4bfdd9e69" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::NormalParameter::mean_</definition>
        <argsstring></argsstring>
        <name>mean_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="271" column="10" bodyfile="nestkernel/parameter.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_normal_parameter_1a8e968997039f3bb4808964b80ef37c36" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::NormalParameter::std_</definition>
        <argsstring></argsstring>
        <name>std_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="271" column="16" bodyfile="nestkernel/parameter.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_normal_parameter_1a7af18cfe7a637bfc39cf41d3a4fe3f2b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacenest_1a78fa90b7b576d693c7411d5c96ce2e56" kindref="member">normal_distribution</ref> &gt;</type>
        <definition>std::vector&lt; normal_distribution &gt; nest::NormalParameter::normal_dists_</definition>
        <argsstring></argsstring>
        <name>normal_dists_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="272" column="15" bodyfile="nestkernel/parameter.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_normal_parameter_1acc7ff35538687c2d8df8f1456a4117a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NormalParameter::NormalParameter</definition>
        <argsstring>(const DictionaryDatum &amp;d)</argsstring>
        <name>NormalParameter</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classnest_1_1_normal_parameter" kindref="compound">NormalParameter</ref> with specifications specified in a dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dictionary with parameter specifications</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The dictionary can include the following entries: mean - mean value std - standard deviation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="266" column="3" bodyfile="nestkernel/parameter.cpp" bodystart="81" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_normal_parameter_1af8f84653ced0e1db8f58882f4cc0a5bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::NormalParameter::value</definition>
        <argsstring>(RngPtr rng, Node *node) override</argsstring>
        <name>value</name>
        <reimplements refid="classnest_1_1_parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplements>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a value based on parameter specifications and arguments. Used when getting a parameter value based on random values or node attributes, like position. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the node, used when the node position is relevant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="268" column="10" bodyfile="nestkernel/parameter.cpp" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_normal_parameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>virtual double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, Node *node)=0</argsstring>
        <name>value</name>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a value based on parameter specifications and arguments. Used when getting a parameter value based on random values or node attributes, like position. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the node, used when the node position is relevant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="256" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_normal_parameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, const std::vector&lt; double &gt; &amp;source_pos, const std::vector&lt; double &gt; &amp;target_pos, const AbstractLayer &amp;layer, Node *node)</argsstring>
        <name>value</name>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>source_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>target_pos</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_abstract_layer" kindref="compound">AbstractLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a value based on parameter specifications and arguments. Used when connecting spatial nodes. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the target node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>spatial layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>target node, required for normal and lognormal parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/parameter.h" line="256" column="3" bodyfile="nestkernel/parameter.h" bodystart="1453" bodyend="1460"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Random parameter with normal distribution. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1_parameter"/>
      </node>
      <node id="1">
        <label>nest::NormalParameter</label>
        <link refid="classnest_1_1_normal_parameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1_parameter"/>
      </node>
      <node id="1">
        <label>nest::NormalParameter</label>
        <link refid="classnest_1_1_normal_parameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/parameter.h" line="253" column="1" bodyfile="nestkernel/parameter.h" bodystart="254" bodyend="273"/>
    <listofallmembers>
      <member refid="classnest_1_1_parameter_1a73d93795275bcb0ba6e59761ab52c928" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>apply</name></member>
      <member refid="classnest_1_1_parameter_1a73aaebb7863ec82e848463497631bd88" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>is_spatial</name></member>
      <member refid="classnest_1_1_parameter_1ac20be9081c515b43cc92c7964d316902" prot="protected" virt="non-virtual"><scope>nest::NormalParameter</scope><name>is_spatial_</name></member>
      <member refid="classnest_1_1_normal_parameter_1a34b3d07f0a23689845c6b6e4bfdd9e69" prot="private" virt="non-virtual"><scope>nest::NormalParameter</scope><name>mean_</name></member>
      <member refid="classnest_1_1_normal_parameter_1a7af18cfe7a637bfc39cf41d3a4fe3f2b" prot="private" virt="non-virtual"><scope>nest::NormalParameter</scope><name>normal_dists_</name></member>
      <member refid="classnest_1_1_normal_parameter_1acc7ff35538687c2d8df8f1456a4117a1" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>NormalParameter</name></member>
      <member refid="classnest_1_1_parameter_1a795d9e3c2ef8e4b2f272377807dc4817" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1_parameter_1a7c451c0b857c87c3df9c2b2340851556" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1_parameter_1ae333502a77312fc1ba9dcfdd27fc762a" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>returns_int_only</name></member>
      <member refid="classnest_1_1_parameter_1ad3e746702f48606b0b18a86188ff3350" prot="protected" virt="non-virtual"><scope>nest::NormalParameter</scope><name>returns_int_only_</name></member>
      <member refid="classnest_1_1_normal_parameter_1a8e968997039f3bb4808964b80ef37c36" prot="private" virt="non-virtual"><scope>nest::NormalParameter</scope><name>std_</name></member>
      <member refid="classnest_1_1_normal_parameter_1af8f84653ced0e1db8f58882f4cc0a5bb" prot="public" virt="virtual"><scope>nest::NormalParameter</scope><name>value</name></member>
      <member refid="classnest_1_1_normal_parameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>value</name></member>
      <member refid="classnest_1_1_normal_parameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" virt="non-virtual"><scope>nest::NormalParameter</scope><name>value</name></member>
      <member refid="classnest_1_1_parameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" virt="virtual" ambiguityscope="nest::Parameter::"><scope>nest::NormalParameter</scope><name>value</name></member>
      <member refid="classnest_1_1_parameter_1a60666e9ec0de4fb53188f64657217939" prot="protected" virt="non-virtual"><scope>nest::NormalParameter</scope><name>value_is_integer_</name></member>
      <member refid="classnest_1_1_parameter_1aee3ca93bce135fcb5d8d7f0ec7bd0daf" prot="public" virt="virtual"><scope>nest::NormalParameter</scope><name>~Parameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
