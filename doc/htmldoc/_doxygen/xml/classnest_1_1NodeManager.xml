<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1NodeManager" kind="class" language="C++" prot="public">
    <compoundname>nest::NodeManager</compoundname>
    <basecompoundref refid="classnest_1_1ManagerInterface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="node__manager_8h" local="no">node_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1SparseNodeArray" kindref="compound">SparseNodeArray</ref> &gt;</type>
        <definition>std::vector&lt; SparseNodeArray &gt; nest::NodeManager::local_nodes_</definition>
        <argsstring></argsstring>
        <name>local_nodes_</name>
        <briefdescription>
<para>The network as sparse array of local nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>One entry per thread, which contains only the thread-local nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="297" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="297" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">add_neurons_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a9b271216cabc00dd720e6ee280e5c7ec" compoundref="node__manager_8cpp" startline="567" endline="578">destruct_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">ensure_valid_thread_local_ids</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a4dcd6368bfc2a47cefae88e7264a9893" compoundref="node__manager_8cpp" startline="689" endline="700">finalize_nodes</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a264043547cdea9a9c528384bcd655e2b" compoundref="node__manager_8h" startline="344" endline="347">get_local_nodes</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad376a94a0b04bdbe90d6d2205f133aed" compoundref="node__manager_8cpp" startline="458" endline="474">get_mpi_local_node_or_device_head</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">get_node_or_proxy</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a907f84fe45e7f1317bd4e1a67f530a61" compoundref="node__manager_8cpp" startline="477" endline="493">get_thread_siblings</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">initialize</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ac99133b91c8280ca9ec6dca876ea9634" compoundref="node__manager_8cpp" startline="671" endline="682">post_run_cleanup</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" compoundref="node__manager_8cpp" startline="608" endline="668">prepare_nodes</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ac3991ea302917428914481485f522207" compoundref="node__manager_8cpp" startline="745" endline="755">set_status</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a8816e71de7be2cb90e6c740940440e0f" compoundref="node__manager_8h" startline="326" endline="329">thread_lid_to_node</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a5a977ee49ab9a6ebf8090bda9e047d54" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classnest_1_1Node" kindref="compound">Node</ref> * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Node* &gt; &gt; nest::NodeManager::wfr_nodes_vec_</definition>
        <argsstring></argsstring>
        <name>wfr_nodes_vec_</name>
        <briefdescription>
<para>Nodelists for unfrozen nodes that use the waveform relaxation method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="299" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="299" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">ensure_valid_thread_local_ids</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1af001754f205f44b770d7955fe481ab8d" compoundref="node__manager_8h" startline="332" endline="335">get_wfr_nodes_on_thread</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a52295870eeb56aa420d5447dbf5f3a28" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::NodeManager::wfr_is_used_</definition>
        <argsstring></argsstring>
        <name>wfr_is_used_</name>
        <briefdescription>
<para>there is at least one node that uses waveform relaxation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="301" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="301" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a834b299d80a29979238589e61d413378" compoundref="node__manager_8cpp" startline="703" endline="712">check_wfr_use</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">ensure_valid_thread_local_ids</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a820f607f75fb1f804e538d4e218cca26" compoundref="node__manager_8h" startline="338" endline="341">wfr_is_used</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1aebcb5f3d56a9fef4299a18898e495f7b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::wfr_network_size_</definition>
        <argsstring></argsstring>
        <name>wfr_network_size_</name>
        <briefdescription>
<para>Network size when wfr_nodes_vec_ was last updated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="304" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="304" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">ensure_valid_thread_local_ids</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">initialize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a3783ae708ada8dcbde71fbc3b0bdf239" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::NodeManager::num_active_nodes_</definition>
        <argsstring></argsstring>
        <name>num_active_nodes_</name>
        <briefdescription>
<para>number of nodes created by prepare_nodes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="305" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="305" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a765e9cedbe4ae1d8da9c7e03c07667c9" compoundref="node__manager_8h" startline="199" endline="202">get_num_active_nodes</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" compoundref="node__manager_8cpp" startline="608" endline="668">prepare_nodes</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1ae5aa61b5677eaf447a588214f66da427" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt;</type>
        <definition>std::vector&lt; index &gt; nest::NodeManager::num_thread_local_devices_</definition>
        <argsstring></argsstring>
        <name>num_thread_local_devices_</name>
        <briefdescription>
<para>stores number of thread local devices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="307" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="307" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ae2839661293edec53d413cd5f3c2aabe" compoundref="node__manager_8cpp" startline="416" endline="419">get_num_thread_local_devices</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">initialize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a52f1f074e2f17109e68704897a9a2976" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::NodeManager::have_nodes_changed_</definition>
        <argsstring></argsstring>
        <name>have_nodes_changed_</name>
        <briefdescription>
<para>true if new nodes have been created since startup or last call to simulate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="309" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="309" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1af4085fa328254a18d3e9f9967ea20df1" compoundref="node__manager_8h" startline="350" endline="353">have_nodes_changed</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ac2e430ac232c535b40656af2568a111b" compoundref="node__manager_8h" startline="356" endline="359">set_have_nodes_changed</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a13587b920020ce4c7c157a8e54d5e17e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; WrappedThreadException &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; WrappedThreadException &gt; &gt; nest::NodeManager::exceptions_raised_</definition>
        <argsstring></argsstring>
        <name>exceptions_raised_</name>
        <briefdescription>
<para>Store exceptions raised in thread-parallel sections for later handling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="313" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="313" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">add_devices_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">add_neurons_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeManager_1a8c0b5c1af05747706bf5d7f6f624f13c" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1Stopwatch" kindref="compound">Stopwatch</ref></type>
        <definition>Stopwatch nest::NodeManager::sw_construction_create_</definition>
        <argsstring></argsstring>
        <name>sw_construction_create_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="316" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="316" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a4c9026ded8f30c78fc99cc9ca690f601" compoundref="node__manager_8cpp" startline="758" endline="762">get_status</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">initialize</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1NodeManager_1a75edf1b8841759b88e502b28b0589766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeManager::NodeManager</definition>
        <argsstring>()</argsstring>
        <name>NodeManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="52" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="48" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a1533a039c29ab6a51bab1987a3136ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeManager::~NodeManager</definition>
        <argsstring>() override</argsstring>
        <name>~NodeManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="53" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="60" bodyend="64"/>
        <references refid="classnest_1_1NodeManager_1a9b271216cabc00dd720e6ee280e5c7ec" compoundref="node__manager_8cpp" startline="567" endline="578">destruct_nodes_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1ManagerInterface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
<para>Prepare manager for operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1KernelManager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1NodeManager_1ac08841a5dbcf756fb1796d690bcc73dc" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="55" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="67" bodyend="76"/>
        <references refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">ensure_valid_thread_local_ids</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1NodeManager_1ae5aa61b5677eaf447a588214f66da427" compoundref="node__manager_8h" startline="307">num_thread_local_devices_</references>
        <references refid="classnest_1_1Stopwatch_1ae5b0aeb25872f4e6d630384e27f22559" compoundref="stopwatch_8h" startline="230" endline="238">nest::Stopwatch::reset</references>
        <references refid="classnest_1_1NodeManager_1a8c0b5c1af05747706bf5d7f6f624f13c" compoundref="node__manager_8h" startline="316">sw_construction_create_</references>
        <references refid="classnest_1_1NodeManager_1aebcb5f3d56a9fef4299a18898e495f7b" compoundref="node__manager_8h" startline="304">wfr_network_size_</references>
        <referencedby refid="classnest_1_1NodeManager_1a9700eb7f8939c4db871d9483b7c8d188" compoundref="node__manager_8cpp" startline="85" endline="90">change_number_of_threads</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ac08841a5dbcf756fb1796d690bcc73dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1ManagerInterface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
<para>Take down manager after operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1KernelManager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="56" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="79" bodyend="82"/>
        <references refid="classnest_1_1NodeManager_1a9b271216cabc00dd720e6ee280e5c7ec" compoundref="node__manager_8cpp" startline="567" endline="578">destruct_nodes_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a9700eb7f8939c4db871d9483b7c8d188" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::change_number_of_threads</definition>
        <argsstring>() override</argsstring>
        <name>change_number_of_threads</name>
        <reimplements refid="classnest_1_1ManagerInterface_1aa88c28844a59b4791eab4b7930fc62b0">change_number_of_threads</reimplements>
        <briefdescription>
<para>Change the number of threads. </para>
        </briefdescription>
        <detaileddescription>
<para>Many data structures within the different managers depend on the number of threads. This function is called on each manager upon a change of that number and allows the manager to re-allocate data structures accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="57" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="85" bodyend="90"/>
        <references refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">initialize</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a88ff132a048d366a6a24dada6add71f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1ManagerInterface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="58" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="765" bodyend="767"/>
        <referencedby refid="namespacenest_1afd19b490a761b78c43c216c7b1b47106" compoundref="nest_8cpp" startline="121" endline="124">nest::set_node_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a4c9026ded8f30c78fc99cc9ca690f601" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1ManagerInterface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="59" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="758" bodyend="762"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="classnest_1_1Stopwatch_1a036f2b7f1243a3fcb75df713845f2dd1" compoundref="stopwatch_8h" startline="200" endline="208">nest::Stopwatch::elapsed</references>
        <references refid="namespacenest_1_1names_1aa48a316651c514d926ede93bbcf0e8b7">nest::names::network_size</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</references>
        <references refid="classnest_1_1NodeManager_1a8c0b5c1af05747706bf5d7f6f624f13c" compoundref="node__manager_8h" startline="316">sw_construction_create_</references>
        <references refid="namespacenest_1_1names_1a040ef461fee680688ace14f48bd2cc12">nest::names::time_construction_create</references>
        <referencedby refid="namespacenest_1a6e5a92a44e3eda3be872a61843a32430" compoundref="nest_8cpp" startline="127" endline="130">nest::get_node_status</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" compoundref="node__manager_8cpp" startline="312" endline="393">get_nodes</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a8dff5dbae74f671b28513c2bfa402675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::NodeManager::get_status</definition>
        <argsstring>(index)</argsstring>
        <name>get_status</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>idx</defname>
        </param>
        <briefdescription>
<para>Get properties of a node. </para>
        </briefdescription>
        <detaileddescription>
<para>The specified node must exist. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnknownNode" kindref="compound">nest::UnknownNode</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Target" kindref="compound">Target</ref> does not exist in the network. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="65" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="93" bodyend="102"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="classnest_1_1NodeManager_1ad376a94a0b04bdbe90d6d2205f133aed" compoundref="node__manager_8cpp" startline="458" endline="474">get_mpi_local_node_or_device_head</references>
        <references refid="namespacenest_1_1names_1a8f3b23679799316ba69b9d6c98c69e3a">nest::names::target</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ac3991ea302917428914481485f522207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_status</definition>
        <argsstring>(index, const DictionaryDatum &amp;)</argsstring>
        <name>set_status</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>Set properties of a <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The specified node must exist. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnknownNode" kindref="compound">nest::UnknownNode</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Target" kindref="compound">Target</ref> does not exist in the network. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nest::UnaccessedDictionaryEntry</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-proxy target did not read dict entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TypeMismatch</parametername>
</parameternamelist>
<parameterdescription>
<para>Array is not a flat &amp; homogeneous array of integers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="74" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="745" bodyend="755"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1NodeManager_1aa0db2bfeb38e55cfdc8252a41845141c" compoundref="node__manager_8cpp" startline="581" endline="596">set_status_single_node_</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::NodeManager::add_node</definition>
        <argsstring>(index m, long n=1)</argsstring>
        <name>add_node</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add a number of nodes to the network. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates n <ref refid="classnest_1_1Node" kindref="compound">Node</ref> objects of <ref refid="classnest_1_1Model" kindref="compound">Model</ref> m and adds them to the Network at the current position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>valid <ref refid="classnest_1_1Model" kindref="compound">Model</ref> ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Nodes to be created. Defaults to 1 if not specified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> as lock pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="85" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="105" bodyend="183"/>
        <references refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">add_devices_</references>
        <references refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">add_music_nodes_</references>
        <references refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">add_neurons_</references>
        <references refid="classnest_1_1ModelRangeManager_1a1ccd0037bf5e449cac22d80711fc7793" compoundref="modelrange__manager_8cpp" startline="57" endline="78">nest::ModelRangeManager::add_range</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="249">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1KernelManager_1a39a94f269d1aeb7363ae5c33783b762e" compoundref="kernel__manager_8h" startline="251">nest::KernelManager::event_delivery_manager</references>
        <references refid="classnest_1_1NodeManager_1a13587b920020ce4c7c157a8e54d5e17e" compoundref="node__manager_8h" startline="313">exceptions_raised_</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="267" endline="271">nest::ModelManager::get_node_model</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="classnest_1_1NodeManager_1a52f1f074e2f17109e68704897a9a2976" compoundref="node__manager_8h" startline="309">have_nodes_changed_</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" compoundref="logging_8h" startline="29">LOG</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaf8dec0ca154ba4dd8045accef88b46" compoundref="logging_8h" startline="58">nest::M_ERROR</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac918263c6420db964adbf3a3375cf9ee" compoundref="logging_8h" startline="54">nest::M_INFO</references>
        <references refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3">nest::names::model</references>
        <references refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885">nest::names::model_id</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" compoundref="kernel__manager_8h" startline="248">nest::KernelManager::modelrange_manager</references>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
        <references refid="classnest_1_1ConnectionManager_1a8ac8d6d68a9cde77289adee0f18bb03c" compoundref="connection__manager_8h" startline="683" endline="686">nest::ConnectionManager::resize_target_table_devices_to_number_of_neurons</references>
        <references refid="classnest_1_1ConnectionManager_1a7c615b8040991ef941ed79f1da616e62" compoundref="connection__manager_8h" startline="689" endline="692">nest::ConnectionManager::resize_target_table_devices_to_number_of_synapse_types</references>
        <references refid="classnest_1_1EventDeliveryManager_1abecd604a0371f3f9a0625ceb9795ee36" compoundref="event__delivery__manager_8h" startline="518" endline="521">nest::EventDeliveryManager::set_off_grid_communication</references>
        <references refid="classnest_1_1Stopwatch_1ae80b1941ac79667732c90314755b017a" compoundref="stopwatch_8h" startline="165" endline="175">nest::Stopwatch::start</references>
        <references refid="classnest_1_1Stopwatch_1ae7799c842d1a9a6c65e65d686025ba2d" compoundref="stopwatch_8h" startline="178" endline="187">nest::Stopwatch::stop</references>
        <references refid="classnest_1_1NodeManager_1a8c0b5c1af05747706bf5d7f6f624f13c" compoundref="node__manager_8h" startline="316">sw_construction_create_</references>
        <references refid="namespaceboost_1_1tuples_1aa87b0f687682daa154ba6aae65ca909c" compoundref="iterator__pair_8h" startline="42" endline="47">boost::tuples::swap</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="namespacenest_1aa2a77f5dfa38b2ed7837975a4ef39a7e" compoundref="nest_8cpp" startline="164" endline="173">nest::create</referencedby>
        <referencedby refid="classnest_1_1AbstractLayer_1a268b14297e57188c5f29a44bad369990" compoundref="layer_8cpp" startline="55" endline="160">nest::AbstractLayer::create_layer</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::NodeManager::get_nodes</definition>
        <argsstring>(const DictionaryDatum &amp;dict, const bool local_only)</argsstring>
        <name>get_nodes</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>local_only</declname>
        </param>
        <briefdescription>
<para>Get node ID&apos;s of all nodes with the given properties. </para>
        </briefdescription>
        <detaileddescription>
<para>Only node ID&apos;s of nodes matching the properties given in the dictionary exactly will be returned. If the dictionary is empty, all nodes will be returned. If the local_only bool is true, only node IDs of nodes simulated on the local MPI process will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dict</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter dictionary of selection properties </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_only</parametername>
</parameternamelist>
<parameterdescription>
<para>bool indicating whether all nodes, or just mpi local nodes should be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> as lock pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="101" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="312" bodyend="393"/>
        <references refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" compoundref="mpi__manager_8cpp" startline="1061" endline="1063">nest::MPIManager::communicate</references>
        <references refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb">nest::NodeCollection::create</references>
        <references refid="classnest_1_1NodeManager_1a264043547cdea9a9c528384bcd655e2b" compoundref="node__manager_8h" startline="344" endline="347">get_local_nodes</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="classnest_1_1NodeManager_1a4c9026ded8f30c78fc99cc9ca690f601" compoundref="node__manager_8cpp" startline="758" endline="762">get_status</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="244">nest::KernelManager::mpi_manager</references>
        <references refid="namespacenest_1_1names_1ab153cba7971a1ce0c755195c4096266a">nest::names::params</references>
        <references refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">nest::sort</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="namespacenest_1aceadf186ded6e26f22792d6ae9e9159f" compoundref="nest_8cpp" startline="176" endline="179">nest::get_nodes</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return total number of network nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="106" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="320" bodyend="323"/>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1ae14172cd7bc3e95af782489ceaa5de3a" compoundref="recording__backend__ascii_8cpp" startline="157" endline="169">nest::RecordingBackendASCII::compute_vp_node_id_string_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">ensure_valid_thread_local_ids</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1aa6e170165e803d3604b6bdc42912a6e9" compoundref="node__manager_8cpp" startline="409" endline="413">get_max_num_local_nodes</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">get_node_or_proxy</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a4c9026ded8f30c78fc99cc9ca690f601" compoundref="node__manager_8cpp" startline="758" endline="762">get_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" compoundref="sp__manager_8cpp" startline="624" endline="683">nest::SPManager::get_synaptic_elements</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a90063b4c289115d9337a4bf3bc28bff8" compoundref="conn__builder_8cpp" startline="432" endline="436">nest::ConnBuilder::loop_over_targets_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a6c70952e62625a89a6b82a972d31e488" compoundref="node__manager_8cpp" startline="715" endline="742">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1aa6e170165e803d3604b6bdc42912a6e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::get_max_num_local_nodes</definition>
        <argsstring>() const</argsstring>
        <name>get_max_num_local_nodes</name>
        <briefdescription>
<para>Returns the maximal number of nodes per virtual process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="111" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="409" bodyend="413"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</references>
        <referencedby refid="classnest_1_1TargetTable_1ab2b10c675f23dfc38f8922f61b521127" compoundref="target__table_8cpp" startline="53" endline="68">nest::TargetTable::prepare</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ae2839661293edec53d413cd5f3c2aabe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeManager::get_num_thread_local_devices</definition>
        <argsstring>(thread t) const</argsstring>
        <name>get_num_thread_local_devices</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns the number of devices per thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="116" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="416" bodyend="419"/>
        <references refid="classnest_1_1NodeManager_1ae5aa61b5677eaf447a588214f66da427" compoundref="node__manager_8h" startline="307">num_thread_local_devices_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a6c70952e62625a89a6b82a972d31e488" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::print</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <briefdescription>
<para>Print network information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="121" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="715" bodyend="742"/>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="267" endline="271">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenest_1a113f9049bd2e4bf0b496cb6e8625df45" compoundref="ntree__impl_8h" startline="113" endline="121">nest::mod</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</references>
        <referencedby refid="namespacenest_1a4ed8a25d4c6dc9e616579164a16a8630" compoundref="nest_8cpp" startline="78" endline="81">nest::print_nodes_to_stream</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a178aff3a1bd286e6256c7146952ddaa6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::is_local_node</definition>
        <argsstring>(Node *) const</argsstring>
        <name>is_local_node</name>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Return true, if the given <ref refid="classnest_1_1Node" kindref="compound">Node</ref> is on the local machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="126" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="396" bodyend="399"/>
        <references refid="classnest_1_1VPManager_1a7fec83282e1abdf3097ec5e9df6ee637" compoundref="vp__manager__impl_8h" startline="61" endline="64">nest::VPManager::is_local_vp</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">nest::Node::get_status_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ad1aef057211358f9a75baa1ca8ba58c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::is_local_node_id</definition>
        <argsstring>(index node_id) const</argsstring>
        <name>is_local_node_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
<para>Return true, if the given node ID is on the local machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="131" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="402" bodyend="406"/>
        <references refid="classnest_1_1VPManager_1a7fec83282e1abdf3097ec5e9df6ee637" compoundref="vp__manager__impl_8h" startline="61" endline="64">nest::VPManager::is_local_vp</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" compoundref="vp__manager__impl_8h" startline="43" endline="46">nest::VPManager::node_id_to_vp</references>
        <references refid="namespacenest_1_1names_1a69f9c342c45c3f44427ce00f808da0e4">nest::names::vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="namespacenest_1acd27b8e605b9217b44c1cdbcafef61dc" compoundref="spatial_8cpp" startline="139" endline="196">nest::displacement</referencedby>
        <referencedby refid="namespacenest_1a110b54fe73a6033aab002995564c4e8a" compoundref="spatial_8cpp" startline="232" endline="289">nest::distance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::get_node_or_proxy</definition>
        <argsstring>(index node_id, thread tid)</argsstring>
        <name>get_node_or_proxy</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Return pointer to the specified <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The function expects that the given node ID and thread are valid. If they are not, an assertion will fail. In case the given <ref refid="classnest_1_1Node" kindref="compound">Node</ref> does not exist on the fiven thread, a proxy is returned instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the <ref refid="classnest_1_1Node" kindref="compound">Node</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>local thread index of the <ref refid="classnest_1_1Node" kindref="compound">Node</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="144" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="422" bodyend="434"/>
        <references refid="classnest_1_1ModelManager_1acc955f7172e28dd05d2d0496ecdf2423" compoundref="model__manager__impl_8h" startline="80" endline="87">nest::ModelManager::get_proxy_node</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</references>
        <referencedby refid="namespacenest_1ae70d1711c4858531e2f644ce06800846" compoundref="nest_8cpp" startline="351" endline="362">nest::apply</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1aaaf1a924c8030b8971b6f86e448615cb" compoundref="conn__builder_8cpp" startline="159" endline="198">nest::ConnBuilder::change_connected_synaptic_elements</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a0594fd0c611ae17f9ebe921d0153e60a" compoundref="connection__manager_8cpp" startline="439" endline="461">nest::ConnectionManager::connect</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a32044ab7e189d7ca5389165781b1b126" compoundref="conn__builder_8cpp" startline="608" endline="684">nest::OneToOneBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a923eef1a06a2714c07fbfb18a8be03a3" compoundref="conn__builder_8cpp" startline="839" endline="892">nest::AllToAllBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedInDegreeBuilder_1a831a8c5343e315c97863c5112ea27f57" compoundref="conn__builder_8cpp" startline="1136" endline="1194">nest::FixedInDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedOutDegreeBuilder_1ab9a2bb23bb142823ef65509b1486ed53" compoundref="conn__builder_8cpp" startline="1302" endline="1372">nest::FixedOutDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedTotalNumberBuilder_1abab6d39ad2dc94125e09f5c6fc4212c4" compoundref="conn__builder_8cpp" startline="1410" endline="1541">nest::FixedTotalNumberBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1BernoulliBuilder_1a0aa500518f0f92edf83f9273f25a3495" compoundref="conn__builder_8cpp" startline="1570" endline="1624">nest::BernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1SymmetricBernoulliBuilder_1a7dc57144fbbfb3bdacc30a8b6de8307b" compoundref="conn__builder_8cpp" startline="1692" endline="1783">nest::SymmetricBernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1SPBuilder_1a3f3cc4e89529157f3c2381423d8f79ad" compoundref="conn__builder_8cpp" startline="1850" endline="1896">nest::SPBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a4f5d4769f422431b7560df35af23867a" compoundref="connection__manager_8cpp" startline="571" endline="743">nest::ConnectionManager::connect_arrays</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1aef56ff34a0321cb40e4a13b5e3743323" compoundref="connection__manager_8cpp" startline="1406" endline="1495">nest::ConnectionManager::connection_required</referencedby>
        <referencedby refid="classnest_1_1SPManager_1ae2c3831a343dd28da33c87fed976b2a9" compoundref="sp__manager_8cpp" startline="533" endline="562">nest::SPManager::delete_synapse</referencedby>
        <referencedby refid="namespacenest_1a5d96a7094e3aaa072e4d940a47378b48" compoundref="nest_8cpp" startline="216" endline="225">nest::disconnect</referencedby>
        <referencedby refid="classnest_1_1SPManager_1ae5b9af1301a59e2ccde8633c203e34a3" compoundref="sp__manager_8cpp" startline="215" endline="252">nest::SPManager::disconnect</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a4311332702ee0643fa6fc4aadf29a203" compoundref="conn__builder_8cpp" startline="692" endline="737">nest::OneToOneBuilder::disconnect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1ae0f4378442fc308cfc46512d70b77bbc" compoundref="conn__builder_8cpp" startline="985" endline="1032">nest::AllToAllBuilder::disconnect_</referencedby>
        <referencedby refid="namespacenest_1a6443c6b38e840631d5173ba8392a9f70" compoundref="spatial_8cpp" startline="325" endline="366">nest::distance</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="632">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="637" endline="784">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1acc4d13aa2d93e3afc6d18765ececb02c" compoundref="target__table__devices_8cpp" startline="154" endline="182">nest::TargetTableDevices::get_connections_from_devices_</referencedby>
        <referencedby refid="namespacenest_1aed80cb7b194e1d7a6644e3585e76f1c8" compoundref="spatial_8cpp" startline="111" endline="136">nest::get_position</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a1906487a726e8f4bb4e65fe5868e4825" compoundref="connection__manager_8cpp" startline="219" endline="260">nest::ConnectionManager::get_synapse_status</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a0c2f6361c8cd9f8667f4e033f51d0ba5" compoundref="connection__creator__impl_8h" startline="180" endline="250">nest::ConnectionCreator::pairwise_bernoulli_on_source_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1ac2924f703d2138beea75f9bdf5783efb" compoundref="connection__creator__impl_8h" startline="255" endline="338">nest::ConnectionCreator::pairwise_bernoulli_on_target_</referencedby>
        <referencedby refid="classnest_1_1Connector_1a57f7c53b040d5686aceb365001b5bee5" compoundref="connector__base__impl_8h" startline="36" endline="62">nest::Connector&lt; ConnectionT &gt;::send_weight_event</referencedby>
        <referencedby refid="classnest_1_1STDPDopaCommonProperties_1a57839b5f9c9bcd675550ee7f21f6c01f" compoundref="stdp__dopamine__synapse_8cpp" startline="78" endline="102">nest::STDPDopaCommonProperties::set_status</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a9b5dd166871f9902c15de576936dca8f" compoundref="connection__manager_8cpp" startline="263" endline="310">nest::ConnectionManager::set_synapse_status</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a5b19ec07f4ed9e7c79cbff755c5c112b" compoundref="conn__builder_8cpp" startline="746" endline="790">nest::OneToOneBuilder::sp_connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a63715afc65b67a92bc0e6777bd61a91b" compoundref="conn__builder_8cpp" startline="934" endline="977">nest::AllToAllBuilder::sp_connect_</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1aa0018649c25aba23ea18edd33f817403" compoundref="conn__builder_8cpp" startline="799" endline="836">nest::OneToOneBuilder::sp_disconnect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a906d70bc39e3caba3afe5dff1fdc1eb0" compoundref="conn__builder_8cpp" startline="1041" endline="1078">nest::AllToAllBuilder::sp_disconnect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a5a764e628f02ad0ed9cd088428ec9c84" compoundref="connection__manager_8cpp" startline="1044" endline="1066">nest::ConnectionManager::split_to_neuron_device_vectors_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1aa8bc8e084baa168cd5b4754031930d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::get_node_or_proxy</definition>
        <argsstring>(index)</argsstring>
        <name>get_node_or_proxy</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
<para>Return pointer of the specified <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="150" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="437" bodyend="455"/>
        <references refid="classnest_1_1ModelManager_1acc955f7172e28dd05d2d0496ecdf2423" compoundref="model__manager__impl_8h" startline="80" endline="87">nest::ModelManager::get_proxy_node</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" compoundref="vp__manager__impl_8h" startline="43" endline="46">nest::VPManager::node_id_to_vp</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</references>
        <references refid="namespacenest_1_1names_1a69f9c342c45c3f44427ce00f808da0e4">nest::names::vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <references refid="classnest_1_1VPManager_1a58ddc7ca0a301790ffe71f5a9c795de7" compoundref="vp__manager__impl_8h" startline="49" endline="52">nest::VPManager::vp_to_thread</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ad376a94a0b04bdbe90d6d2205f133aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::get_mpi_local_node_or_device_head</definition>
        <argsstring>(index)</argsstring>
        <name>get_mpi_local_node_or_device_head</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="160" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="458" bodyend="474"/>
        <references refid="classnest_1_1ModelManager_1acc955f7172e28dd05d2d0496ecdf2423" compoundref="model__manager__impl_8h" startline="80" endline="87">nest::ModelManager::get_proxy_node</references>
        <references refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" compoundref="node_8h" startline="939" endline="942">nest::Node::has_proxies</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <references refid="classnest_1_1VPManager_1a58ddc7ca0a301790ffe71f5a9c795de7" compoundref="vp__manager__impl_8h" startline="49" endline="52">nest::VPManager::vp_to_thread</references>
        <referencedby refid="classnest_1_1NodeManager_1a8dff5dbae74f671b28513c2bfa402675" compoundref="node__manager_8cpp" startline="93" endline="102">get_status</referencedby>
        <referencedby refid="classnest_1_1FreeLayer_1acb2f436d36da84d837609d56562af384" compoundref="free__layer_8h" startline="113" endline="251">nest::FreeLayer&lt; D &gt;::set_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a907f84fe45e7f1317bd4e1a67f530a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classnest_1_1Node" kindref="compound">Node</ref> * &gt;</type>
        <definition>std::vector&lt; Node * &gt; nest::NodeManager::get_thread_siblings</definition>
        <argsstring>(index n) const</argsstring>
        <name>get_thread_siblings</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return a vector that contains the thread siblings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified <ref refid="classnest_1_1Node" kindref="compound">Node</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1NoThreadSiblingsAvailable" kindref="compound">nest::NoThreadSiblingsAvailable</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Node" kindref="compound">Node</ref> does not have thread siblings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="170" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="477" bodyend="493"/>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1multimeter_1adcf15205a1624343eae90243e692c9e8" compoundref="multimeter_8h" startline="227" endline="248">nest::multimeter::get_status</referencedby>
        <referencedby refid="classnest_1_1spike__recorder_1ab186a323af2338b25eff0aae6cae94e7" compoundref="spike__recorder_8cpp" startline="66" endline="85">nest::spike_recorder::get_status</referencedby>
        <referencedby refid="classnest_1_1spin__detector_1ac6c7cf6c7b0c28505fd96695f575a72b" compoundref="spin__detector_8cpp" startline="78" endline="99">nest::spin_detector::get_status</referencedby>
        <referencedby refid="classnest_1_1weight__recorder_1ac9dfea06dc5c9d7f8e02b4ba0077d131" compoundref="weight__recorder_8cpp" startline="149" endline="172">nest::weight_recorder::get_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::ensure_valid_thread_local_ids</definition>
        <argsstring>()</argsstring>
        <name>ensure_valid_thread_local_ids</name>
        <briefdescription>
<para>Ensure that all nodes in the network have valid thread-local IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>Create up-to-date vector of local nodes, nodes_vec_. This method also sets the thread-local ID on all local nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="177" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="496" bodyend="564"/>
        <references refid="classnest_1_1SparseNodeArray_1_1NodeEntry_1a5f4a3cf79653f046e9bdf6a80ad3ac91" compoundref="sparse__node__array_8h" startline="264" endline="268">nest::SparseNodeArray::NodeEntry::get_node</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">size</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <references refid="classnest_1_1NodeManager_1a52295870eeb56aa420d5447dbf5f3a28" compoundref="node__manager_8h" startline="301">wfr_is_used_</references>
        <references refid="classnest_1_1NodeManager_1aebcb5f3d56a9fef4299a18898e495f7b" compoundref="node__manager_8h" startline="304">wfr_network_size_</references>
        <references refid="classnest_1_1NodeManager_1a5a977ee49ab9a6ebf8090bda9e047d54" compoundref="node__manager_8h" startline="299">wfr_nodes_vec_</references>
        <referencedby refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">initialize</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1add7dd58374edc381ef64ee6197d24620" compoundref="simulation__manager_8cpp" startline="446" endline="509">nest::SimulationManager::prepare</referencedby>
        <referencedby refid="classnest_1_1TargetIdentifierIndex_1a356a5e15e8e34f94624b06d2fa7d553c" compoundref="target__identifier_8h" startline="169" endline="182">nest::TargetIdentifierIndex::set_target</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a8816e71de7be2cb90e6c740940440e0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::NodeManager::thread_lid_to_node</definition>
        <argsstring>(thread t, targetindex thread_local_id) const</argsstring>
        <name>thread_lid_to_node</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1adad102550a6102c0c0bea1d1083a233f" kindref="member">targetindex</ref></type>
          <declname>thread_local_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="179" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="326" bodyend="329"/>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="namespacenest_1_1names_1a8ae438f98e72cb1ef5fc68bfaa3301a6">nest::names::thread_local_id</references>
        <referencedby refid="classnest_1_1TargetIdentifierIndex_1ac0fa7aee0bea0d1a6e739e06326fcae3" compoundref="target__identifier_8h" startline="138" endline="142">nest::TargetIdentifierIndex::get_target_ptr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1af001754f205f44b770d7955fe481ab8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classnest_1_1Node" kindref="compound">Node</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; Node * &gt; &amp; nest::NodeManager::get_wfr_nodes_on_thread</definition>
        <argsstring>(thread) const</argsstring>
        <name>get_wfr_nodes_on_thread</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Get list of nodes on given thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="184" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="332" bodyend="335"/>
        <references refid="classnest_1_1NodeManager_1a5a977ee49ab9a6ebf8090bda9e047d54" compoundref="node__manager_8h" startline="299">wfr_nodes_vec_</references>
        <referencedby refid="classnest_1_1SimulationManager_1a4ad2ea77edb56fb13176de0932bac835" compoundref="simulation__manager_8cpp" startline="776" endline="1074">nest::SimulationManager::update_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::prepare_nodes</definition>
        <argsstring>()</argsstring>
        <name>prepare_nodes</name>
        <briefdescription>
<para>Prepare nodes for simulation and register nodes in node_list. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classnest_1_1NodeManager_1aa58e4f4dd0009bcdd9547d04375b694f" kindref="member">prepare_node_()</ref> for each pertaining <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. <simplesect kind="see"><para><ref refid="classnest_1_1NodeManager_1aa58e4f4dd0009bcdd9547d04375b694f" kindref="member">prepare_node_()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="191" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="608" bodyend="668"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="logging_8h_1a4fb9f400c7eade44c47bea4b934d580f" compoundref="logging_8h" startline="29">LOG</references>
        <references refid="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac918263c6420db964adbf3a3375cf9ee" compoundref="logging_8h" startline="54">nest::M_INFO</references>
        <references refid="classnest_1_1NodeManager_1a3783ae708ada8dcbde71fbc3b0bdf239" compoundref="node__manager_8h" startline="305">num_active_nodes_</references>
        <references refid="classnest_1_1NodeManager_1aa58e4f4dd0009bcdd9547d04375b694f" compoundref="node__manager_8cpp" startline="599" endline="605">prepare_node_</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1SimulationManager_1add7dd58374edc381ef64ee6197d24620" compoundref="simulation__manager_8cpp" startline="446" endline="509">nest::SimulationManager::prepare</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a765e9cedbe4ae1d8da9c7e03c07667c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::NodeManager::get_num_active_nodes</definition>
        <argsstring>()</argsstring>
        <name>get_num_active_nodes</name>
        <briefdescription>
<para>Get the number of nodes created by last <ref refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" kindref="member">prepare_nodes()</ref> call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" kindref="member">prepare_nodes()</ref> </para>
</simplesect>
<simplesect kind="return"><para>number of active nodes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="199" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="199" bodyend="202"/>
        <references refid="classnest_1_1NodeManager_1a3783ae708ada8dcbde71fbc3b0bdf239" compoundref="node__manager_8h" startline="305">num_active_nodes_</references>
        <referencedby refid="classnest_1_1SimulationManager_1aa1ddc2339c6bda7ff3675efb16f6816c" compoundref="simulation__manager_8cpp" startline="633" endline="686">nest::SimulationManager::call_update_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ac99133b91c8280ca9ec6dca876ea9634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::post_run_cleanup</definition>
        <argsstring>()</argsstring>
        <name>post_run_cleanup</name>
        <briefdescription>
<para>Invoke <ref refid="classnest_1_1NodeManager_1ac99133b91c8280ca9ec6dca876ea9634" kindref="member">post_run_cleanup()</ref> on all nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="207" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="671" bodyend="682"/>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a4dcd6368bfc2a47cefae88e7264a9893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::finalize_nodes</definition>
        <argsstring>()</argsstring>
        <name>finalize_nodes</name>
        <briefdescription>
<para>Invoke <ref refid="classnest_1_1NodeManager_1ac08841a5dbcf756fb1796d690bcc73dc" kindref="member">finalize()</ref> on all nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called only if the thread data structures are properly set up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="212" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="689" bodyend="700"/>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1SimulationManager_1af2d373b936e4d432a688a78af29be0ce" compoundref="simulation__manager_8cpp" startline="613" endline="630">nest::SimulationManager::cleanup</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a820f607f75fb1f804e538d4e218cca26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::wfr_is_used</definition>
        <argsstring>() const</argsstring>
        <name>wfr_is_used</name>
        <briefdescription>
<para>Returns whether any node uses waveform relaxation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="217" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="338" bodyend="341"/>
        <references refid="classnest_1_1NodeManager_1a52295870eeb56aa420d5447dbf5f3a28" compoundref="node__manager_8h" startline="301">wfr_is_used_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a834b299d80a29979238589e61d413378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::check_wfr_use</definition>
        <argsstring>()</argsstring>
        <name>check_wfr_use</name>
        <briefdescription>
<para>Checks whether waveform relaxation is used by any node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="222" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="703" bodyend="712"/>
        <references refid="classnest_1_1MPIManager_1a3a49dc7c95b5a7e8daadb0480cae3c4c" compoundref="mpi__manager_8h" startline="723" endline="726">nest::MPIManager::any_true</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="244">nest::KernelManager::mpi_manager</references>
        <references refid="classnest_1_1DataSecondaryEvent_1a3640d11d4d2359909f612263eda76492" compoundref="secondary__event_8h" startline="225" endline="229">nest::DataSecondaryEvent&lt; double, DelayedRateConnectionEvent &gt;::set_coeff_length</references>
        <references refid="classnest_1_1DataSecondaryEvent_1a3640d11d4d2359909f612263eda76492" compoundref="secondary__event_8h" startline="225" endline="229">nest::DataSecondaryEvent&lt; double, DiffusionConnectionEvent &gt;::set_coeff_length</references>
        <references refid="classnest_1_1DataSecondaryEvent_1a3640d11d4d2359909f612263eda76492" compoundref="secondary__event_8h" startline="225" endline="229">nest::DataSecondaryEvent&lt; double, InstantaneousRateConnectionEvent &gt;::set_coeff_length</references>
        <references refid="classnest_1_1DataSecondaryEvent_1a3640d11d4d2359909f612263eda76492" compoundref="secondary__event_8h" startline="225" endline="229">nest::DataSecondaryEvent&lt; double, GapJunctionEvent &gt;::set_coeff_length</references>
        <references refid="classnest_1_1NodeManager_1a52295870eeb56aa420d5447dbf5f3a28" compoundref="node__manager_8h" startline="301">wfr_is_used_</references>
        <referencedby refid="classnest_1_1ConnectionManager_1a42095f521521f147812163a8b98ee96f" compoundref="connection__manager_8cpp" startline="949" endline="1027">nest::ConnectionManager::get_connections</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1add7dd58374edc381ef64ee6197d24620" compoundref="simulation__manager_8cpp" startline="446" endline="509">nest::SimulationManager::prepare</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a264043547cdea9a9c528384bcd655e2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1SparseNodeArray" kindref="compound">SparseNodeArray</ref> &amp;</type>
        <definition>const SparseNodeArray &amp; nest::NodeManager::get_local_nodes</definition>
        <argsstring>(thread) const</argsstring>
        <name>get_local_nodes</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Return a reference to the thread-local nodes of thread t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="227" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="344" bodyend="347"/>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a32044ab7e189d7ca5389165781b1b126" compoundref="conn__builder_8cpp" startline="608" endline="684">nest::OneToOneBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a923eef1a06a2714c07fbfb18a8be03a3" compoundref="conn__builder_8cpp" startline="839" endline="892">nest::AllToAllBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedInDegreeBuilder_1a831a8c5343e315c97863c5112ea27f57" compoundref="conn__builder_8cpp" startline="1136" endline="1194">nest::FixedInDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1BernoulliBuilder_1a0aa500518f0f92edf83f9273f25a3495" compoundref="conn__builder_8cpp" startline="1570" endline="1624">nest::BernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" compoundref="node__manager_8cpp" startline="312" endline="393">get_nodes</referencedby>
        <referencedby refid="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" compoundref="sp__manager_8cpp" startline="624" endline="683">nest::SPManager::get_synaptic_elements</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1a4ad2ea77edb56fb13176de0932bac835" compoundref="simulation__manager_8cpp" startline="776" endline="1074">nest::SimulationManager::update_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1af4085fa328254a18d3e9f9967ea20df1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeManager::have_nodes_changed</definition>
        <argsstring>() const</argsstring>
        <name>have_nodes_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="229" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="350" bodyend="353"/>
        <references refid="classnest_1_1NodeManager_1a52f1f074e2f17109e68704897a9a2976" compoundref="node__manager_8h" startline="309">have_nodes_changed_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ac2e430ac232c535b40656af2568a111b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_have_nodes_changed</definition>
        <argsstring>(const bool changed)</argsstring>
        <name>set_have_nodes_changed</name>
        <param>
          <type>const bool</type>
          <declname>changed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="230" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="356" bodyend="359"/>
        <references refid="classnest_1_1NodeManager_1a52f1f074e2f17109e68704897a9a2976" compoundref="node__manager_8h" startline="309">have_nodes_changed_</references>
        <referencedby refid="classnest_1_1SimulationManager_1aa457cadae541547d8d82bda9b1925ab0" compoundref="simulation__manager_8cpp" startline="689" endline="767">nest::SimulationManager::update_connection_infrastructure</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1NodeManager_1a44edc2e28e545c891c87a4edb5993e7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::init_</definition>
        <argsstring>()</argsstring>
        <name>init_</name>
        <briefdescription>
<para>Initialize the network data structures. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1NodeManager_1a44edc2e28e545c891c87a4edb5993e7d" kindref="member">init_()</ref> is used by the constructor and by reset(). <simplesect kind="see"><para>reset() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="238" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a9b271216cabc00dd720e6ee280e5c7ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::destruct_nodes_</definition>
        <argsstring>()</argsstring>
        <name>destruct_nodes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="239" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="567" bodyend="578"/>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1NodeManager_1ac08841a5dbcf756fb1796d690bcc73dc" compoundref="node__manager_8cpp" startline="79" endline="82">finalize</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a1533a039c29ab6a51bab1987a3136ab3" compoundref="node__manager_8cpp" startline="60" endline="64">~NodeManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1aa0db2bfeb38e55cfdc8252a41845141c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::set_status_single_node_</definition>
        <argsstring>(Node &amp;, const DictionaryDatum &amp;, bool clear_flags=true)</argsstring>
        <name>set_status_single_node_</name>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <defname>target</defname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_flags</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Helper function to set properties on single node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>to set properties for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>containing properties </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para>true (default), access flags are called before each call so Node::set_status_() </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>UnaccessedDictionaryEntry</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="249" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="581" bodyend="596"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="namespacenest_1_1names_1a8f3b23679799316ba69b9d6c98c69e3a">nest::names::target</references>
        <referencedby refid="classnest_1_1NodeManager_1ac3991ea302917428914481485f522207" compoundref="node__manager_8cpp" startline="745" endline="755">set_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1aa58e4f4dd0009bcdd9547d04375b694f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::prepare_node_</definition>
        <argsstring>(Node *)</argsstring>
        <name>prepare_node_</name>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Initialized buffers, register in list of nodes to update/finalize. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>prepare_nodes_() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="255" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="599" bodyend="605"/>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
        <referencedby refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" compoundref="node__manager_8cpp" startline="608" endline="668">prepare_nodes</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::add_neurons_</definition>
        <argsstring>(Model &amp;model, index min_node_id, index max_node_id, NodeCollectionPTR nc_ptr)</argsstring>
        <name>add_neurons_</name>
        <param>
          <type><ref refid="classnest_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>min_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>max_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc_ptr</declname>
        </param>
        <briefdescription>
<para>Add normal neurons. </para>
        </briefdescription>
        <detaileddescription>
<para>Each neuron is added to exactly one virtual process. On all other VPs, it is represented by a proxy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> of neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of first neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of last neuron to create (inclusive). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="267" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="187" bodyend="232"/>
        <references refid="classnest_1_1NodeManager_1a13587b920020ce4c7c157a8e54d5e17e" compoundref="node__manager_8h" startline="313">exceptions_raised_</references>
        <references refid="classnest_1_1VPManager_1a8ddd2beb1aea2c9385b93ad4b842a2cb" compoundref="vp__manager__impl_8h" startline="55" endline="58">nest::VPManager::get_num_virtual_processes</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3">nest::names::model</references>
        <references refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" compoundref="vp__manager__impl_8h" startline="43" endline="46">nest::VPManager::node_id_to_vp</references>
        <references refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" compoundref="node_8cpp" startline="97" endline="100">nest::Node::set_initialized</references>
        <references refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" compoundref="node_8h" startline="1006" endline="1009">nest::Node::set_model_id</references>
        <references refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" compoundref="node_8h" startline="994" endline="997">nest::Node::set_nc_</references>
        <references refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" compoundref="node_8h" startline="987" endline="990">nest::Node::set_node_id_</references>
        <references refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" compoundref="node_8h" startline="1018" endline="1021">nest::Node::set_thread</references>
        <references refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" compoundref="node_8h" startline="1030" endline="1033">nest::Node::set_vp</references>
        <references refid="classnest_1_1VPManager_1aa3d11af1445df6d186a4be6a5bbd5b3f" compoundref="vp__manager__impl_8h" startline="67" endline="70">nest::VPManager::thread_to_vp</references>
        <references refid="namespacenest_1_1names_1a69f9c342c45c3f44427ce00f808da0e4">nest::names::vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::add_devices_</definition>
        <argsstring>(Model &amp;model, index min_node_id, index max_node_id, NodeCollectionPTR nc_ptr)</argsstring>
        <name>add_devices_</name>
        <param>
          <type><ref refid="classnest_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>min_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>max_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc_ptr</declname>
        </param>
        <briefdescription>
<para>Add device nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>For device nodes, a clone of the node is added to every virtual process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> of neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of first neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of last neuron to create (inclusive). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="278" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="235" bodyend="271"/>
        <references refid="classnest_1_1NodeManager_1a13587b920020ce4c7c157a8e54d5e17e" compoundref="node__manager_8h" startline="313">exceptions_raised_</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3">nest::names::model</references>
        <references refid="classnest_1_1NodeManager_1ae5aa61b5677eaf447a588214f66da427" compoundref="node__manager_8h" startline="307">num_thread_local_devices_</references>
        <references refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" compoundref="node_8cpp" startline="97" endline="100">nest::Node::set_initialized</references>
        <references refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" compoundref="node_8cpp" startline="132" endline="135">nest::Node::set_local_device_id</references>
        <references refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" compoundref="node_8h" startline="1006" endline="1009">nest::Node::set_model_id</references>
        <references refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" compoundref="node_8h" startline="994" endline="997">nest::Node::set_nc_</references>
        <references refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" compoundref="node_8h" startline="987" endline="990">nest::Node::set_node_id_</references>
        <references refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" compoundref="node_8h" startline="1018" endline="1021">nest::Node::set_thread</references>
        <references refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" compoundref="node_8h" startline="1030" endline="1033">nest::Node::set_vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeManager::add_music_nodes_</definition>
        <argsstring>(Model &amp;model, index min_node_id, index max_node_id, NodeCollectionPTR nc_ptr)</argsstring>
        <name>add_music_nodes_</name>
        <param>
          <type><ref refid="classnest_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>min_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>max_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc_ptr</declname>
        </param>
        <briefdescription>
<para>Add MUSIC nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Nodes for MUSIC communication are added once per MPI process and are always placed on thread 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> of neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of first neuron to create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of last neuron to create (inclusive). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="290" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.cpp" bodystart="274" bodyend="309"/>
        <references refid="classnest_1_1NodeManager_1a13587b920020ce4c7c157a8e54d5e17e" compoundref="node__manager_8h" startline="313">exceptions_raised_</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" compoundref="node__manager_8h" startline="297">local_nodes_</references>
        <references refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3">nest::names::model</references>
        <references refid="classnest_1_1NodeManager_1ae5aa61b5677eaf447a588214f66da427" compoundref="node__manager_8h" startline="307">num_thread_local_devices_</references>
        <references refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" compoundref="node_8cpp" startline="97" endline="100">nest::Node::set_initialized</references>
        <references refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" compoundref="node_8cpp" startline="132" endline="135">nest::Node::set_local_device_id</references>
        <references refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" compoundref="node_8h" startline="1006" endline="1009">nest::Node::set_model_id</references>
        <references refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" compoundref="node_8h" startline="994" endline="997">nest::Node::set_nc_</references>
        <references refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" compoundref="node_8h" startline="987" endline="990">nest::Node::set_node_id_</references>
        <references refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" compoundref="node_8h" startline="1018" endline="1021">nest::Node::set_thread</references>
        <references refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" compoundref="node_8h" startline="1030" endline="1033">nest::Node::set_vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">add_node</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::NodeManager</label>
        <link refid="classnest_1_1NodeManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::NodeManager</label>
        <link refid="classnest_1_1NodeManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>-sw_construction_create_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::Stopwatch</label>
        <link refid="classnest_1_1Stopwatch"/>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" line="49" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_manager.h" bodystart="50" bodyend="317"/>
    <listofallmembers>
      <member refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_devices_</name></member>
      <member refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_music_nodes_</name></member>
      <member refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_neurons_</name></member>
      <member refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>add_node</name></member>
      <member refid="classnest_1_1NodeManager_1a9700eb7f8939c4db871d9483b7c8d188" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1NodeManager_1a834b299d80a29979238589e61d413378" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>check_wfr_use</name></member>
      <member refid="classnest_1_1ManagerInterface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1NodeManager_1a9b271216cabc00dd720e6ee280e5c7ec" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>destruct_nodes_</name></member>
      <member refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>ensure_valid_thread_local_ids</name></member>
      <member refid="classnest_1_1NodeManager_1a13587b920020ce4c7c157a8e54d5e17e" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>exceptions_raised_</name></member>
      <member refid="classnest_1_1NodeManager_1ac08841a5dbcf756fb1796d690bcc73dc" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1NodeManager_1a4dcd6368bfc2a47cefae88e7264a9893" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>finalize_nodes</name></member>
      <member refid="classnest_1_1NodeManager_1a264043547cdea9a9c528384bcd655e2b" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_local_nodes</name></member>
      <member refid="classnest_1_1NodeManager_1aa6e170165e803d3604b6bdc42912a6e9" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_max_num_local_nodes</name></member>
      <member refid="classnest_1_1NodeManager_1ad376a94a0b04bdbe90d6d2205f133aed" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_mpi_local_node_or_device_head</name></member>
      <member refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_node_or_proxy</name></member>
      <member refid="classnest_1_1NodeManager_1aa8bc8e084baa168cd5b4754031930d34" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_node_or_proxy</name></member>
      <member refid="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_nodes</name></member>
      <member refid="classnest_1_1NodeManager_1a765e9cedbe4ae1d8da9c7e03c07667c9" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_num_active_nodes</name></member>
      <member refid="classnest_1_1NodeManager_1ae2839661293edec53d413cd5f3c2aabe" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_num_thread_local_devices</name></member>
      <member refid="classnest_1_1NodeManager_1a4c9026ded8f30c78fc99cc9ca690f601" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1NodeManager_1a8dff5dbae74f671b28513c2bfa402675" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1NodeManager_1a907f84fe45e7f1317bd4e1a67f530a61" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_thread_siblings</name></member>
      <member refid="classnest_1_1NodeManager_1af001754f205f44b770d7955fe481ab8d" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>get_wfr_nodes_on_thread</name></member>
      <member refid="classnest_1_1NodeManager_1af4085fa328254a18d3e9f9967ea20df1" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>have_nodes_changed</name></member>
      <member refid="classnest_1_1NodeManager_1a52f1f074e2f17109e68704897a9a2976" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>have_nodes_changed_</name></member>
      <member refid="classnest_1_1NodeManager_1a44edc2e28e545c891c87a4edb5993e7d" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>init_</name></member>
      <member refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1NodeManager_1a178aff3a1bd286e6256c7146952ddaa6" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>is_local_node</name></member>
      <member refid="classnest_1_1NodeManager_1ad1aef057211358f9a75baa1ca8ba58c1" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>is_local_node_id</name></member>
      <member refid="classnest_1_1NodeManager_1a807cfe6cdac819360c1d64839c4f274b" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>local_nodes_</name></member>
      <member refid="classnest_1_1ManagerInterface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1ManagerInterface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1NodeManager_1a75edf1b8841759b88e502b28b0589766" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>NodeManager</name></member>
      <member refid="classnest_1_1NodeManager_1a3783ae708ada8dcbde71fbc3b0bdf239" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>num_active_nodes_</name></member>
      <member refid="classnest_1_1NodeManager_1ae5aa61b5677eaf447a588214f66da427" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>num_thread_local_devices_</name></member>
      <member refid="classnest_1_1ManagerInterface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1NodeManager_1ac99133b91c8280ca9ec6dca876ea9634" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1ManagerInterface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1NodeManager_1aa58e4f4dd0009bcdd9547d04375b694f" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>prepare_node_</name></member>
      <member refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>prepare_nodes</name></member>
      <member refid="classnest_1_1NodeManager_1a6c70952e62625a89a6b82a972d31e488" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>print</name></member>
      <member refid="classnest_1_1NodeManager_1ac2e430ac232c535b40656af2568a111b" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>set_have_nodes_changed</name></member>
      <member refid="classnest_1_1NodeManager_1a88ff132a048d366a6a24dada6add71f4" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1NodeManager_1ac3991ea302917428914481485f522207" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1NodeManager_1aa0db2bfeb38e55cfdc8252a41845141c" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>set_status_single_node_</name></member>
      <member refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>size</name></member>
      <member refid="classnest_1_1NodeManager_1a8c0b5c1af05747706bf5d7f6f624f13c" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>sw_construction_create_</name></member>
      <member refid="classnest_1_1NodeManager_1a8816e71de7be2cb90e6c740940440e0f" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>thread_lid_to_node</name></member>
      <member refid="classnest_1_1NodeManager_1a820f607f75fb1f804e538d4e218cca26" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_is_used</name></member>
      <member refid="classnest_1_1NodeManager_1a52295870eeb56aa420d5447dbf5f3a28" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_is_used_</name></member>
      <member refid="classnest_1_1NodeManager_1aebcb5f3d56a9fef4299a18898e495f7b" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_network_size_</name></member>
      <member refid="classnest_1_1NodeManager_1a5a977ee49ab9a6ebf8090bda9e047d54" prot="private" virt="non-virtual"><scope>nest::NodeManager</scope><name>wfr_nodes_vec_</name></member>
      <member refid="classnest_1_1ManagerInterface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::NodeManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1NodeManager_1a1533a039c29ab6a51bab1987a3136ab3" prot="public" virt="non-virtual"><scope>nest::NodeManager</scope><name>~NodeManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
