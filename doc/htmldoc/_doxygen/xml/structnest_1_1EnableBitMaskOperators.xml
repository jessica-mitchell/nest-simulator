<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structnest_1_1EnableBitMaskOperators" kind="struct" language="C++" prot="public">
    <compoundname>nest::EnableBitMaskOperators</compoundname>
    <includes refid="enum__bitfield_8h" local="no">enum_bitfield.h</includes>
    <templateparamlist>
      <param>
        <type>typename Enum</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structnest_1_1EnableBitMaskOperators_1a4e56fa565a0c59ad86d0b242004e0b1f" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool nest::EnableBitMaskOperators&lt; Enum &gt;::enable</definition>
        <argsstring></argsstring>
        <name>enable</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="80" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>These methods support type-safe bitfields using C++&apos;s enum classes. </para>
    </briefdescription>
    <detaileddescription>
<para>Define the bitfield flags as follows:</para>
<para>.. code-block:: C++</para>
<para>enum class MyFlags : unsigned { FIRST_FLAG = 1 &lt;&lt; 0, SECOND_FLAG = 1 &lt;&lt; 1, THIRD_FLAG = 1 &lt;&lt; 2, FOURTH_FLAG = 1 &lt;&lt; 3 };</para>
<para>To prevent template substitution from enabling bitfield operators on <emphasis>every</emphasis> enum class, we use the enable_if mechanism (see <ulink url="https://en.cppreference.com/w/cpp/language/sfinae">https://en.cppreference.com/w/cpp/language/sfinae</ulink>).</para>
<para>A templated struct <computeroutput><ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref></computeroutput> is defined, that, regardless of the template type, contains a single static constant member <computeroutput>enable</computeroutput>, set to false. This is the &quot;default&quot;, as the template may be specialised with any type. However, we can override this behaviour by explicitly providing a template specialisation of <computeroutput><ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref></computeroutput> for a particular type<ndash/>namely, our bitfield enum class <computeroutput>MyFlags</computeroutput><ndash/>with a static constant member by the same name but with value set to true. If we then want to ask during function definition of bitmask operations whether they should be defined for an arbitrary type <computeroutput>T</computeroutput>, all we have to do is specalise <computeroutput><ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref></computeroutput> by this type <computeroutput>T</computeroutput>, and check the value of its <computeroutput>enable</computeroutput> member using <computeroutput>enable_if</computeroutput>.</para>
<para>To enable the bitfield operators for our <computeroutput>MyFlags</computeroutput> class, we thus specialise the template:</para>
<para>.. code-block:: C++</para>
<para>template &lt;&gt; struct EnableBitMaskOperators&lt; MyFlags &gt; { static const bool enable = true; };</para>
<para>Finally, we can instantiate a bitfield and do some operations on it, for example:</para>
<para>.. code-block:: C++</para>
<para>MyFlags my_flags = MyFlags::FIRST_FLAG | MyFlags::FOURTH_FLAG; my_flags |= MyFlags::THIRD_FLAG; if ( flag_is_set( my_flags, MyFlags::FOURTH_FLAG ) ) { std::cout &lt;&lt; &quot;Fourth flag is set!&quot; &lt;&lt; std::endl; } </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::EnableBitMaskOperators&lt; Enum &gt;</label>
        <link refid="structnest_1_1EnableBitMaskOperators"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="78" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="79" bodyend="81"/>
    <listofallmembers>
      <member refid="structnest_1_1EnableBitMaskOperators_1a4e56fa565a0c59ad86d0b242004e0b1f" prot="public" virt="non-virtual"><scope>nest::EnableBitMaskOperators</scope><name>enable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
