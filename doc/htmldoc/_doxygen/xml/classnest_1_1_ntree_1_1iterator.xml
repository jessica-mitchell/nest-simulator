<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_ntree_1_1iterator" kind="class" language="C++" prot="public">
    <compoundname>nest::Ntree::iterator</compoundname>
    <includes refid="ntree_8h" local="no">ntree.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> *</type>
        <definition>Ntree* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::ntree_</definition>
        <argsstring></argsstring>
        <name>ntree_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="143" column="11" bodyfile="nestkernel/ntree.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1iterator_1a5064de67aff540e9fb71ab7aa0cc34d5" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> *</type>
        <definition>Ntree* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::top_</definition>
        <argsstring></argsstring>
        <name>top_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="144" column="11" bodyfile="nestkernel/ntree.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_ntree_1_1iterator_1ad7b6f23e7a4cad3aff61d8d65c804110" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::node_</definition>
        <argsstring></argsstring>
        <name>node_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="145" column="11" bodyfile="nestkernel/ntree.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a97115dd5a15ec6949f33f07c2426c711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::iterator</definition>
        <argsstring>()</argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an invalid iterator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="73" column="5" bodyfile="nestkernel/ntree.h" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1adc069c1ca0fc49c0c9074aef888781d3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::iterator</definition>
        <argsstring>(Ntree &amp;q)</argsstring>
        <name>iterator</name>
        <param>
          <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an iterator to point to the first node in the first non-empty leaf within the tree below this <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="84" column="14" bodyfile="nestkernel/ntree_impl.h" bodystart="37" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a5d79825fa23da444a06fc89b3579da16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::iterator</definition>
        <argsstring>(Ntree &amp;q, index n)</argsstring>
        <name>iterator</name>
        <param>
          <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an iterator to point to the nth node in this <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>, which must be a leaf. The top of the tree is the first ancestor of the <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="91" column="5" bodyfile="nestkernel/ntree.h" bodystart="426" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a185357de84e4e5bd7de68e281d86ec2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1a1dc837a1075696a3f4596ef842d24047" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type&amp; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="94" column="5" bodyfile="nestkernel/ntree.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1ad6e19cc995713f1822dc19ad84058f1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1a1dc837a1075696a3f4596ef842d24047" kindref="member">value_type</ref> *</type>
        <definition>value_type* nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="99" column="5" bodyfile="nestkernel/ntree.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a16643adcdfe83afec052692bcb9d76df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
        <definition>Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator &amp; nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the iterator to the next node within the tree. May cause the iterator to become invalid if there are no more nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="108" column="14" bodyfile="nestkernel/ntree_impl.h" bodystart="61" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a9a27357e6472f8c94e35c19b861943d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_ntree_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Postfix increment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="114" column="5" bodyfile="nestkernel/ntree.h" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a66e0fe42bf0b1eaa7e9f0d3c32cafb24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator==</definition>
        <argsstring>(const iterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classnest_1_1_ntree_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterators are equal if they point to the same node in the same ntree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="126" column="5" bodyfile="nestkernel/ntree.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1a99991c24c7c2a7767469b018de7abaab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator!=</definition>
        <argsstring>(const iterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnest_1_1_ntree_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="131" column="5" bodyfile="nestkernel/ntree.h" bodystart="131" bodyend="134"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1_ntree_1_1iterator_1ac211b71e9094cc21b5ad46a195c1f019" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::next_leaf_</definition>
        <argsstring>()</argsstring>
        <name>next_leaf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move to the next leaf quadrant, or set ntree_ to 0 if there are no more leaves. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/ntree.h" line="141" column="10" bodyfile="nestkernel/ntree_impl.h" bodystart="82" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Iterator iterating the nodes in a Quadtree. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;</label>
        <link refid="classnest_1_1_ntree"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#children_</edgelabel>
          <edgelabel>#parent_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator</label>
        <link refid="classnest_1_1_ntree_1_1iterator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#ntree_</edgelabel>
          <edgelabel>#top_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/ntree.h" line="67" column="3" bodyfile="nestkernel/ntree.h" bodystart="68" bodyend="146"/>
    <listofallmembers>
      <member refid="classnest_1_1_ntree_1_1iterator_1a97115dd5a15ec6949f33f07c2426c711" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>iterator</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1adc069c1ca0fc49c0c9074aef888781d3" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>iterator</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a5d79825fa23da444a06fc89b3579da16" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>iterator</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1ac211b71e9094cc21b5ad46a195c1f019" prot="protected" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>next_leaf_</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1ad7b6f23e7a4cad3aff61d8d65c804110" prot="protected" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>node_</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" prot="protected" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>ntree_</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a99991c24c7c2a7767469b018de7abaab" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>operator!=</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a185357de84e4e5bd7de68e281d86ec2b" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>operator*</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a16643adcdfe83afec052692bcb9d76df" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>operator++</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a9a27357e6472f8c94e35c19b861943d4" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>operator++</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1ad6e19cc995713f1822dc19ad84058f1b" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>operator-&gt;</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a66e0fe42bf0b1eaa7e9f0d3c32cafb24" prot="public" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>operator==</name></member>
      <member refid="classnest_1_1_ntree_1_1iterator_1a5064de67aff540e9fb71ab7aa0cc34d5" prot="protected" virt="non-virtual"><scope>nest::Ntree::iterator</scope><name>top_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
