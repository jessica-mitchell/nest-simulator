<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1NodeCollection" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::NodeCollection</compoundname>
    <derivedcompoundref refid="classnest_1_1NodeCollectionComposite" prot="public" virt="non-virtual">nest::NodeCollectionComposite</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1NodeCollectionPrimitive" prot="public" virt="non-virtual">nest::NodeCollectionPrimitive</derivedcompoundref>
    <includes refid="node__collection_8h" local="no">node_collection.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" prot="public" static="no">
        <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref></type>
        <definition>using nest::NodeCollection::const_iterator =  nc_const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="177" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1NodeCollection_1af51984c097badaedaf49424fd9bf9653" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class nc_const_iterator</definition>
        <argsstring></argsstring>
        <name>nc_const_iterator</name>
        <param>
          <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="174" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1NodeCollection_1ab5d5b3687f26500ad6106d4d4eeba15a" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long nest::NodeCollection::fingerprint_</definition>
        <argsstring></argsstring>
        <name>fingerprint_</name>
        <briefdescription>
<para>Unique identity of the kernel that created the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="372" column="17" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ae29b034a0d1cda526d76b352dc5be027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeCollection::NodeCollection</definition>
        <argsstring>()</argsstring>
        <name>NodeCollection</name>
        <briefdescription>
<para>Initializer gets current fingerprint from the kernel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="182" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ad2fd7c36b215859c8d6fb1717f5bebd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual nest::NodeCollection::~NodeCollection</definition>
        <argsstring>()=default</argsstring>
        <name>~NodeCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="184" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollection::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <briefdescription>
<para>Check to see if the fingerprint of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> matches that of the kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the fingerprint matches that of the kernel, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="227" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ac51897b80c4fda2ef7326457c891936b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::NodeCollection::print_me</definition>
        <argsstring>(std::ostream &amp;) const =0</argsstring>
        <name>print_me</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137">print_me</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a0e3adf6b5bc35aa1ce5331c23b6f0b1c">print_me</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <briefdescription>
<para>Print out the contents of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> in a pretty and informative way. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="233" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a502cfba765cec504e14d04ef66704b78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>virtual index nest::NodeCollection::operator[]</definition>
        <argsstring>(size_t) const =0</argsstring>
        <name>operator[]</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1aa9ecaec828c3ece4643d4308fcf2fcfd">operator[]</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a23c22481f80229c80d18daa5d6cf4e9f">operator[]</reimplementedby>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
<para>Get the node ID in the specified index in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="241" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ae01887046fa8cc3f3a99c55f4bd4f602" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>virtual NodeCollectionPTR nest::NodeCollection::operator+</definition>
        <argsstring>(NodeCollectionPTR) const =0</argsstring>
        <name>operator+</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612">operator+</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a389b48eccc1d773cb1240987ce97f799">operator+</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        </param>
        <briefdescription>
<para>Join two NodeCollections. </para>
        </briefdescription>
        <detaileddescription>
<para>May return a primitive or composite, depending on the input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="250" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1afeb48bca3d5a550bb9a299c91d9b8631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::NodeCollection::operator==</definition>
        <argsstring>(NodeCollectionPTR) const =0</argsstring>
        <name>operator==</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113">operator==</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1ad747aad8ec312607e4bc8782ca539fa2">operator==</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="251" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ab20b171713e27f9b7429e09db6f0e7a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollection::operator!=</definition>
        <argsstring>(NodeCollectionPTR) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>rhs</defname>
        </param>
        <briefdescription>
<para>Check if two NodeCollections are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to be checked against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if they are equal, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="259" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1abf07fcbde67213640c5483c4a403f98c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref></type>
        <definition>virtual const_iterator nest::NodeCollection::begin</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const =0</argsstring>
        <name>begin</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a11fa015ae3a1e31c795fa80f284cbba7">begin</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a21cb441d1685b69d7f2f568aeaca5b6e">begin</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="266" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ad90668fbeaefd6e8776586d30b4e42aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref></type>
        <definition>virtual const_iterator nest::NodeCollection::local_begin</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const =0</argsstring>
        <name>local_begin</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a25abe74fe0454075401e8eefbb618d0a">local_begin</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a223bad349b22043d2fa9705f4a55842e">local_begin</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>, in a parallel context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="274" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1abf47c514428fa0f84689504753210dac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref></type>
        <definition>virtual const_iterator nest::NodeCollection::MPI_local_begin</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const =0</argsstring>
        <name>MPI_local_begin</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a69ab4981e94d91bb504431067502d8d5">MPI_local_begin</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1acf2f8b5cfec022786d398088fa0cf4cf">MPI_local_begin</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>, in an MPI-parallel context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="282" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a51eca62c54656ff2734d6cb5a0e483b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref></type>
        <definition>virtual const_iterator nest::NodeCollection::end</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const =0</argsstring>
        <name>end</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536">end</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df">end</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the end of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of element NC that iterator points to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator representing the end of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>, taking offset into account </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="292" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a679f6c266ee4ecd5d1ccddec3fbe1a74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>ArrayDatum</type>
        <definition>virtual ArrayDatum nest::NodeCollection::to_array</definition>
        <argsstring>() const =0</argsstring>
        <name>to_array</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677">to_array</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a35c866c0e2eb4bf0d8475f99de17c773">to_array</reimplementedby>
        <briefdescription>
<para>Method that creates an ArrayDatum filled with node IDs from the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an ArrayDatum containing node IDs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="299" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ae03394582431b592a1329009113d5d51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t nest::NodeCollection::size</definition>
        <argsstring>() const =0</argsstring>
        <name>size</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa">size</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a1e260655d6d01212c82ce9dbe3389d8d">size</reimplementedby>
        <briefdescription>
<para>Get the size of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of node IDs in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="306" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a0667870543f9c93d54bf38074e508889" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t nest::NodeCollection::step</definition>
        <argsstring>() const =0</argsstring>
        <name>step</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a1744efa14d2e783728a7ffcfaf2c7ec5">step</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a486a189ff78ec7e4c3333bb3bb408006">step</reimplementedby>
        <briefdescription>
<para>Get the step of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>step between node IDs in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="313" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a6a1ddc1166d58bc21724906bcbe71a7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::NodeCollection::contains</definition>
        <argsstring>(const index node_id) const =0</argsstring>
        <name>contains</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a739754ad0ef0c3aa26f9075166d5ed96">contains</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a5008b9e4d16f8d4486229a1c09c0e267">contains</reimplementedby>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
<para>Check if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> contains a specified node ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID to see if exists in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> contains the node ID, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="321" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a5fea3ad07ecd7ee522ba789b50862eb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>virtual NodeCollectionPTR nest::NodeCollection::slice</definition>
        <argsstring>(size_t start, size_t end, size_t step) const =0</argsstring>
        <name>slice</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed">slice</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a3ce7324e418545024e0437812491205e">slice</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>end</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Slices the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to the boundaries, with an optional step parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the boundaries being specified are inclusive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to start at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>One past the index of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to stop at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of places between node IDs to skip. Defaults to 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the new, sliced <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="332" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a64459a3e2385a9203abd33ccb3929c0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="pure-virtual">
        <type>void</type>
        <definition>void nest::NodeCollection::set_metadata</definition>
        <argsstring>(NodeCollectionMetadataPTR)=0</argsstring>
        <name>set_metadata</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a4a18e217a101a22cc6c8b431f7eae2f7">set_metadata</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1ab3c51ceb184c802ea79817513067aabb">set_metadata</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        </param>
        <briefdescription>
<para>Sets the metadata of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>A Metadata pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="339" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1aba46b54dcc6a61e6357d3978d463c6a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        <definition>virtual NodeCollectionMetadataPTR nest::NodeCollection::get_metadata</definition>
        <argsstring>() const =0</argsstring>
        <name>get_metadata</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399">get_metadata</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1ab15dcd28e57637c600ea7fd568876c3c">get_metadata</reimplementedby>
        <briefdescription>
<para>Gets the metadata of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Metadata pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="346" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a15053e02c1951f76f797730666861d35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::NodeCollection::is_range</definition>
        <argsstring>() const =0</argsstring>
        <name>is_range</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1afc4e775b6f06c8d66fd1e7c8670c1151">is_range</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1ac9fcd9713904687bb55f0aa04d3191c3">is_range</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="348" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a6ceaf7ec37849ef7652b1268b5c84ef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::NodeCollection::empty</definition>
        <argsstring>() const =0</argsstring>
        <name>empty</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89">empty</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1ab1c447e6c0c8004ec1b3e4564d5dd7df">empty</reimplementedby>
        <briefdescription>
<para>Checks if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> has no elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> is empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="355" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1ae829046948e5618f4d39ace2873be0be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>long</type>
        <definition>virtual long nest::NodeCollection::find</definition>
        <argsstring>(const index) const =0</argsstring>
        <name>find</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a71f385028830bab3750667189d5bc2a9">find</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a032a030306e6d1f4e06107fbecefdd9f">find</reimplementedby>
        <param>
          <type>const</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns index of node with given node ID in <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Index of node with given node ID; -1 if node not in <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="362" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1addfa5a2ab61eef2d38e4783ff6c8d285" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::NodeCollection::has_proxies</definition>
        <argsstring>() const =0</argsstring>
        <name>has_proxies</name>
        <reimplementedby refid="classnest_1_1NodeCollectionPrimitive_1a0e6e9c17aea9b0d4c46f3dda5f4b1624">has_proxies</reimplementedby>
        <reimplementedby refid="classnest_1_1NodeCollectionComposite_1a74861480c52ee29bd5ceceac750affff">has_proxies</reimplementedby>
        <briefdescription>
<para>Returns whether the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> contains any nodes with proxies or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if any nodes in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> has proxies, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="369" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>static NodeCollectionPTR nest::NodeCollection::create</definition>
        <argsstring>(const IntVectorDatum &amp;node_ids)</argsstring>
        <name>create</name>
        <param>
          <type>const IntVectorDatum &amp;</type>
          <declname>node_ids</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> from a vector of node IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>Results in a primitive if the node IDs are homogeneous and contiguous, or a composite otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of node IDs from which to create the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the created <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="193" column="28"/>
        <referencedby refid="classnest_1_1Layer_1ac1b9a1c8651f3eefae09c200e00974af" compoundref="layer__impl_8h" startline="300" endline="351">nest::Layer&lt; D &gt;::dump_connections</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Cvnodecollection__iaFunction_1a04f1da48fa5c41b862d7d4a651c9c849" compoundref="nestmodule_8cpp" startline="1343" endline="1354">nest::NestModule::Cvnodecollection_iaFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Cvnodecollection__ivFunction_1a36c6f5a638f7d55a876fd935228971d7" compoundref="nestmodule_8cpp" startline="1357" endline="1367">nest::NestModule::Cvnodecollection_ivFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" compoundref="node__manager_8cpp" startline="312" endline="393">nest::NodeManager::get_nodes</referencedby>
        <referencedby refid="namespacenest_1ad2b46e5fbc127088af40a982954db52d" compoundref="nest_8cpp" startline="376" endline="388">nest::node_collection_array_index</referencedby>
        <referencedby refid="structnest_1_1weight__recorder_1_1Parameters___1ab4f0b47823f61ca3c54b28aef291edbc" compoundref="weight__recorder_8cpp" startline="83" endline="128">nest::weight_recorder::Parameters_::set</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a15dd233905afe8d46d6a9a5403365152" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>static NodeCollectionPTR nest::NodeCollection::create</definition>
        <argsstring>(const TokenArray &amp;node_ids)</argsstring>
        <name>create</name>
        <param>
          <type>const TokenArray &amp;</type>
          <declname>node_ids</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> from an array of node IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>Results in a primitive if the node IDs are homogeneous and contiguous, or a composite otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of node IDs from which to create the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the created <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="202" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a81f48891f07b83309c58873fccc4016a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>static NodeCollectionPTR nest::NodeCollection::create</definition>
        <argsstring>(const index node_id)</argsstring>
        <name>create</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> from a single node ID. </para>
        </briefdescription>
        <detaileddescription>
<para>Results in a primitive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Node" kindref="compound">Node</ref> ID from which to create the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the created <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="210" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a150bea73f66dfe270086a3264b65c837" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>static NodeCollectionPTR nest::NodeCollection::create</definition>
        <argsstring>(const std::vector&lt; index &gt; &amp;node_ids)</argsstring>
        <name>create</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>node_ids</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> from an array of node IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>Results in a primitive if the node IDs are homogeneous and contiguous, or a composite otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of node IDs from which to create the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the created <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="219" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>static NodeCollectionPTR nest::NodeCollection::create_</definition>
        <argsstring>()</argsstring>
        <name>create_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="373" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollection_1abd1b80106a2d6a65cbac944b01525dec" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>static NodeCollectionPTR nest::NodeCollection::create_</definition>
        <argsstring>(const std::vector&lt; index &gt; &amp;)</argsstring>
        <name>create_</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="374" column="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Superclass for NodeCollections. </para>
    </briefdescription>
    <detaileddescription>
<para>The superclass acts as an interface to the primitive and composite <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> types. It contains methods, mostly virtual, for the subclasses, and also <ref refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" kindref="member">create()</ref>-methods to be interfaced externally.</para>
<para>The superclass also contains handling of the fingerprint, a unique identity the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> gets from the kernel on creation, which ensures that the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> is not used after the kernel is reset. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::NodeCollection</label>
        <link refid="classnest_1_1NodeCollection"/>
      </node>
      <node id="2">
        <label>nest::NodeCollectionComposite</label>
        <link refid="classnest_1_1NodeCollectionComposite"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::NodeCollectionPrimitive</label>
        <link refid="classnest_1_1NodeCollectionPrimitive"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::NodeCollection</label>
        <link refid="classnest_1_1NodeCollection"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="172" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="173" bodyend="375"/>
    <listofallmembers>
      <member refid="classnest_1_1NodeCollection_1abf07fcbde67213640c5483c4a403f98c" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>begin</name></member>
      <member refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>const_iterator</name></member>
      <member refid="classnest_1_1NodeCollection_1a6a1ddc1166d58bc21724906bcbe71a7a" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>contains</name></member>
      <member refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1a15dd233905afe8d46d6a9a5403365152" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1a81f48891f07b83309c58873fccc4016a" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1a150bea73f66dfe270086a3264b65c837" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" prot="private" virt="non-virtual"><scope>nest::NodeCollection</scope><name>create_</name></member>
      <member refid="classnest_1_1NodeCollection_1abd1b80106a2d6a65cbac944b01525dec" prot="private" virt="non-virtual"><scope>nest::NodeCollection</scope><name>create_</name></member>
      <member refid="classnest_1_1NodeCollection_1a6ceaf7ec37849ef7652b1268b5c84ef8" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>empty</name></member>
      <member refid="classnest_1_1NodeCollection_1a51eca62c54656ff2734d6cb5a0e483b5" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>end</name></member>
      <member refid="classnest_1_1NodeCollection_1ae829046948e5618f4d39ace2873be0be" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>find</name></member>
      <member refid="classnest_1_1NodeCollection_1ab5d5b3687f26500ad6106d4d4eeba15a" prot="private" virt="non-virtual"><scope>nest::NodeCollection</scope><name>fingerprint_</name></member>
      <member refid="classnest_1_1NodeCollection_1aba46b54dcc6a61e6357d3978d463c6a1" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>get_metadata</name></member>
      <member refid="classnest_1_1NodeCollection_1addfa5a2ab61eef2d38e4783ff6c8d285" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1NodeCollection_1a15053e02c1951f76f797730666861d35" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>is_range</name></member>
      <member refid="classnest_1_1NodeCollection_1ad90668fbeaefd6e8776586d30b4e42aa" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>local_begin</name></member>
      <member refid="classnest_1_1NodeCollection_1abf47c514428fa0f84689504753210dac" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>MPI_local_begin</name></member>
      <member refid="classnest_1_1NodeCollection_1af51984c097badaedaf49424fd9bf9653" prot="private" virt="non-virtual"><scope>nest::NodeCollection</scope><name>nc_const_iterator</name></member>
      <member refid="classnest_1_1NodeCollection_1ae29b034a0d1cda526d76b352dc5be027" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>NodeCollection</name></member>
      <member refid="classnest_1_1NodeCollection_1ab20b171713e27f9b7429e09db6f0e7a5" prot="public" virt="virtual"><scope>nest::NodeCollection</scope><name>operator!=</name></member>
      <member refid="classnest_1_1NodeCollection_1ae01887046fa8cc3f3a99c55f4bd4f602" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>operator+</name></member>
      <member refid="classnest_1_1NodeCollection_1afeb48bca3d5a550bb9a299c91d9b8631" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>operator==</name></member>
      <member refid="classnest_1_1NodeCollection_1a502cfba765cec504e14d04ef66704b78" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>operator[]</name></member>
      <member refid="classnest_1_1NodeCollection_1ac51897b80c4fda2ef7326457c891936b" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>print_me</name></member>
      <member refid="classnest_1_1NodeCollection_1a64459a3e2385a9203abd33ccb3929c0f" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>set_metadata</name></member>
      <member refid="classnest_1_1NodeCollection_1ae03394582431b592a1329009113d5d51" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>size</name></member>
      <member refid="classnest_1_1NodeCollection_1a5fea3ad07ecd7ee522ba789b50862eb7" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>slice</name></member>
      <member refid="classnest_1_1NodeCollection_1a0667870543f9c93d54bf38074e508889" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>step</name></member>
      <member refid="classnest_1_1NodeCollection_1a679f6c266ee4ecd5d1ccddec3fbe1a74" prot="public" virt="pure-virtual"><scope>nest::NodeCollection</scope><name>to_array</name></member>
      <member refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" prot="public" virt="non-virtual"><scope>nest::NodeCollection</scope><name>valid</name></member>
      <member refid="classnest_1_1NodeCollection_1ad2fd7c36b215859c8d6fb1717f5bebd9" prot="public" virt="virtual"><scope>nest::NodeCollection</scope><name>~NodeCollection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
