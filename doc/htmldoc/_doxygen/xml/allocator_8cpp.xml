<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="allocator_8cpp" kind="file" language="C++">
    <compoundname>allocator.cpp</compoundname>
    <includes refid="allocator_8h" local="yes">allocator.h</includes>
    <incdepgraph>
      <node id="1">
        <label>allocator.cpp</label>
        <link refid="allocator_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>allocator.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="allocator_8h" kindref="compound">allocator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classsli_1_1pool_1a130f50d9c75a0f58b7ba97c21705ef40" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1a130f50d9c75a0f58b7ba97c21705ef40" kindref="member">sli::pool::pool</ref>()</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>:<sp/>initial_block_size(<sp/>1024<sp/>)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>,<sp/>growth_factor(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>,<sp/>block_size(<sp/>initial_block_size<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>,<sp/>el_size(<sp/>sizeof(<sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>,<sp/>instantiations(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>,<sp/>total(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>,<sp/>capacity(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>,<sp/>chunks(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>,<sp/>head(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>,<sp/>initialized_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classsli_1_1pool_1abee04588cd3aea18b32f8518ae01291f" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1a130f50d9c75a0f58b7ba97c21705ef40" kindref="member">sli::pool::pool</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsli_1_1pool" kindref="compound">sli::pool</ref>&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>:<sp/>initial_block_size(<sp/>p.initial_block_size<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>,<sp/>growth_factor(<sp/>p.growth_factor<sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>,<sp/>block_size(<sp/>initial_block_size<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>,<sp/>el_size(<sp/>sizeof(<sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>,<sp/>instantiations(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>,<sp/>total(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>,<sp/>capacity(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>,<sp/>chunks(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>,<sp/>head(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>,<sp/>initialized_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classsli_1_1pool_1a45c607299de521d2c9e4beb138d46e23" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1a130f50d9c75a0f58b7ba97c21705ef40" kindref="member">sli::pool::pool</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>growth<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>:<sp/>initial_block_size(<sp/>initial<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>,<sp/>growth_factor(<sp/>growth<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>,<sp/>block_size(<sp/>initial_block_size<sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>,<sp/>el_size(<sp/>(<sp/>n<sp/>&lt;<sp/>sizeof(<sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref><sp/>)<sp/>)<sp/>?<sp/>sizeof(<sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref><sp/>)<sp/>:<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>,<sp/>instantiations(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>,<sp/>total(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>,<sp/>capacity(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>,<sp/>chunks(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>,<sp/>head(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>,<sp/>initialized_(<sp/>true<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classsli_1_1pool_1a8a17abcfc7404189f53d206f5b7f504d" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1a8a17abcfc7404189f53d206f5b7f504d" kindref="member">sli::pool::init</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>growth<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert(<sp/>instantiations<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>initial_block_size<sp/>=<sp/>initial;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>growth_factor<sp/>=<sp/>growth;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>block_size<sp/>=<sp/>initial_block_size;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>el_size<sp/>=<sp/>(<sp/>n<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref><sp/>)<sp/>)<sp/>?<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref><sp/>)<sp/>:<sp/>n;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>instantiations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>chunks<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>head<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classsli_1_1pool_1aa00547db5f20787c227bbe65356fb09c" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1aa00547db5f20787c227bbe65356fb09c" kindref="member">sli::pool::~pool</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classsli_1_1pool_1_1chunk" kindref="compound">chunk</ref>*<sp/>n<sp/>=<sp/>chunks;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsli_1_1pool_1_1chunk" kindref="compound">chunk</ref>*<sp/>p<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n-&gt;next;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="classsli_1_1pool" kindref="compound">sli::pool</ref>&amp;</highlight></codeline>
<codeline lineno="98" refid="classsli_1_1pool_1a2698c608ada7e63ba42e8f44d0bc85e5" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1a2698c608ada7e63ba42e8f44d0bc85e5" kindref="member">sli::pool::operator=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsli_1_1pool" kindref="compound">sli::pool</ref>&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>&amp;p<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>initial_block_size<sp/>=<sp/>p.initial_block_size;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>growth_factor<sp/>=<sp/>p.growth_factor;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>block_size<sp/>=<sp/>initial_block_size;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>el_size<sp/>=<sp/>p.el_size;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>instantiations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>chunks<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>head<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classsli_1_1pool_1af5d5a0615c945320cad0d2defa103b40" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1ae7dbc577476e3cab69882c0bdc2c0031" kindref="member">sli::pool::grow</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nelements<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="classsli_1_1pool_1_1chunk" kindref="compound">chunk</ref>*<sp/>n<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsli_1_1pool_1_1chunk" kindref="compound">chunk</ref>(<sp/>nelements<sp/>*<sp/>el_size<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>total<sp/>+=<sp/>nelements;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>n-&gt;next<sp/>=<sp/>chunks;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>chunks<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>start<sp/>=<sp/>n-&gt;mem;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>last<sp/>=<sp/>&amp;start[<sp/>(<sp/>nelements<sp/>-<sp/>1<sp/>)<sp/>*<sp/>el_size<sp/>];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>start;<sp/>p<sp/>&lt;<sp/>last;<sp/>p<sp/>+=<sp/>el_size<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>p<sp/>)-&gt;next<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>p<sp/>+<sp/>el_size<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>last<sp/>)-&gt;next<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>head<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="structsli_1_1pool_1_1link" kindref="compound">link</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>start<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classsli_1_1pool_1ae7dbc577476e3cab69882c0bdc2c0031" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1ae7dbc577476e3cab69882c0bdc2c0031" kindref="member">sli::pool::grow</ref>()</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>grow(<sp/>block_size<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>block_size<sp/>*=<sp/>growth_factor;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classsli_1_1pool_1a77217a4f59992d41227b76444063be55" refkind="member"><highlight class="normal"><ref refid="classsli_1_1pool_1a77217a4f59992d41227b76444063be55" kindref="member">sli::pool::reserve_additional</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/>total<sp/>-<sp/>instantiations;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>capacity<sp/>&lt;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>grow(<sp/>(<sp/>(<sp/>n<sp/>-<sp/>capacity<sp/>)<sp/>/<sp/>block_size<sp/>+<sp/>1<sp/>)<sp/>*<sp/>block_size<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>Code<sp/>below<sp/>is<sp/>for<sp/>the<sp/>PoorMan&apos;s<sp/>Allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_PMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">PoorMansAllocator::init(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_size<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>capacity_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>head_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>chunks_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>chunk_size_<sp/>=<sp/>chunk_size;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">PoorMansAllocator::new_chunk()</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>store<sp/>the<sp/>head<sp/>pointer<sp/>as<sp/>char*,<sp/>because<sp/>sizeof(char)<sp/>=<sp/>1,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>we<sp/>can<sp/>add<sp/>sizeof(object)<sp/>to<sp/>advance<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>head_<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>malloc(<sp/>chunk_size_<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>chunks_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>chunk(<sp/>head_,<sp/>chunks_<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>capacity_<sp/>=<sp/>chunk_size_;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">PoorMansAllocator::destruct()</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>chunk*<sp/>chunks<sp/>=<sp/>chunks_;<sp/>chunks<sp/>!=<sp/>0;<sp/>chunks<sp/>=<sp/>chunks-&gt;next_<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<sp/>chunks-&gt;mem_<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>init(<sp/>chunk_size_<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="188"><highlight class="normal">PoorMansAllocator::alloc(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>obj_size<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>obj_size<sp/>&gt;<sp/>capacity_<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>new_chunk();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>head_;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>head_<sp/>+=<sp/>obj_size;<sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>pointer<sp/>to<sp/>next<sp/>free<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>works,<sp/>because<sp/>sizeof(head*)<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>capacity_<sp/>-=<sp/>obj_size;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">PoorMansAllocator<sp/>poormansallocpool;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>threadprivate(<sp/>poormansallocpool<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/allocator.cpp"/>
  </compounddef>
</doxygen>
