<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1rate__neuron__ipn" kind="class" language="C++" prot="public">
    <compoundname>nest::rate_neuron_ipn</compoundname>
    <basecompoundref refid="classnest_1_1ArchivingNode" prot="public" virt="non-virtual">nest::ArchivingNode</basecompoundref>
    <includes refid="rate__neuron__ipn_8h" local="no">rate_neuron_ipn.h</includes>
    <innerclass refid="structnest_1_1rate__neuron__ipn_1_1Buffers__" prot="private">nest::rate_neuron_ipn::Buffers_</innerclass>
    <innerclass refid="structnest_1_1rate__neuron__ipn_1_1Parameters__" prot="private">nest::rate_neuron_ipn::Parameters_</innerclass>
    <innerclass refid="structnest_1_1rate__neuron__ipn_1_1State__" prot="private">nest::rate_neuron_ipn::State_</innerclass>
    <innerclass refid="structnest_1_1rate__neuron__ipn_1_1Variables__" prot="private">nest::rate_neuron_ipn::Variables_</innerclass>
    <templateparamlist>
      <param>
        <type>class TNonlinearities</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1rate__neuron__ipn_1a49a10579e5c43f5f306e36b116e51c42" prot="public" static="no">
        <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref></type>
        <definition>typedef Node nest::rate_neuron_ipn&lt; TNonlinearities &gt;::base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="111" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1rate__neuron__ipn_1aab7553bdd6cc4036b2c7c6efe42625ea" prot="private" static="no" mutable="no">
        <type>TNonlinearities</type>
        <definition>TNonlinearities nest::rate_neuron_ipn&lt; TNonlinearities &gt;::nonlinearities_</definition>
        <argsstring></argsstring>
        <name>nonlinearities_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="149" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1rate__neuron__ipn_1a4f28edc13e88f997d59f301db10a2930" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1rate__neuron__ipn_1_1Parameters__" kindref="compound">Parameters_</ref></type>
        <definition>Parameters_ nest::rate_neuron_ipn&lt; TNonlinearities &gt;::P_</definition>
        <argsstring></argsstring>
        <name>P_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="289" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1rate__neuron__ipn_1a3537bb48307392b6cf4358f94639e93d" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1rate__neuron__ipn_1_1State__" kindref="compound">State_</ref></type>
        <definition>State_ nest::rate_neuron_ipn&lt; TNonlinearities &gt;::S_</definition>
        <argsstring></argsstring>
        <name>S_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="290" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="290" bodyend="-1"/>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a0acd0ba8bf25dfb4b040389ffe68aa1c" compoundref="rate__neuron__ipn_8h" startline="282" endline="285">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::get_noise_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a8458be1d8170d43086e1e17abe0608be" compoundref="rate__neuron__ipn_8h" startline="275" endline="278">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::get_rate_</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1rate__neuron__ipn_1a5581c00762c27c034fc5b7a34cf68b32" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1rate__neuron__ipn_1_1Variables__" kindref="compound">Variables_</ref></type>
        <definition>Variables_ nest::rate_neuron_ipn&lt; TNonlinearities &gt;::V_</definition>
        <argsstring></argsstring>
        <name>V_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="291" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1rate__neuron__ipn_1a541705b2edd295368b95d878ba44e47b" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1rate__neuron__ipn_1_1Buffers__" kindref="compound">Buffers_</ref></type>
        <definition>Buffers_ nest::rate_neuron_ipn&lt; TNonlinearities &gt;::B_</definition>
        <argsstring></argsstring>
        <name>B_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="292" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1rate__neuron__ipn_1ada31fd26c9bcc5b442a8fe168668811e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RecordablesMap&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>RecordablesMap&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</name>
        <param>
          <type><ref refid="classnest_1_1RecordablesMap" kindref="compound">RecordablesMap</ref>&lt; <ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; TNonlinearities &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="157" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1rate__neuron__ipn_1aca70c3433499ed07ef705f0b6e0b1226" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class UniversalDataLogger&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>UniversalDataLogger&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</name>
        <param>
          <type>UniversalDataLogger&lt; <ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; TNonlinearities &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="157" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classnest_1_1rate__neuron__ipn_1a9bce86b98d79362108569cb7a29e2576" prot="private" static="yes" mutable="no">
        <type><ref refid="classnest_1_1RecordablesMap" kindref="compound">RecordablesMap</ref>&lt; <ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; TNonlinearities &gt; &gt;</type>
        <definition>RecordablesMap&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt; nest::rate_neuron_ipn&lt; TNonlinearities &gt;::recordablesMap_</definition>
        <argsstring></argsstring>
        <name>recordablesMap_</name>
        <briefdescription>
<para>Mapping of recordables names to access functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="295" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="295" bodyend="-1"/>
        <referencedby refid="structnest_1_1rate__neuron__ipn_1_1Parameters___1a7da17cfb2ddf4153b495c2fd9fdada23" compoundref="rate__neuron__ipn__impl_8h" startline="66" endline="77">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::Parameters_::Parameters_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a326d0e1390c83f0f98d454de4a8f49da" compoundref="rate__neuron__ipn__impl_8h" startline="189" endline="197">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::rate_neuron_ipn</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a326d0e1390c83f0f98d454de4a8f49da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::rate_neuron_ipn&lt; TNonlinearities &gt;::rate_neuron_ipn</definition>
        <argsstring>()</argsstring>
        <name>rate_neuron_ipn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="113" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="189" bodyend="197"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1rate__neuron__ipn_1a9bce86b98d79362108569cb7a29e2576" compoundref="rate__neuron__ipn_8h" startline="295">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::recordablesMap_</references>
        <references refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" compoundref="node_8h" startline="933" endline="936">nest::Node::set_node_uses_wfr</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a674be9a9c86bb5fe3177efdef945bd6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::rate_neuron_ipn&lt; TNonlinearities &gt;::rate_neuron_ipn</definition>
        <argsstring>(const rate_neuron_ipn &amp;)</argsstring>
        <name>rate_neuron_ipn</name>
        <param>
          <type>const <ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="114" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="200" bodyend="208"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" compoundref="node_8h" startline="933" endline="936">nest::Node::set_node_uses_wfr</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1afaa1c0d00b138aae85a5ebede4106349" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, InstantaneousRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="125" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="397" bodyend="430"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a15972284e7548900f73d422184c32f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for delay rate neuron events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, DelayedRateConnectionEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="126" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="434" bodyend="468"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a016bb5999f12ca091bf688082acd4aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::handle</definition>
        <argsstring>(DataLoggingRequest &amp;) override</argsstring>
        <name>handle</name>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="127" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="472" bodyend="475"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1aa9fb3bcb21bce3f7de1fb4d84cf6226f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::rate_neuron_ipn&lt; TNonlinearities &gt;::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <reimplements refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="129" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="318" bodyend="325"/>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1abab51113f559ca57222860178d678ddc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::rate_neuron_ipn&lt; TNonlinearities &gt;::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <reimplements refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="130" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="329" bodyend="336"/>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a41d1073cd8ed22a2f3c55f9c082dcc9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::rate_neuron_ipn&lt; TNonlinearities &gt;::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <defname>dlr</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="131" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="340" bodyend="347"/>
        <references refid="namespacenest_1_1names_1ab48c36d5dd5d4f23066293500cf69d35">nest::names::receptor_type</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a6a5aba45190bd20aeb5c708aee1b1c15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::sends_secondary_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;) override</argsstring>
        <name>sends_secondary_event</name>
        <reimplements refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120">sends_secondary_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="134" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a8c79869e456285547ac720f1fde49e5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::sends_secondary_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;) override</argsstring>
        <name>sends_secondary_event</name>
        <reimplements refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7">sends_secondary_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="138" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1ae949a0d7f024bc09e9f8721871e39509" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <reimplements refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="142" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="351" bodyend="359"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="classnest_1_1ArchivingNode_1acd46838612262b4a5d4cacdf7d901145" compoundref="archiving__node_8cpp" startline="222" endline="234">nest::ArchivingNode::get_status</references>
        <references refid="namespacenest_1_1names_1af23802d960e3bad87b63c3ec4b563176">nest::names::recordables</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a588f8b86a494701f11a6c9e13fa71f35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
<para>Change properties of the node according to the entries in the dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="143" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="363" bodyend="381"/>
        <references refid="namespacenest_1_1names_1a8881fb5c6cc400d4eb90a2035d9a2df5">nest::names::d</references>
        <references refid="structnest_1_1rate__neuron__ipn_1_1Parameters___1af87547e1b22980d2998d78110fba8c04" compoundref="rate__neuron__ipn__impl_8h" startline="110" endline="155">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::Parameters_::set</references>
        <references refid="structnest_1_1rate__neuron__ipn_1_1State___1a5fe7e956bbdb9fa7c628c8313ece0216" compoundref="rate__neuron__ipn__impl_8h" startline="167" endline="170">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::State_::set</references>
        <references refid="classnest_1_1ArchivingNode_1ac69d56c97bed5fd58fab9c3c745328c4" compoundref="archiving__node_8cpp" startline="237" endline="265">nest::ArchivingNode::set_status</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="121" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1rate__neuron__ipn_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1rate__neuron__ipn_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1rate__neuron__ipn_1af65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a8cc1e073626a9ffc843b2685474238de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(GapJunctionEvent &amp;ge)</argsstring>
        <name>sends_secondary_event</name>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>ge</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="123" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a5469ac53c0b9d004829e1e2dbf41d120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;re)</argsstring>
        <name>sends_secondary_event</name>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="123" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1aa9414a7fa4241bc77bb110ba895968e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;de)</argsstring>
        <name>sends_secondary_event</name>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>de</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="123" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a2732c32368c1ea09600a1a2ffddcb2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Node::sends_secondary_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;re)</argsstring>
        <name>sends_secondary_event</name>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="123" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="396" bodyend="399"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a24c8070cea942180acbad89588f0ce54" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::init_buffers_</definition>
        <argsstring>() override</argsstring>
        <name>init_buffers_</name>
        <reimplements refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453">init_buffers_</reimplements>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="146" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="216" bodyend="236"/>
        <references refid="namespacenest_1_1names_1a72fd7a3f2ef3e99ce8380edb7ed09bf5">nest::names::buffer_size</references>
        <references refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" compoundref="archiving__node_8cpp" startline="268" endline="274">nest::ArchivingNode::clear_history</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="249">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnectionManager_1a9ea22ac11166a9e3ed07638a9dd8a51f" compoundref="connection__manager_8h" startline="641" endline="644">nest::ConnectionManager::get_min_delay</references>
        <references refid="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" compoundref="nest_8cpp" startline="96" endline="99">nest::get_vp_specific_rng</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" compoundref="numerics_8cpp" startline="88">numerics::nan</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1aeacf4546d9ea0e2ea893ecba53d743a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplements>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="147" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="240" bodyend="260"/>
        <references refid="namespacenumerics_1a3cf41aab824fa7688404652067a60565" compoundref="numerics_8h" startline="55" endline="86">numerics::expm1</references>
        <references refid="classnest_1_1Time_1aff831a8475d8060353c4cae73cc5748c" compoundref="nest__time_8h" startline="512" endline="523">nest::Time::get_ms</references>
        <references refid="classnest_1_1Time_1a6f14dc87dbd694a028020f00a5a92d7c" compoundref="nest__time_8h" startline="341" endline="344">nest::Time::get_resolution</references>
        <references refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84">nest::names::h</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a2ba90a0d2806a0379cbd1e11388abd08" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::rate_neuron_ipn&lt; TNonlinearities &gt;::update_</definition>
        <argsstring>(Time const &amp;, const long, const long, const bool)</argsstring>
        <name>update_</name>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
          <defname>origin</defname>
        </param>
        <param>
          <type>const long</type>
          <defname>from</defname>
        </param>
        <param>
          <type>const long</type>
          <defname>to</defname>
        </param>
        <param>
          <type>const bool</type>
          <defname>called_from_wfr_update</defname>
        </param>
        <briefdescription>
<para>This is the actual update function. </para>
        </briefdescription>
        <detaileddescription>
<para>The additional boolean parameter determines if the function is called by update (false) or wfr_update (true) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="154" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn_impl.h" bodystart="268" bodyend="392"/>
        <references refid="namespacenest_1_1names_1a72fd7a3f2ef3e99ce8380edb7ed09bf5">nest::names::buffer_size</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="249">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1KernelManager_1a39a94f269d1aeb7363ae5c33783b762e" compoundref="kernel__manager_8h" startline="251">nest::KernelManager::event_delivery_manager</references>
        <references refid="classnest_1_1ConnectionManager_1a9ea22ac11166a9e3ed07638a9dd8a51f" compoundref="connection__manager_8h" startline="641" endline="644">nest::ConnectionManager::get_min_delay</references>
        <references refid="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" compoundref="nest_8cpp" startline="96" endline="99">nest::get_vp_specific_rng</references>
        <references refid="classnest_1_1SimulationManager_1a3d247a4135461fbf1c44bb89adca9135" compoundref="simulation__manager_8h" startline="317" endline="320">nest::SimulationManager::get_wfr_tol</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="274" endline="277">nest::kernel</references>
        <references refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" compoundref="numerics_8cpp" startline="88">numerics::nan</references>
        <references refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e">nest::names::origin</references>
        <references refid="classnest_1_1EventDeliveryManager_1a8737cdbec8c0111d2bce0bf7e8d324a2" compoundref="event__delivery__manager__impl_8h" startline="142" endline="174">nest::EventDeliveryManager::send_secondary</references>
        <references refid="classnest_1_1DataSecondaryEvent_1a74fb39a1de88a532ab1afa32403cf22b" compoundref="secondary__event_8h" startline="232" endline="237">nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::set_coeffarray</references>
        <references refid="classnest_1_1KernelManager_1a4feb2ae20c19197830bf57c5e7247560" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::simulation_manager</references>
        <references refid="namespacenest_1_1names_1a3f1f7c5ffc1f310fe3cb3158f23a6b7e">nest::names::wfr_tol</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1ae03a5b3abe2991c974ccba3a052f5e49" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::rate_neuron_ipn&lt; TNonlinearities &gt;::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$. </para>
        </briefdescription>
        <detaileddescription>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="156" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="300" bodyend="303"/>
        <references refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e">nest::names::origin</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a1cfd51f3e2295f9f2e890299916a9ac5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::rate_neuron_ipn&lt; TNonlinearities &gt;::wfr_update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>wfr_update</name>
        <reimplements refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28">wfr_update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$, sends SecondaryEvents (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of wfr_update just throws <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref>.</para>
<para><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref>) and resets state variables to values at $t$.</para>
<para>n-&gt;wfr_update(T, from, to) performs the update steps beginning at T+from .. T+to-1.</para>
<para>Does not emit spikes, does not log state variables.</para>
<para>throws <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> if not reimplemented in derived class</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="157" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="307" bodyend="314"/>
        <references refid="namespacenest_1_1names_1af7c5ec484317563ecbd2133c7a59043e">nest::names::origin</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a8458be1d8170d43086e1e17abe0608be" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::rate_neuron_ipn&lt; TNonlinearities &gt;::get_rate_</definition>
        <argsstring>() const</argsstring>
        <name>get_rate_</name>
        <briefdescription>
<para>Read out the rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="275" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="275" bodyend="278"/>
        <references refid="structnest_1_1rate__neuron__ipn_1_1State___1a9244f07c4a25b39d413cf6e488b3f7ea" compoundref="rate__neuron__ipn_8h" startline="215">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::State_::rate_</references>
        <references refid="classnest_1_1rate__neuron__ipn_1a3537bb48307392b6cf4358f94639e93d" compoundref="rate__neuron__ipn_8h" startline="290">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::S_</references>
        <referencedby refid="classnest_1_1RecordablesMap_1a68d1b1ddfadcff8a2e8062adda8fce1b" compoundref="gauss__rate_8cpp" startline="50" endline="55">nest::RecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1rate__neuron__ipn_1a0acd0ba8bf25dfb4b040389ffe68aa1c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::rate_neuron_ipn&lt; TNonlinearities &gt;::get_noise_</definition>
        <argsstring>() const</argsstring>
        <name>get_noise_</name>
        <briefdescription>
<para>Read out the noise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="282" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="282" bodyend="285"/>
        <references refid="structnest_1_1rate__neuron__ipn_1_1State___1a880c9517a74272b2c16cc5780c0cd793" compoundref="rate__neuron__ipn_8h" startline="216">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::State_::noise_</references>
        <references refid="classnest_1_1rate__neuron__ipn_1a3537bb48307392b6cf4358f94639e93d" compoundref="rate__neuron__ipn_8h" startline="290">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::S_</references>
        <referencedby refid="classnest_1_1RecordablesMap_1a68d1b1ddfadcff8a2e8062adda8fce1b" compoundref="gauss__rate_8cpp" startline="50" endline="55">nest::RecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;</label>
        <link refid="classnest_1_1rate__neuron__ipn"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;</label>
        <link refid="classnest_1_1rate__neuron__ipn"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>-V_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-S_</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>-P_</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>-recordablesMap_</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>-B_</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::map&lt; Name, double(HostNode::*)() const &gt;</label>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="8">
        <label>nest::RandomDistribution&lt; DistributionT &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
      </node>
      <node id="11">
        <label>nest::RecordablesMap&lt; nest::rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</label>
        <link refid="classnest_1_1RecordablesMap"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; nest::rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>nest::RandomDistribution&lt; std::normal_distribution&lt;&gt; &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; std::normal_distribution&lt;&gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;::Buffers_</label>
        <link refid="structnest_1_1rate__neuron__ipn_1_1Buffers__"/>
        <childnode refid="15" relation="usage">
          <edgelabel>+delayed_rates_ex_</edgelabel>
          <edgelabel>+delayed_rates_in_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;::State_</label>
        <link refid="structnest_1_1rate__neuron__ipn_1_1State__"/>
      </node>
      <node id="13">
        <label>nest::RecordablesMap&lt; HostNode &gt;</label>
        <link refid="classnest_1_1RecordablesMap"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;::Variables_</label>
        <link refid="structnest_1_1rate__neuron__ipn_1_1Variables__"/>
        <childnode refid="7" relation="usage">
          <edgelabel>+normal_dist_</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>nest::RingBuffer</label>
        <link refid="classnest_1_1RingBuffer"/>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>nest::rate_neuron_ipn&lt; TNonlinearities &gt;::Parameters_</label>
        <link refid="structnest_1_1rate__neuron__ipn_1_1Parameters__"/>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" line="107" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/rate_neuron_ipn.h" bodystart="108" bodyend="296"/>
    <listofallmembers>
      <member refid="classnest_1_1ArchivingNode_1a6c9f56d9b47e62eeb5a21f56dfbdc411" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>ArchivingNode</name></member>
      <member refid="classnest_1_1ArchivingNode_1acb6a397bfafe3b1c3349a33437f19f66" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>ArchivingNode</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a541705b2edd295368b95d878ba44e47b" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>B_</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a49a10579e5c43f5f306e36b116e51c42" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>base</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a61c0b9825270fab375fc4c722cfaec6b" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>beta_Ca_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5917ea5dc7f39ee46825a20faae4d49c" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>Ca_minus_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a62b1974824c28eabfbb4bc4cbcc1edeb" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>Ca_t_</name></member>
      <member refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>clear_history</name></member>
      <member refid="classnest_1_1Node_1ad88edfd6f881579328b545d88372807d" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>clone</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a8fb547186b1ee49384fddeb4e268481d" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>connect_synaptic_element</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a0f11a1c88af75d6a51057d97fe1f6583" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_C_m</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb8ec0a74d457fd285665b3ff8077213" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1ArchivingNode_1a17dd209382eae47cbb5f02b88fbb997a" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_history</name></member>
      <member refid="classnest_1_1ArchivingNode_1a063cf1374f05675f2501b9cf1d4f04e7" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_K_triplet_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1ab6c3dea0d46a9f24fc4d726bea34dd3a" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1aa756873904842e8e63e9144d1f49967f" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1ArchivingNode_1afab9e578540e7a00114f41ce4a6f877d" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a0acd0ba8bf25dfb4b040389ffe68aa1c" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_noise_</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a8458be1d8170d43086e1e17abe0608be" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_rate_</name></member>
      <member refid="classnest_1_1ArchivingNode_1afbac3e3b40f07e096fea768a715f9034" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_spiketime_ms</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1ae949a0d7f024bc09e9f8721871e39509" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_status_dict_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af2415c16f2edd606035f497d6003c392" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a84df4d213b9f22e9dae6b26c8fd9905d" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a9ba39ec217579e3ef23db9ae20479955" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af35fbeeb8459557ea3a5baf5c6fe7d20" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5708dead1beae2f0bccb87080356cd63" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a893ba9023105eb3c68c988dc3f912d2f" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5b0318a17b8e2416f7904d00b3d4a830" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_tau_Ca</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>get_vp</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1afaa1c0d00b138aae85a5ebede4106349" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a15972284e7548900f73d422184c32f5d" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a016bb5999f12ca091bf688082acd4aa0" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1ae810de070216d0f281833171a3b997bc" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1adef54045c4b20be6075910f936a723b6" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handle</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aa9fb3bcb21bce3f7de1fb4d84cf6226f" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1abab51113f559ca57222860178d678ddc" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a41d1073cd8ed22a2f3c55f9c082dcc9a" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1ArchivingNode_1a25d021158d742b10234548c339f7f625" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>history_</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>init</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a24c8070cea942180acbad89588f0ce54" prot="private" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>initialized_</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1ArchivingNode_1abf5e14af5f052f6275746df00043e6ce" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>Kminus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aca1b6e411f89e286c59b519c97a5940f" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>Kminus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3dcd0174ab639ea897388ea375a9a6b7" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>last_spike_</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1ArchivingNode_1a7384c7f1a1f3d059806598b606e056d8" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>max_delay_</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>model_id_</name></member>
      <member refid="classnest_1_1ArchivingNode_1ac1f375fc0e109ced42aaf68cbba40fed" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>n_incoming_</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aab7553bdd6cc4036b2c7c6efe42625ea" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>nonlinearities_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a9c99a8caa89a3eb73e975f25678d5d58" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>operator=</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a4f28edc13e88f997d59f301db10a2930" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>P_</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aeacf4546d9ea0e2ea893ecba53d743a7" prot="private" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>print_network</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a326d0e1390c83f0f98d454de4a8f49da" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>rate_neuron_ipn</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a674be9a9c86bb5fe3177efdef945bd6e" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>rate_neuron_ipn</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1ada31fd26c9bcc5b442a8fe168668811e" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>RecordablesMap&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a9bce86b98d79362108569cb7a29e2576" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>recordablesMap_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a0f573e9b1e9f7f49a493aa2a533c2803" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a3537bb48307392b6cf4358f94639e93d" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>S_</name></member>
      <member refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>send_test_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a6a5aba45190bd20aeb5c708aee1b1c15" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a8c79869e456285547ac720f1fde49e5a" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a8cc1e073626a9ffc843b2685474238de" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual" ambiguityscope="nest::ArchivingNode::"><scope>nest::rate_neuron_ipn</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1ArchivingNode_1af5655cc7a93c86837c09e48cce007993" prot="protected" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_spiketime</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a588f8b86a494701f11a6c9e13fa71f35" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>set_vp</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a1b21cac6a54b750cfb72a011cc226936" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a64bcfbab69f9d53322f18896838c6c80" prot="public" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb62fb32d42235fb404d919fdf1865e8" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>synaptic_elements_map_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a905ca4acf3665fca699c1cc91f2704f8" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>tau_Ca_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a2eaadb93df6c09941829cfcf99f0af80" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>tau_minus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a072504ce3c26083587fbd78522d50dc1" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>tau_minus_inv_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aaae85c3700810f049ccb9ca853c651b7" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>tau_minus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1adf4c70fed4fe8f168b28b47b51fa35ab" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>tau_minus_triplet_inv_</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a75621ba377fb9e61a31a67c9d9ee3684" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>trace_</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1aca70c3433499ed07ef705f0b6e0b1226" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>UniversalDataLogger&lt; rate_neuron_ipn&lt; TNonlinearities &gt; &gt;</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1ae03a5b3abe2991c974ccba3a052f5e49" prot="private" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>update</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a2ba90a0d2806a0379cbd1e11388abd08" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>update_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a74fc8e9d9ef49af9c53b35e19ee3ddd9" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a5581c00762c27c034fc5b7a34cf68b32" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>V_</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::rate_neuron_ipn</scope><name>vp_</name></member>
      <member refid="classnest_1_1rate__neuron__ipn_1a1cfd51f3e2295f9f2e890299916a9ac5" prot="private" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::rate_neuron_ipn</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
