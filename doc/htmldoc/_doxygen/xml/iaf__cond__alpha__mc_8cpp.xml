<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="iaf__cond__alpha__mc_8cpp" kind="file" language="C++">
    <compoundname>iaf_cond_alpha_mc.cpp</compoundname>
    <includes refid="iaf__cond__alpha__mc_8h" local="yes">iaf_cond_alpha_mc.h</includes>
    <incdepgraph>
      <node id="1">
        <label>iaf_cond_alpha_mc.cpp</label>
        <link refid="iaf__cond__alpha__mc_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iaf_cond_alpha_mc.h</label>
        <link refid="iaf__cond__alpha__mc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>iaf_cond_alpha_mc.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iaf__cond__alpha__mc_8h" kindref="compound">iaf_cond_alpha_mc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>libnestutil:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__util_8h" kindref="compound">dict_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="numerics_8h" kindref="compound">numerics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exceptions_8h" kindref="compound">exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="universal__data__logger__impl_8h" kindref="compound">universal_data_logger_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dictutils_8h" kindref="compound">dictutils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>Compartment<sp/>name<sp/>list</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Harold<sp/>Gutch<sp/>reported<sp/>some<sp/>static<sp/>destruction<sp/>problems<sp/>on<sp/>OSX<sp/>10.4.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>He<sp/>pointed<sp/>out<sp/>that<sp/>the<sp/>problem<sp/>is<sp/>avoided<sp/>by<sp/>defining<sp/>the<sp/>comp_names_</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>vector<sp/>with<sp/>its<sp/>final<sp/>size.<sp/>See<sp/>also<sp/>#348.</highlight></codeline>
<codeline lineno="52"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">std::vector&lt;<sp/>Name<sp/>&gt;<sp/>nest::iaf_cond_alpha_mc::comp_names_(<sp/>NCOMP<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Receptor<sp/>dictionary</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leads<sp/>to<sp/>seg<sp/>fault<sp/>on<sp/>exit,<sp/>see<sp/>#328</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DictionaryDatum<sp/>nest::iaf_cond_alpha_mc::receptor_dict_<sp/>=<sp/>new<sp/>Dictionary();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Recordables<sp/>map</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="classnest_1_1RecordablesMap" kindref="compound">nest::RecordablesMap&lt; nest::iaf_cond_alpha_mc &gt;</ref><sp/>nest::iaf_cond_alpha_mc::recordablesMap_;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenest" kindref="compound">nest</ref></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>must<sp/>be<sp/>place<sp/>in<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="classnest_1_1RecordablesMap_1a303b1d32c8f72ab936b4afe76bca9588" kindref="member">RecordablesMap&lt; iaf_cond_alpha_mc &gt;::create</ref>()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;V_m.s&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::V_M,<sp/>iaf_cond_alpha_mc::SOMA<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;g_ex.s&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::G_EXC,<sp/>iaf_cond_alpha_mc::SOMA<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;g_in.s&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::G_INH,<sp/>iaf_cond_alpha_mc::SOMA<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;V_m.p&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::V_M,<sp/>iaf_cond_alpha_mc::PROX<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;g_ex.p&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::G_EXC,<sp/>iaf_cond_alpha_mc::PROX<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;g_in.p&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::G_INH,<sp/>iaf_cond_alpha_mc::PROX<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;V_m.d&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::V_M,<sp/>iaf_cond_alpha_mc::DIST<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;g_ex.d&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::G_EXC,<sp/>iaf_cond_alpha_mc::DIST<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>insert_(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;g_in.d&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;iaf_cond_alpha_mc::get_y_elem_&lt;<sp/>iaf_cond_alpha_mc::State_::G_INH,<sp/>iaf_cond_alpha_mc::DIST<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>insert_(<sp/><ref refid="namespacenest_1_1names_1af7330077c9a128456f25c9c97ae895e6" kindref="member">names::t_ref_remaining</ref>,<sp/>&amp;iaf_cond_alpha_mc::get_r_<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Iteration<sp/>function</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">nest::iaf_cond_alpha_mc_dynamics(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pnode<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>shorthands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>nest::iaf_cond_alpha_mc<sp/><ref refid="namespacenest_1_1names_1a35866bc181770c0746aa1634609dd6dd" kindref="member">N</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>nest::iaf_cond_alpha_mc::State_<sp/><ref refid="namespacenest_1_1names_1a1a3fb0a6a989ea3f36383767030bd54c" kindref="member">S</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>access<sp/>to<sp/>node<sp/>so<sp/>we<sp/>can<sp/>work<sp/>almost<sp/>as<sp/>in<sp/>a<sp/>member<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>assert(<sp/>pnode<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nest::iaf_cond_alpha_mc&amp;<sp/>node<sp/>=<sp/>*(<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/>nest::iaf_cond_alpha_mc*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pnode<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>dynamics<sp/>for<sp/>each<sp/>compartment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>computations<sp/>written<sp/>quite<sp/>explicitly<sp/>for<sp/>clarity,<sp/>assume<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>optimized<sp/>most<sp/>stuff<sp/>away<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>N::NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>membrane<sp/>potential<sp/>for<sp/>current<sp/>compartment<sp/>and<sp/>coupling<sp/>currents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>V;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>I_conn;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>N::SOMA:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref><sp/>=<sp/>node.S_.r_<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>=<sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref><sp/>?<sp/>node.P_.V_reset<sp/>:<sp/>std::min(<sp/>y[<sp/>S::idx(<sp/>N::SOMA,<sp/>S::V_M<sp/>)<sp/>],<sp/>node.P_.V_th<sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>I_conn<sp/>=<sp/>node.P_.g_conn[<sp/>N::SOMA<sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>N::PROX,<sp/>S::V_M<sp/>)<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>N::PROX:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>N::PROX,<sp/>S::V_M<sp/>)<sp/>];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>I_conn<sp/>=<sp/>node.P_.g_conn[<sp/>N::SOMA<sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>N::SOMA,<sp/>S::V_M<sp/>)<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>node.P_.g_conn[<sp/>N::PROX<sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/>y[<sp/>S::idx(<sp/>N::DIST,<sp/>S::V_M<sp/>)<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>N::DIST:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>N::DIST,<sp/>S::V_M<sp/>)<sp/>];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>I_conn<sp/>=<sp/>node.P_.g_conn[<sp/>N::PROX<sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>N::PROX,<sp/>S::V_M<sp/>)<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>excitatory<sp/>synaptic<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>I_syn_exc<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::G_EXC<sp/>)<sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/>node.P_.E_ex[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inhibitory<sp/>synaptic<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>I_syn_inh<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::G_INH<sp/>)<sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/>node.P_.E_in[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leak<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>I_L<sp/>=<sp/>node.P_.g_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>*<sp/>(<sp/>V<sp/>-<sp/>node.P_.E_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>membrane<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::idx(<sp/>n,<sp/>S::V_M<sp/>)<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1ab3dc38c53ee054a5cc725fc2e76acc77" kindref="member">is_refractory</ref></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>0.0</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(<sp/>-I_L<sp/>-<sp/>I_syn_exc<sp/>-<sp/>I_syn_inh<sp/>-<sp/>I_conn<sp/>+<sp/>node.B_.I_stim_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>+<sp/>node.P_.I_e[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>)<sp/>/<sp/>node.P_.C_m[<sp/>n<sp/>];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>excitatory<sp/>conductance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::idx(<sp/>n,<sp/>S::DG_EXC<sp/>)<sp/>]<sp/>=<sp/>-<ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::DG_EXC<sp/>)<sp/>]<sp/>/<sp/>node.P_.tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::idx(<sp/>n,<sp/>S::G_EXC<sp/>)<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::DG_EXC<sp/>)<sp/>]<sp/>-<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::G_EXC<sp/>)<sp/>]<sp/>/<sp/>node.P_.tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inhibitory<sp/>conductance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::idx(<sp/>n,<sp/>S::DG_INH<sp/>)<sp/>]<sp/>=<sp/>-<ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::DG_INH<sp/>)<sp/>]<sp/>/<sp/>node.P_.tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>f[<sp/>S::idx(<sp/>n,<sp/>S::G_INH<sp/>)<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::DG_INH<sp/>)<sp/>]<sp/>-<sp/><ref refid="namespacenest_1_1names_1a3d7d1f0f421f73cbf83801221729f349" kindref="member">y</ref>[<sp/>S::idx(<sp/>n,<sp/>S::G_INH<sp/>)<sp/>]<sp/>/<sp/>node.P_.tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GSL_SUCCESS;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>Default<sp/>constructors<sp/>defining<sp/>default<sp/>parameters<sp/>and<sp/>state</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">nest::iaf_cond_alpha_mc::Parameters_::Parameters_()</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="namespacenest_1_1names_1a8785fca1cb39c1bba08243740c7adabc" kindref="member">V_th</ref>(<sp/>-55.0<sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1ae5244647d150458e7b04c11d820c8980" kindref="member">V_reset</ref>(<sp/>-60.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1af1fb8d4c65ef19902f7afc8e18e1389e" kindref="member">t_ref</ref>(<sp/>2.0<sp/>)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conductances<sp/>between<sp/>compartments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>g_conn[<sp/>SOMA<sp/>]<sp/>=<sp/>2.5;<sp/></highlight><highlight class="comment">//<sp/>nS,<sp/>soma-proximal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>g_conn[<sp/>PROX<sp/>]<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//<sp/>nS,<sp/>proximal-distal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>soma<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a6a90c30349b856f56b527a2a07521b69" kindref="member">g_L</ref>[<sp/>SOMA<sp/>]<sp/>=<sp/>10.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a87c37b74ee8ef5b94a8cf290a29adbde" kindref="member">C_m</ref>[<sp/>SOMA<sp/>]<sp/>=<sp/>150.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a856019da6532789ca3007b8637a19f9b" kindref="member">E_ex</ref>[<sp/>SOMA<sp/>]<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1acea574c5312a876c705815b1c406bf29" kindref="member">E_in</ref>[<sp/>SOMA<sp/>]<sp/>=<sp/>-85.0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a8716ae8315df1d512b346b4243e2556d" kindref="member">E_L</ref>[<sp/>SOMA<sp/>]<sp/>=<sp/>-70.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>tau_synE[<sp/>SOMA<sp/>]<sp/>=<sp/>0.5;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>tau_synI[<sp/>SOMA<sp/>]<sp/>=<sp/>2.0;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a17aa476db9e655c644567ffca7c7d797" kindref="member">I_e</ref>[<sp/>SOMA<sp/>]<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>proximal<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a6a90c30349b856f56b527a2a07521b69" kindref="member">g_L</ref>[<sp/>PROX<sp/>]<sp/>=<sp/>5.0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a87c37b74ee8ef5b94a8cf290a29adbde" kindref="member">C_m</ref>[<sp/>PROX<sp/>]<sp/>=<sp/>75.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a856019da6532789ca3007b8637a19f9b" kindref="member">E_ex</ref>[<sp/>PROX<sp/>]<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1acea574c5312a876c705815b1c406bf29" kindref="member">E_in</ref>[<sp/>PROX<sp/>]<sp/>=<sp/>-85.0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a8716ae8315df1d512b346b4243e2556d" kindref="member">E_L</ref>[<sp/>PROX<sp/>]<sp/>=<sp/>-70.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>tau_synE[<sp/>PROX<sp/>]<sp/>=<sp/>0.5;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>tau_synI[<sp/>PROX<sp/>]<sp/>=<sp/>2.0;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a17aa476db9e655c644567ffca7c7d797" kindref="member">I_e</ref>[<sp/>PROX<sp/>]<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>distal<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a6a90c30349b856f56b527a2a07521b69" kindref="member">g_L</ref>[<sp/>DIST<sp/>]<sp/>=<sp/>10.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a87c37b74ee8ef5b94a8cf290a29adbde" kindref="member">C_m</ref>[<sp/>DIST<sp/>]<sp/>=<sp/>150.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a856019da6532789ca3007b8637a19f9b" kindref="member">E_ex</ref>[<sp/>DIST<sp/>]<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1acea574c5312a876c705815b1c406bf29" kindref="member">E_in</ref>[<sp/>DIST<sp/>]<sp/>=<sp/>-85.0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a8716ae8315df1d512b346b4243e2556d" kindref="member">E_L</ref>[<sp/>DIST<sp/>]<sp/>=<sp/>-70.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>tau_synE[<sp/>DIST<sp/>]<sp/>=<sp/>0.5;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>tau_synI[<sp/>DIST<sp/>]<sp/>=<sp/>2.0;<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a17aa476db9e655c644567ffca7c7d797" kindref="member">I_e</ref>[<sp/>DIST<sp/>]<sp/>=<sp/>0.0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">nest::iaf_cond_alpha_mc::Parameters_::Parameters_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="namespacenest_1_1names_1a8785fca1cb39c1bba08243740c7adabc" kindref="member">V_th</ref>(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.<ref refid="namespacenest_1_1names_1a8785fca1cb39c1bba08243740c7adabc" kindref="member">V_th</ref><sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1ae5244647d150458e7b04c11d820c8980" kindref="member">V_reset</ref>(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.<ref refid="namespacenest_1_1names_1ae5244647d150458e7b04c11d820c8980" kindref="member">V_reset</ref><sp/>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespacenest_1_1names_1af1fb8d4c65ef19902f7afc8e18e1389e" kindref="member">t_ref</ref>(<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.<ref refid="namespacenest_1_1names_1af1fb8d4c65ef19902f7afc8e18e1389e" kindref="member">t_ref</ref><sp/>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>C-arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP<sp/>-<sp/>1;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>g_conn[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.g_conn[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a6a90c30349b856f56b527a2a07521b69" kindref="member">g_L</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.g_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a87c37b74ee8ef5b94a8cf290a29adbde" kindref="member">C_m</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.C_m[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a856019da6532789ca3007b8637a19f9b" kindref="member">E_ex</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_ex[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1acea574c5312a876c705815b1c406bf29" kindref="member">E_in</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_in[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a8716ae8315df1d512b346b4243e2556d" kindref="member">E_L</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a17aa476db9e655c644567ffca7c7d797" kindref="member">I_e</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.I_e[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">nest::iaf_cond_alpha_mc::Parameters_&amp;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">nest::iaf_cond_alpha_mc::Parameters_::operator=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;p<sp/>);<sp/></highlight><highlight class="comment">//<sp/>would<sp/>be<sp/>bad<sp/>logical<sp/>error<sp/>in<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a8785fca1cb39c1bba08243740c7adabc" kindref="member">V_th</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.V_th;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1ae5244647d150458e7b04c11d820c8980" kindref="member">V_reset</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.V_reset;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1af1fb8d4c65ef19902f7afc8e18e1389e" kindref="member">t_ref</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.t_ref;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>C-arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP<sp/>-<sp/>1;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>g_conn[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.g_conn[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a6a90c30349b856f56b527a2a07521b69" kindref="member">g_L</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.g_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a87c37b74ee8ef5b94a8cf290a29adbde" kindref="member">C_m</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.C_m[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a856019da6532789ca3007b8637a19f9b" kindref="member">E_ex</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_ex[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1acea574c5312a876c705815b1c406bf29" kindref="member">E_in</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_in[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a8716ae8315df1d512b346b4243e2556d" kindref="member">E_L</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a17aa476db9e655c644567ffca7c7d797" kindref="member">I_e</ref>[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.I_e[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">nest::iaf_cond_alpha_mc::State_::State_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>:<sp/>r_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>simplicity,<sp/>we<sp/>first<sp/>initialize<sp/>all<sp/>values<sp/>to<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>set<sp/>the<sp/>membrane<sp/>potentials<sp/>for<sp/>each<sp/>compartment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>STATE_VEC_SIZE;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>y_[<sp/>i<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>y_[<sp/>idx(<sp/>n,<sp/>V_M<sp/>)<sp/>]<sp/>=<sp/><ref refid="namespacenest_1_1names_1a373f1925a764ea22d58f10491570862d" kindref="member">p</ref>.E_L[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">nest::iaf_cond_alpha_mc::State_::State_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State_&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>:<sp/>r_(<sp/>s.r_<sp/>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>STATE_VEC_SIZE;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>y_[<sp/>i<sp/>]<sp/>=<sp/>s.y_[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">nest::iaf_cond_alpha_mc::State_&amp;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">nest::iaf_cond_alpha_mc::State_::operator=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State_&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>r_<sp/>=<sp/>s.r_;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>STATE_VEC_SIZE;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>y_[<sp/>i<sp/>]<sp/>=<sp/>s.y_[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">nest::iaf_cond_alpha_mc::Buffers_::Buffers_(<sp/>iaf_cond_alpha_mc&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>,<sp/>s_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>,<sp/>c_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>,<sp/>e_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>of<sp/>the<sp/>remaining<sp/>members<sp/>is<sp/>deferred<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init_buffers_().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">nest::iaf_cond_alpha_mc::Buffers_::Buffers_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffers_&amp;,<sp/>iaf_cond_alpha_mc&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>,<sp/>s_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>,<sp/>c_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>,<sp/>e_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>of<sp/>the<sp/>remaining<sp/>members<sp/>is<sp/>deferred<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>init_buffers_().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>and<sp/>state<sp/>extractions<sp/>and<sp/>manipulation<sp/>functions</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">nest::iaf_cond_alpha_mc::Parameters_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="337"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_th,<sp/>V_th<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_reset,<sp/>V_reset<sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::t_ref,<sp/>t_ref<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::g_sp,<sp/>g_conn[<sp/>SOMA<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::g_pd,<sp/>g_conn[<sp/>PROX<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>subdictionaries<sp/>for<sp/>per-compartment<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref><sp/>dd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classDictionary" kindref="compound">Dictionary</ref>();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::g_L,<sp/>g_L[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::E_L,<sp/>E_L[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::E_ex,<sp/>E_ex[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::E_in,<sp/>E_in[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::C_m,<sp/>C_m[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::tau_syn_ex,<sp/>tau_synE[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::tau_syn_in,<sp/>tau_synI[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::I_e,<sp/>I_e[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>*d<sp/>)[<sp/>comp_names_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>]<sp/>=<sp/>dd;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">nest::iaf_cond_alpha_mc::Parameters_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,<sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>setting<sp/>the<sp/>membrane<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_th,<sp/>V_th,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_reset,<sp/>V_reset,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::t_ref,<sp/>t_ref,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/><ref refid="className" kindref="compound">Name</ref>(<sp/>names::g_sp<sp/>),<sp/>g_conn[<sp/>SOMA<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/><ref refid="className" kindref="compound">Name</ref>(<sp/>names::g_pd<sp/>),<sp/>g_conn[<sp/>PROX<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>from<sp/>sub-dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>comp_names_[<sp/>n<sp/>]<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref><sp/>dd<sp/>=<sp/>getValue&lt;<sp/>DictionaryDatum<sp/>&gt;(<sp/>d,<sp/>comp_names_[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::E_L,<sp/>E_L[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::E_ex,<sp/>E_ex[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::E_in,<sp/>E_in[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::C_m,<sp/>C_m[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::g_L,<sp/>g_L[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::tau_syn_ex,<sp/>tau_synE[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::tau_syn_in,<sp/>tau_synI[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::I_e,<sp/>I_e[<sp/>n<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>V_reset<sp/>&gt;=<sp/>V_th<sp/>)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Reset<sp/>potential<sp/>must<sp/>be<sp/>smaller<sp/>than<sp/>threshold.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t_ref<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Refractory<sp/>time<sp/>cannot<sp/>be<sp/>negative.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>checks<sp/>compartment-wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>C_m[<sp/>n<sp/>]<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Capacitance<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>comp_names_[<sp/>n<sp/>].toString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>must<sp/>be<sp/>strictly<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tau_synE[<sp/>n<sp/>]<sp/>&lt;=<sp/>0<sp/>or<sp/>tau_synI[<sp/>n<sp/>]<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>time<sp/>constants<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>comp_names_[<sp/>n<sp/>].toString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>must<sp/>be<sp/>strictly<sp/>positive.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">nest::iaf_cond_alpha_mc::State_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="416"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>assume<sp/>here<sp/>that<sp/>State_::get()<sp/>always<sp/>is<sp/>called<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parameters_::get(),<sp/>so<sp/>that<sp/>the<sp/>per-compartment<sp/>dictionaries<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>comp_names_[<sp/>n<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref><sp/>dd<sp/>=<sp/>getValue&lt;<sp/>DictionaryDatum<sp/>&gt;(<sp/>d,<sp/>comp_names_[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::V_m,<sp/>y_[<sp/>idx(<sp/>n,<sp/>V_M<sp/>)<sp/>]<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Membrane<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">nest::iaf_cond_alpha_mc::State_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parameters_&amp;,<sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>from<sp/>sub-dictionaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab8c67898fb04b2e13acb81c4d2b5bcdb" kindref="member">d</ref>-&gt;known(<sp/>comp_names_[<sp/>n<sp/>]<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref><sp/>dd<sp/>=<sp/>getValue&lt;<sp/>DictionaryDatum<sp/>&gt;(<sp/>d,<sp/>comp_names_[<sp/>n<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>dd,<sp/>names::V_m,<sp/>y_[<sp/>idx(<sp/>n,<sp/>V_M<sp/>)<sp/>],<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>Default<sp/>and<sp/>copy<sp/>constructor<sp/>for<sp/>node,<sp/>and<sp/>destructor</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">nest::iaf_cond_alpha_mc::iaf_cond_alpha_mc()</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>:<sp/>ArchivingNode()</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>,<sp/>P_()</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/>P_<sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>recordablesMap_.create();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>table<sp/>of<sp/>compartment<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>comp_names_.resize(NCOMP);<sp/>---<sp/>Fixed<sp/>size,<sp/>see<sp/>comment<sp/>on<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>comp_names_[<sp/>SOMA<sp/>]<sp/>=<sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;soma&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>comp_names_[<sp/>PROX<sp/>]<sp/>=<sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;proximal&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>comp_names_[<sp/>DIST<sp/>]<sp/>=<sp/><ref refid="className" kindref="compound">Name</ref>(<sp/></highlight><highlight class="stringliteral">&quot;distal&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">nest::iaf_cond_alpha_mc::iaf_cond_alpha_mc(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iaf_cond_alpha_mc&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>:<sp/>ArchivingNode(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>,<sp/>P_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.P_<sp/>)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.S_<sp/>)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.B_,<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">nest::iaf_cond_alpha_mc::~iaf_cond_alpha_mc()</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GSL<sp/>structs<sp/>may<sp/>not<sp/>have<sp/>been<sp/>allocated,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>protect<sp/>destruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.s_<sp/>)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_step_free(<sp/>B_.s_<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.c_<sp/>)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_control_free(<sp/>B_.c_<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>B_.e_<sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_evolve_free(<sp/>B_.e_<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>Node<sp/>initialization<sp/>functions</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">nest::iaf_cond_alpha_mc::init_buffers_()</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>B_.spikes_.resize(<sp/>NUM_SPIKE_RECEPTORS<sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NUM_SPIKE_RECEPTORS;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>includes<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.spikes_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>].clear();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>B_.currents_.resize(<sp/>NUM_CURR_RECEPTORS<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NUM_CURR_RECEPTORS;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>includes<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.currents_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>].clear();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>B_.logger_.reset();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>ArchivingNode::clear_history();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>B_.step_<sp/>=<sp/>Time::get_resolution().get_ms();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>B_.IntegrationStep_<sp/>=<sp/>B_.step_;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>B_.s_<sp/>)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.s_<sp/>=<sp/>gsl_odeiv_step_alloc(<sp/>gsl_odeiv_step_rkf45,<sp/>State_::STATE_VEC_SIZE<sp/>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_step_reset(<sp/>B_.s_<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>B_.c_<sp/>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.c_<sp/>=<sp/>gsl_odeiv_control_y_new(<sp/>1e-3,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_control_init(<sp/>B_.c_,<sp/>1e-3,<sp/>0.0,<sp/>1.0,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>B_.e_<sp/>)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.e_<sp/>=<sp/>gsl_odeiv_evolve_alloc(<sp/>State_::STATE_VEC_SIZE<sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_odeiv_evolve_reset(<sp/>B_.e_<sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>B_.sys_.function<sp/>=<sp/>iaf_cond_alpha_mc_dynamics;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>B_.sys_.jacobian<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>B_.sys_.dimension<sp/>=<sp/>State_::STATE_VEC_SIZE;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>B_.sys_.params<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.I_stim_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">nest::iaf_cond_alpha_mc::pre_run_hook()</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensures<sp/>initialization<sp/>in<sp/>case<sp/>mm<sp/>connected<sp/>after<sp/>Simulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>B_.logger_.init();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.PSConInit_E_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/>1.0<sp/>*<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">numerics::e</ref><sp/>/<sp/>P_.tau_synE[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>V_.PSConInit_I_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/>1.0<sp/>*<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">numerics::e</ref><sp/>/<sp/>P_.tau_synI[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>V_.RefractoryCounts_<sp/>=<sp/>Time(<sp/>Time::ms(<sp/>P_.t_ref<sp/>)<sp/>).get_steps();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>t_ref<sp/>&gt;=<sp/>0,<sp/>this<sp/>can<sp/>only<sp/>fail<sp/>in<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>assert(<sp/>V_.RefractoryCounts_<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>Update<sp/>and<sp/>spike<sp/>handling<sp/>functions</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">nest::iaf_cond_alpha_mc::update(<sp/>Time<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to<sp/>)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>assert(<sp/>to<sp/>&gt;=<sp/>0<sp/>and<sp/>(<sp/>delay<sp/>)<sp/>from<sp/>&lt;<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay()<sp/>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>assert(<sp/>from<sp/>&lt;<sp/>to<sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lag<sp/>=<sp/>from;<sp/>lag<sp/>&lt;<sp/>to;<sp/>++lag<sp/>)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numerical<sp/>integration<sp/>with<sp/>adaptive<sp/>step<sp/>size<sp/>control:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gsl_odeiv_evolve_apply<sp/>performs<sp/>only<sp/>a<sp/>single<sp/>numerical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>integration<sp/>step,<sp/>starting<sp/>from<sp/>t<sp/>and<sp/>bounded<sp/>by<sp/>step;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>while-loop<sp/>ensures<sp/>integration<sp/>over<sp/>the<sp/>whole<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>(0,<sp/>step]<sp/>if<sp/>more<sp/>than<sp/>one<sp/>integration<sp/>step<sp/>is<sp/>needed<sp/>due</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>small<sp/>integration<sp/>step<sp/>size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>(t+IntegrationStep<sp/>&gt;<sp/>step)<sp/>leads<sp/>to<sp/>integration<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(t,<sp/>step]<sp/>and<sp/>afterwards<sp/>setting<sp/>t<sp/>to<sp/>step,<sp/>but<sp/>it<sp/>does<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enforce<sp/>setting<sp/>IntegrationStep<sp/>to<sp/>step-t;<sp/>this<sp/>is<sp/>of<sp/>advantage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>consistent<sp/>and<sp/>efficient<sp/>integration<sp/>across<sp/>subsequent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simulation<sp/>intervals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>&lt;<sp/>B_.step_<sp/>)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>gsl_odeiv_evolve_apply(<sp/>B_.e_,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.c_,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.s_,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;B_.sys_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>of<sp/>ODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.step_,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>t<sp/>&lt;=<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;B_.IntegrationStep_,<sp/></highlight><highlight class="comment">//<sp/>integration<sp/>step<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>neuronal<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>!=<sp/>GSL_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>GSLSolverFailure(<sp/>get_name(),<sp/>status<sp/>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>incoming<sp/>spikes<sp/>at<sp/>end<sp/>of<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exploit<sp/>here<sp/>that<sp/>spike<sp/>buffers<sp/>are<sp/>compartment<sp/>for<sp/>compartment,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alternating<sp/>between<sp/>excitatory<sp/>and<sp/>inhibitory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>*<sp/>State_::STATE_VEC_COMPS<sp/>+<sp/>State_::DG_EXC<sp/>]<sp/>+=</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.spikes_[<sp/>2<sp/>*<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>].get_value(<sp/>lag<sp/>)<sp/>*<sp/>V_.PSConInit_E_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>*<sp/>State_::STATE_VEC_COMPS<sp/>+<sp/>State_::DG_INH<sp/>]<sp/>+=</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_.spikes_[<sp/>2<sp/>*<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>+<sp/>1<sp/>].get_value(<sp/>lag<sp/>)<sp/>*<sp/>V_.PSConInit_I_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>];</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refractoriness<sp/>and<sp/>spiking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exploit<sp/>here<sp/>that<sp/>plain<sp/>offset<sp/>enum<sp/>value<sp/>V_M<sp/>indexes<sp/>soma<sp/>V_M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.r_<sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>neuron<sp/>is<sp/>absolute<sp/>refractory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--S_.r_;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>=<sp/>P_.V_reset;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>&gt;=<sp/>P_.V_th<sp/>)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>neuron<sp/>fires<sp/>spike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S_.r_<sp/>=<sp/>V_.RefractoryCounts_;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S_.y_[<sp/>State_::V_M<sp/>]<sp/>=<sp/>P_.V_reset;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_spiketime(<sp/>Time::step(<sp/><ref refid="namespacenest_1_1names_1a6448c21f7fb2a2b838e803d3fa965fc7" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>+<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SpikeEvent<sp/>se;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.send(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>se,<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>input<sp/>currents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>&lt;<sp/>NCOMP;<sp/>++<ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B_.I_stim_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>]<sp/>=<sp/>B_.currents_[<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>].get_value(<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>state<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.logger_.record_data(<sp/><ref refid="namespacenest_1_1names_1a6448c21f7fb2a2b838e803d3fa965fc7" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">nest::iaf_cond_alpha_mc::handle(<sp/>SpikeEvent&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>assert(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_delay_steps()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>and<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>&lt;<sp/>2<sp/>*<sp/>NCOMP<sp/>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>B_.spikes_[<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>].add_value(</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rel_delivery_steps(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_slice_origin()<sp/>),<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_weight()<sp/>*<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_multiplicity()<sp/>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">nest::iaf_cond_alpha_mc::handle(<sp/>CurrentEvent&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>assert(<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_delay_steps()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>100%<sp/>clean,<sp/>should<sp/>look<sp/>at<sp/>MIN,<sp/>SUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>and<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>&lt;<sp/>NCOMP<sp/>);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>weighted<sp/>current;<sp/>HEP<sp/>2002-10-04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>B_.currents_[<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rport()<sp/>].add_value(</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_rel_delivery_steps(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_slice_origin()<sp/>),<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_weight()<sp/>*<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_current()<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal">nest::iaf_cond_alpha_mc::handle(<sp/>DataLoggingRequest&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>B_.logger_.handle(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_cond_alpha_mc.cpp"/>
  </compounddef>
</doxygen>
