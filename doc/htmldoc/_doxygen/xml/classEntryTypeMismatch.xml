<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classEntryTypeMismatch" kind="class" language="C++" prot="public">
    <compoundname>EntryTypeMismatch</compoundname>
    <basecompoundref refid="classDictError" prot="public" virt="non-virtual">DictError</basecompoundref>
    <includes refid="sliexceptions_8h" local="no">sliexceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEntryTypeMismatch_1aea55ca6598291fa23cf8d62ed82dfbf4" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EntryTypeMismatch::expected_</definition>
        <argsstring></argsstring>
        <name>expected_</name>
        <qualifiedname>EntryTypeMismatch::expected_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="330" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="330" bodyend="-1"/>
        <referencedby refid="classEntryTypeMismatch_1a38b6b3cdb6c95abf25319147c8be7057" compoundref="sliexceptions_8cc" startline="136" endline="139">message</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classEntryTypeMismatch_1a8c1516fa0125bae4a19e9f367fa80509" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EntryTypeMismatch::provided_</definition>
        <argsstring></argsstring>
        <name>provided_</name>
        <qualifiedname>EntryTypeMismatch::provided_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="331" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="331" bodyend="-1"/>
        <referencedby refid="classEntryTypeMismatch_1a38b6b3cdb6c95abf25319147c8be7057" compoundref="sliexceptions_8cc" startline="136" endline="139">message</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classEntryTypeMismatch_1a9daf352b9d9af5f9cae4d3d5a72dc0e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>EntryTypeMismatch::~EntryTypeMismatch</definition>
        <argsstring>() override</argsstring>
        <name>~EntryTypeMismatch</name>
        <qualifiedname>EntryTypeMismatch::~EntryTypeMismatch</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="334" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="334" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classEntryTypeMismatch_1ad4850fcc9eb38cb0fc74ca76f9a3aad1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>EntryTypeMismatch::EntryTypeMismatch</definition>
        <argsstring>(const std::string &amp;expectedType, const std::string &amp;providedType)</argsstring>
        <name>EntryTypeMismatch</name>
        <qualifiedname>EntryTypeMismatch::EntryTypeMismatch</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>expectedType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>providedType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="337" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="337" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classEntryTypeMismatch_1a38b6b3cdb6c95abf25319147c8be7057" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string EntryTypeMismatch::message</definition>
        <argsstring>() const override</argsstring>
        <name>message</name>
        <qualifiedname>EntryTypeMismatch::message</qualifiedname>
        <reimplements refid="classSLIException_1a8f0a43c586456cc0e161d683ff316531">message</reimplements>
        <briefdescription>
<para>Returns a diagnostic message or empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="344" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.cc" bodystart="136" bodyend="139"/>
        <references refid="classEntryTypeMismatch_1aea55ca6598291fa23cf8d62ed82dfbf4" compoundref="sliexceptions_8h" startline="330">expected_</references>
        <references refid="classEntryTypeMismatch_1a8c1516fa0125bae4a19e9f367fa80509" compoundref="sliexceptions_8h" startline="331">provided_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception to be thrown if an entry referenced inside a dictionary has the wrong type. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>DictError</label>
        <link refid="classDictError"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>EntryTypeMismatch</label>
        <link refid="classEntryTypeMismatch"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>InterpreterError</label>
        <link refid="classInterpreterError"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>DictError</label>
        <link refid="classDictError"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>EntryTypeMismatch</label>
        <link refid="classEntryTypeMismatch"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>InterpreterError</label>
        <link refid="classInterpreterError"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="328" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="329" bodyend="345"/>
    <listofallmembers>
      <member refid="classDictError_1a4dfd28739bdcebadc67c917c2a9b7a74" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>DictError</name></member>
      <member refid="classEntryTypeMismatch_1ad4850fcc9eb38cb0fc74ca76f9a3aad1" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>EntryTypeMismatch</name></member>
      <member refid="classEntryTypeMismatch_1aea55ca6598291fa23cf8d62ed82dfbf4" prot="private" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>expected_</name></member>
      <member refid="classInterpreterError_1a7aff0835ddacfa8f31829985f3257a1b" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>InterpreterError</name></member>
      <member refid="classEntryTypeMismatch_1a38b6b3cdb6c95abf25319147c8be7057" prot="public" virt="virtual"><scope>EntryTypeMismatch</scope><name>message</name></member>
      <member refid="classEntryTypeMismatch_1a8c1516fa0125bae4a19e9f367fa80509" prot="private" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>provided_</name></member>
      <member refid="classSLIException_1ace48f5938754e82931bab7f54471dd3f" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a5da1b6d493d134687d9ce01e9799b59d" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a4ac56d362c7d86819a47c76571c9c031" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>what</name></member>
      <member refid="classSLIException_1af0e8f12a5e346db4c028d23a2974f016" prot="private" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>what_</name></member>
      <member refid="classDictError_1a3c9056c4e61c532ef6b715882b199112" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>~DictError</name></member>
      <member refid="classEntryTypeMismatch_1a9daf352b9d9af5f9cae4d3d5a72dc0e8" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>~EntryTypeMismatch</name></member>
      <member refid="classInterpreterError_1af64d8c01a2f4ca1463de3a24c9e3a237" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>~InterpreterError</name></member>
      <member refid="classSLIException_1a671677b69bcc3895df94a069067c0578" prot="public" virt="non-virtual"><scope>EntryTypeMismatch</scope><name>~SLIException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
