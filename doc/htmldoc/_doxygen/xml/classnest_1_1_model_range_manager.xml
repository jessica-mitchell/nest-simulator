<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_model_range_manager" kind="class" language="C++" prot="public">
    <compoundname>nest::ModelRangeManager</compoundname>
    <basecompoundref refid="classnest_1_1_manager_interface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="modelrange__manager_8h" local="no">modelrange_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_model_range_manager_1ac85196b3cf302fe30f2ccea2724856ad" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1modelrange" kindref="compound">modelrange</ref> &gt;</type>
        <definition>std::vector&lt; modelrange &gt; nest::ModelRangeManager::modelranges_</definition>
        <argsstring></argsstring>
        <name>modelranges_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="84" column="15" bodyfile="nestkernel/modelrange_manager.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_range_manager_1a1e75e91d618c6ba0be461efebd1832e1" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelRangeManager::first_node_id_</definition>
        <argsstring></argsstring>
        <name>first_node_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="85" column="9" bodyfile="nestkernel/modelrange_manager.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_range_manager_1a0bfb85c8e3a502a0f9c954abc8f13de3" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelRangeManager::last_node_id_</definition>
        <argsstring></argsstring>
        <name>last_node_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="86" column="9" bodyfile="nestkernel/modelrange_manager.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a0b8041af39b6431c00d396725ea2c375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::ModelRangeManager::ModelRangeManager</definition>
        <argsstring>()</argsstring>
        <name>ModelRangeManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="43" column="3" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a040bf4e134988db0789f2826abf90035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::ModelRangeManager::~ModelRangeManager</definition>
        <argsstring>() override</argsstring>
        <name>~ModelRangeManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="44" column="3" bodyfile="nestkernel/modelrange_manager.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1acd0eae7011bd5bddeb43ba9b6d01bbc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelRangeManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare manager for operation.</para>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1_kernel_manager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_range_manager_1a01a81eacb4ddfd29ee728ab9848f185c" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="48" column="8" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a01a81eacb4ddfd29ee728ab9848f185c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelRangeManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take down manager after operation.</para>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1_kernel_manager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1_model_range_manager_1acd0eae7011bd5bddeb43ba9b6d01bbc6" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_range_manager_1acd0eae7011bd5bddeb43ba9b6d01bbc6" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="49" column="8" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a8a52dcc9dd106f329341f7ed90dd7c17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelRangeManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="50" column="8" bodyfile="nestkernel/modelrange_manager.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a1e880bc0eeb8288dd8609f98f6fa21d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelRangeManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="51" column="8" bodyfile="nestkernel/modelrange_manager.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a1ccd0037bf5e449cac22d80711fc7793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelRangeManager::add_range</definition>
        <argsstring>(index model, index first_node_id, index last_node_id)</argsstring>
        <name>add_range</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>first_node_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>last_node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assign a range of node IDs for the given model </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="56" column="8" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="57" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1ab0b8d457c3af8c8977e20dc1f441fb96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ModelRangeManager::is_in_range</definition>
        <argsstring>(index node_id) const</argsstring>
        <name>is_in_range</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a node ID is with the range of assigned node IDs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="61" column="8" bodyfile="nestkernel/modelrange_manager.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1ad5380cf3321b38433a364b9dc87daaf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelRangeManager::get_model_id</definition>
        <argsstring>(index node_id) const</argsstring>
        <name>get_model_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the ID of the model to which this node ID is assigned </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="66" column="9" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="81" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1ab2ea2aea12115408f37d8c0acc8460db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> *</type>
        <definition>nest::Model * nest::ModelRangeManager::get_model_of_node_id</definition>
        <argsstring>(index)</argsstring>
        <name>get_model_of_node_id</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the <ref refid="classnest_1_1_model" kindref="compound">Model</ref> for a given node ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="71" column="9" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1acfcb2294241b99b8d174bab222b7e92c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classnest_1_1modelrange" kindref="compound">modelrange</ref> &amp;</type>
        <definition>const modelrange &amp; nest::ModelRangeManager::get_contiguous_node_id_range</definition>
        <argsstring>(index node_id) const</argsstring>
        <name>get_contiguous_node_id_range</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the contiguous range of IDs of nodes assigned to the same model as the node with the given node ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="77" column="20" bodyfile="nestkernel/modelrange_manager.cpp" bodystart="119" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1aaff9489796b65950720d7474fb885e5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classnest_1_1modelrange" kindref="compound">modelrange</ref> &gt;::const_iterator</type>
        <definition>std::vector&lt; modelrange &gt;::const_iterator nest::ModelRangeManager::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="79" column="32" bodyfile="nestkernel/modelrange_manager.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_range_manager_1a4b5becfa18053a66f9d950df2c4ec4af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classnest_1_1modelrange" kindref="compound">modelrange</ref> &gt;::const_iterator</type>
        <definition>std::vector&lt; modelrange &gt;::const_iterator nest::ModelRangeManager::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/modelrange_manager.h" line="81" column="32" bodyfile="nestkernel/modelrange_manager.h" bodystart="112" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::ModelRangeManager</label>
        <link refid="classnest_1_1_model_range_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::ModelRangeManager</label>
        <link refid="classnest_1_1_model_range_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/modelrange_manager.h" line="40" column="1" bodyfile="nestkernel/modelrange_manager.h" bodystart="41" bodyend="87"/>
    <listofallmembers>
      <member refid="classnest_1_1_model_range_manager_1a1ccd0037bf5e449cac22d80711fc7793" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>add_range</name></member>
      <member refid="classnest_1_1_model_range_manager_1aaff9489796b65950720d7474fb885e5b" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>begin</name></member>
      <member refid="classnest_1_1_manager_interface_1aa88c28844a59b4791eab4b7930fc62b0" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1_manager_interface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1_model_range_manager_1a4b5becfa18053a66f9d950df2c4ec4af" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>end</name></member>
      <member refid="classnest_1_1_model_range_manager_1a01a81eacb4ddfd29ee728ab9848f185c" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1_model_range_manager_1a1e75e91d618c6ba0be461efebd1832e1" prot="private" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>first_node_id_</name></member>
      <member refid="classnest_1_1_model_range_manager_1acfcb2294241b99b8d174bab222b7e92c" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>get_contiguous_node_id_range</name></member>
      <member refid="classnest_1_1_model_range_manager_1ad5380cf3321b38433a364b9dc87daaf7" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1_model_range_manager_1ab2ea2aea12115408f37d8c0acc8460db" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>get_model_of_node_id</name></member>
      <member refid="classnest_1_1_model_range_manager_1a1e880bc0eeb8288dd8609f98f6fa21d0" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1_model_range_manager_1acd0eae7011bd5bddeb43ba9b6d01bbc6" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1_model_range_manager_1ab0b8d457c3af8c8977e20dc1f441fb96" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>is_in_range</name></member>
      <member refid="classnest_1_1_model_range_manager_1a0bfb85c8e3a502a0f9c954abc8f13de3" prot="private" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>last_node_id_</name></member>
      <member refid="classnest_1_1_manager_interface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_manager_interface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_model_range_manager_1a0b8041af39b6431c00d396725ea2c375" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>ModelRangeManager</name></member>
      <member refid="classnest_1_1_model_range_manager_1ac85196b3cf302fe30f2ccea2724856ad" prot="private" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>modelranges_</name></member>
      <member refid="classnest_1_1_manager_interface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1_manager_interface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1_model_range_manager_1a8a52dcc9dd106f329341f7ed90dd7c17" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1_manager_interface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::ModelRangeManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1_model_range_manager_1a040bf4e134988db0789f2826abf90035" prot="public" virt="non-virtual"><scope>nest::ModelRangeManager</scope><name>~ModelRangeManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
