<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBlockVector" kind="class" language="C++" prot="public">
    <compoundname>BlockVector</compoundname>
    <includes refid="block__vector_8h" local="no">block_vector.h</includes>
    <templateparamlist>
      <param>
        <type>typename value_type_</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classBlockVector_1abb9ecb9ec19a6aac6a38d69358a83a7f" prot="public" static="no">
        <type>value_type_</type>
        <definition>using BlockVector&lt; value_type_ &gt;::value_type =  value_type_</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="161" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1a20a64bccc5cd6f40926792e754c3c3d8" prot="public" static="no">
        <type>typename std::vector&lt; <ref refid="classBlockVector_1abb9ecb9ec19a6aac6a38d69358a83a7f" kindref="member">value_type</ref> &gt;::<ref refid="classBlockVector_1a20a64bccc5cd6f40926792e754c3c3d8" kindref="member">difference_type</ref></type>
        <definition>using BlockVector&lt; value_type_ &gt;::difference_type =  typename std::vector&lt; value_type &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="162" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1a5cd3509fb777a6530de988917a093e16" prot="public" static="no">
        <type>const <ref refid="classBlockVector_1abb9ecb9ec19a6aac6a38d69358a83a7f" kindref="member">value_type</ref> &amp;</type>
        <definition>using BlockVector&lt; value_type_ &gt;::const_reference =  const value_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1afed36b9cfecd06939fb7639bb82cca5a" prot="public" static="no">
        <type>const <ref refid="classBlockVector_1abb9ecb9ec19a6aac6a38d69358a83a7f" kindref="member">value_type</ref> *</type>
        <definition>using BlockVector&lt; value_type_ &gt;::const_pointer =  const value_type*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" prot="public" static="no">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref>&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</type>
        <definition>using BlockVector&lt; value_type_ &gt;::iterator =  bv_iterator&lt; value_type_, value_type_&amp;, value_type_* &gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="165" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" prot="public" static="no">
        <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref>&lt; value_type_, const value_type_ &amp;, const value_type_ * &gt;</type>
        <definition>using BlockVector&lt; value_type_ &gt;::const_iterator =  bv_iterator&lt; value_type_, const value_type_&amp;, const value_type_* &gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="166" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1af5c8462c772a762c22b0823d23c70a60" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" kindref="member">iterator</ref> &gt;</type>
        <definition>using BlockVector&lt; value_type_ &gt;::reverse_iterator =  std::reverse_iterator&lt; iterator &gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="167" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1aa6690730feb991daa9155ad2b42436b1" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" kindref="member">const_iterator</ref> &gt;</type>
        <definition>using BlockVector&lt; value_type_ &gt;::const_reverse_iterator =  std::reverse_iterator&lt; const_iterator &gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="168" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBlockVector_1a268026b46bbe20a304b8ebd8bf9c321d" prot="public" static="no">
        <type>size_t</type>
        <definition>using BlockVector&lt; value_type_ &gt;::size_type =  size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="169" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBlockVector_1aad43d00bc293ffbd9acf6f34c018d112" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename cv_value_type_</type>
          </param>
          <param>
            <type>typename ref_</type>
          </param>
          <param>
            <type>typename ptr_</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class bv_iterator</definition>
        <argsstring></argsstring>
        <name>bv_iterator</name>
        <param>
          <type><ref refid="classbv__iterator" kindref="compound">bv_iterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="158" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBlockVector_1aa6fe4c7e1c51cd19c20519b193fc6afb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; value_type_ &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; value_type_ &gt; &gt; BlockVector&lt; value_type_ &gt;::blockmap_</definition>
        <argsstring></argsstring>
        <name>blockmap_</name>
        <briefdescription>
<para>Vector holding blocks containing data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="307" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="307" bodyend="-1"/>
        <referencedby refid="classBlockVector_1add5396df6738cca94eeb0627ba1bce37" compoundref="block__vector_8h" startline="323" endline="334">BlockVector&lt; value_type_ &gt;::BlockVector</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classBlockVector_1a0ac8d780c950c2e755d595d8b5743979" prot="private" static="no" mutable="no">
        <type><ref refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" kindref="member">iterator</ref></type>
        <definition>iterator BlockVector&lt; value_type_ &gt;::finish_</definition>
        <argsstring></argsstring>
        <name>finish_</name>
        <briefdescription>
<para>Iterator pointing to one past the last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="308" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="308" bodyend="-1"/>
        <referencedby refid="classBlockVector_1add5396df6738cca94eeb0627ba1bce37" compoundref="block__vector_8h" startline="323" endline="334">BlockVector&lt; value_type_ &gt;::BlockVector</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBlockVector_1ab6ff9591ac3d1b2a0bb5c214693c806a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BlockVector&lt; value_type_ &gt;::BlockVector</definition>
        <argsstring>()</argsstring>
        <name>BlockVector</name>
        <briefdescription>
<para>Creates an empty <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="174" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1add5396df6738cca94eeb0627ba1bce37" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BlockVector&lt; value_type_ &gt;::BlockVector</definition>
        <argsstring>(size_t)</argsstring>
        <name>BlockVector</name>
        <param>
          <type>size_t</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBlockVector" kindref="compound">BlockVector</ref> containing a number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="180" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="323" bodyend="334"/>
        <references refid="classBlockVector_1a2f29f4d518506752e5e5ee9940e6365a" compoundref="block__vector_8h" startline="370" endline="373">BlockVector&lt; value_type_ &gt;::begin</references>
        <references refid="classBlockVector_1aa6fe4c7e1c51cd19c20519b193fc6afb" compoundref="block__vector_8h" startline="307">BlockVector&lt; value_type_ &gt;::blockmap_</references>
        <references refid="classBlockVector_1a0ac8d780c950c2e755d595d8b5743979" compoundref="block__vector_8h" startline="308">BlockVector&lt; value_type_ &gt;::finish_</references>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
        <references refid="namespacenest_1_1names_1ab8bd20749b72ff569db09b8bc17ad319">nest::names::n</references>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1ade81adc99ae5d76598bad804c18e0a19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BlockVector&lt; value_type_ &gt;::BlockVector</definition>
        <argsstring>(const BlockVector&lt; value_type_ &gt; &amp;)</argsstring>
        <name>BlockVector</name>
        <param>
          <type>const <ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; value_type_ &gt; &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para><ref refid="classBlockVector" kindref="compound">BlockVector</ref> copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBlockVector" kindref="compound">BlockVector</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="186" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="337" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1aa4b5ed3dccd4c850e9cc029403e81eae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>BlockVector&lt; value_type_ &gt;::~BlockVector</definition>
        <argsstring>()</argsstring>
        <name>~BlockVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="187" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1aa493172bf72595c86aeb02fa52b81e20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type_ &amp;</type>
        <definition>value_type_ &amp; BlockVector&lt; value_type_ &gt;::operator[]</definition>
        <argsstring>(const size_t pos)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Subscript access to the data contained in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element for which data should be accessed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Read/write reference to data.</para>
</simplesect>
Note that data access with this operator is unchecked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="196" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="348" bodyend="355"/>
        <references refid="block__vector_8h_1adc5eb846ba1507c9581828f17f49e347" compoundref="block__vector_8h" startline="39">block_size_shift</references>
        <references refid="block__vector_8h_1a31576f3db9f62003ee544ddcce20e1b7" compoundref="block__vector_8h" startline="41">max_block_size_sub_1</references>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a1d16aa6a8186f0940b57967976153d31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const value_type_ &amp;</type>
        <definition>const value_type_ &amp; BlockVector&lt; value_type_ &gt;::operator[]</definition>
        <argsstring>(const size_t pos) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Subscript access to the data contained in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element for which data should be accessed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Read-only (constant) reference to data.</para>
</simplesect>
Note that data access with this operator is unchecked. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="205" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="359" bodyend="366"/>
        <references refid="block__vector_8h_1adc5eb846ba1507c9581828f17f49e347" compoundref="block__vector_8h" startline="39">block_size_shift</references>
        <references refid="block__vector_8h_1a31576f3db9f62003ee544ddcce20e1b7" compoundref="block__vector_8h" startline="41">max_block_size_sub_1</references>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a2f29f4d518506752e5e5ee9940e6365a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" kindref="member">iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::iterator BlockVector&lt; value_type_ &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a read/write iterator that points to the first element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="211" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="370" bodyend="373"/>
        <referencedby refid="classBlockVector_1add5396df6738cca94eeb0627ba1bce37" compoundref="block__vector_8h" startline="323" endline="334">BlockVector&lt; value_type_ &gt;::BlockVector</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1ac038d1355e698abb17e3e74a66a8b7e6" compoundref="source__table_8cpp" startline="112" endline="155">nest::SourceTable::clean</referencedby>
        <referencedby refid="classnest_1_1Connector_1aec81fcb18458affeb49aba1fd53f3a16" compoundref="connector__base_8h" startline="497" endline="501">nest::Connector&lt; ConnectionT &gt;::remove_disabled_connections</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1af983ed462e1627dde228f1f561dc3d66" compoundref="source__table_8cpp" startline="168" endline="199">nest::SourceTable::remove_disabled_sources</referencedby>
        <referencedby refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">nest::sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a15acaff2a7b6c8282b4af791ce026898" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" kindref="member">const_iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::const_iterator BlockVector&lt; value_type_ &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a read-only (constant) iterator that points to the first element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="217" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a794af8153625e4c925137afa010b2864" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" kindref="member">iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::iterator BlockVector&lt; value_type_ &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a read/write iterator that points one past the last element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="223" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="384" bodyend="387"/>
        <referencedby refid="classnest_1_1SourceTable_1ac038d1355e698abb17e3e74a66a8b7e6" compoundref="source__table_8cpp" startline="112" endline="155">nest::SourceTable::clean</referencedby>
        <referencedby refid="classnest_1_1Connector_1aec81fcb18458affeb49aba1fd53f3a16" compoundref="connector__base_8h" startline="497" endline="501">nest::Connector&lt; ConnectionT &gt;::remove_disabled_connections</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1af983ed462e1627dde228f1f561dc3d66" compoundref="source__table_8cpp" startline="168" endline="199">nest::SourceTable::remove_disabled_sources</referencedby>
        <referencedby refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">nest::sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a7834c4e8d651a748c6b47e0a854300a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" kindref="member">const_iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::const_iterator BlockVector&lt; value_type_ &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a read-only (constant) iterator that points one past the last element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="229" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1ad82291b9c6dba6fd739394a0f401dda0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BlockVector&lt; value_type_ &gt;::push_back</definition>
        <argsstring>(const value_type_ &amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>const value_type_ &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add data to the end of the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be added.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Assigns given data to the element at the end of the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="237" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="398" bodyend="411"/>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
        <referencedby refid="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" compoundref="connector__base_8h" startline="272" endline="291">nest::Connector&lt; ConnectionT &gt;::get_connection</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac6051af5ceb56896d1dbba8cf9d9c2e7" compoundref="connector__base_8h" startline="294" endline="314">nest::Connector&lt; ConnectionT &gt;::get_connection_with_specified_targets</referencedby>
        <referencedby refid="classnest_1_1Connector_1afc820f81a5c50fed40c05bbe2c96eca3" compoundref="connector__base_8h" startline="330" endline="340">nest::Connector&lt; ConnectionT &gt;::get_source_lcids</referencedby>
        <referencedby refid="classnest_1_1Connector_1a2ac4cc7479c6f0c7bdcc6b387f3bb161" compoundref="connector__base_8h" startline="266" endline="269">nest::Connector&lt; ConnectionT &gt;::push_back</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a498793455f3c9cc74e8eded345fa857f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BlockVector&lt; value_type_ &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erases all the elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="242" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="415" bodyend="425"/>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
        <referencedby refid="classnest_1_1SourceTable_1ac038d1355e698abb17e3e74a66a8b7e6" compoundref="source__table_8cpp" startline="112" endline="155">nest::SourceTable::clean</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac8865aa2f3ffcad3b036b169b9a457b9" compoundref="connector__base_8h" startline="228" endline="231">nest::Connector&lt; ConnectionT &gt;::~Connector</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BlockVector&lt; value_type_ &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of elements in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="247" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="429" bodyend="442"/>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
        <referencedby refid="classnest_1_1SourceTable_1ac038d1355e698abb17e3e74a66a8b7e6" compoundref="source__table_8cpp" startline="112" endline="155">nest::SourceTable::clean</referencedby>
        <referencedby refid="classnest_1_1Connector_1aa2f10ea404c45384b534358a29ca77fd" compoundref="connector__base_8h" startline="317" endline="327">nest::Connector&lt; ConnectionT &gt;::get_all_connections</referencedby>
        <referencedby refid="classnest_1_1Connector_1afc820f81a5c50fed40c05bbe2c96eca3" compoundref="connector__base_8h" startline="330" endline="340">nest::Connector&lt; ConnectionT &gt;::get_source_lcids</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac01973b88c8ee529771fb260a389bd61" compoundref="connector__base_8h" startline="246" endline="255">nest::Connector&lt; ConnectionT &gt;::get_synapse_status</referencedby>
        <referencedby refid="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" compoundref="sort_8h" startline="92" endline="168">nest::quicksort3way</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1af983ed462e1627dde228f1f561dc3d66" compoundref="source__table_8cpp" startline="168" endline="199">nest::SourceTable::remove_disabled_sources</referencedby>
        <referencedby refid="classnest_1_1Connector_1a94651ce01c1cf42d08c60d61d0cf2070" compoundref="connector__base_8h" startline="373" endline="383">nest::Connector&lt; ConnectionT &gt;::send_to_all</referencedby>
        <referencedby refid="classnest_1_1Connector_1a5bbb84d281dc2645a3f37374d032521d" compoundref="connector__base_8h" startline="258" endline="263">nest::Connector&lt; ConnectionT &gt;::set_synapse_status</referencedby>
        <referencedby refid="classnest_1_1Connector_1a5a49541b9150121be9d15df761f7dec0" compoundref="connector__base_8h" startline="240" endline="243">nest::Connector&lt; ConnectionT &gt;::size</referencedby>
        <referencedby refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">nest::sort</referencedby>
        <referencedby refid="classnest_1_1Connector_1acf54076999d8ab831f634bccd0253cc3" compoundref="connector__base_8h" startline="420" endline="439">nest::Connector&lt; ConnectionT &gt;::trigger_update_weight</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a96fdf65b807b7fbca9cb0127fb12829c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" kindref="member">iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::iterator BlockVector&lt; value_type_ &gt;::erase</definition>
        <argsstring>(const_iterator, const_iterator)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" kindref="member">const_iterator</ref></type>
          <defname>first</defname>
        </param>
        <param>
          <type><ref refid="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" kindref="member">const_iterator</ref></type>
          <defname>last</defname>
        </param>
        <briefdescription>
<para>Remove a range of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the first element to be erased. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing one past the last element to be erased. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the element pointed to by <emphasis>last</emphasis> prior to erasing (or <ref refid="classBlockVector_1a794af8153625e4c925137afa010b2864" kindref="member">end()</ref>).</para>
</simplesect>
This function will erase the elements in the range [first, last) and shorten the <ref refid="classBlockVector" kindref="compound">BlockVector</ref> accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="259" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="446" bodyend="495"/>
        <references refid="classbv__iterator_1a688e14150d9a79d08ffee6cf8194157b" compoundref="block__vector_8h" startline="66">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::block_vector_</references>
        <references refid="namespacenest_1_1names_1a5a0ca6f3568e7ffc59143a1e1a31d790">nest::names::clear</references>
        <references refid="classbv__iterator_1a3e84ee42a74c2a181d13f20d52d819ca" compoundref="block__vector_8h" startline="809" endline="812">bv_iterator&lt; value_type_, ref_, ptr_ &gt;::const_cast_</references>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
        <referencedby refid="classnest_1_1SourceTable_1ac038d1355e698abb17e3e74a66a8b7e6" compoundref="source__table_8cpp" startline="112" endline="155">nest::SourceTable::clean</referencedby>
        <referencedby refid="classnest_1_1Connector_1aec81fcb18458affeb49aba1fd53f3a16" compoundref="connector__base_8h" startline="497" endline="501">nest::Connector&lt; ConnectionT &gt;::remove_disabled_connections</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1af983ed462e1627dde228f1f561dc3d66" compoundref="source__table_8cpp" startline="168" endline="199">nest::SourceTable::remove_disabled_sources</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a6b8e722a3ddbf55b23da71cb663ed9c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BlockVector&lt; value_type_ &gt;::print_blocks</definition>
        <argsstring>() const</argsstring>
        <name>print_blocks</name>
        <briefdescription>
<para>Writes the contents of the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>, separated into blocks, to cerr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="265" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="499" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a8454f2d2d53fdcebe5eb0bc0df8f5df8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int BlockVector&lt; value_type_ &gt;::get_max_block_size</definition>
        <argsstring>() const</argsstring>
        <name>get_max_block_size</name>
        <briefdescription>
<para>Returns the block-size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="270" column="7" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="523" bodyend="526"/>
        <references refid="block__vector_8h_1a9bbc9234c5621a8c3f79e3c1289e5c84" compoundref="block__vector_8h" startline="40">max_block_size</references>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a64c3724a8edb24850f4361e2ffbab13a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1a268026b46bbe20a304b8ebd8bf9c321d" kindref="member">size_type</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::size_type BlockVector&lt; value_type_ &gt;::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Returns the <ref refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" kindref="member">size()</ref> of the largest possible <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="275" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a4854eb48d53f21c063f40fd370964c3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1af5c8462c772a762c22b0823d23c70a60" kindref="member">reverse_iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::reverse_iterator BlockVector&lt; value_type_ &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a read/write reverse iterator that points to the last element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in reverse element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="282" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1affacf188cbf47c29adb6f01e5428e46e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1af5c8462c772a762c22b0823d23c70a60" kindref="member">reverse_iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::reverse_iterator BlockVector&lt; value_type_ &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a read-only (constant) reverse iterator that points to the last element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in reverse element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="289" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="544" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a4f96764eee12944de5e3e302a61bc89e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1af5c8462c772a762c22b0823d23c70a60" kindref="member">reverse_iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::reverse_iterator BlockVector&lt; value_type_ &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns a read/write reverse iterator that points to one before the first element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in reverse element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="296" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="551" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classBlockVector_1a19cc4542033c83f04640cac2a8ea61c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBlockVector_1af5c8462c772a762c22b0823d23c70a60" kindref="member">reverse_iterator</ref></type>
        <definition>BlockVector&lt; value_type_ &gt;::reverse_iterator BlockVector&lt; value_type_ &gt;::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns a read-only (constant) reverse iterator that points to one before the first element in the <ref refid="classBlockVector" kindref="compound">BlockVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Iteration is done in reverse element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="303" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="558" bodyend="561"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Container with a vector-of-vectors structure. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>value_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of element.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Elements are stored in blocks held in a blockmap. Each block is of fixed size, with elements default-initialised on creation of the block. A new block is automatically created when a block is filled. The size of each block is a power of two, which allows use of bitwise operators to efficiently map an index to the right block and the right position in that block. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BlockVector&lt; value_type_ &gt;</label>
        <link refid="classBlockVector"/>
      </node>
      <node id="3">
        <label>BlockVector&lt; nest::SparseNodeArray::NodeEntry &gt;</label>
        <link refid="classBlockVector"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; nest::SparseNodeArray::NodeEntry &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BlockVector&lt; ConnectionT &gt;</label>
        <link refid="classBlockVector"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; ConnectionT &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BlockVector&lt; value_type_ &gt;</label>
        <link refid="classBlockVector"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-finish_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>bv_iterator&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; value_type_, value_type_ &amp;, value_type_ * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>bv_iterator&lt; value_type_, ref_, ptr_ &gt;</label>
        <link refid="classbv__iterator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>-block_it_</edgelabel>
          <edgelabel>-block_vector_it_</edgelabel>
          <edgelabel>-current_block_end_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" line="155" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/block_vector.h" bodystart="156" bodyend="309"/>
    <listofallmembers>
      <member refid="classBlockVector_1a2f29f4d518506752e5e5ee9940e6365a" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>begin</name></member>
      <member refid="classBlockVector_1a15acaff2a7b6c8282b4af791ce026898" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>begin</name></member>
      <member refid="classBlockVector_1aa6fe4c7e1c51cd19c20519b193fc6afb" prot="private" virt="non-virtual"><scope>BlockVector</scope><name>blockmap_</name></member>
      <member refid="classBlockVector_1ab6ff9591ac3d1b2a0bb5c214693c806a" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>BlockVector</name></member>
      <member refid="classBlockVector_1add5396df6738cca94eeb0627ba1bce37" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>BlockVector</name></member>
      <member refid="classBlockVector_1ade81adc99ae5d76598bad804c18e0a19" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>BlockVector</name></member>
      <member refid="classBlockVector_1aad43d00bc293ffbd9acf6f34c018d112" prot="private" virt="non-virtual"><scope>BlockVector</scope><name>bv_iterator</name></member>
      <member refid="classBlockVector_1a498793455f3c9cc74e8eded345fa857f" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>clear</name></member>
      <member refid="classBlockVector_1a14c04d109c2cc797607609f02ef4fb68" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>const_iterator</name></member>
      <member refid="classBlockVector_1afed36b9cfecd06939fb7639bb82cca5a" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>const_pointer</name></member>
      <member refid="classBlockVector_1a5cd3509fb777a6530de988917a093e16" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>const_reference</name></member>
      <member refid="classBlockVector_1aa6690730feb991daa9155ad2b42436b1" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>const_reverse_iterator</name></member>
      <member refid="classBlockVector_1a20a64bccc5cd6f40926792e754c3c3d8" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>difference_type</name></member>
      <member refid="classBlockVector_1a794af8153625e4c925137afa010b2864" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>end</name></member>
      <member refid="classBlockVector_1a7834c4e8d651a748c6b47e0a854300a3" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>end</name></member>
      <member refid="classBlockVector_1a96fdf65b807b7fbca9cb0127fb12829c" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>erase</name></member>
      <member refid="classBlockVector_1a0ac8d780c950c2e755d595d8b5743979" prot="private" virt="non-virtual"><scope>BlockVector</scope><name>finish_</name></member>
      <member refid="classBlockVector_1a8454f2d2d53fdcebe5eb0bc0df8f5df8" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>get_max_block_size</name></member>
      <member refid="classBlockVector_1ae5effb5c804e7e8496720a4c3eaff540" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>iterator</name></member>
      <member refid="classBlockVector_1a64c3724a8edb24850f4361e2ffbab13a" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>max_size</name></member>
      <member refid="classBlockVector_1aa493172bf72595c86aeb02fa52b81e20" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>operator[]</name></member>
      <member refid="classBlockVector_1a1d16aa6a8186f0940b57967976153d31" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>operator[]</name></member>
      <member refid="classBlockVector_1a6b8e722a3ddbf55b23da71cb663ed9c1" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>print_blocks</name></member>
      <member refid="classBlockVector_1ad82291b9c6dba6fd739394a0f401dda0" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>push_back</name></member>
      <member refid="classBlockVector_1a4854eb48d53f21c063f40fd370964c3f" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>rbegin</name></member>
      <member refid="classBlockVector_1affacf188cbf47c29adb6f01e5428e46e" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>rbegin</name></member>
      <member refid="classBlockVector_1a4f96764eee12944de5e3e302a61bc89e" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>rend</name></member>
      <member refid="classBlockVector_1a19cc4542033c83f04640cac2a8ea61c5" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>rend</name></member>
      <member refid="classBlockVector_1af5c8462c772a762c22b0823d23c70a60" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>reverse_iterator</name></member>
      <member refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>size</name></member>
      <member refid="classBlockVector_1a268026b46bbe20a304b8ebd8bf9c321d" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>size_type</name></member>
      <member refid="classBlockVector_1abb9ecb9ec19a6aac6a38d69358a83a7f" prot="public" virt="non-virtual"><scope>BlockVector</scope><name>value_type</name></member>
      <member refid="classBlockVector_1aa4b5ed3dccd4c850e9cc029403e81eae" prot="public" virt="virtual"><scope>BlockVector</scope><name>~BlockVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
