<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classNamingConflict" kind="class" language="C++" prot="public">
    <compoundname>NamingConflict</compoundname>
    <basecompoundref refid="classSLIException" prot="public" virt="non-virtual">SLIException</basecompoundref>
    <includes refid="sliexceptions_8h" local="no">sliexceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNamingConflict_1a957af8ea3daee6334e19c36736b90ad7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string NamingConflict::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <qualifiedname>NamingConflict::msg_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="448" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="448" bodyend="-1"/>
        <referencedby refid="classNamingConflict_1a5073eab3a39ebf7754047f7bf9c23d4e" compoundref="sliexceptions_8cc" startline="201" endline="204">message</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNamingConflict_1a60483ea419f2849e3763690583cb0db9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NamingConflict::~NamingConflict</definition>
        <argsstring>() override</argsstring>
        <name>~NamingConflict</name>
        <qualifiedname>NamingConflict::~NamingConflict</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="451" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="451" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classNamingConflict_1a10a9419d20d8343df169ed779c4a1fb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NamingConflict::NamingConflict</definition>
        <argsstring>(const std::string &amp;m)</argsstring>
        <name>NamingConflict</name>
        <qualifiedname>NamingConflict::NamingConflict</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="454" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="454" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classNamingConflict_1a5073eab3a39ebf7754047f7bf9c23d4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string NamingConflict::message</definition>
        <argsstring>() const override</argsstring>
        <name>message</name>
        <qualifiedname>NamingConflict::message</qualifiedname>
        <reimplements refid="classSLIException_1a8f0a43c586456cc0e161d683ff316531">message</reimplements>
        <briefdescription>
<para>Returns a diagnostic message or empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="460" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.cc" bodystart="201" bodyend="204"/>
        <references refid="classNamingConflict_1a957af8ea3daee6334e19c36736b90ad7" compoundref="sliexceptions_8h" startline="448">msg_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Throw if an existing name is attempted to be redefined. </para>
    </briefdescription>
    <detaileddescription>
<para>This is relevant mainly when a newly loaded module attempts to redefine a model, synapse or function name. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>NamingConflict</label>
        <link refid="classNamingConflict"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>NamingConflict</label>
        <link refid="classNamingConflict"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="446" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="447" bodyend="461"/>
    <listofallmembers>
      <member refid="classNamingConflict_1a5073eab3a39ebf7754047f7bf9c23d4e" prot="public" virt="virtual"><scope>NamingConflict</scope><name>message</name></member>
      <member refid="classNamingConflict_1a957af8ea3daee6334e19c36736b90ad7" prot="private" virt="non-virtual"><scope>NamingConflict</scope><name>msg_</name></member>
      <member refid="classNamingConflict_1a10a9419d20d8343df169ed779c4a1fb7" prot="public" virt="non-virtual"><scope>NamingConflict</scope><name>NamingConflict</name></member>
      <member refid="classSLIException_1ace48f5938754e82931bab7f54471dd3f" prot="public" virt="non-virtual"><scope>NamingConflict</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a5da1b6d493d134687d9ce01e9799b59d" prot="public" virt="non-virtual"><scope>NamingConflict</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a4ac56d362c7d86819a47c76571c9c031" prot="public" virt="non-virtual"><scope>NamingConflict</scope><name>what</name></member>
      <member refid="classSLIException_1af0e8f12a5e346db4c028d23a2974f016" prot="private" virt="non-virtual"><scope>NamingConflict</scope><name>what_</name></member>
      <member refid="classNamingConflict_1a60483ea419f2849e3763690583cb0db9" prot="public" virt="non-virtual"><scope>NamingConflict</scope><name>~NamingConflict</name></member>
      <member refid="classSLIException_1a671677b69bcc3895df94a069067c0578" prot="public" virt="non-virtual"><scope>NamingConflict</scope><name>~SLIException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
