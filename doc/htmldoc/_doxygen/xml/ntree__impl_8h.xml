<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="ntree__impl_8h" kind="file" language="C++">
    <compoundname>ntree_impl.h</compoundname>
    <includes local="no">limits</includes>
    <includes refid="ntree_8h" local="yes">ntree.h</includes>
    <includes refid="mask_8h" local="yes">mask.h</includes>
    <includedby refid="free__layer_8h" local="yes">free_layer.h</includedby>
    <incdepgraph>
      <node id="59">
        <label>lockptr.h</label>
        <link refid="lockptr_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>numerics.h</label>
        <link refid="numerics_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>event.h</label>
        <link refid="event_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>generic_factory.h</label>
        <link refid="generic__factory_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>manager_interface.h</label>
        <link refid="manager__interface_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>mask.h</label>
        <link refid="mask_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>nest_names.h</label>
        <link refid="nest__names_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>nest_time.h</label>
        <link refid="nest__time_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>nest_types.h</label>
        <link refid="nest__types_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>nestmodule.h</label>
        <link refid="nestmodule_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>node_collection.h</label>
        <link refid="node__collection_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ntree.h</label>
        <link refid="ntree_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ntree_impl.h</label>
        <link refid="ntree__impl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>parameter.h</label>
        <link refid="parameter_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>position.h</label>
        <link refid="position_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>random_generators.h</label>
        <link refid="random__generators_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>spike_data.h</label>
        <link refid="spike__data_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>static_assert.h</label>
        <link refid="static__assert_8h"/>
      </node>
      <node id="44">
        <label>target.h</label>
        <link refid="target_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>vp_manager.h</label>
        <link refid="vp__manager_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>aggregatedatum.h</label>
        <link refid="aggregatedatum_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>arraydatum.h</label>
        <link refid="arraydatum_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>datum.h</label>
        <link refid="datum_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>dictdatum.h</label>
        <link refid="dictdatum_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>dictutils.h</label>
        <link refid="dictutils_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>doubledatum.h</label>
        <link refid="doubledatum_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>genericdatum.h</label>
        <link refid="genericdatum_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>integerdatum.h</label>
        <link refid="integerdatum_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>interpret.h</label>
        <link refid="interpret_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>lockptrdatum.h</label>
        <link refid="lockptrdatum_8h"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>name.h</label>
        <link refid="name_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>namedatum.h</label>
        <link refid="namedatum_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>numericdatum.h</label>
        <link refid="numericdatum_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>sharedptrdatum.h</label>
        <link refid="sharedptrdatum_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sliactions.h</label>
        <link refid="sliactions_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>slibuiltins.h</label>
        <link refid="slibuiltins_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>sliexceptions.h</label>
        <link refid="sliexceptions_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>slifunction.h</label>
        <link refid="slifunction_8h"/>
      </node>
      <node id="54">
        <label>slimodule.h</label>
        <link refid="slimodule_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>slitype.h</label>
        <link refid="slitype_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>tarrayobj.h</label>
        <link refid="tarrayobj_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>token.h</label>
        <link refid="token_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>tokenarray.h</label>
        <link refid="tokenarray_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>tokenstack.h</label>
        <link refid="tokenstack_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>tokenutils.h</label>
        <link refid="tokenutils_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>array</label>
      </node>
      <node id="4">
        <label>bitset</label>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="19">
        <label>cfloat</label>
      </node>
      <node id="24">
        <label>climits</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>compose.hpp</label>
      </node>
      <node id="22">
        <label>config.h</label>
      </node>
      <node id="25">
        <label>cstddef</label>
      </node>
      <node id="27">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>cstdlib</label>
      </node>
      <node id="42">
        <label>cstring</label>
      </node>
      <node id="64">
        <label>ctime</label>
      </node>
      <node id="29">
        <label>deque</label>
      </node>
      <node id="76">
        <label>functional</label>
      </node>
      <node id="71">
        <label>initializer_list</label>
      </node>
      <node id="33">
        <label>iomanip</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="2">
        <label>limits</label>
      </node>
      <node id="51">
        <label>list</label>
      </node>
      <node id="30">
        <label>map</label>
      </node>
      <node id="60">
        <label>memory</label>
      </node>
      <node id="65">
        <label>ostream</label>
      </node>
      <node id="72">
        <label>random</label>
      </node>
      <node id="74">
        <label>randutils.hpp</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="66">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>stdint.h</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="73">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>free_layer.h</label>
        <link refid="free__layer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>layer.cpp</label>
        <link refid="layer_8cpp"/>
      </node>
      <node id="4">
        <label>nestmodule.cpp</label>
        <link refid="nestmodule_8cpp"/>
      </node>
      <node id="1">
        <label>ntree_impl.h</label>
        <link refid="ntree__impl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>parameter.cpp</label>
        <link refid="parameter_8cpp"/>
      </node>
      <node id="7">
        <label>spatial.cpp</label>
        <link refid="spatial_8cpp"/>
      </node>
      <node id="5">
        <label>spatial.h</label>
        <link refid="spatial_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacenest">nest</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>ntree_impl.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NTREE_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NTREE_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ntree_8h" kindref="compound">ntree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>spatial:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mask_8h" kindref="compound">mask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenest" kindref="compound">nest</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="37" refid="classnest_1_1Ntree_1_1iterator_1adc069c1ca0fc49c0c9074aef888781d3" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1iterator_1a97115dd5a15ec6949f33f07c2426c711" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::iterator</ref>(<sp/><ref refid="classnest_1_1Ntree" kindref="compound">Ntree</ref>&amp;<sp/>q<sp/>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>:<sp/>ntree_(<sp/>&amp;q<sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>,<sp/>top_(<sp/>&amp;q<sp/>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>,<sp/>node_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classnest_1_1Ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a1b78d562b12579520d423b013985a744" kindref="member">is_leaf</ref>()<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" kindref="member">ntree_</ref><sp/>=<sp/><ref refid="classnest_1_1Ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1abbe7f4ab02a5c6751ee3aa6e01e21a21" kindref="member">children_</ref>[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>first<sp/>non-empty<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.empty()<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1_1iterator_1ac211b71e9094cc21b5ad46a195c1f019" kindref="member">next_leaf_</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1_1iterator_1a27142efc19ccb2ccee629acfd3e9db4f" kindref="member">ntree_</ref><sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Ntree_1_1iterator" kindref="compound">Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator</ref>&amp;</highlight></codeline>
<codeline lineno="61" refid="classnest_1_1Ntree_1_1iterator_1a16643adcdfe83afec052692bcb9d76df" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1iterator_1a16643adcdfe83afec052692bcb9d76df" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::operator++</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>node_++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>node_<sp/>&gt;=<sp/>ntree_-&gt;nodes_.size()<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>next_leaf_();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classnest_1_1Ntree_1_1iterator_1ac211b71e9094cc21b5ad46a195c1f019" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1iterator_1ac211b71e9094cc21b5ad46a195c1f019" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::iterator::next_leaf_</ref>()</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>on<sp/>the<sp/>last<sp/>subntree,<sp/>move<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>and<sp/>(<sp/>ntree_<sp/>!=<sp/>top_<sp/>)<sp/>and<sp/>ntree_-&gt;my_subquad_<sp/>==<sp/><ref refid="classnest_1_1Ntree_1ab54b92ccee3d0249365a4c9f9c1b1f26" kindref="member">N</ref><sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;parent_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>stop<sp/>at<sp/>the<sp/>top,<sp/>this<sp/>should<sp/>never<sp/>happen!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>assert(<sp/>ntree_<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>reached<sp/>the<sp/>top,<sp/>mark<sp/>as<sp/>invalid<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>==<sp/>top_<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>next<sp/>sibling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;parent_-&gt;children_[<sp/>ntree_-&gt;my_subquad_<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>down<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>leaf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>ntree_-&gt;is_leaf()<sp/>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;children_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Proper<sp/>mod<sp/>which<sp/>returns<sp/>non-negative<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="namespacenest_1a113f9049bd2e4bf0b496cb6e8625df45" refkind="member"><highlight class="normal"><ref refid="namespacenest_1a113f9049bd2e4bf0b496cb6e8625df45" kindref="member">mod</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>std::fmod(<sp/>x,<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>p;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="124" refid="classnest_1_1Ntree_1_1masked__iterator_1a573e9a6c350f7d5c0b691a82ceeaeb67" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a626e58c2b76c2d79d1798fb294a70984" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::masked_iterator</ref>(<sp/><ref refid="classnest_1_1Ntree" kindref="compound">Ntree&lt; D, T, max_capacity, max_depth &gt;</ref>&amp;<sp/>q,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Mask" kindref="compound">Mask&lt; D &gt;</ref>&amp;<sp/>mask,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref>&amp;<sp/>anchor<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>:<sp/>ntree_(<sp/>&amp;q<sp/>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>,<sp/>top_(<sp/>&amp;q<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>,<sp/>allin_top_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>,<sp/>node_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>,<sp/>mask_(<sp/>&amp;mask<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>,<sp/>anchor_(<sp/>anchor<sp/>)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>,<sp/>anchors_()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>,<sp/>current_anchor_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1ad5b45402f1fd075ab9e15a3e29e6e8bb" kindref="member">periodic_</ref>.any()<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref><sp/>mask_bb<sp/>=<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a525de527d9f810ed43de01633c2ead12" kindref="member">mask_</ref>-&gt;get_bbox();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>lower<sp/>left<sp/>corner<sp/>of<sp/>mask<sp/>into<sp/>main<sp/>image<sp/>of<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1ad5b45402f1fd075ab9e15a3e29e6e8bb" kindref="member">periodic_</ref>[<sp/>i<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a736be9a1bf5f0d250c6192d94706a9ee" kindref="member">anchor_</ref>[<sp/>i<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a113f9049bd2e4bf0b496cb6e8625df45" kindref="member">nest::mod</ref>(<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a736be9a1bf5f0d250c6192d94706a9ee" kindref="member">anchor_</ref>[<sp/>i<sp/>]<sp/>+<sp/>mask_bb.<ref refid="structnest_1_1Box_1a07258756c85bafcfcd7187707791e306" kindref="member">lower_left</ref>[<sp/>i<sp/>]<sp/>-<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>],<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>mask_bb.<ref refid="structnest_1_1Box_1a07258756c85bafcfcd7187707791e306" kindref="member">lower_left</ref>[<sp/>i<sp/>]<sp/>+<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a04b0a7559a53ef42dffe632b7a70b6b8" kindref="member">anchors_</ref>.push_back(<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a736be9a1bf5f0d250c6192d94706a9ee" kindref="member">anchor_</ref><sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>extra<sp/>anchors<sp/>for<sp/>each<sp/>dimension<sp/>where<sp/>this<sp/>is<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Assumes<sp/>that<sp/>the<sp/>mask<sp/>is<sp/>not<sp/>wider<sp/>than<sp/>the<sp/>layer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1ad5b45402f1fd075ab9e15a3e29e6e8bb" kindref="member">periodic_</ref>[<sp/>i<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a04b0a7559a53ef42dffe632b7a70b6b8" kindref="member">anchors_</ref>.size();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a736be9a1bf5f0d250c6192d94706a9ee" kindref="member">anchor_</ref>[<sp/>i<sp/>]<sp/>+<sp/>mask_bb.<ref refid="structnest_1_1Box_1abdae9440dd4d9e0a7bbb3586d440528c" kindref="member">upper_right</ref>[<sp/>i<sp/>]<sp/>-<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>]<sp/>)<sp/>&gt;<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref><sp/>p<sp/>=<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a04b0a7559a53ef42dffe632b7a70b6b8" kindref="member">anchors_</ref>[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[<sp/>i<sp/>]<sp/>-=<sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a03373e5383fbf03c4aa2aa934c0e94c5" kindref="member">ntree_</ref>-&gt;<ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a04b0a7559a53ef42dffe632b7a70b6b8" kindref="member">anchors_</ref>.push_back(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;anchors_.size();++i)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>anchors_[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;---&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a351e1e9404df59ea78a1b5e08c3e6911" kindref="member">init_</ref>();</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classnest_1_1Ntree_1_1masked__iterator_1a351e1e9404df59ea78a1b5e08c3e6911" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a351e1e9404df59ea78a1b5e08c3e6911" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::init_</ref>()</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>node_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>allin_top_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ntree_<sp/>=<sp/>top_;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mask_-&gt;outside(<sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref>(<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_,<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_<sp/>+<sp/>ntree_-&gt;extent_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>next_anchor_();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mask_-&gt;inside(<sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref>(<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_,<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_<sp/>+<sp/>ntree_-&gt;extent_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first_leaf_inside_();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first_leaf_();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ntree_-&gt;nodes_.empty()<sp/>or<sp/>(<sp/>not<sp/>mask_-&gt;inside(<sp/>ntree_-&gt;nodes_[<sp/>node_<sp/>].first<sp/>-<sp/>anchor_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++(<sp/>*this<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classnest_1_1Ntree_1_1masked__iterator_1ac104c1ff8b7b62d84abbc22b3426f415" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1ac104c1ff8b7b62d84abbc22b3426f415" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::next_anchor_</ref>()</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>++current_anchor_;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current_anchor_<sp/>&gt;=<sp/>anchors_.size()<sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Done.<sp/>Mark<sp/>as<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>anchor_<sp/>=<sp/>anchors_[<sp/>current_anchor_<sp/>];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>init_();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="classnest_1_1Ntree_1_1masked__iterator_1ac0dbf7a25f913e88683273110449f427" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1ac0dbf7a25f913e88683273110449f427" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::next_leaf_</ref>()</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>states:<sp/>the<sp/>initial<sp/>state,<sp/>and<sp/>&quot;all<sp/>in&quot;.<sp/>In<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>in<sp/>state,<sp/>we<sp/>are<sp/>in<sp/>a<sp/>subtree<sp/>which<sp/>is<sp/>completely<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>mask.<sp/>The<sp/>allin_top_<sp/>is<sp/>the<sp/>top<sp/>of<sp/>this<sp/>subtree.<sp/>When</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exiting<sp/>the<sp/>subtree,<sp/>the<sp/>state<sp/>changes<sp/>to<sp/>the<sp/>initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>state.<sp/>In<sp/>the<sp/>initial<sp/>state,<sp/>we<sp/>must<sp/>check<sp/>each<sp/>quadrant<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>it<sp/>is<sp/>completely<sp/>inside<sp/>or<sp/>outside<sp/>the<sp/>mask.<sp/>If<sp/>inside,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>go<sp/>all<sp/>in.<sp/>If<sp/>outside,<sp/>we<sp/>move<sp/>on<sp/>to<sp/>the<sp/>next<sp/>leaf.<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>neither,<sp/>keep<sp/>going<sp/>until<sp/>we<sp/>find<sp/>a<sp/>leaf.<sp/>Upon<sp/>exiting<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>function,<sp/>we<sp/>are<sp/>either<sp/>done<sp/>(ntree_==0),<sp/>or<sp/>on<sp/>a<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>node<sp/>which<sp/>at<sp/>least<sp/>intersects<sp/>with<sp/>the<sp/>mask.<sp/>If<sp/>allin_top_!=0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>leaf<sp/>is<sp/>completely<sp/>inside<sp/>the<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>allin_top_<sp/>)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>all<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>on<sp/>the<sp/>last<sp/>subtree,<sp/>move<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>and<sp/>(<sp/>ntree_<sp/>!=<sp/>allin_top_<sp/>)<sp/>and<sp/>ntree_-&gt;my_subquad_<sp/>==<sp/><ref refid="classnest_1_1Ntree_1ab54b92ccee3d0249365a4c9f9c1b1f26" kindref="member">N</ref><sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;parent_;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>stop<sp/>at<sp/>the<sp/>top,<sp/>this<sp/>should<sp/>never<sp/>happen!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ntree_<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>reached<sp/>the<sp/>allin_top_,<sp/>we<sp/>are<sp/>no<sp/>longer<sp/>all<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>!=<sp/>allin_top_<sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>next<sp/>sibling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;parent_-&gt;children_[<sp/>ntree_-&gt;my_subquad_<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>down<sp/>if<sp/>this<sp/>is<sp/>not<sp/>a<sp/>leaf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>ntree_-&gt;is_leaf()<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;children_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>allin_top_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>continue<sp/>as<sp/>not<sp/>all<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>Not<sp/>all<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>on<sp/>the<sp/>last<sp/>subtree,<sp/>move<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>and<sp/>(<sp/>ntree_<sp/>!=<sp/>top_<sp/>)<sp/>and<sp/>ntree_-&gt;my_subquad_<sp/>==<sp/><ref refid="classnest_1_1Ntree_1ab54b92ccee3d0249365a4c9f9c1b1f26" kindref="member">N</ref><sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;parent_;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>stop<sp/>at<sp/>the<sp/>top,<sp/>this<sp/>should<sp/>never<sp/>happen!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ntree_<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>reached<sp/>the<sp/>top,<sp/>mark<sp/>as<sp/>invalid<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>==<sp/>top_<sp/>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_anchor_();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>next<sp/>sibling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;parent_-&gt;children_[<sp/>ntree_-&gt;my_subquad_<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>anchored<sp/>position<sp/>in<sp/>two<sp/>steps<sp/>to<sp/>avoid<sp/>creating<sp/>a<sp/>new<sp/>Position<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>anchored_position_<sp/>=<sp/>ntree_-&gt;lower_left_;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>anchored_position_<sp/>-=<sp/>anchor_;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mask_-&gt;inside(<sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref>(<sp/>anchored_position_,<sp/>anchored_position_<sp/>+<sp/>ntree_-&gt;extent_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_leaf_inside_();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>mask_-&gt;outside(<sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref>(<sp/>anchored_position_,<sp/>anchored_position_<sp/>+<sp/>ntree_-&gt;extent_<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_leaf_();</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="classnest_1_1Ntree_1_1masked__iterator_1ae10405ba912ab3c4e6cccc1a42f3e5ed" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1ae10405ba912ab3c4e6cccc1a42f3e5ed" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::first_leaf_</ref>()</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>ntree_-&gt;is_leaf()<sp/>)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;children_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mask_-&gt;inside(<sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref>(<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_,<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_<sp/>+<sp/>ntree_-&gt;extent_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_leaf_inside_();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mask_-&gt;outside(<sp/><ref refid="structnest_1_1Box" kindref="compound">Box&lt; D &gt;</ref>(<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_,<sp/>ntree_-&gt;lower_left_<sp/>-<sp/>anchor_<sp/>+<sp/>ntree_-&gt;extent_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_leaf_();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classnest_1_1Ntree_1_1masked__iterator_1a318e492bd4d9f83828ad7a834b0684b2" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a318e492bd4d9f83828ad7a834b0684b2" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::first_leaf_inside_</ref>()</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>allin_top_<sp/>=<sp/>ntree_;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>ntree_-&gt;is_leaf()<sp/>)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>ntree_<sp/>=<sp/>ntree_-&gt;children_[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Ntree_1_1masked__iterator" kindref="compound">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator</ref>&amp;</highlight></codeline>
<codeline lineno="353" refid="classnest_1_1Ntree_1_1masked__iterator_1a3bd89cf67a8c7ce380cff281eaaf66c5" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1_1masked__iterator_1a3bd89cf67a8c7ce380cff281eaaf66c5" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::operator++</ref>()</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>++node_;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>allin_top_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>node_<sp/>&lt;<sp/>ntree_-&gt;<ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.size()<sp/>)<sp/>and<sp/>(<sp/>not<sp/>anchored_position_inside_mask(<sp/>ntree_-&gt;nodes_[<sp/>node_<sp/>].first<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++node_;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>node_<sp/>&gt;=<sp/>ntree_-&gt;nodes_.size()<sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>next_leaf_();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ntree_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>allin_top_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>node_<sp/>&lt;<sp/>ntree_-&gt;<ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.size()<sp/>)<sp/>and<sp/>(<sp/>not<sp/>anchored_position_inside_mask(<sp/>ntree_-&gt;nodes_[<sp/>node_<sp/>].first<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++node_;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="classnest_1_1Ntree_1a92eb0dd97a0d8f5102f035bc4242a58a" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1a92eb0dd97a0d8f5102f035bc4242a58a" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::subquad_</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref>&amp;<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparing<sp/>against<sp/>an<sp/>epsilon<sp/>value<sp/>in<sp/>case<sp/>there<sp/>are<sp/>round-off<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>negative<sp/>epsilon<sp/>value<sp/>because<sp/>the<sp/>round-off<sp/>error<sp/>may<sp/>go<sp/>both<sp/>ways</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>difference<sp/>we<sp/>check<sp/>against<sp/>may<sp/>therefore<sp/>be<sp/>+/-<sp/>10^-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_left_half<sp/>=</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>]<sp/>+<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>]<sp/>/<sp/>2<sp/>)<sp/>-<sp/>pos[<sp/>i<sp/>]<sp/>)<sp/>&gt;<sp/>-std::numeric_limits&lt;<sp/>double<sp/>&gt;::epsilon();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>+=<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>i<sp/>)<sp/>*<sp/>(<sp/>in_left_half<sp/>?<sp/>0<sp/>:<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="classnest_1_1Ntree_1ae0ae0a83ea9f7b8d5f0f99464c638ca7" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::append_nodes_</ref>(<sp/>std::vector&lt;<sp/>std::pair&lt;<sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref>,<sp/>T<sp/>&gt;<sp/>&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1aef768b59791d5142c4422a437a6bf871" kindref="member">leaf_</ref><sp/>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.begin(),<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.end(),<sp/>std::back_inserter(<sp/>v<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classnest_1_1Ntree_1ab54b92ccee3d0249365a4c9f9c1b1f26" kindref="member">N</ref>;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1abbe7f4ab02a5c6751ee3aa6e01e21a21" kindref="member">children_</ref>[<sp/>i<sp/>]-&gt;<ref refid="classnest_1_1Ntree_1ae0ae0a83ea9f7b8d5f0f99464c638ca7" kindref="member">append_nodes_</ref>(<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><ref refid="classnest_1_1Ntree_1ae0ae0a83ea9f7b8d5f0f99464c638ca7" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::append_nodes_</ref>(<sp/>std::vector&lt;<sp/>std::pair&lt;<sp/>Position&lt;<sp/>D<sp/>&gt;,<sp/>T<sp/>&gt;<sp/>&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask&lt;<sp/>D<sp/>&gt;&amp;<sp/>mask,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Position&lt;<sp/>D<sp/>&gt;&amp;<sp/>anchor<sp/>)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1af4ca5a9e03de667b3016f35c8e34ce99" kindref="member">mask</ref>.outside(<sp/>Box&lt;<sp/>D<sp/>&gt;(<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref><sp/>-<sp/>anchor,<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref><sp/>-<sp/>anchor<sp/>+<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref><sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1af4ca5a9e03de667b3016f35c8e34ce99" kindref="member">mask</ref>.inside(<sp/>Box&lt;<sp/>D<sp/>&gt;(<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref><sp/>-<sp/>anchor,<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref><sp/>-<sp/>anchor<sp/>+<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref><sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Ntree_1ae0ae0a83ea9f7b8d5f0f99464c638ca7" kindref="member">append_nodes_</ref>(<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1aef768b59791d5142c4422a437a6bf871" kindref="member">leaf_</ref><sp/>)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::pair&lt;<sp/>Position&lt;<sp/>D<sp/>&gt;,<sp/>T<sp/>&gt;<sp/>&gt;::iterator<sp/>i<sp/>=<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.begin();<sp/>i<sp/>!=<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.end();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1af4ca5a9e03de667b3016f35c8e34ce99" kindref="member">mask</ref>.inside(<sp/>i-&gt;first<sp/>-<sp/>anchor<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(<sp/>*i<sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classnest_1_1Ntree_1ab54b92ccee3d0249365a4c9f9c1b1f26" kindref="member">N</ref>;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1abbe7f4ab02a5c6751ee3aa6e01e21a21" kindref="member">children_</ref>[<sp/>i<sp/>]-&gt;<ref refid="classnest_1_1Ntree_1ae0ae0a83ea9f7b8d5f0f99464c638ca7" kindref="member">append_nodes_</ref>(<sp/>v,<sp/>mask,<sp/>anchor<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ntree&lt;<sp/>D,<sp/>T,<sp/>max_capacity,<sp/>max_depth<sp/>&gt;::iterator</highlight></codeline>
<codeline lineno="460" refid="classnest_1_1Ntree_1a0bd273fc0114d388b6442b72674ee50f" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1a0bd273fc0114d388b6442b72674ee50f" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::insert</ref>(<sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref><sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1ad5b45402f1fd075ab9e15a3e29e6e8bb" kindref="member">periodic_</ref>.any()<sp/>)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>position<sp/>into<sp/>standard<sp/>range<sp/>when<sp/>using<sp/>periodic<sp/>b.c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>necessary<sp/>when<sp/>inserting<sp/>positions<sp/>during<sp/>source<sp/>driven<sp/>connect<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>target<sp/>has<sp/>periodic<sp/>b.c.<sp/>May<sp/>be<sp/>inefficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1ad5b45402f1fd075ab9e15a3e29e6e8bb" kindref="member">periodic_</ref>[<sp/>i<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[<sp/>i<sp/>]<sp/>=<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>]<sp/>+<sp/>std::fmod(<sp/>pos[<sp/>i<sp/>]<sp/>-<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>],<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos[<sp/>i<sp/>]<sp/>&lt;<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>[<sp/>i<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[<sp/>i<sp/>]<sp/>+=<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1aef768b59791d5142c4422a437a6bf871" kindref="member">leaf_</ref><sp/>and<sp/>(<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.size()<sp/>&gt;=<sp/>max_capacity<sp/>)<sp/>and<sp/><ref refid="classnest_1_1Ntree_1a81c4572b692040c83f1aa0a91fc9fc03" kindref="member">my_depth_</ref><sp/>&lt;<sp/>max_depth<sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1a7bc79703ee94175e36f6630f5cc6c79d" kindref="member">split_</ref>();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1Ntree_1aef768b59791d5142c4422a437a6bf871" kindref="member">leaf_</ref><sp/>)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparing<sp/>against<sp/>an<sp/>epsilon<sp/>value<sp/>in<sp/>case<sp/>there<sp/>are<sp/>round-off<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>negative<sp/>epsilon<sp/>value<sp/>because<sp/>the<sp/>round-off<sp/>error<sp/>may<sp/>go<sp/>both<sp/>ways</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>difference<sp/>we<sp/>check<sp/>against<sp/>may<sp/>therefore<sp/>be<sp/>+/-<sp/>10^-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>pos<sp/>-<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref><sp/>)[<sp/>i<sp/>]<sp/>&gt;<sp/>-std::numeric_limits&lt;<sp/>double<sp/>&gt;::epsilon()</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>(<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref><sp/>+<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref><sp/>-<sp/>pos<sp/>)[<sp/>i<sp/>]<sp/>&gt;<sp/>-std::numeric_limits&lt;<sp/>double<sp/>&gt;::epsilon()<sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.push_back(<sp/>std::pair&lt;<sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref>,<sp/>T<sp/>&gt;(<sp/>pos,<sp/>node<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Ntree_1_1iterator" kindref="compound">iterator</ref>(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.size()<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Ntree_1abbe7f4ab02a5c6751ee3aa6e01e21a21" kindref="member">children_</ref>[<sp/><ref refid="classnest_1_1Ntree_1a92eb0dd97a0d8f5102f035bc4242a58a" kindref="member">subquad_</ref>(<sp/>pos<sp/>)<sp/>]-&gt;<ref refid="classnest_1_1Ntree_1a0bd273fc0114d388b6442b72674ee50f" kindref="member">insert</ref>(<sp/>pos,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_depth<sp/>&gt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="classnest_1_1Ntree_1a7bc79703ee94175e36f6630f5cc6c79d" refkind="member"><highlight class="normal"><ref refid="classnest_1_1Ntree_1a7bc79703ee94175e36f6630f5cc6c79d" kindref="member">Ntree&lt; D, T, max_capacity, max_depth &gt;::split_</ref>()</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>assert(<sp/><ref refid="classnest_1_1Ntree_1aef768b59791d5142c4422a437a6bf871" kindref="member">leaf_</ref><sp/>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classnest_1_1Ntree_1ab54b92ccee3d0249365a4c9f9c1b1f26" kindref="member">N</ref>;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref><sp/>lower_left<sp/>=<sp/><ref refid="classnest_1_1Ntree_1a0cdb4512f92d721fd93df4266c4e6805" kindref="member">lower_left_</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>&amp;<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>i<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_left[<sp/>i<sp/>]<sp/>+=<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref>[<sp/>i<sp/>]<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1abbe7f4ab02a5c6751ee3aa6e01e21a21" kindref="member">children_</ref>[<sp/>j<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1Ntree" kindref="compound">Ntree&lt; D, T, max_capacity, max_depth &gt;</ref>(<sp/>lower_left,<sp/><ref refid="classnest_1_1Ntree_1a60f8f6b427326e4987681801c261ab6e" kindref="member">extent_</ref><sp/>*<sp/>0.5,<sp/>0,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::pair&lt;<sp/><ref refid="classnest_1_1Position" kindref="compound">Position&lt; D &gt;</ref>,<sp/>T<sp/>&gt;<sp/>&gt;::iterator<sp/>i<sp/>=<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.begin();<sp/>i<sp/>!=<sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.end();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1Ntree_1abbe7f4ab02a5c6751ee3aa6e01e21a21" kindref="member">children_</ref>[<sp/><ref refid="classnest_1_1Ntree_1a92eb0dd97a0d8f5102f035bc4242a58a" kindref="member">subquad_</ref>(<sp/>i-&gt;first<sp/>)<sp/>]-&gt;<ref refid="classnest_1_1Ntree_1a0bd273fc0114d388b6442b72674ee50f" kindref="member">insert</ref>(<sp/>i-&gt;first,<sp/>i-&gt;second<sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1Ntree_1acc8a5ad92432f75779156f46e3d39c1f" kindref="member">nodes_</ref>.clear();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1Ntree_1aef768b59791d5142c4422a437a6bf871" kindref="member">leaf_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/ntree_impl.h"/>
  </compounddef>
</doxygen>
