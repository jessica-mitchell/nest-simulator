<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1RandomDistribution" kind="class" language="C++" prot="public">
    <compoundname>nest::RandomDistribution</compoundname>
    <includes refid="random__generators_8h" local="no">random_generators.h</includes>
    <templateparamlist>
      <param>
        <type>typename DistributionT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1RandomDistribution_1afe9e5360dd419877d94d6557bc8e3670" prot="public" static="no">
        <type>typename DistributionT::result_type</type>
        <definition>using nest::RandomDistribution&lt; DistributionT &gt;::result_type =  typename DistributionT::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="310" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1RandomDistribution_1a5e70be96dd6d700d363d5542a6ece43d" prot="public" static="no">
        <type>typename DistributionT::param_type</type>
        <definition>using nest::RandomDistribution&lt; DistributionT &gt;::param_type =  typename DistributionT::param_type</definition>
        <argsstring></argsstring>
        <name>param_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="311" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" prot="private" static="no" mutable="no">
        <type>DistributionT</type>
        <definition>DistributionT nest::RandomDistribution&lt; DistributionT &gt;::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <briefdescription>
<para>Wrapped <ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="381" column="17" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="381" bodyend="-1"/>
        <referencedby refid="classnest_1_1RandomDistribution_1a7933149ba0245275cdae84d739a97b74" compoundref="random__generators_8h" startline="375" endline="378">nest::RandomDistribution&lt; DistributionT &gt;::max</referencedby>
        <referencedby refid="classnest_1_1RandomDistribution_1a08dd6f5d40ac2faff700762b68dfd05d" compoundref="random__generators_8h" startline="366" endline="369">nest::RandomDistribution&lt; DistributionT &gt;::min</referencedby>
        <referencedby refid="classnest_1_1RandomDistribution_1a19f1627d2a8bf2d57307402d9edb9ba2" compoundref="random__generators_8h" startline="328" endline="333">nest::RandomDistribution&lt; DistributionT &gt;::operator()</referencedby>
        <referencedby refid="classnest_1_1RandomDistribution_1abe54aaf62865bf0bc1d5549c74b69a2a" compoundref="random__generators_8h" startline="357" endline="360">nest::RandomDistribution&lt; DistributionT &gt;::param</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1a55900557f1063da924196da2564d79f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RandomDistribution&lt; DistributionT &gt;::RandomDistribution</definition>
        <argsstring>()=default</argsstring>
        <name>RandomDistribution</name>
        <briefdescription>
<para>Constructs a distribution object with its default parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="316" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1a3e4b5498ff08d89baaa4950c501badf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RandomDistribution&lt; DistributionT &gt;::~RandomDistribution</definition>
        <argsstring>()=default</argsstring>
        <name>~RandomDistribution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="317" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1a19f1627d2a8bf2d57307402d9edb9ba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1RandomDistribution_1afe9e5360dd419877d94d6557bc8e3670" kindref="member">result_type</ref></type>
        <definition>result_type nest::RandomDistribution&lt; DistributionT &gt;::operator()</definition>
        <argsstring>(RngPtr g)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Generating function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function just flips the call, to call the RNG wrapper with the distribution. This is done so that the native C++ distribution can be called with the native C++ generator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RNG wrapper. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="328" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="328" bodyend="333"/>
        <references refid="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" compoundref="random__generators_8h" startline="381">nest::RandomDistribution&lt; DistributionT &gt;::distribution_</references>
        <references refid="namespacenest_1_1names_1ac928f85a6af596d31a195029a29d7a45">nest::names::g</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1a68cdebed49b4950655ac2fe2c66bd11d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1RandomDistribution_1afe9e5360dd419877d94d6557bc8e3670" kindref="member">result_type</ref></type>
        <definition>result_type nest::RandomDistribution&lt; DistributionT &gt;::operator()</definition>
        <argsstring>(RngPtr g, param_type &amp;params)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1RandomDistribution_1a5e70be96dd6d700d363d5542a6ece43d" kindref="member">param_type</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Generating function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function just flips the call, to call the RNG wrapper with the distribution. This is done so that the native C++ distribution can be called with the native C++ generator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RNG wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution parameter set to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="345" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="345" bodyend="350"/>
        <references refid="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" compoundref="random__generators_8h" startline="381">nest::RandomDistribution&lt; DistributionT &gt;::distribution_</references>
        <references refid="namespacenest_1_1names_1ac928f85a6af596d31a195029a29d7a45">nest::names::g</references>
        <references refid="namespacenest_1_1names_1ab153cba7971a1ce0c755195c4096266a">nest::names::params</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1abe54aaf62865bf0bc1d5549c74b69a2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::RandomDistribution&lt; DistributionT &gt;::param</definition>
        <argsstring>(const param_type &amp;params)</argsstring>
        <name>param</name>
        <param>
          <type>const <ref refid="classnest_1_1RandomDistribution_1a5e70be96dd6d700d363d5542a6ece43d" kindref="member">param_type</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Sets the distribution&apos;s associated parameter set to params. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>New contents of the distribution&apos;s associated parameter set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="357" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="357" bodyend="360"/>
        <references refid="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" compoundref="random__generators_8h" startline="381">nest::RandomDistribution&lt; DistributionT &gt;::distribution_</references>
        <references refid="namespacenest_1_1names_1ab153cba7971a1ce0c755195c4096266a">nest::names::params</references>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="632">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="637" endline="784">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="classnest_1_1LognormalParameter_1afc698a1f29a46fede10100c28bebae3b" compoundref="parameter_8cpp" startline="107" endline="122">nest::LognormalParameter::LognormalParameter</referencedby>
        <referencedby refid="classnest_1_1NormalParameter_1acc7ff35538687c2d8df8f1456a4117a1" compoundref="parameter_8cpp" startline="81" endline="96">nest::NormalParameter::NormalParameter</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1a08dd6f5d40ac2faff700762b68dfd05d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1RandomDistribution_1afe9e5360dd419877d94d6557bc8e3670" kindref="member">result_type</ref></type>
        <definition>result_type nest::RandomDistribution&lt; DistributionT &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
<para>Returns the minimum value potentially generated by the distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="366" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="366" bodyend="369"/>
        <references refid="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" compoundref="random__generators_8h" startline="381">nest::RandomDistribution&lt; DistributionT &gt;::distribution_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1RandomDistribution_1a7933149ba0245275cdae84d739a97b74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1RandomDistribution_1afe9e5360dd419877d94d6557bc8e3670" kindref="member">result_type</ref></type>
        <definition>result_type nest::RandomDistribution&lt; DistributionT &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
<para>Returns the maximum value potentially generated by the distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="375" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="375" bodyend="378"/>
        <references refid="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" compoundref="random__generators_8h" startline="381">nest::RandomDistribution&lt; DistributionT &gt;::distribution_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for distributions. </para>
    </briefdescription>
    <detaileddescription>
<para>The result_type of the distribution must be unsigned long or double.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DistributionT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapped <ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>nest::RandomDistribution&lt; std::poisson_distribution&lt; unsigned long &gt; &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::poisson_distribution&lt; unsigned long &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::RandomDistribution&lt; DistributionT &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
      </node>
      <node id="6">
        <label>nest::RandomDistribution&lt; std::gamma_distribution&lt;&gt; &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::gamma_distribution&lt;&gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::RandomDistribution&lt; std::binomial_distribution&lt; unsigned long &gt; &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::binomial_distribution&lt; unsigned long &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>nest::RandomDistribution&lt; std::normal_distribution&lt;&gt; &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::normal_distribution&lt;&gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::RandomDistribution&lt; std::exponential_distribution&lt;&gt; &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::exponential_distribution&lt;&gt; &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::RandomDistribution&lt; DistributionT &gt;</label>
        <link refid="classnest_1_1RandomDistribution"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="307" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="308" bodyend="382"/>
    <listofallmembers>
      <member refid="classnest_1_1RandomDistribution_1a8ef9495de5678b41b16d6562cdbd3283" prot="private" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>distribution_</name></member>
      <member refid="classnest_1_1RandomDistribution_1a7933149ba0245275cdae84d739a97b74" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>max</name></member>
      <member refid="classnest_1_1RandomDistribution_1a08dd6f5d40ac2faff700762b68dfd05d" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>min</name></member>
      <member refid="classnest_1_1RandomDistribution_1a19f1627d2a8bf2d57307402d9edb9ba2" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>operator()</name></member>
      <member refid="classnest_1_1RandomDistribution_1a68cdebed49b4950655ac2fe2c66bd11d" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>operator()</name></member>
      <member refid="classnest_1_1RandomDistribution_1abe54aaf62865bf0bc1d5549c74b69a2a" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>param</name></member>
      <member refid="classnest_1_1RandomDistribution_1a5e70be96dd6d700d363d5542a6ece43d" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>param_type</name></member>
      <member refid="classnest_1_1RandomDistribution_1a55900557f1063da924196da2564d79f3" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>RandomDistribution</name></member>
      <member refid="classnest_1_1RandomDistribution_1afe9e5360dd419877d94d6557bc8e3670" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>result_type</name></member>
      <member refid="classnest_1_1RandomDistribution_1a3e4b5498ff08d89baaa4950c501badf7" prot="public" virt="non-virtual"><scope>nest::RandomDistribution</scope><name>~RandomDistribution</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
