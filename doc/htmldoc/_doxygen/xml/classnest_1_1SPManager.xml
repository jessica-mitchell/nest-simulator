<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1SPManager" kind="class" language="C++" prot="public">
    <compoundname>nest::SPManager</compoundname>
    <basecompoundref refid="classnest_1_1ManagerInterface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="sp__manager_8h" local="no">sp_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1SPManager_1ad45f80808966464c9a1079f8800f7712" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::SPManager::structural_plasticity_update_interval_</definition>
        <argsstring></argsstring>
        <name>structural_plasticity_update_interval_</name>
        <qualifiedname>nest::SPManager::structural_plasticity_update_interval_</qualifiedname>
        <briefdescription>
<para><ref refid="classnest_1_1Time" kindref="compound">Time</ref> interval for structural plasticity update (creation/deletion of synapses). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="183" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="183" bodyend="-1"/>
        <referencedby refid="classnest_1_1SPManager_1ad53307b4caba0acaa2b074ed31ca146c" compoundref="sp__manager_8cpp" startline="94" endline="120">get_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a18b5d9686702015ccbe4feb482a7abf2" compoundref="sp__manager_8h" startline="214" endline="217">get_structural_plasticity_update_interval</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a81bd08bb0734b0910c216220fce57e5c" compoundref="sp__manager_8cpp" startline="74" endline="78">initialize</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a826cbcc83e2da5a24acf3345917e7921" compoundref="sp__manager_8cpp" startline="128" endline="177">set_status</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1SPManager_1a14a4c875e5792d81a5c81ac78f97219c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::SPManager::structural_plasticity_enabled_</definition>
        <argsstring></argsstring>
        <name>structural_plasticity_enabled_</name>
        <qualifiedname>nest::SPManager::structural_plasticity_enabled_</qualifiedname>
        <briefdescription>
<para>Indicates whether the Structrual Plasticity functionality is On (True) of Off (False). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="189" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="189" bodyend="-1"/>
        <referencedby refid="classnest_1_1SPManager_1a81bd08bb0734b0910c216220fce57e5c" compoundref="sp__manager_8cpp" startline="74" endline="78">initialize</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a64d3dd5d243cd1dfd0784b10816c5e28" compoundref="sp__manager_8h" startline="208" endline="211">is_structural_plasticity_enabled</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1SPBuilder" kindref="compound">SPBuilder</ref> * &gt;</type>
        <definition>std::vector&lt; SPBuilder* &gt; nest::SPManager::sp_conn_builders_</definition>
        <argsstring></argsstring>
        <name>sp_conn_builders_</name>
        <qualifiedname>nest::SPManager::sp_conn_builders_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="190" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="190" bodyend="-1"/>
        <referencedby refid="classnest_1_1SPManager_1a921fce1870107ce8d1a4fd4395051fe2" compoundref="sp__manager_8cpp" startline="194" endline="205">builder_max_delay</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a5412e3381cceb64ff0b1dedf869cd288" compoundref="sp__manager_8cpp" startline="180" endline="191">builder_min_delay</referencedby>
        <referencedby refid="classnest_1_1SPManager_1af9961e9c3f1968bb1ff558a540d53923" compoundref="sp__manager_8cpp" startline="264" endline="322">disconnect</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a929ad597fdb40a6b0080991eb4b36aa3" compoundref="sp__manager_8cpp" startline="81" endline="88">finalize</referencedby>
        <referencedby refid="classnest_1_1SPManager_1ad53307b4caba0acaa2b074ed31ca146c" compoundref="sp__manager_8cpp" startline="94" endline="120">get_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a826cbcc83e2da5a24acf3345917e7921" compoundref="sp__manager_8cpp" startline="128" endline="177">set_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a6f0cc34c3cc807bf1d6b9399b318d35a" compoundref="sp__manager_8cpp" startline="325" endline="331">update_structural_plasticity</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1SPManager_1a998c3bc309bf7c354df9b6876c6e77c0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1GenericGrowthCurveFactory" kindref="compound">GenericGrowthCurveFactory</ref> * &gt;</type>
        <definition>std::vector&lt; GenericGrowthCurveFactory* &gt; nest::SPManager::growthcurve_factories_</definition>
        <argsstring></argsstring>
        <name>growthcurve_factories_</name>
        <qualifiedname>nest::SPManager::growthcurve_factories_</qualifiedname>
        <briefdescription>
<para><ref refid="classnest_1_1GrowthCurve" kindref="compound">GrowthCurve</ref> factories, indexed by growthcurvedict_ elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="195" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="195" bodyend="-1"/>
        <referencedby refid="classnest_1_1SPManager_1a1470e14e9487d38617e217a3c5cbd117" compoundref="sp__manager_8h" startline="201" endline="205">new_growth_curve</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a34c0919b05dcf42548d2f3cc9f36a058" compoundref="sp__manager__impl_8h" startline="40" endline="48">register_growth_curve</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1SPManager_1a9abde5b9b0883a14cf58709312b91828" prot="private" static="no" mutable="no">
        <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref></type>
        <definition>DictionaryDatum nest::SPManager::growthcurvedict_</definition>
        <argsstring></argsstring>
        <name>growthcurvedict_</name>
        <qualifiedname>nest::SPManager::growthcurvedict_</qualifiedname>
        <briefdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref> for growth rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="197" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="197" bodyend="-1"/>
        <referencedby refid="classnest_1_1SPManager_1ad53307b4caba0acaa2b074ed31ca146c" compoundref="sp__manager_8cpp" startline="94" endline="120">get_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a34c0919b05dcf42548d2f3cc9f36a058" compoundref="sp__manager__impl_8h" startline="40" endline="48">register_growth_curve</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1SPManager_1a4e8743b8323dca07db67e08615f147ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::SPManager::SPManager</definition>
        <argsstring>()</argsstring>
        <name>SPManager</name>
        <qualifiedname>nest::SPManager::SPManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="66" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a32a98d81f2d61298e8d43427900dc038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::SPManager::~SPManager</definition>
        <argsstring>() override</argsstring>
        <name>~SPManager</name>
        <qualifiedname>nest::SPManager::~SPManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="67" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="68" bodyend="71"/>
        <references refid="classnest_1_1SPManager_1a929ad597fdb40a6b0080991eb4b36aa3" compoundref="sp__manager_8cpp" startline="81" endline="88">finalize</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a81bd08bb0734b0910c216220fce57e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <qualifiedname>nest::SPManager::initialize</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
<para>Prepare manager for operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1KernelManager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1SPManager_1a929ad597fdb40a6b0080991eb4b36aa3" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="69" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="74" bodyend="78"/>
        <references refid="classnest_1_1SPManager_1a14a4c875e5792d81a5c81ac78f97219c" compoundref="sp__manager_8h" startline="189">structural_plasticity_enabled_</references>
        <references refid="classnest_1_1SPManager_1ad45f80808966464c9a1079f8800f7712" compoundref="sp__manager_8h" startline="183">structural_plasticity_update_interval_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a929ad597fdb40a6b0080991eb4b36aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <qualifiedname>nest::SPManager::finalize</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
<para>Take down manager after operation. </para>
        </briefdescription>
        <detaileddescription>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1KernelManager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1SPManager_1a81bd08bb0734b0910c216220fce57e5c" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1SPManager_1a81bd08bb0734b0910c216220fce57e5c" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="70" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="81" bodyend="88"/>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
        <referencedby refid="classnest_1_1SPManager_1a32a98d81f2d61298e8d43427900dc038" compoundref="sp__manager_8cpp" startline="68" endline="71">~SPManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1ad53307b4caba0acaa2b074ed31ca146c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::SPManager::get_status</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="72" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="94" bodyend="120"/>
        <references refid="namespacenest_1_1names_1a09851bcc90819cfee7ffc5c269a76761" compoundref="nest__names_8h" startline="242">nest::names::growth_curves</references>
        <references refid="classnest_1_1SPManager_1a9abde5b9b0883a14cf58709312b91828" compoundref="sp__manager_8h" startline="197">growthcurvedict_</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="namespacenest_1_1names_1ad5e39b7a73d989c650079929fb0b8242" compoundref="nest__names_8h" startline="374">nest::names::post_synaptic_element</references>
        <references refid="namespacenest_1_1names_1a05c021c7fdf3d14f4af948e13c9990fc" compoundref="nest__names_8h" startline="376">nest::names::pre_synaptic_element</references>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
        <references refid="namespacenest_1_1names_1a0d88c990b9d9a9e728317c88dba05560" compoundref="nest__names_8h" startline="456">nest::names::structural_plasticity_synapses</references>
        <references refid="namespacenest_1_1names_1a894a1a98ef4281c2ec07177474904c4a" compoundref="nest__names_8h" startline="457">nest::names::structural_plasticity_update_interval</references>
        <references refid="classnest_1_1SPManager_1ad45f80808966464c9a1079f8800f7712" compoundref="sp__manager_8h" startline="183">structural_plasticity_update_interval_</references>
        <references refid="namespacenest_1_1names_1a482b795ea4c2dce1771b281f0be8ea32" compoundref="nest__names_8h" startline="460">nest::names::synapse_model</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a826cbcc83e2da5a24acf3345917e7921" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::SPManager::set_status</qualifiedname>
        <reimplements refid="classnest_1_1ManagerInterface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>Set status of synaptic plasticity variables: synaptic update interval, synapses and synaptic elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref> containing the values to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="73" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="128" bodyend="177"/>
        <references refid="namespacenest_1_1names_1a19837d9562e6d9ac069fc1924ba21090" compoundref="nest__names_8h" startline="82">nest::names::allow_autapses</references>
        <references refid="namespacenest_1_1names_1aeb36a3590d6f15eb0e1839257e6d28e0" compoundref="nest__names_8h" startline="83">nest::names::allow_multapses</references>
        <references refid="classnest_1_1ConnBuilder_1ad650895baae7bb9140f62132344305db" compoundref="conn__builder_8h" startline="94" endline="101">nest::ConnBuilder::get_default_delay</references>
        <references refid="tokenutils_8cc_1a95ea4d0048b41f138634e4eca76292bf" compoundref="tokenutils_8cc" startline="115" endline="125">getValue&lt; bool &gt;</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
        <references refid="namespacenest_1_1names_1a0d88c990b9d9a9e728317c88dba05560" compoundref="nest__names_8h" startline="456">nest::names::structural_plasticity_synapses</references>
        <references refid="namespacenest_1_1names_1a894a1a98ef4281c2ec07177474904c4a" compoundref="nest__names_8h" startline="457">nest::names::structural_plasticity_update_interval</references>
        <references refid="classnest_1_1SPManager_1ad45f80808966464c9a1079f8800f7712" compoundref="sp__manager_8h" startline="183">structural_plasticity_update_interval_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a1470e14e9487d38617e217a3c5cbd117" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1GrowthCurve" kindref="compound">GrowthCurve</ref> *</type>
        <definition>GrowthCurve * nest::SPManager::new_growth_curve</definition>
        <argsstring>(Name name)</argsstring>
        <name>new_growth_curve</name>
        <qualifiedname>nest::SPManager::new_growth_curve</qualifiedname>
        <param>
          <type><ref refid="className" kindref="compound">Name</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a new Growth Curve object using the <ref refid="classnest_1_1GrowthCurve" kindref="compound">GrowthCurve</ref> Factory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>which defines the type of NC to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new Growth Curve object of the type indicated by name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="80" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="201" bodyend="205"/>
        <references refid="classnest_1_1SPManager_1a998c3bc309bf7c354df9b6876c6e77c0" compoundref="sp__manager_8h" startline="195">growthcurve_factories_</references>
        <referencedby refid="classnest_1_1SynapticElement_1a8839cb0442b52e9fc5846e6e87360700" compoundref="synaptic__element_8cpp" startline="71" endline="93">nest::SynapticElement::operator=</referencedby>
        <referencedby refid="classnest_1_1SynapticElement_1a1d87050277d99ac2b2929fba12cb2f34" compoundref="synaptic__element_8cpp" startline="116" endline="141">nest::SynapticElement::set</referencedby>
        <referencedby refid="classnest_1_1SynapticElement_1a1a57404bbeec3fd2a3a9df273286f923" compoundref="synaptic__element_8cpp" startline="55" endline="68">nest::SynapticElement::SynapticElement</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a34c0919b05dcf42548d2f3cc9f36a058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classnest_1_1GrowthCurve" kindref="compound">GrowthCurve</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::SPManager::register_growth_curve</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>register_growth_curve</name>
        <qualifiedname>nest::SPManager::register_growth_curve</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add a growth curve for MSP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="86" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager_impl.h" bodystart="40" bodyend="48"/>
        <references refid="classnest_1_1SPManager_1a998c3bc309bf7c354df9b6876c6e77c0" compoundref="sp__manager_8h" startline="195">growthcurve_factories_</references>
        <references refid="classnest_1_1SPManager_1a9abde5b9b0883a14cf58709312b91828" compoundref="sp__manager_8h" startline="197">growthcurvedict_</references>
        <referencedby refid="classnest_1_1NestModule_1a246da59f22b9398cc08e13bfc2355ae8" compoundref="nestmodule_8cpp" startline="2910" endline="3110">nest::NestModule::init</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1af9961e9c3f1968bb1ff558a540d53923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::disconnect</definition>
        <argsstring>(NodeCollectionPTR, NodeCollectionPTR, DictionaryDatum &amp;, DictionaryDatum &amp;)</argsstring>
        <name>disconnect</name>
        <qualifiedname>nest::SPManager::disconnect</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>sources</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>targets</defname>
        </param>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>conn_spec</defname>
        </param>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <defname>syn_spec</defname>
        </param>
        <briefdescription>
<para>Disconnect two collections of nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Obtains the right connection builder and performs a synapse deletion according to the specified connection specs.</para>
<para>The connection is established on the thread/process that owns the target node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Node" kindref="compound">Node</ref> collection of the source Nodes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Node" kindref="compound">Node</ref> collection of the target Nodes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connectivityParams</parametername>
</parameternamelist>
<parameterdescription>
<para>connectivity <ref refid="classDictionary" kindref="compound">Dictionary</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapseParams</parametername>
</parameternamelist>
<parameterdescription>
<para>synapse parameters <ref refid="classDictionary" kindref="compound">Dictionary</ref></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>collection of sources </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para>collection of targets </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>disconnection specs. For now only all to all and one to one rules are implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>synapse specs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="97" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="264" bodyend="322"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnBuilder_1a4fafe51332d31c75a637d4837bbaea4d" compoundref="conn__builder_8cpp" startline="269" endline="288">nest::ConnBuilder::disconnect</references>
        <references refid="classnest_1_1ConnectionManager_1a7724037fd623d6100e44b3ca7c0d737d" compoundref="connection__manager_8cpp" startline="364" endline="372">nest::ConnectionManager::get_conn_builder</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="tokenutils_8cc_1ab4940c6a9d7f700ec063ad673ea35ca9" compoundref="tokenutils_8cc" startline="154" endline="184">getValue&lt; std::string &gt;</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="namespacenest_1_1names_1a99674d96982c345dc5b6d462681b0d2c" compoundref="nest__names_8h" startline="422">nest::names::rule</references>
        <references refid="classnest_1_1ConnectionManager_1a364992a5aca6c29407e9ed0d97ec766b" compoundref="connection__manager_8cpp" startline="1612" endline="1626">nest::ConnectionManager::set_connections_have_changed</references>
        <references refid="classnest_1_1ConnBuilder_1a46694477447f70340fb29a9d31449b95" compoundref="conn__builder_8cpp" startline="385" endline="394">nest::ConnBuilder::set_post_synaptic_element_name</references>
        <references refid="classnest_1_1ConnBuilder_1a344a8fc339bc288dd272b370213ce18a" compoundref="conn__builder_8cpp" startline="373" endline="382">nest::ConnBuilder::set_pre_synaptic_element_name</references>
        <references refid="classnest_1_1KernelManager_1a4feb2ae20c19197830bf57c5e7247560" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::simulation_manager</references>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
        <references refid="namespacenest_1_1names_1a482b795ea4c2dce1771b281f0be8ea32" compoundref="nest__names_8h" startline="460">nest::names::synapse_model</references>
        <references refid="classnest_1_1SimulationManager_1aa457cadae541547d8d82bda9b1925ab0" compoundref="simulation__manager_8cpp" startline="676" endline="754">nest::SimulationManager::update_connection_infrastructure</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
        <referencedby refid="namespacenest_1a5d96a7094e3aaa072e4d940a47378b48" compoundref="nest_8cpp" startline="216" endline="225">nest::disconnect</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Disconnect__g__g__D__DFunction_1a79289f39f19d401173fda7265426a987" compoundref="nestmodule_8cpp" startline="889" endline="903">nest::NestModule::Disconnect_g_g_D_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a07998ea08ce1a6d1afdf67b42d0f94c3" compoundref="conn__builder__impl_8h" startline="36" endline="47">nest::ConnBuilder::single_disconnect_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1ae5b9af1301a59e2ccde8633c203e34a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::disconnect</definition>
        <argsstring>(const index snode_id, Node *target, thread target_thread, const index syn_id)</argsstring>
        <name>disconnect</name>
        <qualifiedname>nest::SPManager::disconnect</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>snode_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>target_thread</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
<para>Disconnect two nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes synapses between a source and a target.</para>
<para>The source node is defined by its global ID. The target node is defined by the node. The connection is established on the thread/process that owns the target node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of the sending <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to target <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread that hosts the target node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="110" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="215" bodyend="252"/>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnectionManager_1aa8f45ec27217524c07048f4c6601b146" compoundref="connection__manager_8cpp" startline="862" endline="881">nest::ConnectionManager::disconnect</references>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a6f0cc34c3cc807bf1d6b9399b318d35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::update_structural_plasticity</definition>
        <argsstring>()</argsstring>
        <name>update_structural_plasticity</name>
        <qualifiedname>nest::SPManager::update_structural_plasticity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="112" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="325" bodyend="331"/>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
        <references refid="classnest_1_1SPManager_1a6f0cc34c3cc807bf1d6b9399b318d35a" compoundref="sp__manager_8cpp" startline="325" endline="331">update_structural_plasticity</references>
        <referencedby refid="classnest_1_1SimulationManager_1a4ad2ea77edb56fb13176de0932bac835" compoundref="simulation__manager_8cpp" startline="763" endline="1062">nest::SimulationManager::update_</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a6f0cc34c3cc807bf1d6b9399b318d35a" compoundref="sp__manager_8cpp" startline="325" endline="331">update_structural_plasticity</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::update_structural_plasticity</definition>
        <argsstring>(SPBuilder *)</argsstring>
        <name>update_structural_plasticity</name>
        <qualifiedname>nest::SPManager::update_structural_plasticity</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1SPBuilder" kindref="compound">SPBuilder</ref> *</type>
          <defname>sp_builder</defname>
        </param>
        <briefdescription>
<para>Handles the general dynamic creation and deletion of synapses when structural plasticity is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the number of available synaptic elements to create new synapses. Retrieves the number of deleted synaptic elements to delete already created synapses. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp_builder</parametername>
</parameternamelist>
<parameterdescription>
<para>The structural plasticity connection builder to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="113" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="341" bodyend="417"/>
        <references refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" compoundref="mpi__manager_8cpp" startline="1061" endline="1063">nest::MPIManager::communicate</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1SPManager_1a9d99744a7e3f8990558b5636dec66c47" compoundref="sp__manager_8cpp" startline="430" endline="463">create_synapses</references>
        <references refid="classnest_1_1SPManager_1a3f7183684e5410096b01044c13da7f80" compoundref="sp__manager_8cpp" startline="575" endline="621">delete_synapses_from_post</references>
        <references refid="classnest_1_1SPManager_1a135b22e6cd3f6888480ceb0ef2ef9706" compoundref="sp__manager_8cpp" startline="476" endline="519">delete_synapses_from_pre</references>
        <references refid="classnest_1_1SPBuilder_1ae54e4346dea053a58279ac33be5343c5" compoundref="conn__builder_8h" startline="418" endline="421">nest::SPBuilder::get_post_synaptic_element_name</references>
        <references refid="classnest_1_1SPBuilder_1aae68144dabb2343412fd16692dc53bd0" compoundref="conn__builder_8h" startline="413" endline="416">nest::SPBuilder::get_pre_synaptic_element_name</references>
        <references refid="classnest_1_1ConnBuilder_1a0e18431e792e5eea35cb7da0752f98aa" compoundref="conn__builder_8h" startline="84" endline="91">nest::ConnBuilder::get_synapse_model</references>
        <references refid="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" compoundref="sp__manager_8cpp" startline="624" endline="683">get_synaptic_elements</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="242">nest::KernelManager::mpi_manager</references>
        <references refid="classnest_1_1ConnectionManager_1a364992a5aca6c29407e9ed0d97ec766b" compoundref="connection__manager_8cpp" startline="1612" endline="1626">nest::ConnectionManager::set_connections_have_changed</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a9b388e2d3ab09e4bdebce02aa9ea3a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::enable_structural_plasticity</definition>
        <argsstring>()</argsstring>
        <name>enable_structural_plasticity</name>
        <qualifiedname>nest::SPManager::enable_structural_plasticity</qualifiedname>
        <briefdescription>
<para>Enable structural plasticity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="118" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="741" bodyend="760"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <referencedby refid="classnest_1_1NestModule_1_1EnableStructuralPlasticity__Function_1a1984f42a68950c18893a5c6ac1bb112e" compoundref="nestmodule_8cpp" startline="1689" endline="1694">nest::NestModule::EnableStructuralPlasticity_Function::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1aee20052338bd8a2f47f33c59e3e2ed37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::disable_structural_plasticity</definition>
        <argsstring>()</argsstring>
        <name>disable_structural_plasticity</name>
        <qualifiedname>nest::SPManager::disable_structural_plasticity</qualifiedname>
        <briefdescription>
<para>Disable structural plasticity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="123" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="766" bodyend="769"/>
        <referencedby refid="classnest_1_1NestModule_1_1DisableStructuralPlasticity__Function_1a10e8084537802c0c47c72259efb5608e" compoundref="nestmodule_8cpp" startline="1700" endline="1705">nest::NestModule::DisableStructuralPlasticity_Function::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a64d3dd5d243cd1dfd0784b10816c5e28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::SPManager::is_structural_plasticity_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_structural_plasticity_enabled</name>
        <qualifiedname>nest::SPManager::is_structural_plasticity_enabled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="125" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="208" bodyend="211"/>
        <references refid="classnest_1_1SPManager_1a14a4c875e5792d81a5c81ac78f97219c" compoundref="sp__manager_8h" startline="189">structural_plasticity_enabled_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a18b5d9686702015ccbe4feb482a7abf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::SPManager::get_structural_plasticity_update_interval</definition>
        <argsstring>() const</argsstring>
        <name>get_structural_plasticity_update_interval</name>
        <qualifiedname>nest::SPManager::get_structural_plasticity_update_interval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="127" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="214" bodyend="217"/>
        <references refid="classnest_1_1SPManager_1ad45f80808966464c9a1079f8800f7712" compoundref="sp__manager_8h" startline="183">structural_plasticity_update_interval_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a5412e3381cceb64ff0b1dedf869cd288" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::SPManager::builder_min_delay</definition>
        <argsstring>() const</argsstring>
        <name>builder_min_delay</name>
        <qualifiedname>nest::SPManager::builder_min_delay</qualifiedname>
        <briefdescription>
<para>Returns the minimum delay of all SP builders. </para>
        </briefdescription>
        <detaileddescription>
<para>This influences the min_delay of the kernel, as the connections are build during the simulation. Hence, the ConnectionManager::min_delay() methods have to respect this delay as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="136" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="180" bodyend="191"/>
        <references refid="classnest_1_1Time_1afedb0e4fbf5d521e50573f2180016568" compoundref="nest__time_8h" startline="526" endline="540">nest::Time::get_steps</references>
        <references refid="classnest_1_1Time_1acb1c377c4d654c34797f9fef4c02250a" compoundref="nest__time_8h" startline="454" endline="457">nest::Time::pos_inf</references>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a921fce1870107ce8d1a4fd4395051fe2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::SPManager::builder_max_delay</definition>
        <argsstring>() const</argsstring>
        <name>builder_max_delay</name>
        <qualifiedname>nest::SPManager::builder_max_delay</qualifiedname>
        <briefdescription>
<para>Returns the maximum delay of all SP builders. </para>
        </briefdescription>
        <detaileddescription>
<para>This influences the max_delay of the kernel, as the connections are build during the simulation. Hence, the ConnectionManager::max_delay() methods have to respect this delay as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="145" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="194" bodyend="205"/>
        <references refid="classnest_1_1Time_1afedb0e4fbf5d521e50573f2180016568" compoundref="nest__time_8h" startline="526" endline="540">nest::Time::get_steps</references>
        <references refid="classnest_1_1Time_1aced9f70610dd53cd35d58a2927d3f21b" compoundref="nest__time_8h" startline="449" endline="452">nest::Time::neg_inf</references>
        <references refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" compoundref="sp__manager_8h" startline="190">sp_conn_builders_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a9d99744a7e3f8990558b5636dec66c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::SPManager::create_synapses</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;pre_vacant_id, std::vector&lt; int &gt; &amp;pre_vacant_n, std::vector&lt; index &gt; &amp;post_vacant_id, std::vector&lt; int &gt; &amp;post_vacant_n, SPBuilder *sp_conn_builder)</argsstring>
        <name>create_synapses</name>
        <qualifiedname>nest::SPManager::create_synapses</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>pre_vacant_id</declname>
          <defname>pre_id</defname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pre_vacant_n</declname>
          <defname>pre_n</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>post_vacant_id</declname>
          <defname>post_id</defname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>post_vacant_n</declname>
          <defname>post_n</defname>
        </param>
        <param>
          <type><ref refid="classnest_1_1SPBuilder" kindref="compound">SPBuilder</ref> *</type>
          <declname>sp_conn_builder</declname>
        </param>
        <briefdescription>
<para>Dynamic creation of synapses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pre_id</parametername>
</parameternamelist>
<parameterdescription>
<para>source id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pre_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available synaptic elements in the pre node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_id</parametername>
</parameternamelist>
<parameterdescription>
<para>target id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available synaptic elements in the post node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sp_conn_builder</parametername>
</parameternamelist>
<parameterdescription>
<para>structural plasticity connection builder to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if synapses are created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="148" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="430" bodyend="463"/>
        <references refid="classnest_1_1SPManager_1a6e004038af740a172c54dc533d31e3a1" compoundref="sp__manager_8cpp" startline="705" endline="708">global_shuffle</references>
        <references refid="classnest_1_1SPManager_1af80c9f1feede698cdde50c11de1d6485" compoundref="sp__manager_8cpp" startline="686" endline="702">serialize_id</references>
        <references refid="classnest_1_1SPBuilder_1afd48465903e920c31f81dee5bb6b317f" compoundref="conn__builder_8cpp" startline="1817" endline="1829">nest::SPBuilder::sp_connect</references>
        <referencedby refid="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" compoundref="sp__manager_8cpp" startline="341" endline="417">update_structural_plasticity</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a135b22e6cd3f6888480ceb0ef2ef9706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::delete_synapses_from_pre</definition>
        <argsstring>(const std::vector&lt; index &gt; &amp;pre_deleted_id, std::vector&lt; int &gt; &amp;pre_deleted_n, const index synapse_model, const std::string &amp;se_pre_name, const std::string &amp;se_post_name)</argsstring>
        <name>delete_synapses_from_pre</name>
        <qualifiedname>nest::SPManager::delete_synapses_from_pre</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>pre_deleted_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pre_deleted_n</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>synapse_model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>se_pre_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>se_post_name</declname>
        </param>
        <briefdescription>
<para>Deletion of synapses due to the loss of a pre synaptic element. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding pre synaptic element will still remain available for a new connection on the following updates in connectivity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pre_deleted_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node with the deleted pre synaptic element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pre_deleted_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of deleted pre synaptic elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapse_model</parametername>
</parameternamelist>
<parameterdescription>
<para>model name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_pre_name</parametername>
</parameternamelist>
<parameterdescription>
<para>pre synaptic element name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_post_name</parametername>
</parameternamelist>
<parameterdescription>
<para>postsynaptic element name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="154" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="476" bodyend="519"/>
        <references refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" compoundref="mpi__manager_8cpp" startline="1061" endline="1063">nest::MPIManager::communicate</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1SPManager_1ae2c3831a343dd28da33c87fed976b2a9" compoundref="sp__manager_8cpp" startline="533" endline="562">delete_synapse</references>
        <references refid="classnest_1_1ConnectionManager_1a6798d923ce597300f380d3e8bd864ba4" compoundref="connection__manager_8cpp" startline="1276" endline="1298">nest::ConnectionManager::get_targets</references>
        <references refid="classnest_1_1SPManager_1a6e004038af740a172c54dc533d31e3a1" compoundref="sp__manager_8cpp" startline="705" endline="708">global_shuffle</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="242">nest::KernelManager::mpi_manager</references>
        <referencedby refid="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" compoundref="sp__manager_8cpp" startline="341" endline="417">update_structural_plasticity</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a3f7183684e5410096b01044c13da7f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::delete_synapses_from_post</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;post_deleted_id, std::vector&lt; int &gt; &amp;post_deleted_n, index synapse_model, std::string se_pre_name, std::string se_post_name)</argsstring>
        <name>delete_synapses_from_post</name>
        <qualifiedname>nest::SPManager::delete_synapses_from_post</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>post_deleted_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>post_deleted_n</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>synapse_model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_pre_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_post_name</declname>
        </param>
        <briefdescription>
<para>Deletion of synapses due to the loss of a postsynaptic element. </para>
        </briefdescription>
        <detaileddescription>
<para>The corresponding pre synaptic element will still remain available for a new connection on the following updates in connectivity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>post_deleted_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node with the deleted postsynaptic element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_deleted_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of deleted postsynaptic elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapse_model</parametername>
</parameternamelist>
<parameterdescription>
<para>model name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_pre_name</parametername>
</parameternamelist>
<parameterdescription>
<para>pre synaptic element name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_post_name</parametername>
</parameternamelist>
<parameterdescription>
<para>postsynaptic element name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="160" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="575" bodyend="621"/>
        <references refid="classnest_1_1MPIManager_1a58b6aff1f3e00bf84e886cce814bb708" compoundref="mpi__manager_8cpp" startline="1061" endline="1063">nest::MPIManager::communicate</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1SPManager_1ae2c3831a343dd28da33c87fed976b2a9" compoundref="sp__manager_8cpp" startline="533" endline="562">delete_synapse</references>
        <references refid="classnest_1_1ConnectionManager_1a7cc5104fcceb1b875d22ae6c9f0c2018" compoundref="connection__manager_8cpp" startline="1256" endline="1273">nest::ConnectionManager::get_sources</references>
        <references refid="classnest_1_1SPManager_1a6e004038af740a172c54dc533d31e3a1" compoundref="sp__manager_8cpp" startline="705" endline="708">global_shuffle</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="242">nest::KernelManager::mpi_manager</references>
        <referencedby refid="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" compoundref="sp__manager_8cpp" startline="341" endline="417">update_structural_plasticity</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1ae2c3831a343dd28da33c87fed976b2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::delete_synapse</definition>
        <argsstring>(index source, index target, long syn_id, std::string se_pre_name, std::string se_post_name)</argsstring>
        <name>delete_synapse</name>
        <qualifiedname>nest::SPManager::delete_synapse</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type>long</type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_pre_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_post_name</declname>
        </param>
        <briefdescription>
<para>Handles the deletion of synapses between source and target nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>The deletion is defined by the pre and postsynaptic elements and the synapse type. Updates the number of connected synaptic elements in the source and target. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>source id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tnode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>target id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>synapse type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_pre_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the pre synaptic element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_post_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the postsynaptic element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="166" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="533" bodyend="562"/>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnectionManager_1aa8f45ec27217524c07048f4c6601b146" compoundref="connection__manager_8cpp" startline="862" endline="881">nest::ConnectionManager::disconnect</references>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="classnest_1_1VPManager_1a144a9ac1401713a125c8df3d31721b0c" compoundref="vp__manager_8h" startline="164" endline="171">nest::VPManager::get_thread_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1SPManager_1a3f7183684e5410096b01044c13da7f80" compoundref="sp__manager_8cpp" startline="575" endline="621">delete_synapses_from_post</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a135b22e6cd3f6888480ceb0ef2ef9706" compoundref="sp__manager_8cpp" startline="476" endline="519">delete_synapses_from_pre</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::get_synaptic_elements</definition>
        <argsstring>(std::string se_name, std::vector&lt; index &gt; &amp;se_vacant_id, std::vector&lt; int &gt; &amp;se_vacant_n, std::vector&lt; index &gt; &amp;se_deleted_id, std::vector&lt; int &gt; &amp;se_deleted_n)</argsstring>
        <name>get_synaptic_elements</name>
        <qualifiedname>nest::SPManager::get_synaptic_elements</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>se_name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>se_vacant_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>se_vacant_n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>se_deleted_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>se_deleted_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="168" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="624" bodyend="683"/>
        <references refid="classnest_1_1SparseNodeArray_1a5e621396e30b098cbb9fac0afea7de5d" compoundref="sparse__node__array_8h" startline="227" endline="230">nest::SparseNodeArray::begin</references>
        <references refid="classnest_1_1SparseNodeArray_1a93393a4f5435a71467f775c682173dcd" compoundref="sparse__node__array_8h" startline="233" endline="236">nest::SparseNodeArray::end</references>
        <references refid="classnest_1_1NodeManager_1a264043547cdea9a9c528384bcd655e2b" compoundref="node__manager_8h" startline="344" endline="347">nest::NodeManager::get_local_nodes</references>
        <references refid="classnest_1_1VPManager_1a1096a508aefc459782911e3f2a4b7480" compoundref="vp__manager_8h" startline="174" endline="177">nest::VPManager::get_num_threads</references>
        <references refid="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" compoundref="node_8h" startline="603" endline="606">nest::Node::get_synaptic_elements_vacant</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1NodeManager_1a2ba50262a362b4b6b0d77047971b01da" compoundref="node__manager_8h" startline="320" endline="323">nest::NodeManager::size</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
        <referencedby refid="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" compoundref="sp__manager_8cpp" startline="341" endline="417">update_structural_plasticity</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1af80c9f1feede698cdde50c11de1d6485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::serialize_id</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;id, std::vector&lt; int &gt; &amp;n, std::vector&lt; index &gt; &amp;res)</argsstring>
        <name>serialize_id</name>
        <qualifiedname>nest::SPManager::serialize_id</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="174" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="686" bodyend="702"/>
        <referencedby refid="classnest_1_1SPManager_1a9d99744a7e3f8990558b5636dec66c47" compoundref="sp__manager_8cpp" startline="430" endline="463">create_synapses</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a6e004038af740a172c54dc533d31e3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::global_shuffle</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;v)</argsstring>
        <name>global_shuffle</name>
        <qualifiedname>nest::SPManager::global_shuffle</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="175" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="705" bodyend="708"/>
        <referencedby refid="classnest_1_1SPManager_1a9d99744a7e3f8990558b5636dec66c47" compoundref="sp__manager_8cpp" startline="430" endline="463">create_synapses</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a3f7183684e5410096b01044c13da7f80" compoundref="sp__manager_8cpp" startline="575" endline="621">delete_synapses_from_post</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a135b22e6cd3f6888480ceb0ef2ef9706" compoundref="sp__manager_8cpp" startline="476" endline="519">delete_synapses_from_pre</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1SPManager_1a660e2d7f16859a0e1807eef4331c6628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::global_shuffle</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;v, size_t n)</argsstring>
        <name>global_shuffle</name>
        <qualifiedname>nest::SPManager::global_shuffle</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="176" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="714" bodyend="734"/>
        <references refid="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" compoundref="nest_8cpp" startline="84" endline="87">nest::get_rank_synced_rng</references>
        <references refid="classnest_1_1BaseRandomGenerator_1a3983c4b45417bf8fd09c592691f6c40e">nest::BaseRandomGenerator::ulrand</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classnest_1_1SPManager" kindref="compound">SPManager</ref> class is in charge of managing the dynamic creation and deletion of synapses in the simulation when structural plasticity is enabled. </para>
    </briefdescription>
    <detaileddescription>
<para>Otherwise it behaves as the normal <ref refid="classnest_1_1ConnectionManager" kindref="compound">ConnectionManager</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
      <node id="1">
        <label>nest::SPManager</label>
        <link refid="classnest_1_1SPManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>Datum</label>
        <link refid="classDatum"/>
        <childnode refid="7" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>action</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>Name</label>
        <link refid="className"/>
      </node>
      <node id="9">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
      <node id="7">
        <label>SLIType</label>
        <link refid="classSLIType"/>
        <childnode refid="8" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>defaultaction</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>TypedDatum&lt; slt &gt;</label>
        <link refid="classTypedDatum"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>lockPTR&lt; D &gt;</label>
        <link refid="classlockPTR"/>
      </node>
      <node id="4">
        <label>lockPTR&lt; D &gt;</label>
        <link refid="classlockPTR"/>
      </node>
      <node id="10">
        <label>lockPTRDatum&lt; D, slt &gt;</label>
        <link refid="classlockPTRDatum"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>lockPTRDatum&lt; Dictionary, &amp;SLIInterpreter::Dictionarytype &gt;</label>
        <link refid="classlockPTRDatum"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; Dictionary, &amp;SLIInterpreter::Dictionarytype &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1ManagerInterface"/>
      </node>
      <node id="1">
        <label>nest::SPManager</label>
        <link refid="classnest_1_1SPManager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>growthcurvedict_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" line="62" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.h" bodystart="63" bodyend="198"/>
    <listofallmembers>
      <member refid="classnest_1_1SPManager_1a921fce1870107ce8d1a4fd4395051fe2" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>builder_max_delay</name></member>
      <member refid="classnest_1_1SPManager_1a5412e3381cceb64ff0b1dedf869cd288" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>builder_min_delay</name></member>
      <member refid="classnest_1_1ManagerInterface_1aa88c28844a59b4791eab4b7930fc62b0" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1ManagerInterface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1SPManager_1a9d99744a7e3f8990558b5636dec66c47" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>create_synapses</name></member>
      <member refid="classnest_1_1SPManager_1ae2c3831a343dd28da33c87fed976b2a9" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>delete_synapse</name></member>
      <member refid="classnest_1_1SPManager_1a3f7183684e5410096b01044c13da7f80" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>delete_synapses_from_post</name></member>
      <member refid="classnest_1_1SPManager_1a135b22e6cd3f6888480ceb0ef2ef9706" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>delete_synapses_from_pre</name></member>
      <member refid="classnest_1_1SPManager_1aee20052338bd8a2f47f33c59e3e2ed37" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>disable_structural_plasticity</name></member>
      <member refid="classnest_1_1SPManager_1af9961e9c3f1968bb1ff558a540d53923" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>disconnect</name></member>
      <member refid="classnest_1_1SPManager_1ae5b9af1301a59e2ccde8633c203e34a3" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>disconnect</name></member>
      <member refid="classnest_1_1SPManager_1a9b388e2d3ab09e4bdebce02aa9ea3a60" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>enable_structural_plasticity</name></member>
      <member refid="classnest_1_1SPManager_1a929ad597fdb40a6b0080991eb4b36aa3" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1SPManager_1ad53307b4caba0acaa2b074ed31ca146c" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1SPManager_1a18b5d9686702015ccbe4feb482a7abf2" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>get_structural_plasticity_update_interval</name></member>
      <member refid="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1SPManager_1a6e004038af740a172c54dc533d31e3a1" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>global_shuffle</name></member>
      <member refid="classnest_1_1SPManager_1a660e2d7f16859a0e1807eef4331c6628" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>global_shuffle</name></member>
      <member refid="classnest_1_1SPManager_1a998c3bc309bf7c354df9b6876c6e77c0" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>growthcurve_factories_</name></member>
      <member refid="classnest_1_1SPManager_1a9abde5b9b0883a14cf58709312b91828" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>growthcurvedict_</name></member>
      <member refid="classnest_1_1SPManager_1a81bd08bb0734b0910c216220fce57e5c" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1SPManager_1a64d3dd5d243cd1dfd0784b10816c5e28" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>is_structural_plasticity_enabled</name></member>
      <member refid="classnest_1_1ManagerInterface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1ManagerInterface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1SPManager_1a1470e14e9487d38617e217a3c5cbd117" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>new_growth_curve</name></member>
      <member refid="classnest_1_1ManagerInterface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1ManagerInterface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1SPManager_1a34c0919b05dcf42548d2f3cc9f36a058" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>register_growth_curve</name></member>
      <member refid="classnest_1_1SPManager_1af80c9f1feede698cdde50c11de1d6485" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>serialize_id</name></member>
      <member refid="classnest_1_1SPManager_1a826cbcc83e2da5a24acf3345917e7921" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1SPManager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>sp_conn_builders_</name></member>
      <member refid="classnest_1_1SPManager_1a4e8743b8323dca07db67e08615f147ad" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>SPManager</name></member>
      <member refid="classnest_1_1SPManager_1a14a4c875e5792d81a5c81ac78f97219c" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>structural_plasticity_enabled_</name></member>
      <member refid="classnest_1_1SPManager_1ad45f80808966464c9a1079f8800f7712" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>structural_plasticity_update_interval_</name></member>
      <member refid="classnest_1_1SPManager_1a6f0cc34c3cc807bf1d6b9399b318d35a" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>update_structural_plasticity</name></member>
      <member refid="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>update_structural_plasticity</name></member>
      <member refid="classnest_1_1ManagerInterface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1SPManager_1a32a98d81f2d61298e8d43427900dc038" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>~SPManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
