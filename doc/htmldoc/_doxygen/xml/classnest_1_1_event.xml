<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_event" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::Event</compoundname>
    <derivedcompoundref refid="classnest_1_1_data_event" prot="public" virt="non-virtual">nest::DataEvent&lt; double &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_conductance_event" prot="public" virt="non-virtual">nest::ConductanceEvent</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_current_event" prot="public" virt="non-virtual">nest::CurrentEvent</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_event" prot="public" virt="non-virtual">nest::DataEvent&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_logging_reply" prot="public" virt="non-virtual">nest::DataLoggingReply</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_logging_request" prot="public" virt="non-virtual">nest::DataLoggingRequest</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_rate_event" prot="public" virt="non-virtual">nest::RateEvent</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_secondary_event" prot="public" virt="non-virtual">nest::SecondaryEvent</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_spike_event" prot="public" virt="non-virtual">nest::SpikeEvent</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_weight_recorder_event" prot="public" virt="non-virtual">nest::WeightRecorderEvent</derivedcompoundref>
    <includes refid="event_8h" local="no">event.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_event_1a7221735e8c788ee4a730f7ba6595483b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Event::sender_node_id_</definition>
        <argsstring></argsstring>
        <name>sender_node_id_</name>
        <briefdescription>
<para>node ID of sender or 0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="317" column="9" bodyfile="nestkernel/event.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1af6213aa38ebec48b1fc8be9e00a62d1c" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_spike_data" kindref="compound">SpikeData</ref></type>
        <definition>SpikeData nest::Event::sender_spike_data_</definition>
        <argsstring></argsstring>
        <name>sender_spike_data_</name>
        <briefdescription>
<para>spike data of sender node, in some cases required to retrieve node ID </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="318" column="13" bodyfile="nestkernel/event.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1ac23f2f4beb8407a1cb01560a316268fd" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* nest::Event::sender_</definition>
        <argsstring></argsstring>
        <name>sender_</name>
        <briefdescription>
<para>Pointer to sender or nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="326" column="8" bodyfile="nestkernel/event.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1aba7585287096e9d1189007fa60244eef" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* nest::Event::receiver_</definition>
        <argsstring></argsstring>
        <name>receiver_</name>
        <briefdescription>
<para>Pointer to receiver or nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="327" column="8" bodyfile="nestkernel/event.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1a8515d7a39d4f3c8ba47bde7bcfdf80a7" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Event::p_</definition>
        <argsstring></argsstring>
        <name>p_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sender port number. The sender port is used as a unique identifier for the connection. The receiver of an event can use the port number to obtain data from the sender. The sender uses this number to locate target-specific information. <simplesect kind="note"><para>A negative port number indicates an unknown port. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="338" column="8" bodyfile="nestkernel/event.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1aaff33b6ca47aa351962509ba81ac7ed7" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
        <definition>rport nest::Event::rp_</definition>
        <argsstring></argsstring>
        <name>rp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Receiver port number (r-port). The receiver port (r-port) can be used by the receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref> to distinguish incoming connections. E.g. the r-port number can be used by Events to access specific parts of a <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. In most cases, however, this port will no be used. <simplesect kind="note"><para>The use of this port number is optional. </para>
</simplesect>
<simplesect kind="note"><para>An r-port number of 0 indicates that the port is not used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="349" column="9" bodyfile="nestkernel/event.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1a206e330b6cbc6e93887fc21908d4df43" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::Event::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transmission delay. Number of simulations steps that pass before the event is delivered at the receiver. The delay must be at least 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="357" column="9" bodyfile="nestkernel/event.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1a8ccecfeabf8f8a5bc3166dd3408f8295" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>Time nest::Event::stamp_</definition>
        <argsstring></argsstring>
        <name>stamp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1_time" kindref="compound">Time</ref> stamp. The time stamp specifies the absolute time when the event shall arrive at the target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="364" column="8" bodyfile="nestkernel/event.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1af35dca186785c4b12995f35d2b51a3de" prot="protected" static="no" mutable="yes">
        <type>long</type>
        <definition>long nest::Event::stamp_steps_</definition>
        <argsstring></argsstring>
        <name>stamp_steps_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1_time" kindref="compound">Time</ref> stamp in steps. Caches the value of stamp in steps for efficiency. Needs to be declared mutable since it is modified by a const function (get_rel_delivery_steps). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="372" column="16" bodyfile="nestkernel/event.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1afd698f1dc0985f25ac821060e060c64b" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::Event::offset_</definition>
        <argsstring></argsstring>
        <name>offset_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Offset for precise spike times. offset_ specifies a correction to the creation time. If the resolution of stamp is not sufficiently precise, this attribute can be used to correct the creation time. offset_ has to be in [0, h). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="381" column="10" bodyfile="nestkernel/event.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_event_1a2e85d3a413ae97d1dbf9cf6dbd791259" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenest_1aa26400f4ac119288a43af512d0ec5a0d" kindref="member">weight</ref></type>
        <definition>weight nest::Event::w_</definition>
        <argsstring></argsstring>
        <name>w_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Weight of the connection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="386" column="10" bodyfile="nestkernel/event.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_event_1a5fd02c2d20b0caf43899f563d419e0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Event::Event</definition>
        <argsstring>()</argsstring>
        <name>Event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="108" column="3" bodyfile="nestkernel/event.cpp" bodystart="38" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1af3f85780e2fab06dd2d934bf965dd142" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual nest::Event::~Event</definition>
        <argsstring>()</argsstring>
        <name>~Event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="110" column="11" bodyfile="nestkernel/event.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a3eeb581400e38c8fd62a105ef812a549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> *</type>
        <definition>virtual Event* nest::Event::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classnest_1_1_spike_event_1a5e3ecd77ccc01ac8fa28134ad4bfecea">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_weight_recorder_event_1a301327ecaea6acae6508ce8b9c3a8adc">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_rate_event_1a1ba7226bb619a6e05176f992641c8fbd">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_current_event_1ae3e9457404895dc2f034af692b859aad">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_logging_request_1a60340757092653c3a8118131eddb09bf">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_logging_reply_1a3fa925daf5d72c6bbb027f6426d315a6">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_conductance_event_1a7f40c280568c875662c0cf865cfd8cd1">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_double_data_event_1a005f3b33a5183dcdd0b00410368fd13b">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_gap_junction_event_1a3e00564c566bf206aa77e2f80001c2a2">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_instantaneous_rate_connection_event_1a92d3d351ea9f940a727793eedeac47be">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_delayed_rate_connection_event_1ab7820172999828da5580eccd6ffddb4b">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_diffusion_connection_event_1a2fa10441f1da02e5a977d8b19b4c4eeb">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_secondary_event_1abc08cdd9aa7ef8ce98f86ac745fd7231">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="117" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a5d94fae6ba8645be63749c08289adcbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Event::operator()</definition>
        <argsstring>()=0</argsstring>
        <name>operator()</name>
        <reimplementedby refid="classnest_1_1_spike_event_1a912766fd2f87c61e2ac70b723278043b">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_weight_recorder_event_1af82d5f6cc4d23c885dd92e70dc6b05a0">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_d_s_spike_event_1a0dd8578cd487f98857dcd627b718f53c">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_rate_event_1a688b75ab2f9992e0694637035dc60b8e">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_current_event_1afd45af1aca9dce3c66dfd7ceb57630fa">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_d_s_current_event_1a40c7ce9c76e1b5329a5bb768f3bb6654">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_logging_request_1a9bac30a4a5c21c70a994f751c21e03a6">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_logging_reply_1a2dc8b349347e1bdc409b583ab0c87c0b">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_conductance_event_1a8e7f4a6d0a288c20d798b3233b97ac15">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_double_data_event_1aff4a413b64cdb534466c1662ab15de92">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_gap_junction_event_1a6ffd954dc3a30a3f0cc58a73787ec368">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_instantaneous_rate_connection_event_1a474eee8e70b66474ce69613312467895">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_delayed_rate_connection_event_1a1eb689558cf6085a58bba77aadab8d1d">operator()</reimplementedby>
        <reimplementedby refid="classnest_1_1_diffusion_connection_event_1aa6b84f5b3136a7131f078c1cfab8a9f5">operator()</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deliver the event to receiver.</para>
<para>This operator calls the handler for the specific event type at the receiver. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="125" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a16234c886ae93c42bf120bf77abece30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_receiver</definition>
        <argsstring>(Node &amp;)</argsstring>
        <name>set_receiver</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change pointer to receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="130" column="8" bodyfile="nestkernel/event.h" bodystart="886" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a8c1d83bbbebd23bb85b7ba3dd743d38c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
        <definition>Node &amp; nest::Event::get_receiver</definition>
        <argsstring>() const</argsstring>
        <name>get_receiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return reference to receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="135" column="8" bodyfile="nestkernel/event.h" bodystart="911" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1aaa1bfdd94c07c6a94547086f8139a960" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Event::get_receiver_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_receiver_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return node ID of receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="140" column="9" bodyfile="nestkernel/event.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1aca5d7f11547cb61848956360d656ccfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
        <definition>Node &amp; nest::Event::get_sender</definition>
        <argsstring>() const</argsstring>
        <name>get_sender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return reference to sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>.</para>
<para><simplesect kind="note"><para>This will cause a segmentation fault if sender has not been set via <ref refid="classnest_1_1_event_1a63cf602cb38d901021bbe9096f161850" kindref="member">set_sender()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="147" column="8" bodyfile="nestkernel/event.h" bodystart="917" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a63cf602cb38d901021bbe9096f161850" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_sender</definition>
        <argsstring>(Node &amp;)</argsstring>
        <name>set_sender</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change pointer to sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="152" column="8" bodyfile="nestkernel/event.h" bodystart="892" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a32291607d1143c5c7ade223a12ddd54e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Event::get_sender_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_sender_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sender is local. Return node ID of sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>.</para>
<para><simplesect kind="note"><para>This will trigger an assertion if sender node id has not been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="159" column="9" bodyfile="nestkernel/event.h" bodystart="923" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1aaf68e08591d41518b70181862a6b4877" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::Event::retrieve_sender_node_id_from_source_table</definition>
        <argsstring>() const</argsstring>
        <name>retrieve_sender_node_id_from_source_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sender is not local. Retrieve node ID of sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref> from <ref refid="classnest_1_1_source_table" kindref="compound">SourceTable</ref> and return it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="164" column="9" bodyfile="nestkernel/event.cpp" bodystart="56" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a7ba2a5690a5345624a8ed57c7633cc03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_sender_node_id</definition>
        <argsstring>(const index)</argsstring>
        <name>set_sender_node_id</name>
        <param>
          <type>const</type>
          <declname>index</declname>
          <defname>node_id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change node ID of sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="169" column="8" bodyfile="nestkernel/event.h" bodystart="898" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a5bb763582d2d6a09987d1d91a0646b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_sender_node_id_info</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index lcid)</argsstring>
        <name>set_sender_node_id_info</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set tid, syn_id, lcid of spike_data_. These are required to retrieve the <ref refid="classnest_1_1_node" kindref="compound">Node</ref> ID of a non-local sender from the <ref refid="classnest_1_1_source_table" kindref="compound">SourceTable</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="175" column="8" bodyfile="nestkernel/event.h" bodystart="904" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a02f02f11531fefd932a1ac9c0c0891d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref> const  &amp;</type>
        <definition>Time const  &amp; nest::Event::get_stamp</definition>
        <argsstring>() const</argsstring>
        <name>get_stamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return time stamp of the event. The stamp denotes the time when the event was created. The resolution of Stamp is limited by the time base of the simulation kernel (<simplesect kind="see"><para>class <ref refid="classnest_1_1_time" kindref="compound">nest::Time</ref>). If this resolution is not fine enough, the creation time can be corrected by using the time attribute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="185" column="14" bodyfile="nestkernel/event.h" bodystart="942" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1ae662ecac352f57893c104563dd53c7fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_delay_steps</definition>
        <argsstring>(delay)</argsstring>
        <name>set_delay_steps</name>
        <param>
          <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the transmission delay of the event. The delay refers to the time until the event is expected to arrive at the receiver. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>delay. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="194" column="8" bodyfile="nestkernel/event.h" bodystart="974" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a7f3dc0d0bb05d4f98ad2bf13cc67b940" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::Event::get_delay_steps</definition>
        <argsstring>() const</argsstring>
        <name>get_delay_steps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return transmission delay of the event. The delay refers to the time until the event is expected to arrive at the receiver. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="201" column="9" bodyfile="nestkernel/event.h" bodystart="958" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a4802a116b9b4e4f3ffcd71a7cfb1729e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long nest::Event::get_rel_delivery_steps</definition>
        <argsstring>(const Time &amp;t) const</argsstring>
        <name>get_rel_delivery_steps</name>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Relative spike delivery time in steps. Returns the delivery time of the spike relative to a given time in steps. Causality commands that the result should not be negative.</para>
<para><simplesect kind="return"><para>stamp + delay - 1 - t in steps </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>reference time</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>NEST <ref refid="classnest_1_1_time" kindref="compound">Time</ref> Memo, Rule 3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="214" column="8" bodyfile="nestkernel/event.h" bodystart="964" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a583d84f37d575fbc7f2ab711fb494b66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Event::get_port</definition>
        <argsstring>() const</argsstring>
        <name>get_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the sender port number of the event. This function returns the number of the port over which the <ref refid="classnest_1_1_event" kindref="compound">Event</ref> was sent. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>negative return value indicates that no port number was available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="223" column="8" bodyfile="nestkernel/event.h" bodystart="992" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a54709441635d23d80acd9d18eb869856" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
        <definition>rport nest::Event::get_rport</definition>
        <argsstring>() const</argsstring>
        <name>get_rport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the receiver port number of the event. This function returns the number of the r-port over which the <ref refid="classnest_1_1_event" kindref="compound">Event</ref> was sent. <simplesect kind="note"><para>A return value of 0 indicates that the r-port is not used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="231" column="9" bodyfile="nestkernel/event.h" bodystart="998" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a934d28b25e817dd9ed45fbbab3436288" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_port</definition>
        <argsstring>(port p)</argsstring>
        <name>set_port</name>
        <param>
          <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the port number. Each event carries the number of the port over which the event is sent. When a connection is established, it receives a unique ID from the sender. This number has to be stored in each <ref refid="classnest_1_1_event" kindref="compound">Event</ref> object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Port number of the connection, or -1 if unknown. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="241" column="8" bodyfile="nestkernel/event.h" bodystart="1004" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1aeac7ec4158ac45bf8e503ee04888d367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_rport</definition>
        <argsstring>(rport p)</argsstring>
        <name>set_rport</name>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the receiver port number (r-port). When a connection is established, the receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref> may issue a port number (r-port) to distinguish the incomin connection. By the default, the r-port is not used and its port number defaults to zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Receiver port number of the connection, or 0 if unused. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="251" column="8" bodyfile="nestkernel/event.h" bodystart="1010" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1ad2fcc703a758e0dba77c00385cb5041c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::Event::get_offset</definition>
        <argsstring>() const</argsstring>
        <name>get_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the creation time offset of the <ref refid="classnest_1_1_event" kindref="compound">Event</ref>. Each <ref refid="classnest_1_1_event" kindref="compound">Event</ref> carries the exact time of creation. This time need not coincide with an integral multiple of the temporal resolution. Rather, Events may be created at any point in time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="260" column="10" bodyfile="nestkernel/event.h" bodystart="980" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a950cfc88c56d3098f1445dcc2b6f4805" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_offset</definition>
        <argsstring>(double t)</argsstring>
        <name>set_offset</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the creation time of the <ref refid="classnest_1_1_event" kindref="compound">Event</ref>. Each <ref refid="classnest_1_1_event" kindref="compound">Event</ref> carries the exact time of creation in realtime. This time need not coincide with an integral multiple of the temporal resolution. Rather, Events may be created at any point in time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Creation time in realtime. t has to be in [0, h). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="270" column="8" bodyfile="nestkernel/event.h" bodystart="986" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1abf2d6610c35bd35cf67910f5c39b7cc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1aa26400f4ac119288a43af512d0ec5a0d" kindref="member">weight</ref></type>
        <definition>weight nest::Event::get_weight</definition>
        <argsstring>() const</argsstring>
        <name>get_weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the weight. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="275" column="10" bodyfile="nestkernel/event.h" bodystart="930" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1ab5269d296a67598c7d6cbb9117756de0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_weight</definition>
        <argsstring>(weight t)</argsstring>
        <name>set_weight</name>
        <param>
          <type><ref refid="namespacenest_1aa26400f4ac119288a43af512d0ec5a0d" kindref="member">weight</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set weight of the event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="280" column="8" bodyfile="nestkernel/event.h" bodystart="936" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a956496d418cf58ca78925a22dfe2e21d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Event::set_drift_factor</definition>
        <argsstring>(weight)</argsstring>
        <name>set_drift_factor</name>
        <reimplementedby refid="classnest_1_1_diffusion_connection_event_1a89ade076741bc3b5374ff6c078601e7a">set_drift_factor</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1aa26400f4ac119288a43af512d0ec5a0d" kindref="member">weight</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set drift_factor of the event (see <ref refid="classnest_1_1_diffusion_connection_event" kindref="compound">DiffusionConnectionEvent</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="285" column="16" bodyfile="nestkernel/event.h" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a488b68c43fe5d4d29d87d2578487264d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Event::set_diffusion_factor</definition>
        <argsstring>(weight)</argsstring>
        <name>set_diffusion_factor</name>
        <reimplementedby refid="classnest_1_1_diffusion_connection_event_1a5924eeb045c9b11aa7a48d42bc7f4567">set_diffusion_factor</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1aa26400f4ac119288a43af512d0ec5a0d" kindref="member">weight</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set diffusion_factor of the event (see <ref refid="classnest_1_1_diffusion_connection_event" kindref="compound">DiffusionConnectionEvent</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="290" column="16" bodyfile="nestkernel/event.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a43ca356032fe29a848b9d72f7a43eafd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Event::sender_is_valid</definition>
        <argsstring>() const</argsstring>
        <name>sender_is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the pointer to the sender node is valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="295" column="8" bodyfile="nestkernel/event.h" bodystart="868" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1acf9f5b244e87b4d2d83b0a67463b76f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Event::receiver_is_valid</definition>
        <argsstring>() const</argsstring>
        <name>receiver_is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the pointer to the receiver node is valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="300" column="8" bodyfile="nestkernel/event.h" bodystart="874" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1aa1d8adc602682b70876729e830956dce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Event::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check integrity of the event. This function returns true, if all data, in particular sender and receiver pointers are correctly set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="307" column="8" bodyfile="nestkernel/event.h" bodystart="880" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_event_1a47c5bdb5473b5b8971b2a077aec754e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Event::set_stamp</definition>
        <argsstring>(Time const &amp;)</argsstring>
        <name>set_stamp</name>
        <param>
          <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref> const &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the time stamp of the event. The time stamp refers to the time when the event was created. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/event.h" line="314" column="8" bodyfile="nestkernel/event.h" bodystart="948" bodyend="955"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Encapsulate information sent between nodes.</para>
<para><ref refid="classnest_1_1_event" kindref="compound">Event</ref> is the base class for transmitting information between nodes in NEST, with different subclasses for transmitting different types of information. <ref refid="classnest_1_1_event" kindref="compound">Event</ref> types come in three categories<orderedlist>
<listitem><para><ref refid="classnest_1_1_spike_event" kindref="compound">SpikeEvent</ref> can be transmitted between MPI processes</para>
</listitem><listitem><para><ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> subclasses can also be transmitted between MPI processes, but need to be transmitted via secondary connections. They can transport data.</para>
</listitem><listitem><para>All other <ref refid="classnest_1_1_event" kindref="compound">Event</ref> subclasses can only be transmitted within an MPI process</para>
</listitem></orderedlist>
</para>
<para>Events are used for two tasks:<orderedlist>
<listitem><para>Creating connections</para>
</listitem><listitem><para>Sending signals between nodes during simulation</para>
</listitem></orderedlist>
</para>
<sect2 id="classnest_1_1_event_1autotoc_md0">
<title>Events during connection</title>
<para><ref refid="classnest_1_1_node_1a60608af8d6238b96071a9f64544ec5e3" kindref="member">Node::send_test_event()</ref> creates an <ref refid="classnest_1_1_event" kindref="compound">Event</ref> instance of the type of event emitted by that node type, and calls <ref refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" kindref="member">Node::handles_test_event()</ref> on the target node. During this call, the event will contain a pointer to a sender node, which is not necessarily the actual sender (which may reside on a different MPI rank), but usually a proxy node. The sender node id is not set. The essential task of this handshake is to ensure that the target can handle the connection and requested receptor type, and to return <computeroutput>rport</computeroutput> information.</para>
</sect2>
<sect2 id="classnest_1_1_event_1autotoc_md1">
<title>Events during simulation</title>
<para>Events transmit information during simulation. <ref refid="classnest_1_1_spike_event" kindref="compound">SpikeEvent</ref> and <ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> types are first stored in buffers on the sending VP, then serialized for transmission to destination VPs and finally deserialized for delivery. In this process, for the sake of efficiency, NEST creates one <ref refid="classnest_1_1_event" kindref="compound">Event</ref> object and updates its properties for each single event to be delivered. In this case, no pointer to the source node is stored in the <ref refid="classnest_1_1_event" kindref="compound">Event</ref> (as it may be on a different MPI rank), but the correct sender node id is provided.</para>
<para>Other <ref refid="classnest_1_1_event" kindref="compound">Event</ref> types are delivered directly on the VP on which they are generated and can, for example, be used for call backs or request-reply sequences.</para>
<para><simplesect kind="see"><para><ref refid="classnest_1_1_node" kindref="compound">Node</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_spike_event" kindref="compound">SpikeEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_d_s_spike_event" kindref="compound">DSSpikeEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_rate_event" kindref="compound">RateEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_current_event" kindref="compound">CurrentEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_d_s_current_event" kindref="compound">DSCurrentEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_conductance_event" kindref="compound">ConductanceEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_weight_recorder_event" kindref="compound">WeightRecorderEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_data_logging_request" kindref="compound">DataLoggingRequest</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_data_logging_reply" kindref="compound">DataLoggingReply</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_data_event" kindref="compound">DataEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_double_data_event" kindref="compound">DoubleDataEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_delayed_rate_connection_event" kindref="compound">DelayedRateConnectionEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_diffusion_connection_event" kindref="compound">DiffusionConnectionEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_gap_junction_event" kindref="compound">GapJunctionEvent</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_instantaneous_rate_connection_event" kindref="compound">InstantaneousRateConnectionEvent</ref> </para>
</simplesect>
</para>
</sect2>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>nest::InstantaneousRateConnectionEvent</label>
        <link refid="classnest_1_1_instantaneous_rate_connection_event"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>nest::SecondaryEvent</label>
        <link refid="classnest_1_1_secondary_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::DoubleDataEvent</label>
        <link refid="classnest_1_1_double_data_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::DataEvent&lt; double &gt;</label>
        <link refid="classnest_1_1_data_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>nest::DelayedRateConnectionEvent</label>
        <link refid="classnest_1_1_delayed_rate_connection_event"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>nest::WeightRecorderEvent</label>
        <link refid="classnest_1_1_weight_recorder_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>nest::DataLoggingRequest</label>
        <link refid="classnest_1_1_data_logging_request"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>nest::DiffusionConnectionEvent</label>
        <link refid="classnest_1_1_diffusion_connection_event"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>nest::DataSecondaryEvent&lt; double, DelayedRateConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; double, DelayedRateConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>nest::RateEvent</label>
        <link refid="classnest_1_1_rate_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>nest::DataSecondaryEvent&lt; double, InstantaneousRateConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; double, InstantaneousRateConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
      </node>
      <node id="22">
        <label>nest::DSSpikeEvent</label>
        <link refid="classnest_1_1_d_s_spike_event"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>nest::DataSecondaryEvent&lt; double, GapJunctionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; double, GapJunctionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::ConductanceEvent</label>
        <link refid="classnest_1_1_conductance_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::DSCurrentEvent</label>
        <link refid="classnest_1_1_d_s_current_event"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::DataEvent&lt; D &gt;</label>
        <link refid="classnest_1_1_data_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::DataLoggingReply</label>
        <link refid="classnest_1_1_data_logging_reply"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::CurrentEvent</label>
        <link refid="classnest_1_1_current_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>nest::SpikeEvent</label>
        <link refid="classnest_1_1_spike_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>nest::GapJunctionEvent</label>
        <link refid="classnest_1_1_gap_junction_event"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>nest::DataSecondaryEvent&lt; double, DiffusionConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; double, DiffusionConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>nest::DataSecondaryEvent&lt; DataType, Subclass &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1_deprecation_warning"/>
      </node>
      <node id="6">
        <label>nest::Time::LimitPosInf</label>
      </node>
      <node id="8">
        <label>nest::SpikeData</label>
        <link refid="classnest_1_1_spike_data"/>
      </node>
      <node id="5">
        <label>nest::Time::LimitNegInf</label>
      </node>
      <node id="4">
        <label>nest::Time</label>
        <link refid="classnest_1_1_time"/>
        <childnode refid="5" relation="usage">
          <edgelabel>#LIM_NEG_INF</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>#LIM_MAX</edgelabel>
          <edgelabel>#LIM_MIN</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#receiver_</edgelabel>
          <edgelabel>#sender_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>#stamp_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#sender_spike_data_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1_time_1_1_limit"/>
      </node>
      <node id="2">
        <label>nest::Node</label>
        <link refid="classnest_1_1_node"/>
        <childnode refid="3" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/event.h" line="104" column="1" bodyfile="nestkernel/event.h" bodystart="105" bodyend="387"/>
    <listofallmembers>
      <member refid="classnest_1_1_event_1a3eeb581400e38c8fd62a105ef812a549" prot="public" virt="pure-virtual"><scope>nest::Event</scope><name>clone</name></member>
      <member refid="classnest_1_1_event_1a206e330b6cbc6e93887fc21908d4df43" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>d_</name></member>
      <member refid="classnest_1_1_event_1a5fd02c2d20b0caf43899f563d419e0bd" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>Event</name></member>
      <member refid="classnest_1_1_event_1a7f3dc0d0bb05d4f98ad2bf13cc67b940" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_delay_steps</name></member>
      <member refid="classnest_1_1_event_1ad2fcc703a758e0dba77c00385cb5041c" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_offset</name></member>
      <member refid="classnest_1_1_event_1a583d84f37d575fbc7f2ab711fb494b66" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_port</name></member>
      <member refid="classnest_1_1_event_1a8c1d83bbbebd23bb85b7ba3dd743d38c" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_receiver</name></member>
      <member refid="classnest_1_1_event_1aaa1bfdd94c07c6a94547086f8139a960" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_receiver_node_id</name></member>
      <member refid="classnest_1_1_event_1a4802a116b9b4e4f3ffcd71a7cfb1729e" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_rel_delivery_steps</name></member>
      <member refid="classnest_1_1_event_1a54709441635d23d80acd9d18eb869856" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_rport</name></member>
      <member refid="classnest_1_1_event_1aca5d7f11547cb61848956360d656ccfc" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_sender</name></member>
      <member refid="classnest_1_1_event_1a32291607d1143c5c7ade223a12ddd54e" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a02f02f11531fefd932a1ac9c0c0891d0" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_stamp</name></member>
      <member refid="classnest_1_1_event_1abf2d6610c35bd35cf67910f5c39b7cc4" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>get_weight</name></member>
      <member refid="classnest_1_1_event_1aa1d8adc602682b70876729e830956dce" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>is_valid</name></member>
      <member refid="classnest_1_1_event_1afd698f1dc0985f25ac821060e060c64b" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>offset_</name></member>
      <member refid="classnest_1_1_event_1a5d94fae6ba8645be63749c08289adcbe" prot="public" virt="pure-virtual"><scope>nest::Event</scope><name>operator()</name></member>
      <member refid="classnest_1_1_event_1a8515d7a39d4f3c8ba47bde7bcfdf80a7" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>p_</name></member>
      <member refid="classnest_1_1_event_1aba7585287096e9d1189007fa60244eef" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>receiver_</name></member>
      <member refid="classnest_1_1_event_1acf9f5b244e87b4d2d83b0a67463b76f6" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>receiver_is_valid</name></member>
      <member refid="classnest_1_1_event_1aaf68e08591d41518b70181862a6b4877" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>retrieve_sender_node_id_from_source_table</name></member>
      <member refid="classnest_1_1_event_1aaff33b6ca47aa351962509ba81ac7ed7" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>rp_</name></member>
      <member refid="classnest_1_1_event_1ac23f2f4beb8407a1cb01560a316268fd" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>sender_</name></member>
      <member refid="classnest_1_1_event_1a43ca356032fe29a848b9d72f7a43eafd" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>sender_is_valid</name></member>
      <member refid="classnest_1_1_event_1a7221735e8c788ee4a730f7ba6595483b" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>sender_node_id_</name></member>
      <member refid="classnest_1_1_event_1af6213aa38ebec48b1fc8be9e00a62d1c" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>sender_spike_data_</name></member>
      <member refid="classnest_1_1_event_1ae662ecac352f57893c104563dd53c7fe" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_delay_steps</name></member>
      <member refid="classnest_1_1_event_1a488b68c43fe5d4d29d87d2578487264d" prot="public" virt="virtual"><scope>nest::Event</scope><name>set_diffusion_factor</name></member>
      <member refid="classnest_1_1_event_1a956496d418cf58ca78925a22dfe2e21d" prot="public" virt="virtual"><scope>nest::Event</scope><name>set_drift_factor</name></member>
      <member refid="classnest_1_1_event_1a950cfc88c56d3098f1445dcc2b6f4805" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_offset</name></member>
      <member refid="classnest_1_1_event_1a934d28b25e817dd9ed45fbbab3436288" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_port</name></member>
      <member refid="classnest_1_1_event_1a16234c886ae93c42bf120bf77abece30" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_receiver</name></member>
      <member refid="classnest_1_1_event_1aeac7ec4158ac45bf8e503ee04888d367" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_rport</name></member>
      <member refid="classnest_1_1_event_1a63cf602cb38d901021bbe9096f161850" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_sender</name></member>
      <member refid="classnest_1_1_event_1a7ba2a5690a5345624a8ed57c7633cc03" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a5bb763582d2d6a09987d1d91a0646b05" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_sender_node_id_info</name></member>
      <member refid="classnest_1_1_event_1a47c5bdb5473b5b8971b2a077aec754e0" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_stamp</name></member>
      <member refid="classnest_1_1_event_1ab5269d296a67598c7d6cbb9117756de0" prot="public" virt="non-virtual"><scope>nest::Event</scope><name>set_weight</name></member>
      <member refid="classnest_1_1_event_1a8ccecfeabf8f8a5bc3166dd3408f8295" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>stamp_</name></member>
      <member refid="classnest_1_1_event_1af35dca186785c4b12995f35d2b51a3de" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>stamp_steps_</name></member>
      <member refid="classnest_1_1_event_1a2e85d3a413ae97d1dbf9cf6dbd791259" prot="protected" virt="non-virtual"><scope>nest::Event</scope><name>w_</name></member>
      <member refid="classnest_1_1_event_1af3f85780e2fab06dd2d934bf965dd142" prot="public" virt="virtual"><scope>nest::Event</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
