<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="iaf__propagator_8cpp" kind="file" language="C++">
    <compoundname>iaf_propagator.cpp</compoundname>
    <includes refid="iaf__propagator_8h" local="yes">iaf_propagator.h</includes>
    <incdepgraph>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>cassert</label>
      </node>
      <node id="2">
        <label>iaf_propagator.h</label>
        <link refid="iaf__propagator_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tuple</label>
      </node>
      <node id="1">
        <label>iaf_propagator.cpp</label>
        <link refid="iaf__propagator_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>config.h</label>
      </node>
      <node id="5">
        <label>numerics.h</label>
        <link refid="numerics_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>iaf_propagator.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iaf__propagator_8h" kindref="compound">iaf_propagator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Just<sp/>dummy<sp/>for<sp/>buffer<sp/>construction,<sp/>these<sp/>objects<sp/>will<sp/>never<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classIAFPropagator_1a3bb1cd56f070bcf29822d21546317184" refkind="member"><highlight class="normal"><ref refid="classIAFPropagator_1a3bb1cd56f070bcf29822d21546317184" kindref="member">IAFPropagator::IAFPropagator</ref>()</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>:<sp/>tau_syn_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>,<sp/>tau_m_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>,<sp/>c_m_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>,<sp/>h_min_regular_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>,<sp/>beta_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>,<sp/>gamma_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>,<sp/>inv_tau_syn_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>,<sp/>inv_tau_m_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>,<sp/>inv_c_m_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>,<sp/>inv_beta_(<sp/><ref refid="namespacenumerics" kindref="compound">numerics</ref>::<ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">nan</ref><sp/>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Precompute<sp/>inverses<sp/>to<sp/>avoid<sp/>division<sp/>during<sp/>evaluate()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classIAFPropagator_1a07c7eb04dcd535598b5b63df51d5999b" refkind="member"><highlight class="normal"><ref refid="classIAFPropagator_1a3bb1cd56f070bcf29822d21546317184" kindref="member">IAFPropagator::IAFPropagator</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a228b1519e7af110298060b0c838896f5" kindref="member">tau_syn</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a4184920b44194d822ee5f09a8151d1b6" kindref="member">tau_m</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_m<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>:<sp/>tau_syn_(<sp/><ref refid="namespacenest_1_1names_1a228b1519e7af110298060b0c838896f5" kindref="member">tau_syn</ref><sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>,<sp/>tau_m_(<sp/><ref refid="namespacenest_1_1names_1a4184920b44194d822ee5f09a8151d1b6" kindref="member">tau_m</ref><sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>,<sp/>c_m_(<sp/>c_m<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>,<sp/>h_min_regular_(<sp/>NUMERICAL_STABILITY_FACTOR_<sp/>*<sp/>tau_m_<sp/>*<sp/>tau_m_<sp/>/<sp/><ref refid="namespacenest_1_1names_1a5d090e9d6776885fbdb33f5d93d625f7" kindref="member">std</ref>::abs(<sp/>tau_m_<sp/>-<sp/>tau_syn_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>,<sp/>beta_(<sp/>tau_syn_<sp/>*<sp/>tau_m_<sp/>/<sp/>(<sp/>tau_m_<sp/>-<sp/>tau_syn_<sp/>)<sp/>)<sp/></highlight><highlight class="comment">//<sp/>==<sp/>inf<sp/>if<sp/>tau_m<sp/>==<sp/>tau_syn,<sp/>thus<sp/>well-defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>,<sp/>gamma_(<sp/>beta_<sp/>/<sp/>c_m_<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>,<sp/>inv_tau_syn_(<sp/>1<sp/>/<sp/>tau_syn_<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>,<sp/>inv_tau_m_(<sp/>1<sp/>/<sp/>tau_m_<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>,<sp/>inv_c_m_(<sp/>1<sp/>/<sp/>c_m_<sp/>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>,<sp/>inv_beta_(<sp/>(<sp/>tau_m_<sp/>-<sp/>tau_syn_<sp/>)<sp/>/<sp/>(<sp/>tau_syn_<sp/>*<sp/>tau_m_<sp/>)<sp/>)<sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>in<sp/>case<sp/>tau_m<sp/>==<sp/>tau_syn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">std::tuple&lt;<sp/>double,<sp/>double,<sp/>double,<sp/>double<sp/>&gt;</highlight></codeline>
<codeline lineno="57" refid="classIAFPropagator_1a7e3c80385122a58bc5c6972ac5bf5fb1" refkind="member"><highlight class="normal"><ref refid="classIAFPropagator_1a7e3c80385122a58bc5c6972ac5bf5fb1" kindref="member">IAFPropagator::evaluate_P32_</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="58"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_h_tau_syn<sp/>=<sp/>std::exp(<sp/>-<ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="classIAFPropagator_1aa4d455c03c09bbade2addd4a7fd3b72d" kindref="member">inv_tau_syn_</ref><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expm1_h_tau<sp/>=<sp/><ref refid="namespacenumerics_1a3cf41aab824fa7688404652067a60565" kindref="member">numerics::expm1</ref>(<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="classIAFPropagator_1a56a3c1df5cbf82e45c73f70b7c3b92be" kindref="member">inv_beta_</ref><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P32<sp/>=<sp/><ref refid="classIAFPropagator_1a5d899ceb2ece308b2334dc78a84e3558" kindref="member">gamma_</ref><sp/>*<sp/>exp_h_tau_syn<sp/>*<sp/>expm1_h_tau;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>std::isnormal(<sp/>P32<sp/>)<sp/>and<sp/>P32<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(<sp/>P32,<sp/>exp_h_tau_syn,<sp/>expm1_h_tau,<sp/><ref refid="namespacenumerics_1a2022d0d7fddab66c66e86321c316aa11" kindref="member">numerics::nan</ref><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_h_tau<sp/>=<sp/>std::exp(<sp/>-<ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="classIAFPropagator_1aa1926c9dbadaa5f43fe8c69a9fae94bc" kindref="member">inv_tau_m_</ref><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P32_singular<sp/>=<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="classIAFPropagator_1a7cde3156dd3b1f09960712b0b7d8dfca" kindref="member">inv_c_m_</ref><sp/>*<sp/>exp_h_tau;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(<sp/>P32_singular,<sp/>exp_h_tau_syn,<sp/>expm1_h_tau,<sp/>exp_h_tau<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classIAFPropagatorExp_1a01eace0302cc4529d1735fb993ffd304" refkind="member"><highlight class="normal"><ref refid="classIAFPropagatorExp_1a01eace0302cc4529d1735fb993ffd304" kindref="member">IAFPropagatorExp::IAFPropagatorExp</ref>()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classIAFPropagatorExp_1ad34db8136c8f83eddc7debdc92ebf257" refkind="member"><highlight class="normal"><ref refid="classIAFPropagatorExp_1a01eace0302cc4529d1735fb993ffd304" kindref="member">IAFPropagatorExp::IAFPropagatorExp</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a228b1519e7af110298060b0c838896f5" kindref="member">tau_syn</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a4184920b44194d822ee5f09a8151d1b6" kindref="member">tau_m</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_m<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classIAFPropagator" kindref="compound">IAFPropagator</ref>(<sp/><ref refid="namespacenest_1_1names_1a228b1519e7af110298060b0c838896f5" kindref="member">tau_syn</ref>,<sp/><ref refid="namespacenest_1_1names_1a4184920b44194d822ee5f09a8151d1b6" kindref="member">tau_m</ref>,<sp/>c_m<sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classIAFPropagatorAlpha_1acac3b64b98f3c652249efadc5f9084b3" refkind="member"><highlight class="normal"><ref refid="classIAFPropagatorAlpha_1acac3b64b98f3c652249efadc5f9084b3" kindref="member">IAFPropagatorAlpha::IAFPropagatorAlpha</ref>()</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classIAFPropagatorAlpha_1acf4eedf34c272e844d51dfc736d79760" refkind="member"><highlight class="normal"><ref refid="classIAFPropagatorAlpha_1acac3b64b98f3c652249efadc5f9084b3" kindref="member">IAFPropagatorAlpha::IAFPropagatorAlpha</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a228b1519e7af110298060b0c838896f5" kindref="member">tau_syn</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a4184920b44194d822ee5f09a8151d1b6" kindref="member">tau_m</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_m<sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classIAFPropagator" kindref="compound">IAFPropagator</ref>(<sp/><ref refid="namespacenest_1_1names_1a228b1519e7af110298060b0c838896f5" kindref="member">tau_syn</ref>,<sp/><ref refid="namespacenest_1_1names_1a4184920b44194d822ee5f09a8151d1b6" kindref="member">tau_m</ref>,<sp/>c_m<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">std::tuple&lt;<sp/>double,<sp/>double<sp/>&gt;</highlight></codeline>
<codeline lineno="95" refid="classIAFPropagatorAlpha_1a56ea2f52f540342dc1d626ef714875ca" refkind="member"><highlight class="normal"><ref refid="classIAFPropagatorAlpha_1a56ea2f52f540342dc1d626ef714875ca" kindref="member">IAFPropagatorAlpha::evaluate</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="96"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P32;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_h_tau_syn;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expm1_h_tau;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_h_tau;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::tie(<sp/>P32,<sp/>exp_h_tau_syn,<sp/>expm1_h_tau,<sp/>exp_h_tau<sp/>)<sp/>=<sp/><ref refid="classIAFPropagator_1a7e3c80385122a58bc5c6972ac5bf5fb1" kindref="member">evaluate_P32_</ref>(<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>&gt;<sp/><ref refid="classIAFPropagator_1a6a20cff8f778b981fac80b0370e0ef06" kindref="member">h_min_regular_</ref><sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P31<sp/>=<sp/><ref refid="classIAFPropagator_1a5d899ceb2ece308b2334dc78a84e3558" kindref="member">gamma_</ref><sp/>*<sp/>exp_h_tau_syn<sp/>*<sp/>(<sp/><ref refid="classIAFPropagator_1a945890af6732bf0e459fe78f95df116e" kindref="member">beta_</ref><sp/>*<sp/>expm1_h_tau<sp/>-<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(<sp/>P31,<sp/>P32<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>std::isnan(<sp/>exp_h_tau<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>locally<sp/>if<sp/>not<sp/>provided<sp/>by<sp/>evaluate_P32_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_h_tau<sp/>=<sp/>std::exp(<sp/>-<ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="classIAFPropagator_1aa1926c9dbadaa5f43fe8c69a9fae94bc" kindref="member">inv_tau_m_</ref><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P31_singular<sp/>=<sp/>0.5<sp/>*<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="namespacenest_1_1names_1abc8783c6fe28575368e0ffe2aa531b84" kindref="member">h</ref><sp/>*<sp/><ref refid="classIAFPropagator_1a7cde3156dd3b1f09960712b0b7d8dfca" kindref="member">inv_c_m_</ref><sp/>*<sp/>exp_h_tau;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(<sp/>P31_singular,<sp/>P32<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iaf_propagator.cpp"/>
  </compounddef>
</doxygen>
