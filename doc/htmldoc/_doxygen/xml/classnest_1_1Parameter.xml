<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1Parameter" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::Parameter</compoundname>
    <derivedcompoundref refid="classnest_1_1ComparingParameter" prot="public" virt="non-virtual">nest::ComparingParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ConditionalParameter" prot="public" virt="non-virtual">nest::ConditionalParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ConstantParameter" prot="public" virt="non-virtual">nest::ConstantParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1CosParameter" prot="public" virt="non-virtual">nest::CosParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1DifferenceParameter" prot="public" virt="non-virtual">nest::DifferenceParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1DimensionParameter" prot="public" virt="non-virtual">nest::DimensionParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ExpDistParameter" prot="public" virt="non-virtual">nest::ExpDistParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ExpParameter" prot="public" virt="non-virtual">nest::ExpParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ExponentialParameter" prot="public" virt="non-virtual">nest::ExponentialParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1GammaParameter" prot="public" virt="non-virtual">nest::GammaParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1Gaussian2DParameter" prot="public" virt="non-virtual">nest::Gaussian2DParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1GaussianParameter" prot="public" virt="non-virtual">nest::GaussianParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1LognormalParameter" prot="public" virt="non-virtual">nest::LognormalParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1MaxParameter" prot="public" virt="non-virtual">nest::MaxParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1MinParameter" prot="public" virt="non-virtual">nest::MinParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1NodePosParameter" prot="public" virt="non-virtual">nest::NodePosParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1NormalParameter" prot="public" virt="non-virtual">nest::NormalParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1PowParameter" prot="public" virt="non-virtual">nest::PowParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1ProductParameter" prot="public" virt="non-virtual">nest::ProductParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1QuotientParameter" prot="public" virt="non-virtual">nest::QuotientParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1RedrawParameter" prot="public" virt="non-virtual">nest::RedrawParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1SinParameter" prot="public" virt="non-virtual">nest::SinParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1SpatialDistanceParameter" prot="public" virt="non-virtual">nest::SpatialDistanceParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1SumParameter" prot="public" virt="non-virtual">nest::SumParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1UniformIntParameter" prot="public" virt="non-virtual">nest::UniformIntParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1UniformParameter" prot="public" virt="non-virtual">nest::UniformParameter</derivedcompoundref>
    <includes refid="parameter_8h" local="no">parameter.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1Parameter_1ac20be9081c515b43cc92c7964d316902" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::Parameter::is_spatial_</definition>
        <argsstring></argsstring>
        <name>is_spatial_</name>
        <qualifiedname>nest::Parameter::is_spatial_</qualifiedname>
        <initializer>{ false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="118" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="118" bodyend="-1"/>
        <referencedby refid="classnest_1_1ExpDistParameter_1afc04af8f4fb0ea036bde3713649165be" compoundref="parameter_8h" startline="1273" endline="1279">nest::ExpDistParameter::ExpDistParameter</referencedby>
        <referencedby refid="classnest_1_1Parameter_1a73aaebb7863ec82e848463497631bd88" compoundref="parameter_8h" startline="1463" endline="1466">is_spatial</referencedby>
        <referencedby refid="classnest_1_1MinParameter_1a77080f5b1cefc3fd3015030f8e30eddd" compoundref="parameter_8h" startline="835" endline="841">nest::MinParameter::MinParameter</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1Parameter_1ad3e746702f48606b0b18a86188ff3350" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::Parameter::returns_int_only_</definition>
        <argsstring></argsstring>
        <name>returns_int_only_</name>
        <qualifiedname>nest::Parameter::returns_int_only_</qualifiedname>
        <initializer>{ false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="119" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="119" bodyend="-1"/>
        <referencedby refid="classnest_1_1ConstantParameter_1a6e4c9b7be2d2458d870c0c102f992766" compoundref="parameter_8h" startline="136" endline="140">nest::ConstantParameter::ConstantParameter</referencedby>
        <referencedby refid="classnest_1_1Parameter_1ae333502a77312fc1ba9dcfdd27fc762a" compoundref="parameter_8h" startline="1469" endline="1472">returns_int_only</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1Parameter_1a795d9e3c2ef8e4b2f272377807dc4817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Parameter::Parameter</definition>
        <argsstring>(bool is_spatial=false, bool returns_int_only=false)</argsstring>
        <name>Parameter</name>
        <qualifiedname>nest::Parameter::Parameter</qualifiedname>
        <param>
          <type>bool</type>
          <declname>is_spatial</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>returns_int_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref>, with optionally specified attributes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_spatial</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> contains spatial elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returns_int_only</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the value of the parameter can only be an integer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="56" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1a7c451c0b857c87c3df9c2b2340851556" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Parameter::Parameter</definition>
        <argsstring>(const Parameter &amp;p)=default</argsstring>
        <name>Parameter</name>
        <qualifiedname>nest::Parameter::Parameter</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="65" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1aee3ca93bce135fcb5d8d7f0ec7bd0daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual nest::Parameter::~Parameter</definition>
        <argsstring>()=default</argsstring>
        <name>~Parameter</name>
        <qualifiedname>nest::Parameter::~Parameter</qualifiedname>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="70" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, Node *node)=0</argsstring>
        <name>value</name>
        <qualifiedname>nest::Parameter::value</qualifiedname>
        <reimplementedby refid="classnest_1_1UniformParameter_1a4602c970da96d8f096dbc5744be13505">value</reimplementedby>
        <reimplementedby refid="classnest_1_1UniformIntParameter_1a1eed25de1fb988b83dee028df139e7dd">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExponentialParameter_1a4cc5719841a35760707a69e3048f1b63">value</reimplementedby>
        <reimplementedby refid="classnest_1_1NormalParameter_1af8f84653ced0e1db8f58882f4cc0a5bb">value</reimplementedby>
        <reimplementedby refid="classnest_1_1LognormalParameter_1aae79ab35ee3bbee67c84d21101bb5266">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ProductParameter_1a97a0fd97d746b7459c73b93755b3f32c">value</reimplementedby>
        <reimplementedby refid="classnest_1_1QuotientParameter_1a7d051fec99ee1e8bf3d0ccc43649ebb1">value</reimplementedby>
        <reimplementedby refid="classnest_1_1SumParameter_1a046e7462b4d3c124b398f0e68b7d8705">value</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceParameter_1a700c10d28ef4d69c3c7fdd33cfa62060">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ComparingParameter_1a498d919273a6b700aba7ee3f42efe2ab">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ConditionalParameter_1acc767c958d6414149679307520d0eee6">value</reimplementedby>
        <reimplementedby refid="classnest_1_1MinParameter_1a4e81d90a01b289c5b42da09c96a46d14">value</reimplementedby>
        <reimplementedby refid="classnest_1_1MaxParameter_1a838c7751233ca48ff62bc7507c5b857e">value</reimplementedby>
        <reimplementedby refid="classnest_1_1RedrawParameter_1a55e9b9c6600024de1299c45d2b56bc77">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExpParameter_1a4e047c3931042e4879f8b786999a271e">value</reimplementedby>
        <reimplementedby refid="classnest_1_1SinParameter_1ae1375c94d563abea12dadb97536db68d">value</reimplementedby>
        <reimplementedby refid="classnest_1_1CosParameter_1a2731bef15f400e868fc04cf2bf54485e">value</reimplementedby>
        <reimplementedby refid="classnest_1_1PowParameter_1a188b1ec0eac5ac8b9c47cacebcf78f89">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ConstantParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1UniformParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1UniformIntParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1NormalParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1LognormalParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExponentialParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1DimensionParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExpDistParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GaussianParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1Gaussian2DParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GammaParameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ConstantParameter_1ae266b53161c470d29d58d01506d17b62">value</reimplementedby>
        <reimplementedby refid="classnest_1_1SpatialDistanceParameter_1aebd8cad7d397a59277d98edfbeeb5dad">value</reimplementedby>
        <reimplementedby refid="classnest_1_1DimensionParameter_1aadab771dcc28aed27a17473d473d3d12">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExpDistParameter_1a9a8eb7bd2ea33ff563de7d5ac86fa3a7">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GaussianParameter_1a25b86f9fcdfee3c1a977af650f757db2">value</reimplementedby>
        <reimplementedby refid="classnest_1_1Gaussian2DParameter_1a423a8452c49573251bd9cf87c5a8e65c">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GammaParameter_1a66d7a33c3432e0a7231642576c32c6ed">value</reimplementedby>
        <reimplementedby refid="classnest_1_1NodePosParameter_1a0f6bf9e9a6665087be8dc59eb8598040">value</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when getting a parameter value based on random values or node attributes, like position. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the node, used when the node position is relevant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="80" column="18"/>
        <referencedby refid="classnest_1_1Parameter_1a73d93795275bcb0ba6e59761ab52c928" compoundref="parameter_8cpp" startline="37" endline="79">apply</referencedby>
        <referencedby refid="classnest_1_1Parameter_1a829b6a636dc326bc9ec36765bc245d38" compoundref="parameter_8h" startline="1453" endline="1460">value</referencedby>
        <referencedby refid="classnest_1_1Parameter_1a60666e9ec0de4fb53188f64657217939" compoundref="parameter_8h" startline="1475" endline="1481">value_is_integer_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, const std::vector&lt; double &gt; &amp;source_pos, const std::vector&lt; double &gt; &amp;target_pos, const AbstractLayer &amp;layer, Node *node)</argsstring>
        <name>value</name>
        <qualifiedname>nest::Parameter::value</qualifiedname>
        <reimplementedby refid="classnest_1_1SpatialDistanceParameter_1a1bf5ded85bc2caf6bfc6565c70381414">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ConstantParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1UniformParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1UniformIntParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1NormalParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1LognormalParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExponentialParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1DimensionParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExpDistParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GaussianParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1Gaussian2DParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GammaParameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ProductParameter_1a5325db26865576def3bd16a84f8f8b4b">value</reimplementedby>
        <reimplementedby refid="classnest_1_1QuotientParameter_1ac64d97c211fa74d3a7f6684f2b6fb68b">value</reimplementedby>
        <reimplementedby refid="classnest_1_1SumParameter_1ab0aacf64b830d5a01bc6c95c50455220">value</reimplementedby>
        <reimplementedby refid="classnest_1_1DifferenceParameter_1a4d267c9a69c9970ab5a0b20514484a8d">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ComparingParameter_1a6c4113ebb97a70a698f5e0c8ef92445f">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ConditionalParameter_1a1026c7d51d794ab60cdfb547907161f2">value</reimplementedby>
        <reimplementedby refid="classnest_1_1MinParameter_1a373df3693dc0b89fecd8f1e3550e881f">value</reimplementedby>
        <reimplementedby refid="classnest_1_1MaxParameter_1ad3f4f48666753385201a963f2d01c053">value</reimplementedby>
        <reimplementedby refid="classnest_1_1RedrawParameter_1a4983eca49d905945ce7f10745577ed3f">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExpParameter_1a042b3ff114811da6cd6e6e93f62801b9">value</reimplementedby>
        <reimplementedby refid="classnest_1_1SinParameter_1aa9eb6b49cda7fd56b5a6e4332f8f1404">value</reimplementedby>
        <reimplementedby refid="classnest_1_1CosParameter_1a8848b19a1e11f8abb5baeeadb5db24ee">value</reimplementedby>
        <reimplementedby refid="classnest_1_1PowParameter_1ae3ab39929d77b20f30e2db5d5ea9fba2">value</reimplementedby>
        <reimplementedby refid="classnest_1_1ExpDistParameter_1af51fded6bb8f1ad39f7bae059b1be460">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GaussianParameter_1a34dd2690d1a28754ebd4017e6b3009de">value</reimplementedby>
        <reimplementedby refid="classnest_1_1Gaussian2DParameter_1a4bf26445481f384cd750d2858c4481b2">value</reimplementedby>
        <reimplementedby refid="classnest_1_1GammaParameter_1a222cded64dd04737ce5e5cf92279a53f">value</reimplementedby>
        <reimplementedby refid="classnest_1_1NodePosParameter_1ac76214a92606735367ef6d6a9080e27d">value</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>source_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>target_pos</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1AbstractLayer" kindref="compound">AbstractLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when connecting spatial nodes. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the target node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>spatial layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>target node, required for normal and lognormal parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="93" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1453" bodyend="1460"/>
        <references refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1a73d93795275bcb0ba6e59761ab52c928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::Parameter::apply</definition>
        <argsstring>(const NodeCollectionPTR &amp;, const TokenArray &amp;)</argsstring>
        <name>apply</name>
        <qualifiedname>nest::Parameter::apply</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref> &amp;</type>
          <defname>nc</defname>
        </param>
        <param>
          <type>const <ref refid="classTokenArray" kindref="compound">TokenArray</ref> &amp;</type>
          <defname>token_array</defname>
        </param>
        <briefdescription>
<para>Applies a parameter on a single-node ID <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> and given array of positions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>array of result values, one per position in the <ref refid="classTokenArray" kindref="compound">TokenArray</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="103" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="37" bodyend="79"/>
        <references refid="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" compoundref="nest_8cpp" startline="84" endline="87">nest::get_rank_synced_rng</references>
        <references refid="classTokenArray_1ad6bd1a13ab4eae2de7c05e311a3c4207" compoundref="tokenarray_8h" startline="159" endline="162">TokenArray::size</references>
        <references refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1a73aaebb7863ec82e848463497631bd88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Parameter::is_spatial</definition>
        <argsstring>() const</argsstring>
        <name>is_spatial</name>
        <qualifiedname>nest::Parameter::is_spatial</qualifiedname>
        <briefdescription>
<para>Check if the <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> is based on spatial properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> is based on spatial properties, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="109" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1463" bodyend="1466"/>
        <references refid="classnest_1_1Parameter_1ac20be9081c515b43cc92c7964d316902" compoundref="parameter_8h" startline="118">is_spatial_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Parameter_1ae333502a77312fc1ba9dcfdd27fc762a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Parameter::returns_int_only</definition>
        <argsstring>() const</argsstring>
        <name>returns_int_only</name>
        <qualifiedname>nest::Parameter::returns_int_only</qualifiedname>
        <briefdescription>
<para>Check if the <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> only returns integer values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> only returns integers, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="115" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1469" bodyend="1472"/>
        <references refid="classnest_1_1Parameter_1ad3e746702f48606b0b18a86188ff3350" compoundref="parameter_8h" startline="119">returns_int_only_</references>
        <referencedby refid="classnest_1_1ParameterConnParameterWrapper_1abe345a09fed4fb24ebd01ae4ec395cd0" compoundref="conn__parameter_8h" startline="419" endline="422">nest::ParameterConnParameterWrapper::provides_long</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1Parameter_1a60666e9ec0de4fb53188f64657217939" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Parameter::value_is_integer_</definition>
        <argsstring>(const double value) const</argsstring>
        <name>value_is_integer_</name>
        <qualifiedname>nest::Parameter::value_is_integer_</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="121" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1475" bodyend="1481"/>
        <references refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</references>
        <referencedby refid="classnest_1_1ConstantParameter_1a6e4c9b7be2d2458d870c0c102f992766" compoundref="parameter_8h" startline="136" endline="140">nest::ConstantParameter::ConstantParameter</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base class for parameters. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ComparingParameter</label>
        <link refid="classnest_1_1ComparingParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::ConditionalParameter</label>
        <link refid="classnest_1_1ConditionalParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::ConstantParameter</label>
        <link refid="classnest_1_1ConstantParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::CosParameter</label>
        <link refid="classnest_1_1CosParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::DifferenceParameter</label>
        <link refid="classnest_1_1DifferenceParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::DimensionParameter</label>
        <link refid="classnest_1_1DimensionParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::ExpDistParameter</label>
        <link refid="classnest_1_1ExpDistParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>nest::ExpParameter</label>
        <link refid="classnest_1_1ExpParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>nest::ExponentialParameter</label>
        <link refid="classnest_1_1ExponentialParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>nest::GammaParameter</label>
        <link refid="classnest_1_1GammaParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>nest::Gaussian2DParameter</label>
        <link refid="classnest_1_1Gaussian2DParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>nest::GaussianParameter</label>
        <link refid="classnest_1_1GaussianParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>nest::LognormalParameter</label>
        <link refid="classnest_1_1LognormalParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>nest::MaxParameter</label>
        <link refid="classnest_1_1MaxParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>nest::MinParameter</label>
        <link refid="classnest_1_1MinParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>nest::NodePosParameter</label>
        <link refid="classnest_1_1NodePosParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>nest::NormalParameter</label>
        <link refid="classnest_1_1NormalParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1Parameter"/>
      </node>
      <node id="19">
        <label>nest::PowParameter</label>
        <link refid="classnest_1_1PowParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>nest::ProductParameter</label>
        <link refid="classnest_1_1ProductParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>nest::QuotientParameter</label>
        <link refid="classnest_1_1QuotientParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>nest::RedrawParameter</label>
        <link refid="classnest_1_1RedrawParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>nest::SinParameter</label>
        <link refid="classnest_1_1SinParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>nest::SpatialDistanceParameter</label>
        <link refid="classnest_1_1SpatialDistanceParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>nest::SumParameter</label>
        <link refid="classnest_1_1SumParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>nest::UniformIntParameter</label>
        <link refid="classnest_1_1UniformIntParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>nest::UniformParameter</label>
        <link refid="classnest_1_1UniformParameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="48" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="49" bodyend="122"/>
    <listofallmembers>
      <member refid="classnest_1_1Parameter_1a73d93795275bcb0ba6e59761ab52c928" prot="public" virt="non-virtual"><scope>nest::Parameter</scope><name>apply</name></member>
      <member refid="classnest_1_1Parameter_1a73aaebb7863ec82e848463497631bd88" prot="public" virt="non-virtual"><scope>nest::Parameter</scope><name>is_spatial</name></member>
      <member refid="classnest_1_1Parameter_1ac20be9081c515b43cc92c7964d316902" prot="protected" virt="non-virtual"><scope>nest::Parameter</scope><name>is_spatial_</name></member>
      <member refid="classnest_1_1Parameter_1a795d9e3c2ef8e4b2f272377807dc4817" prot="public" virt="non-virtual"><scope>nest::Parameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1Parameter_1a7c451c0b857c87c3df9c2b2340851556" prot="public" virt="non-virtual"><scope>nest::Parameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1Parameter_1ae333502a77312fc1ba9dcfdd27fc762a" prot="public" virt="non-virtual"><scope>nest::Parameter</scope><name>returns_int_only</name></member>
      <member refid="classnest_1_1Parameter_1ad3e746702f48606b0b18a86188ff3350" prot="protected" virt="non-virtual"><scope>nest::Parameter</scope><name>returns_int_only_</name></member>
      <member refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" virt="pure-virtual"><scope>nest::Parameter</scope><name>value</name></member>
      <member refid="classnest_1_1Parameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" virt="virtual"><scope>nest::Parameter</scope><name>value</name></member>
      <member refid="classnest_1_1Parameter_1a60666e9ec0de4fb53188f64657217939" prot="protected" virt="non-virtual"><scope>nest::Parameter</scope><name>value_is_integer_</name></member>
      <member refid="classnest_1_1Parameter_1aee3ca93bce135fcb5d8d7f0ec7bd0daf" prot="public" virt="virtual"><scope>nest::Parameter</scope><name>~Parameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
