<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="namespacenest" kind="namespace" language="C++">
    <compoundname>nest</compoundname>
    <innerclass refid="classnest_1_1AbstractLayer" prot="public">nest::AbstractLayer</innerclass>
    <innerclass refid="classnest_1_1AbstractMask" prot="public">nest::AbstractMask</innerclass>
    <innerclass refid="classnest_1_1ac__generator" prot="public">nest::ac_generator</innerclass>
    <innerclass refid="classnest_1_1AllMask" prot="public">nest::AllMask</innerclass>
    <innerclass refid="classnest_1_1AllToAllBuilder" prot="public">nest::AllToAllBuilder</innerclass>
    <innerclass refid="classnest_1_1amat2__psc__exp" prot="public">nest::amat2_psc_exp</innerclass>
    <innerclass refid="classnest_1_1AMPA" prot="public">nest::AMPA</innerclass>
    <innerclass refid="classnest_1_1AMPA__NMDA" prot="public">nest::AMPA_NMDA</innerclass>
    <innerclass refid="classnest_1_1AnchoredMask" prot="public">nest::AnchoredMask</innerclass>
    <innerclass refid="classnest_1_1ArchivingNode" prot="public">nest::ArchivingNode</innerclass>
    <innerclass refid="classnest_1_1ArrayDoubleParameter" prot="public">nest::ArrayDoubleParameter</innerclass>
    <innerclass refid="classnest_1_1ArrayIntegerParameter" prot="public">nest::ArrayIntegerParameter</innerclass>
    <innerclass refid="structnest_1_1AssignedRanks" prot="public">nest::AssignedRanks</innerclass>
    <innerclass refid="classnest_1_1BackendNotPrepared" prot="public">nest::BackendNotPrepared</innerclass>
    <innerclass refid="classnest_1_1BackendPrepared" prot="public">nest::BackendPrepared</innerclass>
    <innerclass refid="classnest_1_1BadDelay" prot="public">nest::BadDelay</innerclass>
    <innerclass refid="classnest_1_1BadParameter" prot="public">nest::BadParameter</innerclass>
    <innerclass refid="classnest_1_1BadProperty" prot="public">nest::BadProperty</innerclass>
    <innerclass refid="classnest_1_1BallMask" prot="public">nest::BallMask</innerclass>
    <innerclass refid="classnest_1_1BaseRandomGenerator" prot="public">nest::BaseRandomGenerator</innerclass>
    <innerclass refid="classnest_1_1BaseRandomGeneratorFactory" prot="public">nest::BaseRandomGeneratorFactory</innerclass>
    <innerclass refid="classnest_1_1bernoulli__synapse" prot="public">nest::bernoulli_synapse</innerclass>
    <innerclass refid="classnest_1_1BernoulliBuilder" prot="public">nest::BernoulliBuilder</innerclass>
    <innerclass refid="classnest_1_1binary__neuron" prot="public">nest::binary_neuron</innerclass>
    <innerclass refid="classnest_1_1BoolIndicatorUInt64" prot="public">nest::BoolIndicatorUInt64</innerclass>
    <innerclass refid="structnest_1_1Box" prot="public">nest::Box</innerclass>
    <innerclass refid="classnest_1_1BoxMask" prot="public">nest::BoxMask</innerclass>
    <innerclass refid="classnest_1_1clopath__synapse" prot="public">nest::clopath_synapse</innerclass>
    <innerclass refid="classnest_1_1ClopathArchivingNode" prot="public">nest::ClopathArchivingNode</innerclass>
    <innerclass refid="classnest_1_1cm__default" prot="public">nest::cm_default</innerclass>
    <innerclass refid="classnest_1_1CommonPropertiesHomW" prot="public">nest::CommonPropertiesHomW</innerclass>
    <innerclass refid="classnest_1_1CommonSynapseProperties" prot="public">nest::CommonSynapseProperties</innerclass>
    <innerclass refid="classnest_1_1ComparingParameter" prot="public">nest::ComparingParameter</innerclass>
    <innerclass refid="classnest_1_1Compartment" prot="public">nest::Compartment</innerclass>
    <innerclass refid="classnest_1_1CompartmentCurrents" prot="public">nest::CompartmentCurrents</innerclass>
    <innerclass refid="classnest_1_1CompTree" prot="public">nest::CompTree</innerclass>
    <innerclass refid="classnest_1_1ConditionalParameter" prot="public">nest::ConditionalParameter</innerclass>
    <innerclass refid="classnest_1_1ConductanceEvent" prot="public">nest::ConductanceEvent</innerclass>
    <innerclass refid="classnest_1_1ConnBuilder" prot="public">nest::ConnBuilder</innerclass>
    <innerclass refid="classnest_1_1ConnBuilderFactory" prot="public">nest::ConnBuilderFactory</innerclass>
    <innerclass refid="classnest_1_1Connection" prot="public">nest::Connection</innerclass>
    <innerclass refid="classnest_1_1ConnectionCreator" prot="public">nest::ConnectionCreator</innerclass>
    <innerclass refid="classnest_1_1ConnectionID" prot="public">nest::ConnectionID</innerclass>
    <innerclass refid="classnest_1_1ConnectionLabel" prot="public">nest::ConnectionLabel</innerclass>
    <innerclass refid="classnest_1_1ConnectionManager" prot="public">nest::ConnectionManager</innerclass>
    <innerclass refid="classnest_1_1Connector" prot="public">nest::Connector</innerclass>
    <innerclass refid="classnest_1_1ConnectorBase" prot="public">nest::ConnectorBase</innerclass>
    <innerclass refid="classnest_1_1ConnectorModel" prot="public">nest::ConnectorModel</innerclass>
    <innerclass refid="classnest_1_1ConnParameter" prot="public">nest::ConnParameter</innerclass>
    <innerclass refid="classnest_1_1ConnTestDummyNodeBase" prot="public">nest::ConnTestDummyNodeBase</innerclass>
    <innerclass refid="classnest_1_1ConstantParameter" prot="public">nest::ConstantParameter</innerclass>
    <innerclass refid="classnest_1_1cont__delay__synapse" prot="public">nest::cont_delay_synapse</innerclass>
    <innerclass refid="classnest_1_1ConverseMask" prot="public">nest::ConverseMask</innerclass>
    <innerclass refid="classnest_1_1correlation__detector" prot="public">nest::correlation_detector</innerclass>
    <innerclass refid="classnest_1_1correlomatrix__detector" prot="public">nest::correlomatrix_detector</innerclass>
    <innerclass refid="classnest_1_1correlospinmatrix__detector" prot="public">nest::correlospinmatrix_detector</innerclass>
    <innerclass refid="classnest_1_1CosParameter" prot="public">nest::CosParameter</innerclass>
    <innerclass refid="classnest_1_1CurrentEvent" prot="public">nest::CurrentEvent</innerclass>
    <innerclass refid="classnest_1_1DataAccessFunctor" prot="public">nest::DataAccessFunctor</innerclass>
    <innerclass refid="classnest_1_1DataEvent" prot="public">nest::DataEvent</innerclass>
    <innerclass refid="classnest_1_1DataLoggingReply" prot="public">nest::DataLoggingReply</innerclass>
    <innerclass refid="classnest_1_1DataLoggingRequest" prot="public">nest::DataLoggingRequest</innerclass>
    <innerclass refid="classnest_1_1DataSecondaryEvent" prot="public">nest::DataSecondaryEvent</innerclass>
    <innerclass refid="classnest_1_1dc__generator" prot="public">nest::dc_generator</innerclass>
    <innerclass refid="classnest_1_1DelayChecker" prot="public">nest::DelayChecker</innerclass>
    <innerclass refid="classnest_1_1DelayedRateConnectionEvent" prot="public">nest::DelayedRateConnectionEvent</innerclass>
    <innerclass refid="classnest_1_1DeprecationWarning" prot="public">nest::DeprecationWarning</innerclass>
    <innerclass refid="classnest_1_1Device" prot="public">nest::Device</innerclass>
    <innerclass refid="classnest_1_1DeviceNode" prot="public">nest::DeviceNode</innerclass>
    <innerclass refid="classnest_1_1DifferenceMask" prot="public">nest::DifferenceMask</innerclass>
    <innerclass refid="classnest_1_1DifferenceParameter" prot="public">nest::DifferenceParameter</innerclass>
    <innerclass refid="classnest_1_1DiffusionConnection" prot="public">nest::DiffusionConnection</innerclass>
    <innerclass refid="classnest_1_1DiffusionConnectionEvent" prot="public">nest::DiffusionConnectionEvent</innerclass>
    <innerclass refid="classnest_1_1DimensionMismatch" prot="public">nest::DimensionMismatch</innerclass>
    <innerclass refid="classnest_1_1DimensionParameter" prot="public">nest::DimensionParameter</innerclass>
    <innerclass refid="classnest_1_1DistributionError" prot="public">nest::DistributionError</innerclass>
    <innerclass refid="classnest_1_1DoubleDataEvent" prot="public">nest::DoubleDataEvent</innerclass>
    <innerclass refid="classnest_1_1DSCurrentEvent" prot="public">nest::DSCurrentEvent</innerclass>
    <innerclass refid="classnest_1_1DSSpikeEvent" prot="public">nest::DSSpikeEvent</innerclass>
    <innerclass refid="classnest_1_1DynamicRecordablesMap" prot="public">nest::DynamicRecordablesMap</innerclass>
    <innerclass refid="classnest_1_1EllipseMask" prot="public">nest::EllipseMask</innerclass>
    <innerclass refid="structnest_1_1EnableBitMaskOperators" prot="public">nest::EnableBitMaskOperators</innerclass>
    <innerclass refid="structnest_1_1EnableBitMaskOperators_3_01RegisterConnectionModelFlags_01_4" prot="public">nest::EnableBitMaskOperators&lt; RegisterConnectionModelFlags &gt;</innerclass>
    <innerclass refid="classnest_1_1Event" prot="public">nest::Event</innerclass>
    <innerclass refid="classnest_1_1EventDeliveryManager" prot="public">nest::EventDeliveryManager</innerclass>
    <innerclass refid="classnest_1_1ExpDistParameter" prot="public">nest::ExpDistParameter</innerclass>
    <innerclass refid="classnest_1_1ExponentialParameter" prot="public">nest::ExponentialParameter</innerclass>
    <innerclass refid="classnest_1_1ExpParameter" prot="public">nest::ExpParameter</innerclass>
    <innerclass refid="classnest_1_1FixedInDegreeBuilder" prot="public">nest::FixedInDegreeBuilder</innerclass>
    <innerclass refid="classnest_1_1FixedOutDegreeBuilder" prot="public">nest::FixedOutDegreeBuilder</innerclass>
    <innerclass refid="classnest_1_1FixedTotalNumberBuilder" prot="public">nest::FixedTotalNumberBuilder</innerclass>
    <innerclass refid="classnest_1_1FreeLayer" prot="public">nest::FreeLayer</innerclass>
    <innerclass refid="classnest_1_1GABA" prot="public">nest::GABA</innerclass>
    <innerclass refid="classnest_1_1gainfunction__erfc" prot="public">nest::gainfunction_erfc</innerclass>
    <innerclass refid="classnest_1_1gainfunction__ginzburg" prot="public">nest::gainfunction_ginzburg</innerclass>
    <innerclass refid="classnest_1_1gainfunction__mcculloch__pitts" prot="public">nest::gainfunction_mcculloch_pitts</innerclass>
    <innerclass refid="classnest_1_1gamma__sup__generator" prot="public">nest::gamma_sup_generator</innerclass>
    <innerclass refid="classnest_1_1GammaParameter" prot="public">nest::GammaParameter</innerclass>
    <innerclass refid="classnest_1_1GapJunction" prot="public">nest::GapJunction</innerclass>
    <innerclass refid="classnest_1_1GapJunctionEvent" prot="public">nest::GapJunctionEvent</innerclass>
    <innerclass refid="classnest_1_1Gaussian2DParameter" prot="public">nest::Gaussian2DParameter</innerclass>
    <innerclass refid="classnest_1_1GaussianParameter" prot="public">nest::GaussianParameter</innerclass>
    <innerclass refid="classnest_1_1GenericConnBuilderFactory" prot="public">nest::GenericConnBuilderFactory</innerclass>
    <innerclass refid="classnest_1_1GenericConnectorModel" prot="public">nest::GenericConnectorModel</innerclass>
    <innerclass refid="classnest_1_1GenericFactory" prot="public">nest::GenericFactory</innerclass>
    <innerclass refid="classnest_1_1GenericGrowthCurveFactory" prot="public">nest::GenericGrowthCurveFactory</innerclass>
    <innerclass refid="classnest_1_1GenericModel" prot="public">nest::GenericModel</innerclass>
    <innerclass refid="classnest_1_1GenericSecondaryConnectorModel" prot="public">nest::GenericSecondaryConnectorModel</innerclass>
    <innerclass refid="classnest_1_1gif__psc__exp" prot="public">nest::gif_psc_exp</innerclass>
    <innerclass refid="classnest_1_1gif__psc__exp__multisynapse" prot="public">nest::gif_psc_exp_multisynapse</innerclass>
    <innerclass refid="classnest_1_1glif__psc" prot="public">nest::glif_psc</innerclass>
    <innerclass refid="classnest_1_1GridLayer" prot="public">nest::GridLayer</innerclass>
    <innerclass refid="classnest_1_1GridMask" prot="public">nest::GridMask</innerclass>
    <innerclass refid="classnest_1_1GrowthCurve" prot="public">nest::GrowthCurve</innerclass>
    <innerclass refid="classnest_1_1GrowthCurveFactory" prot="public">nest::GrowthCurveFactory</innerclass>
    <innerclass refid="classnest_1_1GrowthCurveGaussian" prot="public">nest::GrowthCurveGaussian</innerclass>
    <innerclass refid="classnest_1_1GrowthCurveLinear" prot="public">nest::GrowthCurveLinear</innerclass>
    <innerclass refid="classnest_1_1GrowthCurveSigmoid" prot="public">nest::GrowthCurveSigmoid</innerclass>
    <innerclass refid="classnest_1_1GSLSolverFailure" prot="public">nest::GSLSolverFailure</innerclass>
    <innerclass refid="classnest_1_1histentry" prot="public">nest::histentry</innerclass>
    <innerclass refid="classnest_1_1histentry__extended" prot="public">nest::histentry_extended</innerclass>
    <innerclass refid="classnest_1_1ht__synapse" prot="public">nest::ht_synapse</innerclass>
    <innerclass refid="classnest_1_1iaf__chs__2007" prot="public">nest::iaf_chs_2007</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__alpha" prot="public">nest::iaf_psc_alpha</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__alpha__multisynapse" prot="public">nest::iaf_psc_alpha_multisynapse</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__alpha__ps" prot="public">nest::iaf_psc_alpha_ps</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__delta" prot="public">nest::iaf_psc_delta</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__delta__ps" prot="public">nest::iaf_psc_delta_ps</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__exp" prot="public">nest::iaf_psc_exp</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__exp__htum" prot="public">nest::iaf_psc_exp_htum</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__exp__multisynapse" prot="public">nest::iaf_psc_exp_multisynapse</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__exp__ps" prot="public">nest::iaf_psc_exp_ps</innerclass>
    <innerclass refid="classnest_1_1iaf__psc__exp__ps__lossless" prot="public">nest::iaf_psc_exp_ps_lossless</innerclass>
    <innerclass refid="classnest_1_1IllegalConnection" prot="public">nest::IllegalConnection</innerclass>
    <innerclass refid="classnest_1_1IncompatibleReceptorType" prot="public">nest::IncompatibleReceptorType</innerclass>
    <innerclass refid="classnest_1_1InexistentConnection" prot="public">nest::InexistentConnection</innerclass>
    <innerclass refid="classnest_1_1inhomogeneous__poisson__generator" prot="public">nest::inhomogeneous_poisson_generator</innerclass>
    <innerclass refid="classnest_1_1InstantaneousRateConnectionEvent" prot="public">nest::InstantaneousRateConnectionEvent</innerclass>
    <innerclass refid="classnest_1_1InternalError" prot="public">nest::InternalError</innerclass>
    <innerclass refid="classnest_1_1IntersectionMask" prot="public">nest::IntersectionMask</innerclass>
    <innerclass refid="classnest_1_1InvalidDefaultResolution" prot="public">nest::InvalidDefaultResolution</innerclass>
    <innerclass refid="classnest_1_1InvalidTimeInModel" prot="public">nest::InvalidTimeInModel</innerclass>
    <innerclass refid="classnest_1_1IOManager" prot="public">nest::IOManager</innerclass>
    <innerclass refid="classnest_1_1izhikevich" prot="public">nest::izhikevich</innerclass>
    <innerclass refid="classnest_1_1jonke__synapse" prot="public">nest::jonke_synapse</innerclass>
    <innerclass refid="classnest_1_1JonkeCommonProperties" prot="public">nest::JonkeCommonProperties</innerclass>
    <innerclass refid="classnest_1_1K" prot="public">nest::K</innerclass>
    <innerclass refid="classnest_1_1KernelException" prot="public">nest::KernelException</innerclass>
    <innerclass refid="classnest_1_1KernelManager" prot="public">nest::KernelManager</innerclass>
    <innerclass refid="classnest_1_1KeyError" prot="public">nest::KeyError</innerclass>
    <innerclass refid="classnest_1_1Layer" prot="public">nest::Layer</innerclass>
    <innerclass refid="classnest_1_1LayerExpected" prot="public">nest::LayerExpected</innerclass>
    <innerclass refid="classnest_1_1LayerMetadata" prot="public">nest::LayerMetadata</innerclass>
    <innerclass refid="classnest_1_1LayerNodeExpected" prot="public">nest::LayerNodeExpected</innerclass>
    <innerclass refid="classnest_1_1ListRingBuffer" prot="public">nest::ListRingBuffer</innerclass>
    <innerclass refid="classnest_1_1LocalNodeExpected" prot="public">nest::LocalNodeExpected</innerclass>
    <innerclass refid="classnest_1_1LoggingEvent" prot="public">nest::LoggingEvent</innerclass>
    <innerclass refid="classnest_1_1LoggingManager" prot="public">nest::LoggingManager</innerclass>
    <innerclass refid="classnest_1_1LognormalParameter" prot="public">nest::LognormalParameter</innerclass>
    <innerclass refid="classnest_1_1ManagerInterface" prot="public">nest::ManagerInterface</innerclass>
    <innerclass refid="classnest_1_1Mask" prot="public">nest::Mask</innerclass>
    <innerclass refid="classnest_1_1MaskedLayer" prot="public">nest::MaskedLayer</innerclass>
    <innerclass refid="classnest_1_1mat2__psc__exp" prot="public">nest::mat2_psc_exp</innerclass>
    <innerclass refid="classnest_1_1MaxParameter" prot="public">nest::MaxParameter</innerclass>
    <innerclass refid="classnest_1_1MinParameter" prot="public">nest::MinParameter</innerclass>
    <innerclass refid="classnest_1_1mip__generator" prot="public">nest::mip_generator</innerclass>
    <innerclass refid="classnest_1_1Model" prot="public">nest::Model</innerclass>
    <innerclass refid="classnest_1_1ModelInUse" prot="public">nest::ModelInUse</innerclass>
    <innerclass refid="classnest_1_1ModelManager" prot="public">nest::ModelManager</innerclass>
    <innerclass refid="classnest_1_1modelrange" prot="public">nest::modelrange</innerclass>
    <innerclass refid="classnest_1_1ModelRangeManager" prot="public">nest::ModelRangeManager</innerclass>
    <innerclass refid="classnest_1_1ModelsModule" prot="public">nest::ModelsModule</innerclass>
    <innerclass refid="classnest_1_1MPIManager" prot="public">nest::MPIManager</innerclass>
    <innerclass refid="classnest_1_1MultiChannelInputBuffer" prot="public">nest::MultiChannelInputBuffer</innerclass>
    <innerclass refid="classnest_1_1MultiIndex" prot="public">nest::MultiIndex</innerclass>
    <innerclass refid="classnest_1_1multimeter" prot="public">nest::multimeter</innerclass>
    <innerclass refid="classnest_1_1MultRBuffer" prot="public">nest::MultRBuffer</innerclass>
    <innerclass refid="classnest_1_1MUSICManager" prot="public">nest::MUSICManager</innerclass>
    <innerclass refid="classnest_1_1Na" prot="public">nest::Na</innerclass>
    <innerclass refid="classnest_1_1nc__const__iterator" prot="public">nest::nc_const_iterator</innerclass>
    <innerclass refid="classnest_1_1NestModule" prot="public">nest::NestModule</innerclass>
    <innerclass refid="classnest_1_1NewModelNameExists" prot="public">nest::NewModelNameExists</innerclass>
    <innerclass refid="classnest_1_1NMDA" prot="public">nest::NMDA</innerclass>
    <innerclass refid="classnest_1_1Node" prot="public">nest::Node</innerclass>
    <innerclass refid="classnest_1_1NodeCollection" prot="public">nest::NodeCollection</innerclass>
    <innerclass refid="classnest_1_1NodeCollectionComposite" prot="public">nest::NodeCollectionComposite</innerclass>
    <innerclass refid="classnest_1_1NodeCollectionMetadata" prot="public">nest::NodeCollectionMetadata</innerclass>
    <innerclass refid="classnest_1_1NodeCollectionPrimitive" prot="public">nest::NodeCollectionPrimitive</innerclass>
    <innerclass refid="classnest_1_1NodeIDTriple" prot="public">nest::NodeIDTriple</innerclass>
    <innerclass refid="classnest_1_1NodeManager" prot="public">nest::NodeManager</innerclass>
    <innerclass refid="classnest_1_1NodePosParameter" prot="public">nest::NodePosParameter</innerclass>
    <innerclass refid="classnest_1_1NodeWithProxiesExpected" prot="public">nest::NodeWithProxiesExpected</innerclass>
    <innerclass refid="classnest_1_1noise__generator" prot="public">nest::noise_generator</innerclass>
    <innerclass refid="classnest_1_1nonlinearities__gauss__rate" prot="public">nest::nonlinearities_gauss_rate</innerclass>
    <innerclass refid="classnest_1_1nonlinearities__lin__rate" prot="public">nest::nonlinearities_lin_rate</innerclass>
    <innerclass refid="classnest_1_1nonlinearities__sigmoid__rate" prot="public">nest::nonlinearities_sigmoid_rate</innerclass>
    <innerclass refid="classnest_1_1nonlinearities__sigmoid__rate__gg__1998" prot="public">nest::nonlinearities_sigmoid_rate_gg_1998</innerclass>
    <innerclass refid="classnest_1_1nonlinearities__tanh__rate" prot="public">nest::nonlinearities_tanh_rate</innerclass>
    <innerclass refid="classnest_1_1nonlinearities__threshold__lin__rate" prot="public">nest::nonlinearities_threshold_lin_rate</innerclass>
    <innerclass refid="classnest_1_1NormalParameter" prot="public">nest::NormalParameter</innerclass>
    <innerclass refid="classnest_1_1NoThreadSiblingsAvailable" prot="public">nest::NoThreadSiblingsAvailable</innerclass>
    <innerclass refid="classnest_1_1Ntree" prot="public">nest::Ntree</innerclass>
    <innerclass refid="classnest_1_1NumericalInstability" prot="public">nest::NumericalInstability</innerclass>
    <innerclass refid="classnest_1_1OffGridSpikeData" prot="public">nest::OffGridSpikeData</innerclass>
    <innerclass refid="classnest_1_1OffGridTarget" prot="public">nest::OffGridTarget</innerclass>
    <innerclass refid="classnest_1_1OneToOneBuilder" prot="public">nest::OneToOneBuilder</innerclass>
    <innerclass refid="classnest_1_1Parameter" prot="public">nest::Parameter</innerclass>
    <innerclass refid="classnest_1_1ParameterConnParameterWrapper" prot="public">nest::ParameterConnParameterWrapper</innerclass>
    <innerclass refid="classnest_1_1parrot__neuron" prot="public">nest::parrot_neuron</innerclass>
    <innerclass refid="classnest_1_1parrot__neuron__ps" prot="public">nest::parrot_neuron_ps</innerclass>
    <innerclass refid="classnest_1_1PerThreadBoolIndicator" prot="public">nest::PerThreadBoolIndicator</innerclass>
    <innerclass refid="classnest_1_1poisson__generator" prot="public">nest::poisson_generator</innerclass>
    <innerclass refid="classnest_1_1poisson__generator__ps" prot="public">nest::poisson_generator_ps</innerclass>
    <innerclass refid="classnest_1_1Position" prot="public">nest::Position</innerclass>
    <innerclass refid="classnest_1_1PowParameter" prot="public">nest::PowParameter</innerclass>
    <innerclass refid="classnest_1_1pp__psc__delta" prot="public">nest::pp_psc_delta</innerclass>
    <innerclass refid="classnest_1_1ppd__sup__generator" prot="public">nest::ppd_sup_generator</innerclass>
    <innerclass refid="structnest_1_1PrimitiveSortObject" prot="public">nest::PrimitiveSortObject</innerclass>
    <innerclass refid="classnest_1_1ProductParameter" prot="public">nest::ProductParameter</innerclass>
    <innerclass refid="classnest_1_1proxynode" prot="public">nest::proxynode</innerclass>
    <innerclass refid="classnest_1_1PseudoRecordingDevice" prot="public">nest::PseudoRecordingDevice</innerclass>
    <innerclass refid="classnest_1_1pulsepacket__generator" prot="public">nest::pulsepacket_generator</innerclass>
    <innerclass refid="classnest_1_1quantal__stp__synapse" prot="public">nest::quantal_stp_synapse</innerclass>
    <innerclass refid="classnest_1_1QuotientParameter" prot="public">nest::QuotientParameter</innerclass>
    <innerclass refid="classnest_1_1RandomDistribution" prot="public">nest::RandomDistribution</innerclass>
    <innerclass refid="classnest_1_1RandomGenerator" prot="public">nest::RandomGenerator</innerclass>
    <innerclass refid="classnest_1_1RandomGeneratorFactory" prot="public">nest::RandomGeneratorFactory</innerclass>
    <innerclass refid="classnest_1_1RandomManager" prot="public">nest::RandomManager</innerclass>
    <innerclass refid="classnest_1_1rate__neuron__ipn" prot="public">nest::rate_neuron_ipn</innerclass>
    <innerclass refid="classnest_1_1rate__neuron__opn" prot="public">nest::rate_neuron_opn</innerclass>
    <innerclass refid="classnest_1_1rate__transformer__node" prot="public">nest::rate_transformer_node</innerclass>
    <innerclass refid="classnest_1_1RateConnectionDelayed" prot="public">nest::RateConnectionDelayed</innerclass>
    <innerclass refid="classnest_1_1RateConnectionInstantaneous" prot="public">nest::RateConnectionInstantaneous</innerclass>
    <innerclass refid="classnest_1_1RateEvent" prot="public">nest::RateEvent</innerclass>
    <innerclass refid="classnest_1_1RecordablesMap" prot="public">nest::RecordablesMap</innerclass>
    <innerclass refid="classnest_1_1RecordingBackend" prot="public">nest::RecordingBackend</innerclass>
    <innerclass refid="classnest_1_1RecordingBackendASCII" prot="public">nest::RecordingBackendASCII</innerclass>
    <innerclass refid="classnest_1_1RecordingBackendMemory" prot="public">nest::RecordingBackendMemory</innerclass>
    <innerclass refid="classnest_1_1RecordingBackendMPI" prot="public">nest::RecordingBackendMPI</innerclass>
    <innerclass refid="classnest_1_1RecordingBackendScreen" prot="public">nest::RecordingBackendScreen</innerclass>
    <innerclass refid="classnest_1_1RecordingBackendSIONlib" prot="public">nest::RecordingBackendSIONlib</innerclass>
    <innerclass refid="classnest_1_1RecordingDevice" prot="public">nest::RecordingDevice</innerclass>
    <innerclass refid="classnest_1_1RedrawParameter" prot="public">nest::RedrawParameter</innerclass>
    <innerclass refid="classnest_1_1RingBuffer" prot="public">nest::RingBuffer</innerclass>
    <innerclass refid="classnest_1_1ScalarDoubleParameter" prot="public">nest::ScalarDoubleParameter</innerclass>
    <innerclass refid="classnest_1_1ScalarIntegerParameter" prot="public">nest::ScalarIntegerParameter</innerclass>
    <innerclass refid="classnest_1_1SecondaryEvent" prot="public">nest::SecondaryEvent</innerclass>
    <innerclass refid="classnest_1_1SecondaryTargetDataFields" prot="public">nest::SecondaryTargetDataFields</innerclass>
    <innerclass refid="classnest_1_1SendBufferPosition" prot="public">nest::SendBufferPosition</innerclass>
    <innerclass refid="classnest_1_1SimulationManager" prot="public">nest::SimulationManager</innerclass>
    <innerclass refid="classnest_1_1SinParameter" prot="public">nest::SinParameter</innerclass>
    <innerclass refid="classnest_1_1sinusoidal__poisson__generator" prot="public">nest::sinusoidal_poisson_generator</innerclass>
    <innerclass refid="classnest_1_1SliceRingBuffer" prot="public">nest::SliceRingBuffer</innerclass>
    <innerclass refid="classnest_1_1Source" prot="public">nest::Source</innerclass>
    <innerclass refid="classnest_1_1SourceTable" prot="public">nest::SourceTable</innerclass>
    <innerclass refid="structnest_1_1SourceTablePosition" prot="public">nest::SourceTablePosition</innerclass>
    <innerclass refid="classnest_1_1SparseNodeArray" prot="public">nest::SparseNodeArray</innerclass>
    <innerclass refid="classnest_1_1SpatialDistanceParameter" prot="public">nest::SpatialDistanceParameter</innerclass>
    <innerclass refid="classnest_1_1SPBuilder" prot="public">nest::SPBuilder</innerclass>
    <innerclass refid="classnest_1_1spike__dilutor" prot="public">nest::spike_dilutor</innerclass>
    <innerclass refid="classnest_1_1spike__generator" prot="public">nest::spike_generator</innerclass>
    <innerclass refid="classnest_1_1spike__recorder" prot="public">nest::spike_recorder</innerclass>
    <innerclass refid="classnest_1_1spikecounter" prot="public">nest::spikecounter</innerclass>
    <innerclass refid="classnest_1_1SpikeData" prot="public">nest::SpikeData</innerclass>
    <innerclass refid="classnest_1_1SpikeEvent" prot="public">nest::SpikeEvent</innerclass>
    <innerclass refid="classnest_1_1spin__detector" prot="public">nest::spin_detector</innerclass>
    <innerclass refid="classnest_1_1SPManager" prot="public">nest::SPManager</innerclass>
    <innerclass refid="classnest_1_1static__synapse" prot="public">nest::static_synapse</innerclass>
    <innerclass refid="classnest_1_1static__synapse__hom__w" prot="public">nest::static_synapse_hom_w</innerclass>
    <innerclass refid="structnest_1_1StaticAssert" prot="public">nest::StaticAssert</innerclass>
    <innerclass refid="structnest_1_1StaticAssert_3_01true_01_4" prot="public">nest::StaticAssert&lt; true &gt;</innerclass>
    <innerclass refid="classnest_1_1stdp__dopamine__synapse" prot="public">nest::stdp_dopamine_synapse</innerclass>
    <innerclass refid="classnest_1_1stdp__facetshw__synapse__hom" prot="public">nest::stdp_facetshw_synapse_hom</innerclass>
    <innerclass refid="classnest_1_1stdp__nn__pre__centered__synapse" prot="public">nest::stdp_nn_pre_centered_synapse</innerclass>
    <innerclass refid="classnest_1_1stdp__nn__restr__synapse" prot="public">nest::stdp_nn_restr_synapse</innerclass>
    <innerclass refid="classnest_1_1stdp__nn__symm__synapse" prot="public">nest::stdp_nn_symm_synapse</innerclass>
    <innerclass refid="classnest_1_1stdp__pl__synapse__hom" prot="public">nest::stdp_pl_synapse_hom</innerclass>
    <innerclass refid="classnest_1_1stdp__synapse" prot="public">nest::stdp_synapse</innerclass>
    <innerclass refid="classnest_1_1stdp__synapse__hom" prot="public">nest::stdp_synapse_hom</innerclass>
    <innerclass refid="classnest_1_1stdp__triplet__synapse" prot="public">nest::stdp_triplet_synapse</innerclass>
    <innerclass refid="classnest_1_1STDPDopaCommonProperties" prot="public">nest::STDPDopaCommonProperties</innerclass>
    <innerclass refid="classnest_1_1STDPFACETSHWHomCommonProperties" prot="public">nest::STDPFACETSHWHomCommonProperties</innerclass>
    <innerclass refid="classnest_1_1STDPHomCommonProperties" prot="public">nest::STDPHomCommonProperties</innerclass>
    <innerclass refid="classnest_1_1STDPPLHomCommonProperties" prot="public">nest::STDPPLHomCommonProperties</innerclass>
    <innerclass refid="classnest_1_1step__current__generator" prot="public">nest::step_current_generator</innerclass>
    <innerclass refid="classnest_1_1step__rate__generator" prot="public">nest::step_rate_generator</innerclass>
    <innerclass refid="classnest_1_1StepMultipleRequired" prot="public">nest::StepMultipleRequired</innerclass>
    <innerclass refid="classnest_1_1StimulationBackend" prot="public">nest::StimulationBackend</innerclass>
    <innerclass refid="classnest_1_1StimulationBackendMPI" prot="public">nest::StimulationBackendMPI</innerclass>
    <innerclass refid="classnest_1_1StimulationDevice" prot="public">nest::StimulationDevice</innerclass>
    <innerclass refid="classnest_1_1Stopwatch" prot="public">nest::Stopwatch</innerclass>
    <innerclass refid="classnest_1_1StructuralPlasticityNode" prot="public">nest::StructuralPlasticityNode</innerclass>
    <innerclass refid="classnest_1_1SumParameter" prot="public">nest::SumParameter</innerclass>
    <innerclass refid="classnest_1_1SymmetricBernoulliBuilder" prot="public">nest::SymmetricBernoulliBuilder</innerclass>
    <innerclass refid="classnest_1_1SynapticElement" prot="public">nest::SynapticElement</innerclass>
    <innerclass refid="structnest_1_1SynIdDelay" prot="public">nest::SynIdDelay</innerclass>
    <innerclass refid="classnest_1_1Target" prot="public">nest::Target</innerclass>
    <innerclass refid="classnest_1_1TargetData" prot="public">nest::TargetData</innerclass>
    <innerclass refid="classnest_1_1TargetDataFields" prot="public">nest::TargetDataFields</innerclass>
    <innerclass refid="classnest_1_1TargetIdentifierIndex" prot="public">nest::TargetIdentifierIndex</innerclass>
    <innerclass refid="classnest_1_1TargetIdentifierPtrRport" prot="public">nest::TargetIdentifierPtrRport</innerclass>
    <innerclass refid="classnest_1_1TargetTable" prot="public">nest::TargetTable</innerclass>
    <innerclass refid="classnest_1_1TargetTableDevices" prot="public">nest::TargetTableDevices</innerclass>
    <innerclass refid="classnest_1_1Time" prot="public">nest::Time</innerclass>
    <innerclass refid="classnest_1_1TimeConverter" prot="public">nest::TimeConverter</innerclass>
    <innerclass refid="classnest_1_1TimeMultipleRequired" prot="public">nest::TimeMultipleRequired</innerclass>
    <innerclass refid="classnest_1_1tsodyks2__synapse" prot="public">nest::tsodyks2_synapse</innerclass>
    <innerclass refid="classnest_1_1tsodyks__synapse" prot="public">nest::tsodyks_synapse</innerclass>
    <innerclass refid="classnest_1_1tsodyks__synapse__hom" prot="public">nest::tsodyks_synapse_hom</innerclass>
    <innerclass refid="classnest_1_1TsodyksHomCommonProperties" prot="public">nest::TsodyksHomCommonProperties</innerclass>
    <innerclass refid="classnest_1_1UnexpectedEvent" prot="public">nest::UnexpectedEvent</innerclass>
    <innerclass refid="classnest_1_1UniformIntParameter" prot="public">nest::UniformIntParameter</innerclass>
    <innerclass refid="classnest_1_1UniformParameter" prot="public">nest::UniformParameter</innerclass>
    <innerclass refid="classnest_1_1UnionMask" prot="public">nest::UnionMask</innerclass>
    <innerclass refid="classnest_1_1UnknownCompartment" prot="public">nest::UnknownCompartment</innerclass>
    <innerclass refid="classnest_1_1UnknownComponent" prot="public">nest::UnknownComponent</innerclass>
    <innerclass refid="classnest_1_1UnknownModelName" prot="public">nest::UnknownModelName</innerclass>
    <innerclass refid="classnest_1_1UnknownNode" prot="public">nest::UnknownNode</innerclass>
    <innerclass refid="classnest_1_1UnknownPort" prot="public">nest::UnknownPort</innerclass>
    <innerclass refid="classnest_1_1UnknownReceptorType" prot="public">nest::UnknownReceptorType</innerclass>
    <innerclass refid="classnest_1_1UnknownSynapseType" prot="public">nest::UnknownSynapseType</innerclass>
    <innerclass refid="classnest_1_1UnknownThread" prot="public">nest::UnknownThread</innerclass>
    <innerclass refid="classnest_1_1UnmatchedSteps" prot="public">nest::UnmatchedSteps</innerclass>
    <innerclass refid="classnest_1_1UnsupportedEvent" prot="public">nest::UnsupportedEvent</innerclass>
    <innerclass refid="classnest_1_1urbanczik__synapse" prot="public">nest::urbanczik_synapse</innerclass>
    <innerclass refid="classnest_1_1UrbanczikArchivingNode" prot="public">nest::UrbanczikArchivingNode</innerclass>
    <innerclass refid="classnest_1_1vogels__sprekeler__synapse" prot="public">nest::vogels_sprekeler_synapse</innerclass>
    <innerclass refid="classnest_1_1voltmeter" prot="public">nest::voltmeter</innerclass>
    <innerclass refid="classnest_1_1volume__transmitter" prot="public">nest::volume_transmitter</innerclass>
    <innerclass refid="classnest_1_1VPManager" prot="public">nest::VPManager</innerclass>
    <innerclass refid="classnest_1_1weight__recorder" prot="public">nest::weight_recorder</innerclass>
    <innerclass refid="classnest_1_1WeightRecorderEvent" prot="public">nest::WeightRecorderEvent</innerclass>
    <innernamespace refid="namespacenest_1_1names">nest::names</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72" prot="public" static="no" strong="no">
        <type></type>
        <name>severity_t</name>
        <qualifiedname>nest::severity_t</qualifiedname>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a28ae2e4c0ae2e82ad5665e5c8a48b49b" prot="public">
          <name>M_ALL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72afd07518856c942716627a9e7ae0a1351" prot="public">
          <name>M_DEBUG</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a4cc59d5e2432a871aa447fd29f22d7eb" prot="public">
          <name>M_STATUS</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac918263c6420db964adbf3a3375cf9ee" prot="public">
          <name>M_INFO</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a9052ec659372d0e8a9a41b6690681a46" prot="public">
          <name>M_PROGRESS</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a8380e794cc143ae748fc187cba9b4648" prot="public">
          <name>M_DEPRECATED</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaacd7f6853f3c5659533a75bc712c3b" prot="public">
          <name>M_WARNING</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72adaf8dec0ca154ba4dd8045accef88b46" prot="public">
          <name>M_ERROR</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72a0c27831aefc07cf6c39ebc0cda2dc1fd" prot="public">
          <name>M_FATAL</name>
          <initializer>= 40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a17a14d5aa7e8d94ec67eefc2b148eb72ac5db3bd6072d18f9ed8c79299666c3ba" prot="public">
          <name>M_QUIET</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/logging.h" line="49" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/logging.h" bodystart="50" bodyend="61"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6" prot="public" static="no" strong="yes">
        <type>unsigned</type>
        <name>RegisterConnectionModelFlags</name>
        <qualifiedname>nest::RegisterConnectionModelFlags</qualifiedname>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a229fa5663f5a80c1fbf237db33a10500" prot="public">
          <name>REGISTER_HPC</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a92b7533c87b239993d735cd5baf03f0d" prot="public">
          <name>REGISTER_LBL</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a79cf97983e8d689411b370cb052d5af0" prot="public">
          <name>IS_PRIMARY</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a122ce5b1aeb9e739c55b05197eb38429" prot="public">
          <name>HAS_DELAY</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6aa36566bef01b1f104bea14c298d7e881" prot="public">
          <name>SUPPORTS_WFR</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a0d58de623e6d3803e7f1c01d03059abf" prot="public">
          <name>REQUIRES_SYMMETRIC</name>
          <initializer>= 1 &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6aa0d203a834ab7b335dfb264067e7fb5c" prot="public">
          <name>REQUIRES_CLOPATH_ARCHIVING</name>
          <initializer>= 1 &lt;&lt; 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a84bafb2453fed9e4d292c2f2c42f0147" prot="public">
          <name>REQUIRES_URBANCZIK_ARCHIVING</name>
          <initializer>= 1 &lt;&lt; 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" line="56" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" prot="public" static="no" strong="no">
        <type></type>
        <name>SignalType</name>
        <qualifiedname>nest::SignalType</qualifiedname>
        <enumvalue id="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2ae711b598b12e15f1d70ed8c6dc7df169" prot="public">
          <name>NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a21716aa1ea006b59505bc8577cd50468" prot="public">
          <name>SPIKE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a6892450af22ccc78e1663b9f000ab084" prot="public">
          <name>BINARY</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2a3a209f77703491919c187f326f48b784" prot="public">
          <name>ALL</name>
          <initializer>= SPIKE | BINARY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enum type of signal conveyed by spike events of a node. </para>
        </briefdescription>
        <detaileddescription>
<para>These types are used upon connect to check if spikes sent by one neuron are interpreted the same way by receiving neuron.</para>
<para>Each possible signal that may be represented (currently SPIKE and BINARY) is interpreted as a separate bit flag. This way, upon connection, we determine by a bitwise AND operation if sender and receiver are compatible. The check takes place in connection::check_connection().</para>
<para>A device, such as the spike-generator or <ref refid="classnest_1_1spike__recorder" kindref="compound">spike_recorder</ref>, that can in a meaningful way be connected to either neuron model can use the wildcard ALL, that will match any connection partner. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="219" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="220" bodyend="225"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenest_1a16297645ac3909ba5ae4ed7b8cbbbbb4" prot="public" static="no" strong="no">
        <type></type>
        <name>enum_status_spike_data_id</name>
        <qualifiedname>nest::enum_status_spike_data_id</qualifiedname>
        <enumvalue id="namespacenest_1a16297645ac3909ba5ae4ed7b8cbbbbb4a349fae048150720edcc96f2dc629c0ec" prot="public">
          <name>SPIKE_DATA_ID_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a16297645ac3909ba5ae4ed7b8cbbbbb4a28e36e5c7983c695d419108748c9e943" prot="public">
          <name>SPIKE_DATA_ID_END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a16297645ac3909ba5ae4ed7b8cbbbbb4a0b44474ba3a38fc69f02c1a9fd6602ca" prot="public">
          <name>SPIKE_DATA_ID_COMPLETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a16297645ac3909ba5ae4ed7b8cbbbbb4a6590f5b2ad775619929aa79f5bc33cbe" prot="public">
          <name>SPIKE_DATA_ID_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spike_data.h" line="36" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spike_data.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenest_1a6978bdf4de41135f251402b0e47b8cf2" prot="public" static="no" strong="no">
        <type></type>
        <name>enum_status_target_id</name>
        <qualifiedname>nest::enum_status_target_id</qualifiedname>
        <enumvalue id="namespacenest_1a6978bdf4de41135f251402b0e47b8cf2a981a0ddb81585621f3baa05532ae889e" prot="public">
          <name>TARGET_ID_PROCESSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1a6978bdf4de41135f251402b0e47b8cf2a19a316f2a5db2e21319081ff976e4bab" prot="public">
          <name>TARGET_ID_UNPROCESSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This class implements a 64-bit target neuron identifier type. </para>
        </briefdescription>
        <detaileddescription>
<para>It uniquely identifies a target neuron on a (remote) machine. Used in <ref refid="classnest_1_1TargetTable" kindref="compound">TargetTable</ref> for the presynaptic part of the connection infrastructure.</para>
<para>The bitwise layout of the neuron identifier for the &quot;standard&quot; CMAKE option:</para>
<para>+-----<mdash/> processed flag | +-<mdash/> synapse-type id (syn_id) | | ||-------<mdash/>||<ndash/>thread<ndash/>||------<mdash/>rank-------<mdash/>||-<mdash/>local connection id (lcid)-<mdash/>| 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 | | | | | | | | | | | | | | | | 63 56 55 48 47 40 39 32 31 24 23 16 15 8 7 0</para>
<para>The bitwise layout of the neuron identifier for the &quot;hpc&quot; CMAKE option:</para>
<para>+-----<mdash/> processed flag | +-<mdash/> synapse-type id (syn_id) | | ||--<mdash/>||<mdash/>thread-<mdash/>||------<mdash/>rank---------<mdash/>||-<mdash/>local connection id (lcid)-<mdash/>| 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 | | | | | | | | | | | | | | | | 63 56 55 48 47 40 39 32 31 24 23 16 15 8 7 0</para>
<para>Other custom layouts can be chosen by providing a list of 5 numbers, representing the bits required for rank, thread, synapse id, local connection id and processed flag, respectively. The number of bits needs to sum to 64. The processed flag must always use one bit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/target.h" line="69" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/target.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="enum" id="namespacenest_1aa0c1de0d17f371938ee31d6b4cb996cb" prot="public" static="no" strong="no">
        <type></type>
        <name>enum_status_target_data_id</name>
        <qualifiedname>nest::enum_status_target_data_id</qualifiedname>
        <enumvalue id="namespacenest_1aa0c1de0d17f371938ee31d6b4cb996cba42e2fe6d9140f2510aa971bbec139601" prot="public">
          <name>TARGET_DATA_ID_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1aa0c1de0d17f371938ee31d6b4cb996cba9a47f9553c071102ff50d512874b2796" prot="public">
          <name>TARGET_DATA_ID_COMPLETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1aa0c1de0d17f371938ee31d6b4cb996cba9405a15d1c55336b9f1070c65d01ad5e" prot="public">
          <name>TARGET_DATA_ID_END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenest_1aa0c1de0d17f371938ee31d6b4cb996cba310b6bd1a0535b6ef6613e078ad17061" prot="public">
          <name>TARGET_DATA_ID_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" line="159" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" bodystart="160" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacenest_1a01af9cf2f688ea73b6d89575eda63156" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nest::deliver_logging_event_ptr) (const LoggingEvent &amp;e)</definition>
        <argsstring>)(const LoggingEvent &amp;e)</argsstring>
        <name>deliver_logging_event_ptr</name>
        <qualifiedname>nest::deliver_logging_event_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/logging.h" line="63" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/logging.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ab48a40d86d7c0344f3710b2d7094a666" prot="public" static="no">
        <type><ref refid="classnest_1_1binary__neuron" kindref="compound">binary_neuron</ref>&lt; <ref refid="classnest_1_1gainfunction__erfc" kindref="compound">nest::gainfunction_erfc</ref> &gt;</type>
        <definition>typedef binary_neuron&lt; nest::gainfunction_erfc &gt; nest::erfc_neuron</definition>
        <argsstring></argsstring>
        <name>erfc_neuron</name>
        <qualifiedname>nest::erfc_neuron</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/erfc_neuron.h" line="159" column="23" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/erfc_neuron.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ac1942efd132b5e49a5c24678081f24be" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; <ref refid="classnest_1_1nonlinearities__gauss__rate" kindref="compound">nest::nonlinearities_gauss_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_ipn&lt; nest::nonlinearities_gauss_rate &gt; nest::gauss_rate_ipn</definition>
        <argsstring></argsstring>
        <name>gauss_rate_ipn</name>
        <qualifiedname>nest::gauss_rate_ipn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/gauss_rate.h" line="175" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/gauss_rate.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ad74d0bf20c08dc4b1c8b29c8f02672dc" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__transformer__node" kindref="compound">rate_transformer_node</ref>&lt; <ref refid="classnest_1_1nonlinearities__gauss__rate" kindref="compound">nest::nonlinearities_gauss_rate</ref> &gt;</type>
        <definition>typedef rate_transformer_node&lt; nest::nonlinearities_gauss_rate &gt; nest::rate_transformer_gauss</definition>
        <argsstring></argsstring>
        <name>rate_transformer_gauss</name>
        <qualifiedname>nest::rate_transformer_gauss</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/gauss_rate.h" line="176" column="31" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/gauss_rate.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a288c116adc58075974f28db1175b97a1" prot="public" static="no">
        <type><ref refid="classnest_1_1binary__neuron" kindref="compound">binary_neuron</ref>&lt; <ref refid="classnest_1_1gainfunction__ginzburg" kindref="compound">nest::gainfunction_ginzburg</ref> &gt;</type>
        <definition>typedef binary_neuron&lt; nest::gainfunction_ginzburg &gt; nest::ginzburg_neuron</definition>
        <argsstring></argsstring>
        <name>ginzburg_neuron</name>
        <qualifiedname>nest::ginzburg_neuron</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/ginzburg_neuron.h" line="174" column="23" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/ginzburg_neuron.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1adab5a2deb736d1cae3f9a83c91ebf040" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; <ref refid="classnest_1_1nonlinearities__lin__rate" kindref="compound">nest::nonlinearities_lin_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_ipn&lt; nest::nonlinearities_lin_rate &gt; nest::lin_rate_ipn</definition>
        <argsstring></argsstring>
        <name>lin_rate_ipn</name>
        <qualifiedname>nest::lin_rate_ipn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/lin_rate.h" line="179" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/lin_rate.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1aa911e1f58b47667af07966e865956bd3" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__opn" kindref="compound">rate_neuron_opn</ref>&lt; <ref refid="classnest_1_1nonlinearities__lin__rate" kindref="compound">nest::nonlinearities_lin_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_opn&lt; nest::nonlinearities_lin_rate &gt; nest::lin_rate_opn</definition>
        <argsstring></argsstring>
        <name>lin_rate_opn</name>
        <qualifiedname>nest::lin_rate_opn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/lin_rate.h" line="180" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/lin_rate.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ae0fed2fe2c66eda1adf58cfebfb5ffb2" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__transformer__node" kindref="compound">rate_transformer_node</ref>&lt; <ref refid="classnest_1_1nonlinearities__lin__rate" kindref="compound">nest::nonlinearities_lin_rate</ref> &gt;</type>
        <definition>typedef rate_transformer_node&lt; nest::nonlinearities_lin_rate &gt; nest::rate_transformer_lin</definition>
        <argsstring></argsstring>
        <name>rate_transformer_lin</name>
        <qualifiedname>nest::rate_transformer_lin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/lin_rate.h" line="181" column="31" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/lin_rate.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1af2b8c5695fd6d1b1d8fa697b861bc3ff" prot="public" static="no">
        <type><ref refid="classnest_1_1binary__neuron" kindref="compound">nest::binary_neuron</ref>&lt; <ref refid="classnest_1_1gainfunction__mcculloch__pitts" kindref="compound">nest::gainfunction_mcculloch_pitts</ref> &gt;</type>
        <definition>typedef nest::binary_neuron&lt; nest::gainfunction_mcculloch_pitts &gt; nest::mcculloch_pitts_neuron</definition>
        <argsstring></argsstring>
        <name>mcculloch_pitts_neuron</name>
        <qualifiedname>nest::mcculloch_pitts_neuron</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/mcculloch_pitts_neuron.h" line="149" column="29" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/mcculloch_pitts_neuron.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a3d9abcfc03d73f9e30470d11a611786d" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; <ref refid="classnest_1_1nonlinearities__sigmoid__rate" kindref="compound">nest::nonlinearities_sigmoid_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_ipn&lt; nest::nonlinearities_sigmoid_rate &gt; nest::sigmoid_rate_ipn</definition>
        <argsstring></argsstring>
        <name>sigmoid_rate_ipn</name>
        <qualifiedname>nest::sigmoid_rate_ipn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate.h" line="171" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1aaa820ff58d48ef43370cb2526cf81346" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__transformer__node" kindref="compound">rate_transformer_node</ref>&lt; <ref refid="classnest_1_1nonlinearities__sigmoid__rate" kindref="compound">nest::nonlinearities_sigmoid_rate</ref> &gt;</type>
        <definition>typedef rate_transformer_node&lt; nest::nonlinearities_sigmoid_rate &gt; nest::rate_transformer_sigmoid</definition>
        <argsstring></argsstring>
        <name>rate_transformer_sigmoid</name>
        <qualifiedname>nest::rate_transformer_sigmoid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate.h" line="172" column="31" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a617189926bbbc018635bfd7e1bc8cab1" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; <ref refid="classnest_1_1nonlinearities__sigmoid__rate__gg__1998" kindref="compound">nest::nonlinearities_sigmoid_rate_gg_1998</ref> &gt;</type>
        <definition>typedef rate_neuron_ipn&lt; nest::nonlinearities_sigmoid_rate_gg_1998 &gt; nest::sigmoid_rate_gg_1998_ipn</definition>
        <argsstring></argsstring>
        <name>sigmoid_rate_gg_1998_ipn</name>
        <qualifiedname>nest::sigmoid_rate_gg_1998_ipn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate_gg_1998.h" line="167" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate_gg_1998.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a4a1b2434ca5c13773256a5b8b0c5ce83" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__transformer__node" kindref="compound">rate_transformer_node</ref>&lt; <ref refid="classnest_1_1nonlinearities__sigmoid__rate__gg__1998" kindref="compound">nest::nonlinearities_sigmoid_rate_gg_1998</ref> &gt;</type>
        <definition>typedef rate_transformer_node&lt; nest::nonlinearities_sigmoid_rate_gg_1998 &gt; nest::rate_transformer_sigmoid_gg_1998</definition>
        <argsstring></argsstring>
        <name>rate_transformer_sigmoid_gg_1998</name>
        <qualifiedname>nest::rate_transformer_sigmoid_gg_1998</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate_gg_1998.h" line="168" column="31" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/sigmoid_rate_gg_1998.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1aabaa7786478f24304834ca3502fb3797" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; <ref refid="classnest_1_1nonlinearities__tanh__rate" kindref="compound">nest::nonlinearities_tanh_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_ipn&lt; nest::nonlinearities_tanh_rate &gt; nest::tanh_rate_ipn</definition>
        <argsstring></argsstring>
        <name>tanh_rate_ipn</name>
        <qualifiedname>nest::tanh_rate_ipn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/tanh_rate.h" line="165" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/tanh_rate.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a17726130b5f9c3e177e517211613fe37" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__opn" kindref="compound">rate_neuron_opn</ref>&lt; <ref refid="classnest_1_1nonlinearities__tanh__rate" kindref="compound">nest::nonlinearities_tanh_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_opn&lt; nest::nonlinearities_tanh_rate &gt; nest::tanh_rate_opn</definition>
        <argsstring></argsstring>
        <name>tanh_rate_opn</name>
        <qualifiedname>nest::tanh_rate_opn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/tanh_rate.h" line="166" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/tanh_rate.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1affe3494c9861f1946868937530391eb4" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__transformer__node" kindref="compound">rate_transformer_node</ref>&lt; <ref refid="classnest_1_1nonlinearities__tanh__rate" kindref="compound">nest::nonlinearities_tanh_rate</ref> &gt;</type>
        <definition>typedef rate_transformer_node&lt; nest::nonlinearities_tanh_rate &gt; nest::rate_transformer_tanh</definition>
        <argsstring></argsstring>
        <name>rate_transformer_tanh</name>
        <qualifiedname>nest::rate_transformer_tanh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/tanh_rate.h" line="167" column="31" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/tanh_rate.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ad3b064d3135393f73c9c2f26b8238503" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__ipn" kindref="compound">rate_neuron_ipn</ref>&lt; <ref refid="classnest_1_1nonlinearities__threshold__lin__rate" kindref="compound">nest::nonlinearities_threshold_lin_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_ipn&lt; nest::nonlinearities_threshold_lin_rate &gt; nest::threshold_lin_rate_ipn</definition>
        <argsstring></argsstring>
        <name>threshold_lin_rate_ipn</name>
        <qualifiedname>nest::threshold_lin_rate_ipn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/threshold_lin_rate.h" line="173" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/threshold_lin_rate.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1abbbe0abbd886c078b7d9f6fe8d677709" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__neuron__opn" kindref="compound">rate_neuron_opn</ref>&lt; <ref refid="classnest_1_1nonlinearities__threshold__lin__rate" kindref="compound">nest::nonlinearities_threshold_lin_rate</ref> &gt;</type>
        <definition>typedef rate_neuron_opn&lt; nest::nonlinearities_threshold_lin_rate &gt; nest::threshold_lin_rate_opn</definition>
        <argsstring></argsstring>
        <name>threshold_lin_rate_opn</name>
        <qualifiedname>nest::threshold_lin_rate_opn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/threshold_lin_rate.h" line="174" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/threshold_lin_rate.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a5cce400a8fc36f16c187d5cdcdf88949" prot="public" static="no">
        <type><ref refid="classnest_1_1rate__transformer__node" kindref="compound">rate_transformer_node</ref>&lt; <ref refid="classnest_1_1nonlinearities__threshold__lin__rate" kindref="compound">nest::nonlinearities_threshold_lin_rate</ref> &gt;</type>
        <definition>typedef rate_transformer_node&lt; nest::nonlinearities_threshold_lin_rate &gt; nest::rate_transformer_threshold_lin</definition>
        <argsstring></argsstring>
        <name>rate_transformer_threshold_lin</name>
        <qualifiedname>nest::rate_transformer_threshold_lin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/threshold_lin_rate.h" line="175" column="31" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/threshold_lin_rate.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a05d262f7afd9018d9a067d3431035dd9" prot="public" static="no">
        <type><ref refid="classnest_1_1MPIManager_1_1OffGridSpike" kindref="compound">MPIManager::OffGridSpike</ref></type>
        <definition>typedef MPIManager::OffGridSpike nest::OffGridSpike</definition>
        <argsstring></argsstring>
        <name>OffGridSpike</name>
        <qualifiedname>nest::OffGridSpike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/event_delivery_manager.h" line="52" column="34" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/event_delivery_manager.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a6779693086ed293feb10b317db6e193e" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1AbstractLayer" kindref="compound">AbstractLayer</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; AbstractLayer &gt; nest::AbstractLayerPTR</definition>
        <argsstring></argsstring>
        <name>AbstractLayerPTR</name>
        <qualifiedname>nest::AbstractLayerPTR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/layer.h" line="48" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/layer.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" prot="public" static="no">
        <type><ref refid="classsharedPtrDatum" kindref="compound">sharedPtrDatum</ref>&lt; <ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref>, &amp;<ref refid="classnest_1_1NestModule_1a97f2c3aa39797eebe9e2bc451cd469c4" kindref="member">NestModule::MaskType</ref> &gt;</type>
        <definition>typedef sharedPtrDatum&lt; AbstractMask, &amp;NestModule::MaskType &gt; nest::MaskDatum</definition>
        <argsstring></argsstring>
        <name>MaskDatum</name>
        <qualifiedname>nest::MaskDatum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" line="46" column="24" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mask.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a824af732762ca1ba47526652442e562e" prot="public" static="no">
        <type>long</type>
        <definition>typedef long nest::tic_t</definition>
        <argsstring></argsstring>
        <name>tic_t</name>
        <qualifiedname>nest::tic_t</qualifiedname>
        <briefdescription>
<para>Type for <ref refid="classnest_1_1Time" kindref="compound">Time</ref> tics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="120" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t nest::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <qualifiedname>nest::index</qualifiedname>
        <briefdescription>
<para>Unsigned long type for enumerations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="128" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int nest::synindex</definition>
        <argsstring></argsstring>
        <name>synindex</name>
        <qualifiedname>nest::synindex</qualifiedname>
        <briefdescription>
<para>For enumerations of synapse types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="137" column="22" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1adad102550a6102c0c0bea1d1083a233f" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short nest::targetindex</definition>
        <argsstring></argsstring>
        <name>targetindex</name>
        <qualifiedname>nest::targetindex</qualifiedname>
        <briefdescription>
<para>Unsigned short type for compact target representation. </para>
        </briefdescription>
        <detaileddescription>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014). target index into thread local node vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="146" column="24" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ab32ecb34347794894e38197ccec56813" prot="public" static="no">
        <type>int</type>
        <definition>typedef int nest::thread</definition>
        <argsstring></argsstring>
        <name>thread</name>
        <qualifiedname>nest::thread</qualifiedname>
        <briefdescription>
<para>Thread index type. </para>
        </briefdescription>
        <detaileddescription>
<para>NEST threads are assigned non-negative numbers for identification. For invalid or undefined threads, the value -1 is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="156" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" prot="public" static="no">
        <type>long</type>
        <definition>typedef long nest::rport</definition>
        <argsstring></argsstring>
        <name>rport</name>
        <qualifiedname>nest::rport</qualifiedname>
        <briefdescription>
<para><ref refid="classnest_1_1Connection" kindref="compound">Connection</ref> port number to distinguish incoming connections, also called receiver port. </para>
        </briefdescription>
        <detaileddescription>
<para>Connections between Nodes are assigned port numbers. Valid port numbers start at zero (0). The value -1 is used for invalid or unassigned ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="170" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a440736750ce9e902e6729a1cb2153e95" prot="public" static="no">
        <type>long</type>
        <definition>typedef long nest::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <qualifiedname>nest::port</qualifiedname>
        <briefdescription>
<para><ref refid="classnest_1_1Connection" kindref="compound">Connection</ref> port number to distinguish outgoing connections. </para>
        </briefdescription>
        <detaileddescription>
<para>Connections between Nodes are assigned port numbers. Valid port numbers start at zero (0). The value -1 is used for invalid or unassigned ports. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="178" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1aa26400f4ac119288a43af512d0ec5a0d" prot="public" static="no">
        <type>double</type>
        <definition>typedef double nest::weight</definition>
        <argsstring></argsstring>
        <name>weight</name>
        <qualifiedname>nest::weight</qualifiedname>
        <briefdescription>
<para>Weight of a connection. </para>
        </briefdescription>
        <detaileddescription>
<para>Connections have a weight which is used to scale the influence of an event. A weight of 0 should have the same influence on the receiving node as a non-existing connection. Otherwise, there is no default range for connection weights. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="193" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a71a30fec90e57e114c45577d5294ce16" prot="public" static="no">
        <type>long</type>
        <definition>typedef long nest::delay</definition>
        <argsstring></argsstring>
        <name>delay</name>
        <qualifiedname>nest::delay</qualifiedname>
        <briefdescription>
<para>Delay of a connection. </para>
        </briefdescription>
        <detaileddescription>
<para>The delay defines the number of simulation steps which elapse before an <ref refid="classnest_1_1Event" kindref="compound">Event</ref> arrives at the receiving <ref refid="classnest_1_1Node" kindref="compound">Node</ref>. Delays must be equal or larger than one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="201" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> &gt;</type>
        <definition>using nest::NodeCollectionPTR = typedef std::shared_ptr&lt; NodeCollection &gt;</definition>
        <argsstring></argsstring>
        <name>NodeCollectionPTR</name>
        <qualifiedname>nest::NodeCollectionPTR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="51" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a79929df00838099cddde8593fcbd9efe" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1NodeCollectionMetadata" kindref="compound">NodeCollectionMetadata</ref> &gt;</type>
        <definition>using nest::NodeCollectionMetadataPTR = typedef std::shared_ptr&lt; NodeCollectionMetadata &gt;</definition>
        <argsstring></argsstring>
        <name>NodeCollectionMetadataPTR</name>
        <qualifiedname>nest::NodeCollectionMetadataPTR</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="52" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" prot="public" static="no">
        <type><ref refid="classnest_1_1BaseRandomGenerator" kindref="compound">BaseRandomGenerator</ref> *</type>
        <definition>using nest::RngPtr = typedef BaseRandomGenerator*</definition>
        <argsstring></argsstring>
        <name>RngPtr</name>
        <qualifiedname>nest::RngPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="45" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a0ff13108e256fe63248b8dbf162b8a4d" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::uniform_int_distribution&lt; unsigned long &gt; &gt;</type>
        <definition>using nest::uniform_int_distribution = typedef RandomDistribution&lt; std::uniform_int_distribution&lt; unsigned long &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>uniform_int_distribution</name>
        <qualifiedname>nest::uniform_int_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="47" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1ad7efd35a7378aa9f2029452e7adb3c00" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::uniform_real_distribution&lt;&gt; &gt;</type>
        <definition>using nest::uniform_real_distribution = typedef RandomDistribution&lt; std::uniform_real_distribution&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>uniform_real_distribution</name>
        <qualifiedname>nest::uniform_real_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="48" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a029d39a54b072ac3629089166eb790d0" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::poisson_distribution&lt; unsigned long &gt; &gt;</type>
        <definition>using nest::poisson_distribution = typedef RandomDistribution&lt; std::poisson_distribution&lt; unsigned long &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>poisson_distribution</name>
        <qualifiedname>nest::poisson_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="49" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a78fa90b7b576d693c7411d5c96ce2e56" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::normal_distribution&lt;&gt; &gt;</type>
        <definition>using nest::normal_distribution = typedef RandomDistribution&lt; std::normal_distribution&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>normal_distribution</name>
        <qualifiedname>nest::normal_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="50" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a278010c4e02cb5fd624d48960a45fe38" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::lognormal_distribution&lt;&gt; &gt;</type>
        <definition>using nest::lognormal_distribution = typedef RandomDistribution&lt; std::lognormal_distribution&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lognormal_distribution</name>
        <qualifiedname>nest::lognormal_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="51" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a046d8ea8473c60dbebb5b8db386209b8" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::binomial_distribution&lt; unsigned long &gt; &gt;</type>
        <definition>using nest::binomial_distribution = typedef RandomDistribution&lt; std::binomial_distribution&lt; unsigned long &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>binomial_distribution</name>
        <qualifiedname>nest::binomial_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="52" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a755cb97b18df62fcf5e1aba92f002148" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::gamma_distribution&lt;&gt; &gt;</type>
        <definition>using nest::gamma_distribution = typedef RandomDistribution&lt; std::gamma_distribution&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>gamma_distribution</name>
        <qualifiedname>nest::gamma_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="53" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a0761d745e5efd499f0cc6c8ccd31e6ae" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::exponential_distribution&lt;&gt; &gt;</type>
        <definition>using nest::exponential_distribution = typedef RandomDistribution&lt; std::exponential_distribution&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>exponential_distribution</name>
        <qualifiedname>nest::exponential_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="54" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1aca70417cacdc3986658e92cacc8dc9b8" prot="public" static="no">
        <type><ref refid="classnest_1_1RandomDistribution" kindref="compound">RandomDistribution</ref>&lt; std::discrete_distribution&lt; unsigned long &gt; &gt;</type>
        <definition>using nest::discrete_distribution = typedef RandomDistribution&lt; std::discrete_distribution&lt; unsigned long &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>discrete_distribution</name>
        <qualifiedname>nest::discrete_distribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" line="55" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/random_generators.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a91e3e05cc0803001452cdd57318e3768" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="classnest_1_1SpikeData" kindref="compound">SpikeData</ref>)==8 &gt;::success</type>
        <definition>using nest::success_spike_data_size = typedef StaticAssert&lt; sizeof( SpikeData ) == 8 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_spike_data_size</name>
        <qualifiedname>nest::success_spike_data_size</qualifiedname>
        <briefdescription>
<para>check legal size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spike_data.h" line="135" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spike_data.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a37aa316cf89231a838738945b962c577" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="classnest_1_1OffGridSpikeData" kindref="compound">OffGridSpikeData</ref>)==16 &gt;::success</type>
        <definition>using nest::success_offgrid_spike_data_size = typedef StaticAssert&lt; sizeof( OffGridSpikeData ) == 16 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_offgrid_spike_data_size</name>
        <qualifiedname>nest::success_offgrid_spike_data_size</qualifiedname>
        <briefdescription>
<para>check legal size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spike_data.h" line="297" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spike_data.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a043aaa35c6bba9f769c4cf97d05ebf4d" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="structnest_1_1SynIdDelay" kindref="compound">SynIdDelay</ref>)==4 &gt;::success</type>
        <definition>using nest::success_syn_id_delay_data_size = typedef StaticAssert&lt; sizeof( SynIdDelay ) == 4 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_syn_id_delay_data_size</name>
        <qualifiedname>nest::success_syn_id_delay_data_size</qualifiedname>
        <briefdescription>
<para>check legal size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/syn_id_delay.h" line="105" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/syn_id_delay.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a78cc1f5e3ca376d6d9565307a7bc488a" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="classnest_1_1Target" kindref="compound">Target</ref>)==8 &gt;::success</type>
        <definition>using nest::success_target_size = typedef StaticAssert&lt; sizeof( Target ) == 8 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_target_size</name>
        <qualifiedname>nest::success_target_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/target.h" line="170" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/target.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a968f92ccf4a1e9556bee706274e1abe2" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="classnest_1_1TargetDataFields" kindref="compound">TargetDataFields</ref>)==8 &gt;::success</type>
        <definition>using nest::success_target_data_fields_size = typedef StaticAssert&lt; sizeof( TargetDataFields ) == 8 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_target_data_fields_size</name>
        <qualifiedname>nest::success_target_data_fields_size</qualifiedname>
        <briefdescription>
<para>check legal size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" line="78" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a91c258d31b2eb379ba945b80c84456df" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="classnest_1_1SecondaryTargetDataFields" kindref="compound">SecondaryTargetDataFields</ref>)==8 &gt;::success</type>
        <definition>using nest::success_secondary_target_data_fields_size = typedef StaticAssert&lt; sizeof( SecondaryTargetDataFields ) == 8 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_secondary_target_data_fields_size</name>
        <qualifiedname>nest::success_secondary_target_data_fields_size</qualifiedname>
        <briefdescription>
<para>check legal size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" line="131" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenest_1a0c52261005d5c67a298c5deef14bf90b" prot="public" static="no">
        <type><ref refid="structnest_1_1StaticAssert" kindref="compound">StaticAssert</ref>&lt; sizeof(<ref refid="classnest_1_1TargetData" kindref="compound">TargetData</ref>)==12 &gt;::success</type>
        <definition>using nest::success_target_data_size = typedef StaticAssert&lt; sizeof( TargetData ) == 12 &gt;::success</definition>
        <argsstring></argsstring>
        <name>success_target_data_size</name>
        <qualifiedname>nest::success_target_data_size</qualifiedname>
        <briefdescription>
<para>check legal size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" line="217" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/target_data.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacenest_1aa69a20373c241553ae8038c0fa56e37a" prot="public" static="yes" mutable="no">
        <type>const long</type>
        <definition>const long nest::UNLABELED_CONNECTION</definition>
        <argsstring></argsstring>
        <name>UNLABELED_CONNECTION</name>
        <qualifiedname>nest::UNLABELED_CONNECTION</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Connections are unlabeled by default. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlabeled connections cannot be specified as a search criterion in the <computeroutput>GetConnections</computeroutput> function. <simplesect kind="see"><para><ref refid="classnest_1_1ConnectionLabel" kindref="compound">ConnectionLabel</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection_label.h" line="41" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/connection_label.h" bodystart="41" bodyend="-1"/>
        <referencedby refid="classnest_1_1Connector_1ab0f9cb340d95e084bb59b80a275cc2a6" compoundref="connector__base_8h" startline="272" endline="291">nest::Connector&lt; ConnectionT &gt;::get_connection</referencedby>
        <referencedby refid="classnest_1_1Connector_1ac6051af5ceb56896d1dbba8cf9d9c2e7" compoundref="connector__base_8h" startline="294" endline="314">nest::Connector&lt; ConnectionT &gt;::get_connection_with_specified_targets</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a42095f521521f147812163a8b98ee96f" compoundref="connection__manager_8cpp" startline="946" endline="1015">nest::ConnectionManager::get_connections</referencedby>
        <referencedby refid="classnest_1_1Connection_1a7c32524ac24f7d591bd14a5cc9219618" compoundref="connection_8h" startline="217" endline="220">nest::Connection&lt; targetidentifierT &gt;::get_label</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1a99e986592b99cc3dfceafa870ee0e678" compoundref="target__table__devices_8h" startline="250" endline="265">nest::TargetTableDevices::is_device_connected</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1aef4228724908932f9349113ea9543f2b" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6" kindref="member">RegisterConnectionModelFlags</ref></type>
        <definition>const RegisterConnectionModelFlags nest::default_connection_model_flags</definition>
        <argsstring></argsstring>
        <name>default_connection_model_flags</name>
        <qualifiedname>nest::default_connection_model_flags</qualifiedname>
        <initializer>= <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a229fa5663f5a80c1fbf237db33a10500" kindref="member">RegisterConnectionModelFlags::REGISTER_HPC</ref>
  | <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a92b7533c87b239993d735cd5baf03f0d" kindref="member">RegisterConnectionModelFlags::REGISTER_LBL</ref> | <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a79cf97983e8d689411b370cb052d5af0" kindref="member">RegisterConnectionModelFlags::IS_PRIMARY</ref>
  | <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a122ce5b1aeb9e739c55b05197eb38429" kindref="member">RegisterConnectionModelFlags::HAS_DELAY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" line="74" column="36" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" bodystart="74" bodyend="-1"/>
        <referencedby refid="classnest_1_1ModelsModule_1aaecea44044f9fb427884a67aae5ebc46" compoundref="modelsmodule_8cpp" startline="189" endline="344">nest::ModelsModule::init</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a0a576490bb86915afd10578f9577721e" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6" kindref="member">RegisterConnectionModelFlags</ref></type>
        <definition>const RegisterConnectionModelFlags nest::default_secondary_connection_model_flags</definition>
        <argsstring></argsstring>
        <name>default_secondary_connection_model_flags</name>
        <qualifiedname>nest::default_secondary_connection_model_flags</qualifiedname>
        <initializer>=
  <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6aa36566bef01b1f104bea14c298d7e881" kindref="member">RegisterConnectionModelFlags::SUPPORTS_WFR</ref> | <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6a122ce5b1aeb9e739c55b05197eb38429" kindref="member">RegisterConnectionModelFlags::HAS_DELAY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" line="78" column="36" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a0f3b2839c35955d06d818b569e290f8d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>const Time nest::TimeZero</definition>
        <argsstring></argsstring>
        <name>TimeZero</name>
        <qualifiedname>nest::TimeZero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="568" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="568" bodyend="-1"/>
        <referencedby refid="classnest_1_1SimulationManager_1a8e68ef9b61dd3e17a09829333503b6ac" compoundref="simulation__manager_8cpp" startline="116" endline="395">nest::SimulationManager::set_status</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a52bf3ebd5ba3eba761bc3d14cc385299" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_RANK</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_RANK</name>
        <qualifiedname>nest::NUM_BITS_RANK</qualifiedname>
        <initializer>= 18U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="82" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a852eea70a499766b032ecb82ad858e1d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_TID</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_TID</name>
        <qualifiedname>nest::NUM_BITS_TID</qualifiedname>
        <initializer>= 9U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="83" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a223556c51f2b0a74f4a30422cd0d7863" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_SYN_ID</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_SYN_ID</name>
        <qualifiedname>nest::NUM_BITS_SYN_ID</qualifiedname>
        <initializer>= 9U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="84" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a290bcdcb11051ea38cb3c87102278b87" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_LCID</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_LCID</name>
        <qualifiedname>nest::NUM_BITS_LCID</qualifiedname>
        <initializer>= 27U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="90" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a14538f03f4e82855881980ad2c783f1c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_PROCESSED_FLAG</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_PROCESSED_FLAG</name>
        <qualifiedname>nest::NUM_BITS_PROCESSED_FLAG</qualifiedname>
        <initializer>= 1U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="91" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1ae566c2c965b405eda8600f7e416a5e89" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_MARKER_SPIKE_DATA</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_MARKER_SPIKE_DATA</name>
        <qualifiedname>nest::NUM_BITS_MARKER_SPIKE_DATA</qualifiedname>
        <initializer>= 2U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="92" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1af860d55114066cdc4c2c28c962161840" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_LAG</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_LAG</name>
        <qualifiedname>nest::NUM_BITS_LAG</qualifiedname>
        <initializer>= 14U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="93" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a1ad5097f8e2f886e292c374c067e22f4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_DELAY</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_DELAY</name>
        <qualifiedname>nest::NUM_BITS_DELAY</qualifiedname>
        <initializer>= 21U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="94" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1afc13dd3245b8d041c20525012c160abc" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t nest::NUM_BITS_NODE_ID</definition>
        <argsstring></argsstring>
        <name>NUM_BITS_NODE_ID</name>
        <qualifiedname>nest::NUM_BITS_NODE_ID</qualifiedname>
        <initializer>= 62U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="95" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1af8e95aa79bdb397135f1436a4dcf7414" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t nest::MAX_LCID</definition>
        <argsstring></argsstring>
        <name>MAX_LCID</name>
        <qualifiedname>nest::MAX_LCID</qualifiedname>
        <initializer>= <ref refid="namespacenest_1ac8e9028e48c277fb5d15d73d83578e28" kindref="member">generate_max_value</ref>( <ref refid="namespacenest_1a290bcdcb11051ea38cb3c87102278b87" kindref="member">NUM_BITS_LCID</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="100" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="100" bodyend="-1"/>
        <referencedby refid="classnest_1_1ConnectionManager_1a785e13b8c24a23dfe161fb50df4ce94f" compoundref="connection__manager_8cpp" startline="820" endline="834">nest::ConnectionManager::increase_connection_count</referencedby>
        <referencedby refid="classnest_1_1SpikeData_1a748cd2f9bf24d44a40a8fc8a056bbbf8" compoundref="spike__data_8h" startline="176" endline="189">nest::SpikeData::set</referencedby>
        <referencedby refid="classnest_1_1OffGridSpikeData_1af9e13e269d2797aeae1ed17442c50aaf" compoundref="spike__data_8h" startline="317" endline="334">nest::OffGridSpikeData::set</referencedby>
        <referencedby refid="classnest_1_1Target_1a0ebdfa1f27914fc7941f61ac2805882f" compoundref="target_8h" startline="207" endline="211">nest::Target::set_lcid</referencedby>
        <referencedby refid="classnest_1_1Target_1af3d8ad1b079ff4e7b8c87e2585d3b918" compoundref="target_8h" startline="191" endline="204">nest::Target::Target</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1ab8fa0ea053a1a6687e7e69caa32f152a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t nest::MAX_RANK</definition>
        <argsstring></argsstring>
        <name>MAX_RANK</name>
        <qualifiedname>nest::MAX_RANK</qualifiedname>
        <initializer>= <ref refid="namespacenest_1ac8e9028e48c277fb5d15d73d83578e28" kindref="member">generate_max_value</ref>( <ref refid="namespacenest_1a52bf3ebd5ba3eba761bc3d14cc385299" kindref="member">NUM_BITS_RANK</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="101" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="101" bodyend="-1"/>
        <referencedby refid="classnest_1_1Target_1a2f6cf987112945ffa36b6cb4c93e7be6" compoundref="target_8h" startline="220" endline="224">nest::Target::set_rank</referencedby>
        <referencedby refid="classnest_1_1Target_1af3d8ad1b079ff4e7b8c87e2585d3b918" compoundref="target_8h" startline="191" endline="204">nest::Target::Target</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a317cc9e0f2b9ed32dbea3246ffa3efd4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t nest::MAX_TID</definition>
        <argsstring></argsstring>
        <name>MAX_TID</name>
        <qualifiedname>nest::MAX_TID</qualifiedname>
        <initializer>= <ref refid="namespacenest_1ac8e9028e48c277fb5d15d73d83578e28" kindref="member">generate_max_value</ref>( <ref refid="namespacenest_1a852eea70a499766b032ecb82ad858e1d" kindref="member">NUM_BITS_TID</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="102" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="102" bodyend="-1"/>
        <referencedby refid="classnest_1_1SpikeData_1a748cd2f9bf24d44a40a8fc8a056bbbf8" compoundref="spike__data_8h" startline="176" endline="189">nest::SpikeData::set</referencedby>
        <referencedby refid="classnest_1_1OffGridSpikeData_1af9e13e269d2797aeae1ed17442c50aaf" compoundref="spike__data_8h" startline="317" endline="334">nest::OffGridSpikeData::set</referencedby>
        <referencedby refid="classnest_1_1TargetData_1a9d60b7b867c1c9ec8487c11d0bb6d911" compoundref="target__data_8h" startline="269" endline="273">nest::TargetData::set_source_tid</referencedby>
        <referencedby refid="classnest_1_1Target_1aeec39233f2329fef911ecc599bb19892" compoundref="target_8h" startline="233" endline="237">nest::Target::set_tid</referencedby>
        <referencedby refid="classnest_1_1Target_1af3d8ad1b079ff4e7b8c87e2585d3b918" compoundref="target_8h" startline="191" endline="204">nest::Target::Target</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a3faf54a0eb31967ea982a6adadcfa3cf" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t nest::MAX_SYN_ID</definition>
        <argsstring></argsstring>
        <name>MAX_SYN_ID</name>
        <qualifiedname>nest::MAX_SYN_ID</qualifiedname>
        <initializer>= <ref refid="namespacenest_1ac8e9028e48c277fb5d15d73d83578e28" kindref="member">generate_max_value</ref>( <ref refid="namespacenest_1a223556c51f2b0a74f4a30422cd0d7863" kindref="member">NUM_BITS_SYN_ID</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="103" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="103" bodyend="-1"/>
        <referencedby refid="classnest_1_1ModelManager_1afdca64fbdcc8897ed6e25a8e534b482e" compoundref="model__manager_8cpp" startline="265" endline="287">nest::ModelManager::copy_connection_model_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a49632b3af5b4a82098707a82c6107a49" compoundref="model__manager_8cpp" startline="165" endline="183">nest::ModelManager::get_status</referencedby>
        <referencedby refid="classnest_1_1SpikeData_1a748cd2f9bf24d44a40a8fc8a056bbbf8" compoundref="spike__data_8h" startline="176" endline="189">nest::SpikeData::set</referencedby>
        <referencedby refid="classnest_1_1OffGridSpikeData_1af9e13e269d2797aeae1ed17442c50aaf" compoundref="spike__data_8h" startline="317" endline="334">nest::OffGridSpikeData::set</referencedby>
        <referencedby refid="classnest_1_1Target_1a4303fe6f8b2ee43c5570650e8fbfce4b" compoundref="target_8h" startline="246" endline="250">nest::Target::set_syn_id</referencedby>
        <referencedby refid="classnest_1_1Target_1af3d8ad1b079ff4e7b8c87e2585d3b918" compoundref="target_8h" startline="191" endline="204">nest::Target::Target</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a1abfcf67404c7321ae381589a495390e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t nest::DISABLED_NODE_ID</definition>
        <argsstring></argsstring>
        <name>DISABLED_NODE_ID</name>
        <qualifiedname>nest::DISABLED_NODE_ID</qualifiedname>
        <initializer>= <ref refid="namespacenest_1ac8e9028e48c277fb5d15d73d83578e28" kindref="member">generate_max_value</ref>( <ref refid="namespacenest_1afc13dd3245b8d041c20525012c160abc" kindref="member">NUM_BITS_NODE_ID</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="104" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="104" bodyend="-1"/>
        <referencedby refid="classnest_1_1Source_1a8b53686ebda72d8c0171527845b00b60" compoundref="source_8h" startline="143" endline="146">nest::Source::disable</referencedby>
        <referencedby refid="classnest_1_1Source_1a1216310968f77e1c6991586f99bd91b2" compoundref="source_8h" startline="149" endline="152">nest::Source::is_disabled</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a25366fb96059da57852da80b15ec6cf0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t nest::MAX_NODE_ID</definition>
        <argsstring></argsstring>
        <name>MAX_NODE_ID</name>
        <qualifiedname>nest::MAX_NODE_ID</qualifiedname>
        <initializer>= <ref refid="namespacenest_1a1abfcf67404c7321ae381589a495390e" kindref="member">DISABLED_NODE_ID</ref> - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="105" column="20" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="105" bodyend="-1"/>
        <referencedby refid="classnest_1_1Source_1a2a9ddcebb7a64bd6bb1b134b358543b3" compoundref="source_8h" startline="106" endline="110">nest::Source::set_node_id</referencedby>
        <referencedby refid="classnest_1_1Source_1a14fd5302a49cfc60a693f10ddeb1008e" compoundref="source_8h" startline="97" endline="103">nest::Source::Source</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a39616f30db57cea0cea5dea16ddde948" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>const tic_t nest::tic_t_max</definition>
        <argsstring></argsstring>
        <name>tic_t_max</name>
        <qualifiedname>nest::tic_t_max</qualifiedname>
        <initializer>= LONG_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="121" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a247cedaa0ccce7114815d3517b87a1f6" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1a824af732762ca1ba47526652442e562e" kindref="member">tic_t</ref></type>
        <definition>const tic_t nest::tic_t_min</definition>
        <argsstring></argsstring>
        <name>tic_t_min</name>
        <qualifiedname>nest::tic_t_min</qualifiedname>
        <initializer>= LONG_MIN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="122" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a32bdd353a98ed7e8fc719f244afa157c" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        <definition>const synindex nest::invalid_synindex</definition>
        <argsstring></argsstring>
        <name>invalid_synindex</name>
        <qualifiedname>nest::invalid_synindex</qualifiedname>
        <initializer>= <ref refid="namespacenest_1a3faf54a0eb31967ea982a6adadcfa3cf" kindref="member">MAX_SYN_ID</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="138" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="138" bodyend="-1"/>
        <referencedby refid="classnest_1_1GenericConnectorModel_1a0786c7e789e6ad238b87ee53ec0035f7" compoundref="connector__model__impl_8h" startline="261" endline="285">nest::GenericConnectorModel&lt; ConnectionT &gt;::add_connection_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1afdca64fbdcc8897ed6e25a8e534b482e" compoundref="model__manager_8cpp" startline="265" endline="287">nest::ModelManager::copy_connection_model_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1aa8f45ec27217524c07048f4c6601b146" compoundref="connection__manager_8cpp" startline="862" endline="881">nest::ConnectionManager::disconnect</referencedby>
        <referencedby refid="classnest_1_1StimulationDevice_1a1da58471abc5507ffd31884c9fda070f" compoundref="stimulation__device_8cpp" startline="60" endline="70">nest::StimulationDevice::enforce_single_syn_type</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a6b4dd572130a87b4819be5b8abd45bd9" compoundref="model__manager_8h" startline="312" endline="316">nest::ModelManager::get_num_connection_models</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a35098dc6022aaf0e464e8fe428d4c327" compoundref="source__table_8h" startline="486" endline="493">nest::SourceTable::pack_source_node_id_and_syn_id</referencedby>
        <referencedby refid="classnest_1_1StimulationDevice_1a26634ef9b2543d2475725980700333b0" compoundref="stimulation__device_8cpp" startline="29" endline="35">nest::StimulationDevice::StimulationDevice</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a76d010a7f940c7edbcdf77d42bd37207" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1adad102550a6102c0c0bea1d1083a233f" kindref="member">targetindex</ref></type>
        <definition>const targetindex nest::invalid_targetindex</definition>
        <argsstring></argsstring>
        <name>invalid_targetindex</name>
        <qualifiedname>nest::invalid_targetindex</qualifiedname>
        <initializer>= USHRT_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="147" column="19" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="147" bodyend="-1"/>
        <referencedby refid="classnest_1_1TargetIdentifierIndex_1a590fde9111a42e0fc9bea2e739a68bde" compoundref="target__identifier_8h" startline="127" endline="135">nest::TargetIdentifierIndex::get_status</referencedby>
        <referencedby refid="classnest_1_1TargetIdentifierIndex_1a7905886cb9fc21e4f8d65265e9d52224" compoundref="target__identifier_8h" startline="138" endline="142">nest::TargetIdentifierIndex::get_target_ptr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a61457deac276cd5a380bf78610f30af7" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        <definition>const thread nest::invalid_thread</definition>
        <argsstring></argsstring>
        <name>invalid_thread</name>
        <qualifiedname>nest::invalid_thread</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Value for invalid connection port number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="161" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="161" bodyend="-1"/>
        <referencedby refid="classnest_1_1SymmetricBernoulliBuilder_1a7dc57144fbbfb3bdacc30a8b6de8307b" compoundref="conn__builder_8cpp" startline="1689" endline="1780">nest::SymmetricBernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" compoundref="node_8h" startline="1009" endline="1012">nest::Node::is_model_prototype</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a6505b01bba1d7ff79d4e718ecc097a4a" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
        <definition>const rport nest::invalid_port</definition>
        <argsstring></argsstring>
        <name>invalid_port</name>
        <qualifiedname>nest::invalid_port</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Value for invalid connection port number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="183" column="13" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="183" bodyend="-1"/>
        <referencedby refid="classnest_1_1bernoulli__synapse_1_1ConnTestDummyNode_1aa15fd2e8d610678d06abeddd7f942864" compoundref="bernoulli__synapse_8h" startline="133" endline="136">nest::bernoulli_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1clopath__synapse_1_1ConnTestDummyNode_1acb1d8ad15b64eef2ccc9a9ea3e63d4f7" compoundref="clopath__synapse_8h" startline="167" endline="170">nest::clopath_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1cont__delay__synapse_1_1ConnTestDummyNode_1afa229a84848315ab5216d0637197131a" compoundref="cont__delay__synapse_8h" startline="148" endline="151">nest::cont_delay_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1ht__synapse_1_1ConnTestDummyNode_1aa4648aadbb08f716d4fe9504f82afe06" compoundref="ht__synapse_8h" startline="154" endline="157">nest::ht_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1jonke__synapse_1_1ConnTestDummyNode_1a81ad219714db80fe366281d63d92b6da" compoundref="jonke__synapse_8h" startline="263" endline="266">nest::jonke_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1quantal__stp__synapse_1_1ConnTestDummyNode_1aaca54e0762d26fcdf3848d3f8c27f82f" compoundref="quantal__stp__synapse_8h" startline="157" endline="160">nest::quantal_stp_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1static__synapse_1_1ConnTestDummyNode_1ac0270453abcf5ba1bece0c896738cfb5" compoundref="static__synapse_8h" startline="102" endline="105">nest::static_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1static__synapse__hom__w_1_1ConnTestDummyNode_1a1d7b38863d5fbf1f3fbe2e4775c8871b" compoundref="static__synapse__hom__w_8h" startline="88" endline="91">nest::static_synapse_hom_w&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__dopamine__synapse_1_1ConnTestDummyNode_1a9c91a593a7ffcc98b764e4365fe71244" compoundref="stdp__dopamine__synapse_8h" startline="259" endline="262">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__pre__centered__synapse_1_1ConnTestDummyNode_1ac4f903c8d9ce13b8cb25771a44fb03e0" compoundref="stdp__nn__pre__centered__synapse_8h" startline="181" endline="184">nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__restr__synapse_1_1ConnTestDummyNode_1a223ee93cb3c6d45154d3878edf13e2f3" compoundref="stdp__nn__restr__synapse_8h" startline="176" endline="179">nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__symm__synapse_1_1ConnTestDummyNode_1a595995542a176aa76d3b6745a472e61c" compoundref="stdp__nn__symm__synapse_8h" startline="178" endline="181">nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__pl__synapse__hom_1_1ConnTestDummyNode_1a4c7bacec8464fc18c8b16b75d90465ce" compoundref="stdp__pl__synapse__hom_8h" startline="180" endline="183">nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse_1_1ConnTestDummyNode_1a804eac3236425336b87c8a53f7e40cae" compoundref="stdp__synapse_8h" startline="168" endline="171">nest::stdp_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__facetshw__synapse__hom_1_1ConnTestDummyNode_1a0e2d2b94ee5075450d6977906ae6ce18" compoundref="stdp__synapse__facetshw__hom_8h" startline="284" endline="287">nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse__hom_1_1ConnTestDummyNode_1a66f1ecbc8dcec5faa123318511e75069" compoundref="stdp__synapse__hom_8h" startline="213" endline="216">nest::stdp_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1stdp__triplet__synapse_1_1ConnTestDummyNode_1a659de6f9d8ed9465d952dfd0ba0ba8da" compoundref="stdp__triplet__synapse_8h" startline="177" endline="180">nest::stdp_triplet_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1tsodyks2__synapse_1_1ConnTestDummyNode_1a12a26bdebe410cd5915dc027f95c8120" compoundref="tsodyks2__synapse_8h" startline="175" endline="178">nest::tsodyks2_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1tsodyks__synapse_1_1ConnTestDummyNode_1a203069ff0b6cc8bbce0db7f0a035bdc7" compoundref="tsodyks__synapse_8h" startline="194" endline="197">nest::tsodyks_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1tsodyks__synapse__hom_1_1ConnTestDummyNode_1a6344221e000ee3c69284bf24bfac030e" compoundref="tsodyks__synapse__hom_8h" startline="227" endline="230">nest::tsodyks_synapse_hom&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1urbanczik__synapse_1_1ConnTestDummyNode_1a7f2897933d832eb18f0858a5d2d98863" compoundref="urbanczik__synapse_8h" startline="162" endline="165">nest::urbanczik_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1vogels__sprekeler__synapse_1_1ConnTestDummyNode_1a8bfcbae53b536df1bd451a8cf72f4605" compoundref="vogels__sprekeler__synapse_8h" startline="145" endline="148">nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;::ConnTestDummyNode::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1gamma__sup__generator_1a80d5d2f8ba7813080fa5224ccbd10077" compoundref="gamma__sup__generator_8h" startline="215" endline="237">nest::gamma_sup_generator::send_test_event</referencedby>
        <referencedby refid="classnest_1_1multimeter_1a22db8ee3bb01a2edf37e748e630a8a82" compoundref="multimeter_8cpp" startline="49" endline="59">nest::multimeter::send_test_event</referencedby>
        <referencedby refid="classnest_1_1noise__generator_1acec86080d8ba5a879cedd4ff05376733" compoundref="noise__generator_8cpp" startline="262" endline="283">nest::noise_generator::send_test_event</referencedby>
        <referencedby refid="classnest_1_1poisson__generator__ps_1abb7fe39ae379a1b72f4263fc710b01ab" compoundref="poisson__generator__ps_8h" startline="207" endline="228">nest::poisson_generator_ps::send_test_event</referencedby>
        <referencedby refid="classnest_1_1ppd__sup__generator_1a079fbc1e3d3494cf3a494f914bd29d91" compoundref="ppd__sup__generator_8h" startline="239" endline="260">nest::ppd_sup_generator::send_test_event</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a40a49fd37ddd5ab7c47aa35c284e1bcc" prot="public" static="no" mutable="no">
        <type>const long</type>
        <definition>const long nest::delay_min</definition>
        <argsstring></argsstring>
        <name>delay_min</name>
        <qualifiedname>nest::delay_min</qualifiedname>
        <initializer>= LONG_MIN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="202" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1ae78a3b9adaae63966b61e09f96f1855f" prot="public" static="no" mutable="no">
        <type>const long</type>
        <definition>const long nest::delay_max</definition>
        <argsstring></argsstring>
        <name>delay_max</name>
        <qualifiedname>nest::delay_max</qualifiedname>
        <initializer>= LONG_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="203" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacenest_1a6e284cd8809e0b35d66727f2b8880680" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structnest_1_1PrimitiveSortObject" kindref="compound">nest::PrimitiveSortObject</ref></type>
        <definition>struct nest::PrimitiveSortObject nest::primitiveSort</definition>
        <argsstring></argsstring>
        <name>primitiveSort</name>
        <qualifiedname>nest::primitiveSort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" line="51" column="15"/>
        <referencedby refid="classnest_1_1NodeCollectionComposite_1afdfdc4501591bd917549747cfa56b9d9" compoundref="node__collection_8cpp" startline="565" endline="590">nest::NodeCollectionComposite::NodeCollectionComposite</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionComposite_1a389b48eccc1d773cb1240987ce97f799" compoundref="node__collection_8cpp" startline="651" endline="733">nest::NodeCollectionComposite::operator+</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenest_1ab155f47315fb8cfd0561a05d175c6fc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::beta_normalization_factor</definition>
        <argsstring>(const double tau_rise, const double tau_decay)</argsstring>
        <name>beta_normalization_factor</name>
        <qualifiedname>nest::beta_normalization_factor</qualifiedname>
        <param>
          <type>const double</type>
          <declname>tau_rise</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tau_decay</declname>
        </param>
        <briefdescription>
<para>Computes the normalization constant for the beta function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tau_rise</parametername>
</parameternamelist>
<parameterdescription>
<para>Synaptic rise time constant, in ms </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau_decay</parametername>
</parameternamelist>
<parameterdescription>
<para>Synaptic decay time constant, in ms</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Calculates the factor used to normalize the synaptic conductance such that incoming spike causes a peak conductance of 1 nS.</para>
<para>The solution to the beta function ODE obtained by the solver is</para>
<para>g(t) = c / ( a - b ) * ( e^(-b t) - e^(-a t) )</para>
<para>with a = 1/tau_rise, b = 1/tau_decay, a != b. The maximum of this function is at</para>
<para>t* = 1/(a-b) ln a/b</para>
<para>We want to scale the function so that</para>
<para>max g == g(t*) == g_peak</para>
<para>We thus need to set</para>
<para>c = g_peak * ( a - b ) / ( e^(-b t*) - e^(-a t*) )</para>
<para>See Rotter &amp; Diesmann, Biol Cybern 81:381 (1999) and Roth and van Rossum, Ch 6, in De Schutter, Computational Modeling Methods for Neuroscientists, MIT Press, 2010.</para>
<para>The denominator, tau_difference, that appears in the expression of the peak time is computed here to check that it is not zero. Another denominator, peak_value, appears in the expression of the normalization factor. Both tau_difference and peak_value are zero if tau_decay = tau_rise. But they can also be zero if tau_decay and tau_rise are not equal but very close to each other, due to the numerical precision limits. In such case the beta function reduces to the alpha function, and the normalization factor for the alpha function should be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/beta_normalization_factor.h" line="74" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/beta_normalization_factor.h" bodystart="74" bodyend="95"/>
        <references refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" compoundref="numerics_8cpp" startline="72">numerics::e</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a6d83992e5c06d61f33858456ac630dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FT</type>
          </param>
          <param>
            <type>typename VT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nest::updateValueParam</definition>
        <argsstring>(DictionaryDatum const &amp;d, Name const n, VT &amp;value, nest::Node *node)</argsstring>
        <name>updateValueParam</name>
        <qualifiedname>nest::updateValueParam</qualifiedname>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="className" kindref="compound">Name</ref> const</type>
          <declname>n</declname>
        </param>
        <param>
          <type>VT &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">nest::Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Update a variable from a dictionary entry if it exists, skip call if it doesn&apos;t. </para>
        </briefdescription>
        <detaileddescription>
<para>If the dictionary entry is a parameter, return value generated from the parameter parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/dict_util.h" line="45" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/dict_util.h" bodystart="45" bodyend="66"/>
        <references refid="classToken_1a309bb2d7f89471b3aa7ca63cfbde65e4" compoundref="token_8h" startline="360" endline="364">Token::datum</references>
        <references refid="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" compoundref="nest_8cpp" startline="96" endline="99">get_vp_specific_rng</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="className_1a8ee5a44599eb7a686ee64c343e0c8e18" compoundref="name_8h" startline="118" endline="122">Name::lookup</references>
        <references refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" compoundref="vp__manager__impl_8h" startline="43" endline="46">nest::VPManager::node_id_to_vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
        <references refid="classnest_1_1VPManager_1a58ddc7ca0a301790ffe71f5a9c795de7" compoundref="vp__manager__impl_8h" startline="49" endline="52">nest::VPManager::vp_to_thread</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a929fd6ef70f291e914ad24a4f17dd542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref>&lt; Enum &gt;::enable, Enum &gt;::type</type>
        <definition>std::enable_if&lt; EnableBitMaskOperators&lt; Enum &gt;::enable, Enum &gt;::type nest::operator|</definition>
        <argsstring>(Enum lhs, Enum rhs)</argsstring>
        <name>operator|</name>
        <qualifiedname>nest::operator|</qualifiedname>
        <param>
          <type>Enum</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="85" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a9fa7e45b51d2ceeb2460fb9bb34021a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref>&lt; Enum &gt;::enable, Enum &gt;::type</type>
        <definition>std::enable_if&lt; EnableBitMaskOperators&lt; Enum &gt;::enable, Enum &gt;::type nest::operator&amp;</definition>
        <argsstring>(Enum lhs, Enum rhs)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>nest::operator&amp;</qualifiedname>
        <param>
          <type>Enum</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="93" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ae58d61ff4baa2a599d3ad1fa8e6a399c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref>&lt; Enum &gt;::enable, Enum &gt;::type</type>
        <definition>std::enable_if&lt; EnableBitMaskOperators&lt; Enum &gt;::enable, Enum &gt;::type nest::operator^</definition>
        <argsstring>(Enum &amp;lhs, Enum rhs)</argsstring>
        <name>operator^</name>
        <qualifiedname>nest::operator^</qualifiedname>
        <param>
          <type>Enum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="101" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a76d1d6c2bb52663c61b77c25f6ee4e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref>&lt; Enum &gt;::enable, Enum &gt;::type</type>
        <definition>std::enable_if&lt; EnableBitMaskOperators&lt; Enum &gt;::enable, Enum &gt;::type nest::operator|=</definition>
        <argsstring>(Enum &amp;lhs, Enum rhs)</argsstring>
        <name>operator|=</name>
        <qualifiedname>nest::operator|=</qualifiedname>
        <param>
          <type>Enum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="109" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a0751a31fd1c858d4573136de504ee5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref>&lt; Enum &gt;::enable, Enum &gt;::type</type>
        <definition>std::enable_if&lt; EnableBitMaskOperators&lt; Enum &gt;::enable, Enum &gt;::type nest::operator&amp;=</definition>
        <argsstring>(Enum &amp;lhs, Enum rhs)</argsstring>
        <name>operator&amp;=</name>
        <qualifiedname>nest::operator&amp;=</qualifiedname>
        <param>
          <type>Enum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="118" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="118" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a73888557d2519d0ffd42518a8e99c06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structnest_1_1EnableBitMaskOperators" kindref="compound">EnableBitMaskOperators</ref>&lt; Enum &gt;::enable, Enum &gt;::type</type>
        <definition>std::enable_if&lt; EnableBitMaskOperators&lt; Enum &gt;::enable, Enum &gt;::type nest::operator^=</definition>
        <argsstring>(Enum &amp;lhs, Enum rhs)</argsstring>
        <name>operator^=</name>
        <qualifiedname>nest::operator^=</qualifiedname>
        <param>
          <type>Enum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="127" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="127" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ad7d117022997d32ce4ae63a98b892dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nest::enumFlagSet</definition>
        <argsstring>(const Enum en, const Enum flag)</argsstring>
        <name>enumFlagSet</name>
        <qualifiedname>nest::enumFlagSet</qualifiedname>
        <param>
          <type>const Enum</type>
          <declname>en</declname>
        </param>
        <param>
          <type>const Enum</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" line="136" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/enum_bitfield.h" bodystart="136" bodyend="140"/>
        <referencedby refid="classnest_1_1ModelManager_1a647d0f754ac09d9a17ab7567fd05801f" compoundref="model__manager__impl_8h" startline="58" endline="95">nest::ModelManager::register_connection_model</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a5377d2ef98724312850ab1613dc019f7" compoundref="model__manager__impl_8h" startline="102" endline="118">nest::ModelManager::register_secondary_connection_model</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac489c7731ede9e6caf039e860913bad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; nest::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const LoggingEvent &amp;e)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>nest::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1LoggingEvent" kindref="compound">LoggingEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/logging_event.cpp" line="49" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/logging_event.cpp" bodystart="50" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a7b89f02fb6492d34b0bd4980e1cb4ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CN</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double nest::regula_falsi</definition>
        <argsstring>(const CN &amp;node, const double dt)</argsstring>
        <name>regula_falsi</name>
        <qualifiedname>nest::regula_falsi</qualifiedname>
        <param>
          <type>const CN &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Localize threshold crossing by using Illinois algorithm of regula falsi method. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://en.wikipedia.org/wiki/Regula_falsi#The_Illinois_algorithm">https://en.wikipedia.org/wiki/Regula_falsi#The_Illinois_algorithm</ulink> for details on the algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Node" kindref="compound">Node</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>model object that call function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>double</parametername>
</parameternamelist>
<parameterdescription>
<para>length of interval since previous event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>time from previous event to threshold crossing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/regula_falsi.h" line="42" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/regula_falsi.h" bodystart="42" bodyend="109"/>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps_1a9ecd1aecfc14c0439e67a65a9d2bee55" compoundref="iaf__psc__exp__ps_8cpp" startline="495" endline="518">nest::iaf_psc_exp_ps::emit_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a52e9f5331f380cacdcec5ab21903d1e2" compoundref="iaf__psc__exp__ps__lossless_8cpp" startline="539" endline="561">nest::iaf_psc_exp_ps_lossless::emit_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__ps_1ae6fbdfecc14e79bff26571f0b78563d6" compoundref="iaf__psc__alpha__ps_8cpp" startline="530" endline="551">nest::iaf_psc_alpha_ps::emit_spike_</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a261fd1901f840fd765123ea0a0539e27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nest::median3_</definition>
        <argsstring>(const BlockVector&lt; T &gt; &amp;vec, const size_t i, const size_t j, const size_t k)</argsstring>
        <name>median3_</name>
        <qualifiedname>nest::median3_</qualifiedname>
        <param>
          <type>const <ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Calculates the median of three elements. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="http://algs4.cs.princeton.edu/23quicksort/QuickX.java.html">http://algs4.cs.princeton.edu/23quicksort/QuickX.java.html</ulink>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" line="50" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" bodystart="50" bodyend="58"/>
        <referencedby refid="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" compoundref="sort_8h" startline="92" endline="168">quicksort3way</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a4e87d7711f377e5648ffe1a5cc3b734b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::insertion_sort</definition>
        <argsstring>(BlockVector&lt; T1 &gt; &amp;vec_sort, BlockVector&lt; T2 &gt; &amp;vec_perm, const size_t lo, const size_t hi)</argsstring>
        <name>insertion_sort</name>
        <qualifiedname>nest::insertion_sort</qualifiedname>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T1 &gt; &amp;</type>
          <declname>vec_sort</declname>
        </param>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T2 &gt; &amp;</type>
          <declname>vec_perm</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
<para>Insertion sort, adapted from Sedgewick &amp; Wayne (2011), Algorithms 4th edition, p251ff. </para>
        </briefdescription>
        <detaileddescription>
<para>Sorts the two vectors vec_sort and vec_perm, by sorting the entries in vec_sort and applying the same exchanges to vec_perm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" line="69" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" bodystart="69" bodyend="79"/>
        <referencedby refid="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" compoundref="sort_8h" startline="92" endline="168">quicksort3way</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::quicksort3way</definition>
        <argsstring>(BlockVector&lt; T1 &gt; &amp;vec_sort, BlockVector&lt; T2 &gt; &amp;vec_perm, const size_t lo, const size_t hi)</argsstring>
        <name>quicksort3way</name>
        <qualifiedname>nest::quicksort3way</qualifiedname>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T1 &gt; &amp;</type>
          <declname>vec_sort</declname>
        </param>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T2 &gt; &amp;</type>
          <declname>vec_perm</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
<para>Quicksort with 3-way partitioning, adapted from Sedgewick &amp; Wayne (2011), Algorithms 4th edition, p296ff (see <ulink url="http://algs4.cs.princeton.edu/23quicksort/QuickX.java.html">http://algs4.cs.princeton.edu/23quicksort/QuickX.java.html</ulink>). </para>
        </briefdescription>
        <detaileddescription>
<para>Recursively sorts the two vectors vec_sort and vec_perm, by sorting the entries in vec_sort and applying the same exchanges to vec_perm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" line="92" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" bodystart="92" bodyend="168"/>
        <references refid="namespacenest_1a4e87d7711f377e5648ffe1a5cc3b734b" compoundref="sort_8h" startline="69" endline="79">insertion_sort</references>
        <references refid="sort_8h_1afa333a7bc59f751728b1c24df473ae85" compoundref="sort_8h" startline="40">INSERTION_SORT_CUTOFF</references>
        <references refid="namespacenest_1a261fd1901f840fd765123ea0a0539e27" compoundref="sort_8h" startline="50" endline="58">median3_</references>
        <references refid="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" compoundref="sort_8h" startline="92" endline="168">quicksort3way</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
        <referencedby refid="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" compoundref="sort_8h" startline="92" endline="168">quicksort3way</referencedby>
        <referencedby refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::sort</definition>
        <argsstring>(BlockVector&lt; T1 &gt; &amp;vec_sort, BlockVector&lt; T2 &gt; &amp;vec_perm)</argsstring>
        <name>sort</name>
        <qualifiedname>nest::sort</qualifiedname>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T1 &gt; &amp;</type>
          <declname>vec_sort</declname>
        </param>
        <param>
          <type><ref refid="classBlockVector" kindref="compound">BlockVector</ref>&lt; T2 &gt; &amp;</type>
          <declname>vec_perm</declname>
        </param>
        <briefdescription>
<para>Sorts two vectors according to elements in first vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Convenience function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" line="177" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/sort.h" bodystart="177" bodyend="186"/>
        <references refid="classBlockVector_1a2f29f4d518506752e5e5ee9940e6365a" compoundref="block__vector_8h" startline="370" endline="373">BlockVector&lt; value_type_ &gt;::begin</references>
        <references refid="classBlockVector_1a794af8153625e4c925137afa010b2864" compoundref="block__vector_8h" startline="384" endline="387">BlockVector&lt; value_type_ &gt;::end</references>
        <references refid="iterator__pair_8h_1a146822c90de931b26de898c60dbbb764" compoundref="iterator__pair_8h" startline="154" endline="157">make_iterator_pair</references>
        <references refid="namespacenest_1ac4999dd06c52e281c7050729350dd6b3" compoundref="sort_8h" startline="92" endline="168">quicksort3way</references>
        <references refid="classBlockVector_1aa333e4bdeefd6bc28577467c5bdede42" compoundref="block__vector_8h" startline="429" endline="442">BlockVector&lt; value_type_ &gt;::size</references>
        <referencedby refid="classnest_1_1Connector_1acd9e81a181501c402d58b190b62f5e79" compoundref="connector__base_8h" startline="441" endline="444">nest::Connector&lt; ConnectionT &gt;::sort_connections</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a8a5b0963d5eb953c2d30d626b4e8e268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; nest::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Stopwatch &amp;stopwatch)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>nest::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Stopwatch" kindref="compound">Stopwatch</ref> &amp;</type>
          <declname>stopwatch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/stopwatch.cpp" line="27" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/stopwatch.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac85a36cfb9e1398ecbfbc2c4118486a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>D</declname>
            <defname>D</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nest::node_id_less</definition>
        <argsstring>(const std::pair&lt; Position&lt; D &gt;, index &gt; &amp;a, const std::pair&lt; Position&lt; D &gt;, index &gt; &amp;b)</argsstring>
        <name>node_id_less</name>
        <qualifiedname>nest::node_id_less</qualifiedname>
        <param>
          <type>const std::pair&lt; <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D &gt;, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::pair&lt; <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D &gt;, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/free_layer.h" line="340" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/free_layer.h" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1KernelManager" kindref="compound">KernelManager</ref> &amp;</type>
        <definition>nest::KernelManager &amp; nest::kernel</definition>
        <argsstring>()</argsstring>
        <name>kernel</name>
        <qualifiedname>nest::kernel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/kernel_manager.h" line="260" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/kernel_manager.h" bodystart="272" bodyend="275" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/kernel_manager.h" declline="260" declcolumn="15"/>
        <references refid="classnest_1_1KernelManager_1a24600a9e337f4c8d896d81d9b0d244bf" compoundref="kernel__manager_8h" startline="265" endline="269">nest::KernelManager::get_kernel_manager</references>
        <referencedby refid="classnest_1_1GenericConnectorModel_1a55662c78049406c5119cd0c81e6de812" compoundref="connector__model__impl_8h" startline="185" endline="256">nest::GenericConnectorModel&lt; ConnectionT &gt;::add_connection</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1afd8f99f2e07b51408dcc72cc165e505e" compoundref="target__table__devices__impl_8h" startline="54" endline="73">nest::TargetTableDevices::add_connection_from_device</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1a09f957d8ac14589929de4dbea0273abf" compoundref="target__table__devices__impl_8h" startline="35" endline="51">nest::TargetTableDevices::add_connection_to_device</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a0c14759edc75eb1c32c8d1ba475a69b2" compoundref="node__manager_8cpp" startline="235" endline="271">nest::NodeManager::add_devices_</referencedby>
        <referencedby refid="classnest_1_1SparseNodeArray_1aadd91d887ae4a2a523385f9a0418e020" compoundref="sparse__node__array_8cpp" startline="70" endline="113">nest::SparseNodeArray::add_local_node</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad949c0a73a73c3be7b24d7ba4ed0175a" compoundref="node__manager_8cpp" startline="274" endline="309">nest::NodeManager::add_music_nodes_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a2fdd0174dbf1bf97c20a37bea8867140" compoundref="node__manager_8cpp" startline="187" endline="232">nest::NodeManager::add_neurons_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">nest::NodeManager::add_node</referencedby>
        <referencedby refid="classnest_1_1SliceRingBuffer_1ae557bbf98d8bba3f9c01f3d490b5701d" compoundref="slice__ring__buffer_8h" startline="154" endline="161">nest::SliceRingBuffer::add_spike</referencedby>
        <referencedby refid="classnest_1_1TargetTable_1ad19a4c20b88fb930687b5b29a526d71c" compoundref="target__table_8cpp" startline="87" endline="110">nest::TargetTable::add_target</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1a367e0a54fd85196fe34d543960d43110" compoundref="simulation__manager_8cpp" startline="1065" endline="1096">nest::SimulationManager::advance_time_</referencedby>
        <referencedby refid="namespacenest_1ae70d1711c4858531e2f644ce06800846" compoundref="nest_8cpp" startline="351" endline="362">apply</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1aee4a028d40203ccb529b003faae007e7" compoundref="node__collection_8cpp" startline="521" endline="535">nest::NodeCollectionPrimitive::assert_consistent_model_ids_</referencedby>
        <referencedby refid="classnest_1_1DelayChecker_1afd253171e8f64e64ff5cd672b4ba1799" compoundref="delay__checker_8cpp" startline="184" endline="246">nest::DelayChecker::assert_two_valid_delays_steps</referencedby>
        <referencedby refid="classnest_1_1DelayChecker_1a4a0e6ca8d78a66919f2688e286bf66cb" compoundref="delay__checker_8cpp" startline="121" endline="181">nest::DelayChecker::assert_valid_delay_ms</referencedby>
        <referencedby refid="structnest_1_1inhomogeneous__poisson__generator_1_1Parameters___1af2c78261577f5fd83d2113c58e81fe95" compoundref="inhomogeneous__poisson__generator_8cpp" startline="77" endline="110">nest::inhomogeneous_poisson_generator::Parameters_::assert_valid_rate_time_and_insert</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a25ab28334000db7babef6da0ad4b7135" compoundref="recording__backend__sionlib_8cpp" startline="521" endline="532">nest::RecordingBackendSIONlib::build_filename_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a38c4581862f4bbc6e43c83daaa2453a2" compoundref="connection__manager_8cpp" startline="375" endline="381">nest::ConnectionManager::calibrate</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1af51df51b09ebbf233be7af6bd39137b1" compoundref="model__manager_8cpp" startline="483">nest::ModelManager::calibrate</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1aa1ddc2339c6bda7ff3675efb16f6816c" compoundref="simulation__manager_8cpp" startline="620" endline="673">nest::SimulationManager::call_update_</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1aaaf1a924c8030b8971b6f86e448615cb" compoundref="conn__builder_8cpp" startline="159" endline="198">nest::ConnBuilder::change_connected_synaptic_elements</referencedby>
        <referencedby refid="classnest_1_1RandomManager_1a76054450fb204654be7784e00f3e35c5" compoundref="random__manager_8cpp" startline="190" endline="229">nest::RandomManager::check_rng_synchrony</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a87618f444ba424475cf5dcc434bde8af" compoundref="connection__manager_8cpp" startline="1606" endline="1609">nest::ConnectionManager::check_secondary_connections_exist</referencedby>
        <referencedby refid="classnest_1_1stdp__dopamine__synapse_1aae49e806f698accd80fca8156ccf3186" compoundref="stdp__dopamine__synapse_8h" startline="377" endline="416">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::check_synapse_params</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a834b299d80a29979238589e61d413378" compoundref="node__manager_8cpp" startline="703" endline="712">nest::NodeManager::check_wfr_use</referencedby>
        <referencedby refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" compoundref="nest_8cpp" startline="265" endline="268">cleanup</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1af08f3f771cef6363f8b4be4dc84992fa" compoundref="recording__backend__mpi_8cpp" startline="268" endline="297">nest::RecordingBackendMPI::cleanup</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1af2d373b936e4d432a688a78af29be0ce" compoundref="simulation__manager_8cpp" startline="600" endline="617">nest::SimulationManager::cleanup</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1a16f875498206f2315670fb6b68f62add" compoundref="stimulation__backend__mpi_8cpp" startline="257" endline="283">nest::StimulationBackendMPI::cleanup</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a9c3e3fa0c2f2fb7c919092dbd0c56f53" compoundref="recording__backend__sionlib_8cpp" startline="267" endline="424">nest::RecordingBackendSIONlib::close_files_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a0ef552ea0836e10de6ed2d44816a155f" compoundref="event__delivery__manager_8cpp" startline="735" endline="812">nest::EventDeliveryManager::collocate_target_data_buffers_</referencedby>
        <referencedby refid="classnest_1_1FreeLayer_1ad3fe5e6f34d4be2486cd8d325c71ec56" compoundref="free__layer_8h" startline="277" endline="327">nest::FreeLayer&lt; D &gt;::communicate_positions_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1aa27ab465e73a0186b77d64d81ab306e5" compoundref="model__manager_8cpp" startline="503" endline="507">nest::ModelManager::compare_model_by_id_</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a15e7c1635c267bf81b15d1b445252792" compoundref="source__table_8cpp" startline="202" endline="267">nest::SourceTable::compute_buffer_pos_for_unique_secondary_sources</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a8b0dbf28a53e184b2f2c6e988e656435" compoundref="connection__manager_8cpp" startline="1351" endline="1388">nest::ConnectionManager::compute_compressed_secondary_recv_buffer_positions</referencedby>
        <referencedby refid="structnest_1_1RecordingBackendASCII_1_1DeviceData_1a367cd4c751a9e1206399f660899d1b8f" compoundref="recording__backend__ascii_8cpp" startline="357" endline="374">nest::RecordingBackendASCII::DeviceData::compute_filename_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a4a305862071d9332c29fc4e675ada3f3" compoundref="connection__manager_8cpp" startline="1318" endline="1348">nest::ConnectionManager::compute_target_data_buffer_size</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1ae14172cd7bc3e95af782489ceaa5de3a" compoundref="recording__backend__ascii_8cpp" startline="157" endline="169">nest::RecordingBackendASCII::compute_vp_node_id_string_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1ad10ad6a43540d15a7c39e3bd6801eed7" compoundref="event__delivery__manager_8cpp" startline="189" endline="195">nest::EventDeliveryManager::configure_secondary_buffers</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a9de27ed5f42c60efc6875208aa86c813" compoundref="event__delivery__manager_8cpp" startline="166" endline="176">nest::EventDeliveryManager::configure_spike_data_buffers</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1aa81b19d0db3bbfa6f270defd5fe20a56" compoundref="event__delivery__manager_8cpp" startline="179" endline="186">nest::EventDeliveryManager::configure_spike_register</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a530074df95dbb090b6fda4e3538c0102" compoundref="conn__builder_8cpp" startline="42" endline="123">nest::ConnBuilder::ConnBuilder</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a54828d7220c7a68e98b83529e0405208" compoundref="conn__builder_8cpp" startline="204" endline="263">nest::ConnBuilder::connect</referencedby>
        <referencedby refid="namespacenest_1af6ec6494018607109b78df691ed06e6d" compoundref="nest_8cpp" startline="182" endline="188">connect</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a0594fd0c611ae17f9ebe921d0153e60a" compoundref="connection__manager_8cpp" startline="436" endline="458">nest::ConnectionManager::connect</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a32044ab7e189d7ca5389165781b1b126" compoundref="conn__builder_8cpp" startline="605" endline="681">nest::OneToOneBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a923eef1a06a2714c07fbfb18a8be03a3" compoundref="conn__builder_8cpp" startline="836" endline="889">nest::AllToAllBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedInDegreeBuilder_1a831a8c5343e315c97863c5112ea27f57" compoundref="conn__builder_8cpp" startline="1133" endline="1191">nest::FixedInDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedOutDegreeBuilder_1ab9a2bb23bb142823ef65509b1486ed53" compoundref="conn__builder_8cpp" startline="1299" endline="1369">nest::FixedOutDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedTotalNumberBuilder_1abab6d39ad2dc94125e09f5c6fc4212c4" compoundref="conn__builder_8cpp" startline="1407" endline="1538">nest::FixedTotalNumberBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1BernoulliBuilder_1a0aa500518f0f92edf83f9273f25a3495" compoundref="conn__builder_8cpp" startline="1567" endline="1621">nest::BernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1SymmetricBernoulliBuilder_1a7dc57144fbbfb3bdacc30a8b6de8307b" compoundref="conn__builder_8cpp" startline="1689" endline="1780">nest::SymmetricBernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1SPBuilder_1a3f3cc4e89529157f3c2381423d8f79ad" compoundref="conn__builder_8cpp" startline="1847" endline="1893">nest::SPBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a199080ea2054e8a1f9282c6201eec278" compoundref="connection__manager_8cpp" startline="743" endline="786">nest::ConnectionManager::connect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a4f5d4769f422431b7560df35af23867a" compoundref="connection__manager_8cpp" startline="568" endline="740">nest::ConnectionManager::connect_arrays</referencedby>
        <referencedby refid="namespacenest_1a09866d06afe4905d1c363ac9e4306d1c" compoundref="nest_8cpp" startline="191" endline="201">connect_arrays</referencedby>
        <referencedby refid="namespacenest_1a33bd25216b470958f2f7000bdf6eedf9" compoundref="spatial_8cpp" startline="405" endline="418">connect_layers</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a9406f2b55a5fdbb556a8c5642e150967" compoundref="connection__creator__impl_8h" startline="73" endline="111">nest::ConnectionCreator::connect_to_target_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1aef56ff34a0321cb40e4a13b5e3743323" compoundref="connection__manager_8cpp" startline="1391" endline="1480">nest::ConnectionManager::connection_required</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aba3b91642fb738809e096bb60678fb1f" compoundref="connection__creator_8cpp" startline="29" endline="154">nest::ConnectionCreator::ConnectionCreator</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1afdca64fbdcc8897ed6e25a8e534b482e" compoundref="model__manager_8cpp" startline="265" endline="287">nest::ModelManager::copy_connection_model_</referencedby>
        <referencedby refid="namespacenest_1af48027ba5206175b7540ff91ba3d07b2" compoundref="nest_8cpp" startline="271" endline="274">copy_model</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a14ec157c17bfe589d51f82c206aba049" compoundref="model__manager_8cpp" startline="243" endline="262">nest::ModelManager::copy_node_model_</referencedby>
        <referencedby refid="namespacenest_1aa2a77f5dfa38b2ed7837975a4ef39a7e" compoundref="nest_8cpp" startline="164" endline="173">create</referencedby>
        <referencedby refid="classnest_1_1NodeCollection_1a2db8eb2c7ad39de9852f1bf563328a76" compoundref="node__collection_8cpp" startline="218" endline="263">nest::NodeCollection::create_</referencedby>
        <referencedby refid="classnest_1_1AbstractLayer_1a268b14297e57188c5f29a44bad369990" compoundref="layer_8cpp" startline="55" endline="160">nest::AbstractLayer::create_layer</referencedby>
        <referencedby refid="classnest_1_1SPManager_1ae2c3831a343dd28da33c87fed976b2a9" compoundref="sp__manager_8cpp" startline="533" endline="562">nest::SPManager::delete_synapse</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a3f7183684e5410096b01044c13da7f80" compoundref="sp__manager_8cpp" startline="575" endline="621">nest::SPManager::delete_synapses_from_post</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a135b22e6cd3f6888480ceb0ef2ef9706" compoundref="sp__manager_8cpp" startline="476" endline="519">nest::SPManager::delete_synapses_from_pre</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1aba9898648e890ea2ac369891420259d9" compoundref="event__delivery__manager_8cpp" startline="574" endline="660">nest::EventDeliveryManager::deliver_events_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a23401736e55713e86c6f4b55805d8105" compoundref="event__delivery__manager_8cpp" startline="312" endline="316">nest::EventDeliveryManager::deliver_secondary_events</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a47d174cc3f78508f825c44806b4bf247" compoundref="connection__manager_8cpp" startline="1512" endline="1554">nest::ConnectionManager::deliver_secondary_events</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a9b271216cabc00dd720e6ee280e5c7ec" compoundref="node__manager_8cpp" startline="567" endline="578">nest::NodeManager::destruct_nodes_</referencedby>
        <referencedby refid="classnest_1_1SliceRingBuffer_1a01390dbc1eadaab667cfc9918c176818" compoundref="slice__ring__buffer_8cpp" startline="76" endline="82">nest::SliceRingBuffer::discard_events</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a4fafe51332d31c75a637d4837bbaea4d" compoundref="conn__builder_8cpp" startline="269" endline="288">nest::ConnBuilder::disconnect</referencedby>
        <referencedby refid="namespacenest_1a5d96a7094e3aaa072e4d940a47378b48" compoundref="nest_8cpp" startline="216" endline="225">disconnect</referencedby>
        <referencedby refid="classnest_1_1SPManager_1ae5b9af1301a59e2ccde8633c203e34a3" compoundref="sp__manager_8cpp" startline="215" endline="252">nest::SPManager::disconnect</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a4311332702ee0643fa6fc4aadf29a203" compoundref="conn__builder_8cpp" startline="689" endline="734">nest::OneToOneBuilder::disconnect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1ae0f4378442fc308cfc46512d70b77bbc" compoundref="conn__builder_8cpp" startline="982" endline="1029">nest::AllToAllBuilder::disconnect_</referencedby>
        <referencedby refid="namespacenest_1acd27b8e605b9217b44c1cdbcafef61dc" compoundref="spatial_8cpp" startline="139" endline="196">displacement</referencedby>
        <referencedby refid="namespacenest_1a110b54fe73a6033aab002995564c4e8a" compoundref="spatial_8cpp" startline="232" endline="289">distance</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a74794a506a31d2a674d0d4ebfa383a2c" compoundref="event__delivery__manager_8cpp" startline="826" endline="863">nest::EventDeliveryManager::distribute_target_data_buffers_</referencedby>
        <referencedby refid="classnest_1_1Layer_1ac1b9a1c8651f3eefae09c200e00974af" compoundref="layer__impl_8h" startline="300" endline="351">nest::Layer&lt; D &gt;::dump_connections</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps_1af5c280cba689ac812462b13d6e033300" compoundref="iaf__psc__exp__ps_8cpp" startline="521" endline="539">nest::iaf_psc_exp_ps::emit_instant_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a29dacad8f7cc807b149e207c536fa972" compoundref="iaf__psc__exp__ps__lossless_8cpp" startline="564" endline="582">nest::iaf_psc_exp_ps_lossless::emit_instant_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__ps_1a0ba5d564a4e7afaa0b24391f5ebec471" compoundref="iaf__psc__alpha__ps_8cpp" startline="554" endline="573">nest::iaf_psc_alpha_ps::emit_instant_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta__ps_1a174817baf4aa7d69b1cc3bb109cf9dfc" compoundref="iaf__psc__delta__ps_8cpp" startline="485" endline="502">nest::iaf_psc_delta_ps::emit_instant_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps_1a9ecd1aecfc14c0439e67a65a9d2bee55" compoundref="iaf__psc__exp__ps_8cpp" startline="495" endline="518">nest::iaf_psc_exp_ps::emit_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a52e9f5331f380cacdcec5ab21903d1e2" compoundref="iaf__psc__exp__ps__lossless_8cpp" startline="539" endline="561">nest::iaf_psc_exp_ps_lossless::emit_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta__ps_1aa776447793d5f44cb8d1b543e28b090d" compoundref="iaf__psc__delta__ps_8cpp" startline="461" endline="482">nest::iaf_psc_delta_ps::emit_spike_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__ps_1ae6fbdfecc14e79bff26571f0b78563d6" compoundref="iaf__psc__alpha__ps_8cpp" startline="530" endline="551">nest::iaf_psc_alpha_ps::emit_spike_</referencedby>
        <referencedby refid="namespacenest_1ab0d151cd0f6b4a68551541dbdd38c531" compoundref="nest_8cpp" startline="66" endline="69">enable_dryrun_mode</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a9b388e2d3ab09e4bdebce02aa9ea3a60" compoundref="sp__manager_8cpp" startline="741" endline="760">nest::SPManager::enable_structural_plasticity</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a801fd82238c17423ed9dfda3f512602a" compoundref="node__manager_8cpp" startline="496" endline="564">nest::NodeManager::ensure_valid_thread_local_ids</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1GetStatus__CFunction_1a019df3486184f89f785c075a2bc841b1" compoundref="nestmodule_8cpp" startline="533" endline="548">nest::NestModule::GetStatus_CFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1GetStatus__aFunction_1a814b0feefc3465c7f07f07e62657225b" compoundref="nestmodule_8cpp" startline="552" endline="573">nest::NestModule::GetStatus_aFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1SetStatus__aaFunction_1a25499a2a027120acd64b555a89bbd16a" compoundref="nestmodule_8cpp" startline="394" endline="444">nest::NestModule::SetStatus_aaFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1CopyModel__l__l__DFunction_1a79f13278240061e8b4eeb21a97ae382d" compoundref="nestmodule_8cpp" startline="785" endline="798">nest::NestModule::CopyModel_l_l_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Disconnect__g__g__D__DFunction_1a79289f39f19d401173fda7265426a987" compoundref="nestmodule_8cpp" startline="889" endline="903">nest::NestModule::Disconnect_g_g_D_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Connect__g__g__D__DFunction_1a1f97500f608374fd37eeaedfb8f24786" compoundref="nestmodule_8cpp" startline="922" endline="940">nest::NestModule::Connect_g_g_D_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Connect__g__g__D__aFunction_1aa741899d36690af567ee03811ec6ba6e" compoundref="nestmodule_8cpp" startline="943" endline="967">nest::NestModule::Connect_g_g_D_aFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1MemoryInfoFunction_1ab0013609f96f0b49214ec5edced43244" compoundref="nestmodule_8cpp" startline="984" endline="988">nest::NestModule::MemoryInfoFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1RankFunction_1add875ed49d371d7c451eb6753876c082" compoundref="nestmodule_8cpp" startline="1042" endline="1046">nest::NestModule::RankFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1NumProcessesFunction_1a641a5504a7667a6c5eafe00eef2e4f01" compoundref="nestmodule_8cpp" startline="1060" endline="1064">nest::NestModule::NumProcessesFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1SyncProcessesFunction_1aa405dd9e4291cbdfc3384874abf731ae" compoundref="nestmodule_8cpp" startline="1133" endline="1137">nest::NestModule::SyncProcessesFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1TimeCommunication__i__i__bFunction_1abee220515992e6b7a9715a08a72f26a3" compoundref="nestmodule_8cpp" startline="1151" endline="1171">nest::NestModule::TimeCommunication_i_i_bFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1TimeCommunicationv__i__iFunction_1a4e814e1f66f6f1ce3b620d3edbd2b2dc" compoundref="nestmodule_8cpp" startline="1186" endline="1200">nest::NestModule::TimeCommunicationv_i_iFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1TimeCommunicationAlltoall__i__iFunction_1af733ee91b5dce28b5f0e6e9a42854da1" compoundref="nestmodule_8cpp" startline="1216" endline="1230">nest::NestModule::TimeCommunicationAlltoall_i_iFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1TimeCommunicationAlltoallv__i__iFunction_1a00e83e520e49e571317dc94cd20a1982" compoundref="nestmodule_8cpp" startline="1247" endline="1261">nest::NestModule::TimeCommunicationAlltoallv_i_iFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1ProcessorNameFunction_1ae5c16e26aef47c1a04f146634ec38420" compoundref="nestmodule_8cpp" startline="1281" endline="1285">nest::NestModule::ProcessorNameFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1EnableStructuralPlasticity__Function_1a1984f42a68950c18893a5c6ac1bb112e" compoundref="nestmodule_8cpp" startline="1689" endline="1694">nest::NestModule::EnableStructuralPlasticity_Function::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1DisableStructuralPlasticity__Function_1a10e8084537802c0c47c72259efb5608e" compoundref="nestmodule_8cpp" startline="1700" endline="1705">nest::NestModule::DisableStructuralPlasticity_Function::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1SetStdpEps__dFunction_1a6e26173d5f6015daf50cfdba893d846c" compoundref="nestmodule_8cpp" startline="1716" endline="1725">nest::NestModule::SetStdpEps_dFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1ConnectLayers__g__g__DFunction_1ab0557c28442c2601fb6da5ebed659344" compoundref="nestmodule_8cpp" startline="2685" endline="2701">nest::NestModule::ConnectLayers_g_g_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a4339600d1ec56c9e21506276f03f1764" compoundref="connection__creator_8cpp" startline="157" endline="213">nest::ConnectionCreator::extract_params_</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a199dd1f7d70ceb20323d7ec3812953e5" compoundref="source__table_8cpp" startline="487" endline="550">nest::SourceTable::fill_compressed_spike_data</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a4dcd6368bfc2a47cefae88e7264a9893" compoundref="node__manager_8cpp" startline="689" endline="700">nest::NodeManager::finalize_nodes</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a5dc7dd2128af0f9f34d8ae92a0fa81fd" compoundref="source__table_8cpp" startline="98" endline="109">nest::SourceTable::find_maximal_position</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="635">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="640" endline="788">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a9686fe3b77c602b6f8fe7750f1358de7" compoundref="event__delivery__manager_8cpp" startline="304" endline="309">nest::EventDeliveryManager::gather_secondary_events</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a571ba855a00e3c96c4ff01ba59ea0e1c" compoundref="event__delivery__manager_8cpp" startline="333" endline="462">nest::EventDeliveryManager::gather_spike_data_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1afdf89d8b5bd8a4b64d46d6f5c294e5c1" compoundref="event__delivery__manager_8cpp" startline="663" endline="732">nest::EventDeliveryManager::gather_target_data</referencedby>
        <referencedby refid="namespacenest_1ab62942f739d1f2d4833471d1c54f4400" compoundref="nest_8cpp" startline="154" endline="161">get_connection_status</referencedby>
        <referencedby refid="namespacenest_1af07409401611ae3fa1c2558cd0f014ea" compoundref="nest_8cpp" startline="204" endline="213">get_connections</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a42095f521521f147812163a8b98ee96f" compoundref="connection__manager_8cpp" startline="946" endline="1015">nest::ConnectionManager::get_connections</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1acc4d13aa2d93e3afc6d18765ececb02c" compoundref="target__table__devices_8cpp" startline="154" endline="182">nest::TargetTableDevices::get_connections_from_devices_</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1ac1e13e0d6e44dc15f3205d8b14b4c87d" compoundref="target__table__devices_8cpp" startline="134" endline="151">nest::TargetTableDevices::get_connections_to_device_for_lid_</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1ab34d597db52fd55318307a5f5babea37" compoundref="target__table__devices_8cpp" startline="108" endline="131">nest::TargetTableDevices::get_connections_to_devices_</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a4ee6b18a6bad6d272e07d838a2af7f1a" compoundref="model__manager_8cpp" startline="394" endline="410">nest::ModelManager::get_connector_defaults</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a13545535bee9810548166d5d8606cbfc" compoundref="connection__manager_8cpp" startline="187" endline="190">nest::ConnectionManager::get_delay_checker</referencedby>
        <referencedby refid="classnest_1_1VPManager_1a3b2e80efe935567e598d2074a3b40bb3" compoundref="vp__manager__impl_8h" startline="105" endline="118">nest::VPManager::get_end_rank_per_thread</referencedby>
        <referencedby refid="classnest_1_1ArchivingNode_1a17dd209382eae47cbb5f02b88fbb997a" compoundref="archiving__node_8cpp" startline="153" endline="178">nest::ArchivingNode::get_history</referencedby>
        <referencedby refid="classnest_1_1RingBuffer_1a1c4bb5296484e74e2d97532e56b95109" compoundref="ring__buffer_8h" startline="190" endline="196">nest::RingBuffer::get_index_</referencedby>
        <referencedby refid="classnest_1_1MultRBuffer_1a6efc6a70253b5b7532f9d91de2f4b497" compoundref="ring__buffer_8h" startline="272" endline="277">nest::MultRBuffer::get_index_</referencedby>
        <referencedby refid="classnest_1_1ListRingBuffer_1a9109362da747fc8c1b211717e455629d" compoundref="ring__buffer_8h" startline="348" endline="354">nest::ListRingBuffer::get_index_</referencedby>
        <referencedby refid="classnest_1_1ArchivingNode_1ab6c3dea0d46a9f24fc4d726bea34dd3a" compoundref="archiving__node_8cpp" startline="86" endline="112">nest::ArchivingNode::get_K_value</referencedby>
        <referencedby refid="classnest_1_1ArchivingNode_1aa756873904842e8e63e9144d1f49967f" compoundref="archiving__node_8cpp" startline="115" endline="150">nest::ArchivingNode::get_K_values</referencedby>
        <referencedby refid="namespacenest_1a13d3c3245741015b3862ea668dc37c0e" compoundref="nest_8cpp" startline="110" endline="118">get_kernel_status</referencedby>
        <referencedby refid="classnest_1_1ListRingBuffer_1a9092dda132f5c69f826769c6439f64c7" compoundref="ring__buffer_8h" startline="336" endline="345">nest::ListRingBuffer::get_list</referencedby>
        <referencedby refid="classnest_1_1ClopathArchivingNode_1a919f8a8c44b248c67c8ec7422f59cddb" compoundref="clopath__archiving__node_8cpp" startline="134" endline="156">nest::ClopathArchivingNode::get_LTD_value</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1aa6e170165e803d3604b6bdc42912a6e9" compoundref="node__manager_8cpp" startline="409" endline="413">nest::NodeManager::get_max_num_local_nodes</referencedby>
        <referencedby refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" compoundref="node_8cpp" startline="119" endline="123">nest::Node::get_model_</referencedby>
        <referencedby refid="namespacenest_1aacef87bbf60279472b2642b3c460bcde" compoundref="nest_8cpp" startline="294" endline="323">get_model_defaults</referencedby>
        <referencedby refid="classnest_1_1ModelRangeManager_1ab2ea2aea12115408f37d8c0acc8460db" compoundref="modelrange__manager_8cpp" startline="113" endline="116">nest::ModelRangeManager::get_model_of_node_id</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad376a94a0b04bdbe90d6d2205f133aed" compoundref="node__manager_8cpp" startline="458" endline="474">nest::NodeManager::get_mpi_local_node_or_device_head</referencedby>
        <referencedby refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1ac7f8bae3617bf28a6995058adfae00fd" compoundref="source__table_8cpp" startline="384" endline="449">nest::SourceTable::get_next_target_data</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1ad0dc55ce4b7c808d7d61df8f97d2ff03" compoundref="source__table_8cpp" startline="158" endline="165">nest::SourceTable::get_node_id</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</referencedby>
        <referencedby refid="namespacenest_1a6e5a92a44e3eda3be872a61843a32430" compoundref="nest_8cpp" startline="127" endline="130">get_node_status</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" compoundref="node__manager_8cpp" startline="312" endline="393">nest::NodeManager::get_nodes</referencedby>
        <referencedby refid="namespacenest_1aceadf186ded6e26f22792d6ae9e9159f" compoundref="nest_8cpp" startline="176" endline="179">get_nodes</referencedby>
        <referencedby refid="classnest_1_1VPManager_1aa88c5746d1c2291408167785c3b7bf61" compoundref="vp__manager__impl_8h" startline="93" endline="96">nest::VPManager::get_num_assigned_ranks_per_thread</referencedby>
        <referencedby refid="classnest_1_1VPManager_1a8ddd2beb1aea2c9385b93ad4b842a2cb" compoundref="vp__manager__impl_8h" startline="55" endline="58">nest::VPManager::get_num_virtual_processes</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1ab513bfa6fb5e91f64f5823081810949e" compoundref="recording__backend__mpi_8cpp" startline="364" endline="393">nest::RecordingBackendMPI::get_port</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1ad9f07bc17e1b324c915eda7c7db6a8e6" compoundref="stimulation__backend__mpi_8cpp" startline="292" endline="325">nest::StimulationBackendMPI::get_port</referencedby>
        <referencedby refid="namespacenest_1a9127a40cb54f0b6b64a6bc716c4ffa57" compoundref="spatial_8cpp" startline="83" endline="108">get_position</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1a42b4794c8502b65aa8df978a5158e379" compoundref="simulation__manager_8cpp" startline="1126" endline="1129">nest::SimulationManager::get_previous_slice_origin</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1acc955f7172e28dd05d2d0496ecdf2423" compoundref="model__manager__impl_8h" startline="121" endline="128">nest::ModelManager::get_proxy_node</referencedby>
        <referencedby refid="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" compoundref="nest_8cpp" startline="84" endline="87">get_rank_synced_rng</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a7cc5104fcceb1b875d22ae6c9f0c2018" compoundref="connection__manager_8cpp" startline="1256" endline="1273">nest::ConnectionManager::get_sources</referencedby>
        <referencedby refid="group__status__interface_1ga6b9f905cffe67e97a38715757cd31779" compoundref="model_8cpp" startline="121" endline="150">nest::Model::get_status</referencedby>
        <referencedby refid="classnest_1_1multimeter_1adcf15205a1624343eae90243e692c9e8" compoundref="multimeter_8h" startline="227" endline="248">nest::multimeter::get_status</referencedby>
        <referencedby refid="classnest_1_1spike__recorder_1ab186a323af2338b25eff0aae6cae94e7" compoundref="spike__recorder_8cpp" startline="66" endline="85">nest::spike_recorder::get_status</referencedby>
        <referencedby refid="classnest_1_1spin__detector_1ac6c7cf6c7b0c28505fd96695f575a72b" compoundref="spin__detector_8cpp" startline="78" endline="99">nest::spin_detector::get_status</referencedby>
        <referencedby refid="classnest_1_1weight__recorder_1ac9dfea06dc5c9d7f8e02b4ba0077d131" compoundref="weight__recorder_8cpp" startline="149" endline="172">nest::weight_recorder::get_status</referencedby>
        <referencedby refid="classnest_1_1GenericConnectorModel_1aa8c72dbdf47431532cab0e66946c9d27" compoundref="connector__model__impl_8h" startline="89" endline="103">nest::GenericConnectorModel&lt; ConnectionT &gt;::get_status</referencedby>
        <referencedby refid="classnest_1_1proxynode_1adca2ab6d0bee88577982522f07ea6649" compoundref="proxynode_8cpp" startline="89" endline="94">nest::proxynode::get_status</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1a60b60f1790b78bdaca10bf6d30ac3930" compoundref="recording__device_8cpp" startline="177" endline="201">nest::RecordingDevice::get_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1ad53307b4caba0acaa2b074ed31ca146c" compoundref="sp__manager_8cpp" startline="94" endline="120">nest::SPManager::get_status</referencedby>
        <referencedby refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" compoundref="node_8cpp" startline="145" endline="170">nest::Node::get_status_base</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a1906487a726e8f4bb4e65fe5868e4825" compoundref="connection__manager_8cpp" startline="216" endline="257">nest::ConnectionManager::get_synapse_status</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1aa62e2c1472068967720c1117e6258e24" compoundref="target__table__devices__impl_8h" startline="110" endline="121">nest::TargetTableDevices::get_synapse_status_to_device</referencedby>
        <referencedby refid="classnest_1_1SPManager_1aab1b488f46bba7cc7978b4313d525437" compoundref="sp__manager_8cpp" startline="624" endline="683">nest::SPManager::get_synaptic_elements</referencedby>
        <referencedby refid="classnest_1_1TargetIdentifierIndex_1a7905886cb9fc21e4f8d65265e9d52224" compoundref="target__identifier_8h" startline="138" endline="142">nest::TargetIdentifierIndex::get_target_ptr</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a6798d923ce597300f380d3e8bd864ba4" compoundref="connection__manager_8cpp" startline="1276" endline="1298">nest::ConnectionManager::get_targets</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a907f84fe45e7f1317bd4e1a67f530a61" compoundref="node__manager_8cpp" startline="477" endline="493">nest::NodeManager::get_thread_siblings</referencedby>
        <referencedby refid="classnest_1_1RingBuffer_1ab779454b930d8a7ff3f85993b1eecb31" compoundref="ring__buffer_8h" startline="163" endline="174">nest::RingBuffer::get_value</referencedby>
        <referencedby refid="classnest_1_1MultRBuffer_1aa93d22cd54963674b640fbbb4f66ef5a" compoundref="ring__buffer_8h" startline="258" endline="269">nest::MultRBuffer::get_value</referencedby>
        <referencedby refid="classnest_1_1RingBuffer_1a1ae7973b9294c1d65c7b921f64361bf1" compoundref="ring__buffer_8h" startline="177" endline="187">nest::RingBuffer::get_value_wfr_update</referencedby>
        <referencedby refid="classnest_1_1VPManager_1aa87079f6760fd34ffd921c955a8af9eb" compoundref="vp__manager__impl_8h" startline="37" endline="40">nest::VPManager::get_vp</referencedby>
        <referencedby refid="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" compoundref="nest_8cpp" startline="96" endline="99">get_vp_specific_rng</referencedby>
        <referencedby refid="namespacenest_1a7b35c25e014d6ea1ad299a69a0e0484e" compoundref="nest_8cpp" startline="90" endline="93">get_vp_synced_rng</referencedby>
        <referencedby refid="classnest_1_1glif__psc_1a253eb2bd5a6be377a4711b72ea6ac36e" compoundref="glif__psc_8cpp" startline="608" endline="614">nest::glif_psc::handle</referencedby>
        <referencedby refid="classnest_1_1amat2__psc__exp_1a2a87f03f9f6b53dcccb9902ef7e9556a" compoundref="amat2__psc__exp_8cpp" startline="426" endline="440">nest::amat2_psc_exp::handle</referencedby>
        <referencedby refid="classnest_1_1binary__neuron_1afc2c13e1f1e6f4d72cc4f66da94fb728" compoundref="binary__neuron_8h" startline="510" endline="562">nest::binary_neuron&lt; TGainfunction &gt;::handle</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a5291adc4cd03089acaab926f03dac3c3" compoundref="cm__default_8cpp" startline="331" endline="343">nest::cm_default::handle</referencedby>
        <referencedby refid="classnest_1_1correlomatrix__detector_1a84891b0d4ab3820b9777fe9fb1b9dda9" compoundref="correlomatrix__detector_8cpp" startline="289" endline="390">nest::correlomatrix_detector::handle</referencedby>
        <referencedby refid="classnest_1_1correlospinmatrix__detector_1a07028b46a5ee0b25290b33f945c3f096" compoundref="correlospinmatrix__detector_8cpp" startline="299" endline="480">nest::correlospinmatrix_detector::handle</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp_1a3eaf94510adb3ecb10d630caef892d5a" compoundref="gif__psc__exp_8cpp" startline="402" endline="420">nest::gif_psc_exp::handle</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp__multisynapse_1a0490c6d8284252a9403e41d4159b7c07" compoundref="gif__psc__exp__multisynapse_8cpp" startline="427" endline="434">nest::gif_psc_exp_multisynapse::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__chs__2007_1a9d65717b729d137e81f452a831f695c1" compoundref="iaf__chs__2007_8cpp" startline="261" endline="270">nest::iaf_chs_2007::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha_1a7ffef66f807a67615a0302cb35cd95df" compoundref="iaf__psc__alpha_8cpp" startline="371" endline="382">nest::iaf_psc_alpha::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1a811191307b23ba1deced77632ca095fc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="397" endline="403">nest::iaf_psc_alpha_multisynapse::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__ps_1a7d16fbbb770a2133162fcd75eb85f3fd" compoundref="iaf__psc__alpha__ps_8cpp" startline="458" endline="472">nest::iaf_psc_alpha_ps::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta_1ae259efd5b67e67544298d0076c1aec38" compoundref="iaf__psc__delta_8cpp" startline="331" endline="341">nest::iaf_psc_delta::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta__ps_1a186aa50b57e0bc598f6da6d3961174b2" compoundref="iaf__psc__delta__ps_8cpp" startline="505" endline="518">nest::iaf_psc_delta_ps::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp_1ad43348fdd7f2a9819caa7971fd061977" compoundref="iaf__psc__exp_8cpp" startline="350" endline="361">nest::iaf_psc_exp::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1aa54d77b806192c5c83a45fe21488204d" compoundref="iaf__psc__exp__htum_8cpp" startline="350" endline="364">nest::iaf_psc_exp_htum::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__multisynapse_1a424413d843b3db709c86cd5beeead335" compoundref="iaf__psc__exp__multisynapse_8cpp" startline="363" endline="369">nest::iaf_psc_exp_multisynapse::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps_1a0fcd90d605efb9571c40de45ce473f20" compoundref="iaf__psc__exp__ps_8cpp" startline="433" endline="447">nest::iaf_psc_exp_ps::handle</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a6c271be348584c8dc5f198810817de00" compoundref="iaf__psc__exp__ps__lossless_8cpp" startline="477" endline="491">nest::iaf_psc_exp_ps_lossless::handle</referencedby>
        <referencedby refid="classnest_1_1izhikevich_1adbef5b29d70ad5e883b800ecd8014174" compoundref="izhikevich_8cpp" startline="244" endline="249">nest::izhikevich::handle</referencedby>
        <referencedby refid="classnest_1_1mat2__psc__exp_1a33b06a58e890aae51a37c7d54ac0007f" compoundref="mat2__psc__exp_8cpp" startline="359" endline="373">nest::mat2_psc_exp::handle</referencedby>
        <referencedby refid="classnest_1_1parrot__neuron_1a07c5abe723443660ba1f843bb4d10e8d" compoundref="parrot__neuron_8cpp" startline="90" endline="98">nest::parrot_neuron::handle</referencedby>
        <referencedby refid="classnest_1_1parrot__neuron__ps_1aaf63cdd0e51747b4929ba94afe942880" compoundref="parrot__neuron__ps_8cpp" startline="106" endline="124">nest::parrot_neuron_ps::handle</referencedby>
        <referencedby refid="classnest_1_1pp__psc__delta_1a4d8e3bcd366bec6ae590546d7cd96915" compoundref="pp__psc__delta_8cpp" startline="465" endline="475">nest::pp_psc_delta::handle</referencedby>
        <referencedby refid="classnest_1_1spike__dilutor_1aaa0ac22bffc48320557cbf9b2f8845da" compoundref="spike__dilutor_8cpp" startline="179" endline="183">nest::spike_dilutor::handle</referencedby>
        <referencedby refid="classnest_1_1volume__transmitter_1abce2d0732de0c7c6d4d1f63f3e54be60" compoundref="volume__transmitter_8cpp" startline="133" endline="137">nest::volume_transmitter::handle</referencedby>
        <referencedby refid="classnest_1_1noise__generator_1a6270485566dc3930a1e9ddb05132db2c" compoundref="noise__generator_8h" startline="294" endline="306">nest::noise_generator::handles_test_event</referencedby>
        <referencedby refid="classnest_1_1ModelsModule_1aaecea44044f9fb427884a67aae5ebc46" compoundref="modelsmodule_8cpp" startline="189" endline="344">nest::ModelsModule::init</referencedby>
        <referencedby refid="classnest_1_1NestModule_1a246da59f22b9398cc08e13bfc2355ae8" compoundref="nestmodule_8cpp" startline="2910" endline="3110">nest::NestModule::init</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a24c8070cea942180acbad89588f0ce54" compoundref="rate__neuron__ipn__impl_8h" startline="216" endline="236">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::init_buffers_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__opn_1af361f439c50e86c8d8e291a515aa6eb4" compoundref="rate__neuron__opn__impl_8h" startline="200" endline="220">nest::rate_neuron_opn&lt; TNonlinearities &gt;::init_buffers_</referencedby>
        <referencedby refid="classnest_1_1rate__transformer__node_1a4e3b162d550952eddd43cc6175e37473" compoundref="rate__transformer__node__impl_8h" startline="153" endline="164">nest::rate_transformer_node&lt; TNonlinearities &gt;::init_buffers_</referencedby>
        <referencedby refid="classnest_1_1ClopathArchivingNode_1ab23d55dd18a84bf26d975ddcea62fca9" compoundref="clopath__archiving__node_8cpp" startline="65" endline="82">nest::ClopathArchivingNode::init_clopath_buffers</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a0c223a5656aa437fb3f358230e2834c2" compoundref="event__delivery__manager_8cpp" startline="198" endline="228">nest::EventDeliveryManager::init_moduli</referencedby>
        <referencedby refid="classnest_1_1MPIManager_1a339bb79dd6ca362ef20da865ec7feca7" compoundref="mpi__manager_8cpp" startline="83" endline="96">nest::MPIManager::init_mpi</referencedby>
        <referencedby refid="namespacenest_1a4effb3b01c598aff32da450323a7bc98" compoundref="nest_8cpp" startline="42" endline="47">init_nest</referencedby>
        <referencedby refid="classnest_1_1spike__dilutor_1a21e254adf677e3daeb6a367bbfaf8277" compoundref="spike__dilutor_8cpp" startline="89" endline="100">nest::spike_dilutor::init_state_</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a887d62b81ea5823fea5298bca4434601" compoundref="source__table_8cpp" startline="43" endline="63">nest::SourceTable::initialize</referencedby>
        <referencedby refid="classnest_1_1TargetTable_1adce528ee6c871274e1a9b2242068d3bd" compoundref="target__table_8cpp" startline="31" endline="43">nest::TargetTable::initialize</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1ac526322735898fd1fb6a4f27236519e8" compoundref="target__table__devices_8cpp" startline="38" endline="44">nest::TargetTableDevices::initialize</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a95e1aed37d7c704e322fea89ac9dc705" compoundref="connection__manager_8cpp" startline="92" endline="128">nest::ConnectionManager::initialize</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a4f1f5d8833960c364461389d78c63bd1" compoundref="event__delivery__manager_8cpp" startline="72" endline="100">nest::EventDeliveryManager::initialize</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1ae14b26efd9515b1596ecfeaf25b04e64" compoundref="model__manager_8cpp" startline="80" endline="136">nest::ModelManager::initialize</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a1add23cb71fcdd7bba78421494f3dca1" compoundref="node__manager_8cpp" startline="67" endline="76">nest::NodeManager::initialize</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendASCII_1a126b120d30d4f9416f67772d7b43f8ff" compoundref="recording__backend__ascii_8cpp" startline="46" endline="50">nest::RecordingBackendASCII::initialize</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMemory_1aace174800a029c4a5f4ca82ba42cf768" compoundref="recording__backend__memory_8cpp" startline="38" endline="42">nest::RecordingBackendMemory::initialize</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1a0fcdcb78829faf69e47fa9dac76f29bc" compoundref="recording__backend__mpi_8cpp" startline="44" endline="51">nest::RecordingBackendMPI::initialize</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendScreen_1a3a7d757a2baeae347b266a141ab9ad64" compoundref="recording__backend__screen_8cpp" startline="32" endline="36">nest::RecordingBackendScreen::initialize</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1ad61b40b4953d57970a3ba98ae3af1315" compoundref="recording__backend__sionlib_8cpp" startline="62" endline="66">nest::RecordingBackendSIONlib::initialize</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1aa58ceaab209d05794d8d073c90df9260" compoundref="stimulation__backend__mpi_8cpp" startline="46" endline="51">nest::StimulationBackendMPI::initialize</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a178aff3a1bd286e6256c7146952ddaa6" compoundref="node__manager_8cpp" startline="396" endline="399">nest::NodeManager::is_local_node</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ad1aef057211358f9a75baa1ca8ba58c1" compoundref="node__manager_8cpp" startline="402" endline="406">nest::NodeManager::is_local_node_id</referencedby>
        <referencedby refid="classnest_1_1VPManager_1a7fec83282e1abdf3097ec5e9df6ee637" compoundref="vp__manager__impl_8h" startline="61" endline="64">nest::VPManager::is_local_vp</referencedby>
        <referencedby refid="classnest_1_1FreeLayer_1a7b8c3cd27e95f1464825521bc22f734e" compoundref="free__layer_8h" startline="359" endline="375">nest::FreeLayer&lt; D &gt;::lid_to_position_id_</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a8a5b705a9f23b67e1b0c07cd1ec27e4b" compoundref="node__collection_8cpp" startline="407" endline="422">nest::NodeCollectionPrimitive::local_begin</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionComposite_1a0833458d4219b876ba8809d621f9f704" compoundref="node__collection_8cpp" startline="767" endline="791">nest::NodeCollectionComposite::local_begin</referencedby>
        <referencedby refid="classnest_1_1LognormalParameter_1afc698a1f29a46fede10100c28bebae3b" compoundref="parameter_8cpp" startline="107" endline="122">nest::LognormalParameter::LognormalParameter</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a90063b4c289115d9337a4bf3bc28bff8" compoundref="conn__builder_8cpp" startline="429" endline="433">nest::ConnBuilder::loop_over_targets_</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a16365e3d62fc5b8dcdcad5889016e18f" compoundref="node__collection_8cpp" startline="425" endline="439">nest::NodeCollectionPrimitive::MPI_local_begin</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionComposite_1a4808e92924f8a202414f78ce5c9d603d" compoundref="node__collection_8cpp" startline="794" endline="819">nest::NodeCollectionComposite::MPI_local_begin</referencedby>
        <referencedby refid="neststartup_8cpp_1aa3f6f2cd046e243124ba1919d60d7006" compoundref="neststartup_8cpp" startline="152" endline="157">nestshutdown</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a5c0aa51c68cd9bb66a46dd12d800d46b" compoundref="node__collection_8cpp" startline="296" endline="316">nest::NodeCollectionPrimitive::NodeCollectionPrimitive</referencedby>
        <referencedby refid="classnest_1_1NormalParameter_1acc7ff35538687c2d8df8f1456a4117a1" compoundref="parameter_8cpp" startline="81" endline="96">nest::NormalParameter::NormalParameter</referencedby>
        <referencedby refid="structnest_1_1RecordingBackendASCII_1_1DeviceData_1a5245870654d123c271e2fcba69a91519" compoundref="recording__backend__ascii_8cpp" startline="249" endline="289">nest::RecordingBackendASCII::DeviceData::open_file</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a8910884c33fc3d3c41782201d6c2b927" compoundref="recording__backend__sionlib_8cpp" startline="145" endline="258">nest::RecordingBackendSIONlib::open_files_</referencedby>
        <referencedby refid="classnest_1_1SynapticElement_1a8839cb0442b52e9fc5846e6e87360700" compoundref="synaptic__element_8cpp" startline="71" endline="93">nest::SynapticElement::operator=</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a0c2f6361c8cd9f8667f4e033f51d0ba5" compoundref="connection__creator__impl_8h" startline="180" endline="250">nest::ConnectionCreator::pairwise_bernoulli_on_source_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1ac2924f703d2138beea75f9bdf5783efb" compoundref="connection__creator__impl_8h" startline="255" endline="338">nest::ConnectionCreator::pairwise_bernoulli_on_target_</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a427e9d3941f3d9f61ee1515d8b1c6521" compoundref="source__table_8cpp" startline="316" endline="381">nest::SourceTable::populate_target_data_fields_</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ac99133b91c8280ca9ec6dca876ea9634" compoundref="node__manager_8cpp" startline="671" endline="682">nest::NodeManager::post_run_cleanup</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1aa5a01ac9cbc32553b46644a853cce3bf" compoundref="recording__backend__sionlib_8cpp" startline="672" endline="687">nest::RecordingBackendSIONlib::post_step_hook</referencedby>
        <referencedby refid="classnest_1_1ac__generator_1ad46b2ee10a45923c52c9ec2ba29b4de8" compoundref="ac__generator_8cpp" startline="177" endline="199">nest::ac_generator::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1noise__generator_1a885126416c46cb6a12072bb918414837" compoundref="noise__generator_8cpp" startline="225" endline="254">nest::noise_generator::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1pulsepacket__generator_1a1250869dd296817cdd236764ed490485" compoundref="pulsepacket__generator_8cpp" startline="132" endline="163">nest::pulsepacket_generator::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1sinusoidal__poisson__generator_1a9c2201ffb8fe2b96cc68f0d9afdb9005" compoundref="sinusoidal__poisson__generator_8cpp" startline="210" endline="227">nest::sinusoidal_poisson_generator::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1volume__transmitter_1a3b3459f9af7dd9c62a9c23a2b2523278" compoundref="volume__transmitter_8cpp" startline="89" endline="93">nest::volume_transmitter::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1a2d1416e38bec46975b4b79ba2e042fed" compoundref="recording__device_8cpp" startline="52" endline="57">nest::RecordingDevice::pre_run_hook</referencedby>
        <referencedby refid="namespacenest_1a9312add735871538abc84f0c3d791d16" compoundref="nest_8cpp" startline="259" endline="262">prepare</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1a15529b16af1c77a4333fc5dda5220e38" compoundref="recording__backend__mpi_8cpp" startline="117" endline="200">nest::RecordingBackendMPI::prepare</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1add7dd58374edc381ef64ee6197d24620" compoundref="simulation__manager_8cpp" startline="434" endline="497">nest::SimulationManager::prepare</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1ac083c50fc8f38d7b7dbb0ccb9fea04bd" compoundref="stimulation__backend__mpi_8cpp" startline="100" endline="201">nest::StimulationBackendMPI::prepare</referencedby>
        <referencedby refid="classnest_1_1TargetTable_1ab2b10c675f23dfc38f8922f61b521127" compoundref="target__table_8cpp" startline="53" endline="68">nest::TargetTable::prepare</referencedby>
        <referencedby refid="classnest_1_1SliceRingBuffer_1a75765b9d90c31ac2010af3311917d6f0" compoundref="slice__ring__buffer_8cpp" startline="66" endline="73">nest::SliceRingBuffer::prepare_delivery</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a5024846165430a49270e72e139407db5" compoundref="node__manager_8cpp" startline="608" endline="668">nest::NodeManager::prepare_nodes</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a6c70952e62625a89a6b82a972d31e488" compoundref="node__manager_8cpp" startline="715" endline="742">nest::NodeManager::print</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionComposite_1a0e3adf6b5bc35aa1ce5331c23b6f0b1c" compoundref="node__collection_8cpp" startline="992" endline="1086">nest::NodeCollectionComposite::print_me</referencedby>
        <referencedby refid="namespacenest_1a4ed8a25d4c6dc9e616579164a16a8630" compoundref="nest_8cpp" startline="78" endline="81">print_nodes_to_stream</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" compoundref="node__collection_8cpp" startline="491" endline="506">nest::NodeCollectionPrimitive::print_primitive</referencedby>
        <referencedby refid="classnest_1_1stdp__dopamine__synapse_1a18753f837bc442961b3b0f9541d78b7a" compoundref="stdp__dopamine__synapse_8h" startline="453" endline="506">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::process_dopa_spikes_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a326d0e1390c83f0f98d454de4a8f49da" compoundref="rate__neuron__ipn__impl_8h" startline="189" endline="197">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::rate_neuron_ipn</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__opn_1a4eff3064fdc7e7ce6c743c55aa81ea3e" compoundref="rate__neuron__opn__impl_8h" startline="174" endline="182">nest::rate_neuron_opn&lt; TNonlinearities &gt;::rate_neuron_opn</referencedby>
        <referencedby refid="classnest_1_1rate__transformer__node_1a225f436297ca15e09e918a51612536a7" compoundref="rate__transformer__node__impl_8h" startline="128" endline="135">nest::rate_transformer_node&lt; TNonlinearities &gt;::rate_transformer_node</referencedby>
        <referencedby refid="namespacenest_1a5a315cc6d8817d6c98c2b37ebd0cd817" compoundref="nest__impl_8h" startline="33" endline="36">register_connection_model</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1aa8a2fe6be154cbb0768bf71942387520" compoundref="model__manager_8cpp" startline="546" endline="571">nest::ModelManager::register_connection_model_</referencedby>
        <referencedby refid="namespacenest_1a2790d3c6c87c60627f8cfd1fc4fac771" compoundref="nest_8cpp" startline="72" endline="75">register_logger_client</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1aa9dd5b9db696ebef3355e4e31e184735" compoundref="model__manager_8cpp" startline="218" endline="240">nest::ModelManager::register_node_model_</referencedby>
        <referencedby refid="namespacenest_1a409b2c475d9c450fa0e9ff72b8dc81cc" compoundref="nest__impl_8h" startline="40" endline="43">register_secondary_connection_model</referencedby>
        <referencedby refid="classnest_1_1ArchivingNode_1a0f573e9b1e9f7f49a493aa2a533c2803" compoundref="archiving__node_8cpp" startline="66" endline="83">nest::ArchivingNode::register_stdp_connection</referencedby>
        <referencedby refid="namespacenest_1a75785465b86e1c71e993158e6200efb4" compoundref="nest_8cpp" startline="60" endline="63">reset_kernel</referencedby>
        <referencedby refid="classnest_1_1RandomManager_1aa0ae608bcbb4ef65f005cc2f33ca7245" compoundref="random__manager_8cpp" startline="105" endline="134">nest::RandomManager::reset_rngs_</referencedby>
        <referencedby refid="classnest_1_1RingBuffer_1a180dd269cf5fbbd9be531222867d711c" compoundref="ring__buffer_8cpp" startline="31" endline="38">nest::RingBuffer::resize</referencedby>
        <referencedby refid="classnest_1_1MultRBuffer_1ad3d43fd5d1125f012b4deaca40744c46" compoundref="ring__buffer_8cpp" startline="55" endline="62">nest::MultRBuffer::resize</referencedby>
        <referencedby refid="classnest_1_1ListRingBuffer_1a1cad599eada80719aed5f06e7164fd59" compoundref="ring__buffer_8cpp" startline="78" endline="85">nest::ListRingBuffer::resize</referencedby>
        <referencedby refid="classnest_1_1MultiChannelInputBuffer_1a7352dba1532287331ac88d27790df9ee" compoundref="ring__buffer__impl_8h" startline="37" endline="44">nest::MultiChannelInputBuffer&lt; num_channels &gt;::resize</referencedby>
        <referencedby refid="classnest_1_1SliceRingBuffer_1af995247463e3cf4c1a10446f69c59436" compoundref="slice__ring__buffer_8cpp" startline="36" endline="54">nest::SliceRingBuffer::resize</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a5883368d1ce3572f88b6cb04f0d051af" compoundref="source__table_8cpp" startline="452" endline="460">nest::SourceTable::resize_compressible_sources</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1ad424a6e28fe6a4b7f2b8c2363d38352e" compoundref="connection__manager_8cpp" startline="1583" endline="1597">nest::ConnectionManager::resize_connections</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1ae11e441d619bad5f3d53822efce96677" compoundref="event__delivery__manager_8cpp" startline="154" endline="163">nest::EventDeliveryManager::resize_send_recv_buffers_spike_data_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1ad9be35d3f6b58eac97354bec54503ac3" compoundref="event__delivery__manager_8cpp" startline="146" endline="151">nest::EventDeliveryManager::resize_send_recv_buffers_target_data</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1a543cad6bd3ce8310d4b9bfef9ff9fb45" compoundref="source__table_8cpp" startline="270" endline="273">nest::SourceTable::resize_sources</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1aabd329e4a0fd579f7165ba35906bd362" compoundref="event__delivery__manager_8cpp" startline="866" endline="878">nest::EventDeliveryManager::resize_spike_register_</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1aa43b68ae856da1355976d98dc4ff2664" compoundref="target__table__devices_8cpp" startline="77" endline="86">nest::TargetTableDevices::resize_to_number_of_neurons</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1ae9fa721651b8a36af760da0ec4c62270" compoundref="target__table__devices_8cpp" startline="89" endline="105">nest::TargetTableDevices::resize_to_number_of_synapse_types</referencedby>
        <referencedby refid="classnest_1_1Event_1aaf68e08591d41518b70181862a6b4877" compoundref="event_8cpp" startline="56" endline="68">nest::Event::retrieve_sender_node_id_from_source_table</referencedby>
        <referencedby refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" compoundref="nest_8cpp" startline="236" endline="256">run</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" compoundref="simulation__manager_8cpp" startline="541" endline="597">nest::SimulationManager::run</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__pre__centered__synapse_1aac104a14153455ec60bc2f4dd8fb1fb8" compoundref="stdp__nn__pre__centered__synapse_8h" startline="240" endline="306">nest::stdp_nn_pre_centered_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__restr__synapse_1a2cf5cf8935d60a8d1afeb12e7cdccb86" compoundref="stdp__nn__restr__synapse_8h" startline="234" endline="298">nest::stdp_nn_restr_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__nn__symm__synapse_1a819398a2271265a612bde2fb8468a3aa" compoundref="stdp__nn__symm__synapse_8h" startline="236" endline="288">nest::stdp_nn_symm_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse_1a03c1014c938b8da64ee6f8b423d0faf6" compoundref="stdp__synapse_8h" startline="227" endline="276">nest::stdp_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__triplet__synapse_1a8fa31f3b2a80eb2393715810281f5119" compoundref="stdp__triplet__synapse_8h" startline="249" endline="297">nest::stdp_triplet_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1vogels__sprekeler__synapse_1aad05a5b808d9fd2efdec7e68a936ad15" compoundref="vogels__sprekeler__synapse_8h" startline="203" endline="253">nest::vogels_sprekeler_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1jonke__synapse_1a019bd7b964ea596a33af25d063948cd1" compoundref="jonke__synapse_8h" startline="335" endline="384">nest::jonke_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__dopamine__synapse_1a1b6aa1eb932633aadabe87409dc99521" compoundref="stdp__dopamine__synapse_8h" startline="529" endline="577">nest::stdp_dopamine_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__facetshw__synapse__hom_1a18fdb06d50abadaee824473f968d2a07" compoundref="stdp__synapse__facetshw__hom_8h" startline="397" endline="523">nest::stdp_facetshw_synapse_hom&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__synapse__hom_1a867ea4b1fc24ffceca64301118517ca4" compoundref="stdp__synapse__hom_8h" startline="283" endline="322">nest::stdp_synapse_hom&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1stdp__pl__synapse__hom_1a5cd4081b3f076e4e7a19f7926908b11b" compoundref="stdp__pl__synapse__hom_8h" startline="246" endline="287">nest::stdp_pl_synapse_hom&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a5e4b094adb9d2d4780566a91be4fe3ec" compoundref="event__delivery__manager__impl_8h" startline="67" endline="93">nest::EventDeliveryManager::send</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a97481546e161d8ac38d29da43914f5bf" compoundref="connection__manager__impl_8h" startline="66" endline="69">nest::ConnectionManager::send_from_device</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1ad8c20f2ee5dea459b38de6063e63aee3" compoundref="event__delivery__manager__impl_8h" startline="37" endline="45">nest::EventDeliveryManager::send_local_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a72294da04cb238f288aa5f9d1f7386ed" compoundref="event__delivery__manager__impl_8h" startline="123" endline="139">nest::EventDeliveryManager::send_off_grid_remote</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a0a6bec5fc67fcee1df2e08b46f7110f7" compoundref="event__delivery__manager__impl_8h" startline="104" endline="120">nest::EventDeliveryManager::send_remote</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a8737cdbec8c0111d2bce0bf7e8d324a2" compoundref="event__delivery__manager__impl_8h" startline="142" endline="174">nest::EventDeliveryManager::send_secondary</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a38ee31043d430d96132c5110e784e3a5" compoundref="proxynode_8cpp" startline="46" endline="50">nest::proxynode::send_test_event</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1a83ca4950e9427381cdde2d7984056b20" compoundref="target__table__devices__impl_8h" startline="76" endline="91">nest::TargetTableDevices::send_to_device</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a33f3b39e92b74e442a3d7b708a4da9a1" compoundref="connection__manager__impl_8h" startline="54" endline="57">nest::ConnectionManager::send_to_devices</referencedby>
        <referencedby refid="classnest_1_1Connector_1a57f7c53b040d5686aceb365001b5bee5" compoundref="connector__base__impl_8h" startline="36" endline="62">nest::Connector&lt; ConnectionT &gt;::send_weight_event</referencedby>
        <referencedby refid="classnest_1_1proxynode_1afdfb38f8d6bd5837527a75eb4c6ff76e" compoundref="proxynode_8cpp" startline="53" endline="56">nest::proxynode::sends_secondary_event</referencedby>
        <referencedby refid="classnest_1_1proxynode_1a86ae0ceb13ec36aeaeaea6e0f1257ec0" compoundref="proxynode_8cpp" startline="83" endline="86">nest::proxynode::sends_signal</referencedby>
        <referencedby refid="structnest_1_1RecordingDevice_1_1Parameters___1ab47027ad5cfc29a7fb077edcfbb3b048" compoundref="recording__device_8cpp" startline="79" endline="94">nest::RecordingDevice::Parameters_::set</referencedby>
        <referencedby refid="structnest_1_1StimulationDevice_1_1Parameters___1a10550c431d16301548e91e37590e3608" compoundref="stimulation__device_8cpp" startline="105" endline="120">nest::StimulationDevice::Parameters_::set</referencedby>
        <referencedby refid="classnest_1_1SynapticElement_1a1d87050277d99ac2b2929fba12cb2f34" compoundref="synaptic__element_8cpp" startline="116" endline="141">nest::SynapticElement::set</referencedby>
        <referencedby refid="namespacenest_1a66727cbf2db54d042cb6dac04cf2a816" compoundref="nest_8cpp" startline="133" endline="151">set_connection_status</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a364992a5aca6c29407e9ed0d97ec766b" compoundref="connection__manager_8cpp" startline="1612" endline="1626">nest::ConnectionManager::set_connections_have_changed</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1ae0eb35bbf0f42c4139e0f1f562a4a0a3" compoundref="conn__builder_8cpp" startline="454" endline="487">nest::ConnBuilder::set_default_weight_or_delay_</referencedby>
        <referencedby refid="classnest_1_1StimulationDevice_1ac67e5262a139223625a3eea557e7aa45" compoundref="stimulation__device_8cpp" startline="79" endline="82">nest::StimulationDevice::set_initialized_</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1ab77a88eadcacbb992e706e55aa88627a" compoundref="recording__device_8cpp" startline="46" endline="49">nest::RecordingDevice::set_initialized_</referencedby>
        <referencedby refid="namespacenest_1a4739f5733533e0e7934ba5b3450dc901" compoundref="nest_8cpp" startline="102" endline="107">set_kernel_status</referencedby>
        <referencedby refid="namespacenest_1af18c7cd06bb7de7b85883a470ec1238e" compoundref="nest_8cpp" startline="277" endline="291">set_model_defaults</referencedby>
        <referencedby refid="namespacenest_1afd19b490a761b78c43c216c7b1b47106" compoundref="nest_8cpp" startline="121" endline="124">set_node_status</referencedby>
        <referencedby refid="classnest_1_1VPManager_1a9cfc82ff31df2bafa59fee6d56ef0a89" compoundref="vp__manager_8cpp" startline="158" endline="169">nest::VPManager::set_num_threads</referencedby>
        <referencedby refid="classnest_1_1ArchivingNode_1af5655cc7a93c86837c09e48cce007993" compoundref="archiving__node_8cpp" startline="181" endline="218">nest::ArchivingNode::set_spiketime</referencedby>
        <referencedby refid="classnest_1_1DelayChecker_1a3bbfadbb5fc47a2027fd13ff27adf909" compoundref="delay__checker_8cpp" startline="68" endline="118">nest::DelayChecker::set_status</referencedby>
        <referencedby refid="classnest_1_1FreeLayer_1acb2f436d36da84d837609d56562af384" compoundref="free__layer_8h" startline="113" endline="251">nest::FreeLayer&lt; D &gt;::set_status</referencedby>
        <referencedby refid="structnest_1_1RecordingBackendASCII_1_1DeviceData_1a5c614fbea6d6056c69c214d661b3fdf2" compoundref="recording__backend__ascii_8cpp" startline="338" endline="354">nest::RecordingBackendASCII::DeviceData::set_status</referencedby>
        <referencedby refid="structnest_1_1RecordingBackendMemory_1_1DeviceData_1aae25235682c0850ff490c51a76513a7d" compoundref="recording__backend__memory_8cpp" startline="264" endline="282">nest::RecordingBackendMemory::DeviceData::set_status</referencedby>
        <referencedby refid="classnest_1_1spike__generator_1a96e3acc90f2b41fb63cf4e558b9ab6f5" compoundref="spike__generator_8h" startline="344" endline="371">nest::spike_generator::set_status</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a38567f7aefd520dae214065ed1816f98" compoundref="connection__manager_8cpp" startline="150" endline="184">nest::ConnectionManager::set_status</referencedby>
        <referencedby refid="classnest_1_1GenericConnectorModel_1aa02f22324265fc3bbb1447322c97aa9a" compoundref="connector__model__impl_8h" startline="107" endline="131">nest::GenericConnectorModel&lt; ConnectionT &gt;::set_status</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1a466c7b9ed8d05e9d42eed08009dc81e0" compoundref="recording__device_8cpp" startline="125" endline="174">nest::RecordingDevice::set_status</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1a8e68ef9b61dd3e17a09829333503b6ac" compoundref="simulation__manager_8cpp" startline="116" endline="395">nest::SimulationManager::set_status</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a826cbcc83e2da5a24acf3345917e7921" compoundref="sp__manager_8cpp" startline="128" endline="177">nest::SPManager::set_status</referencedby>
        <referencedby refid="classnest_1_1StimulationDevice_1a1ebf88604667e02e4070d73ffcc63845" compoundref="stimulation__device_8cpp" startline="123" endline="162">nest::StimulationDevice::set_status</referencedby>
        <referencedby refid="classnest_1_1VPManager_1a62cacb654bd036d5110926a0d0c9f9f9" compoundref="vp__manager_8cpp" startline="70" endline="148">nest::VPManager::set_status</referencedby>
        <referencedby refid="classnest_1_1cont__delay__synapse_1a59e07e30f11187a58471fe22fb86e194" compoundref="cont__delay__synapse__impl_8h" startline="60" endline="91">nest::cont_delay_synapse&lt; targetidentifierT &gt;::set_status</referencedby>
        <referencedby refid="classnest_1_1STDPDopaCommonProperties_1a57839b5f9c9bcd675550ee7f21f6c01f" compoundref="stdp__dopamine__synapse_8cpp" startline="78" endline="102">nest::STDPDopaCommonProperties::set_status</referencedby>
        <referencedby refid="classnest_1_1Connection_1aede706c57e428cfe0831f17fa439f4fe" compoundref="connection_8h" startline="355" endline="364">nest::Connection&lt; targetidentifierT &gt;::set_status</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1ac3991ea302917428914481485f522207" compoundref="node__manager_8cpp" startline="745" endline="755">nest::NodeManager::set_status</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a9508db769f2e7c2b62743f5774872111" compoundref="model__manager_8cpp" startline="328" endline="363">nest::ModelManager::set_synapse_defaults_</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a9c2e48ef813d9123f9c61df2f40ef1ea" compoundref="conn__builder_8cpp" startline="436" endline="451">nest::ConnBuilder::set_synapse_model_</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a1d5db8eeefd6c7602d16da5f05618c9e" compoundref="conn__builder_8cpp" startline="490" endline="526">nest::ConnBuilder::set_synapse_params</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a9b5dd166871f9902c15de576936dca8f" compoundref="connection__manager_8cpp" startline="260" endline="307">nest::ConnectionManager::set_synapse_status</referencedby>
        <referencedby refid="classnest_1_1TargetTableDevices_1ab37f76d5554123ed75fe8b74561c46c0" compoundref="target__table__devices__impl_8h" startline="124" endline="136">nest::TargetTableDevices::set_synapse_status_to_device</referencedby>
        <referencedby refid="classnest_1_1TargetIdentifierIndex_1a356a5e15e8e34f94624b06d2fa7d553c" compoundref="target__identifier_8h" startline="169" endline="182">nest::TargetIdentifierIndex::set_target</referencedby>
        <referencedby refid="classnest_1_1Model_1a3680de567f35d5c8f902f9a1b8278230" compoundref="model_8cpp" startline="49" endline="52">nest::Model::set_threads</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a3edb34cd9b903094a46df238bb26cfb9" compoundref="conn__builder_8cpp" startline="319" endline="370">nest::ConnBuilder::single_connect_</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a07998ea08ce1a6d1afdf67b42d0f94c3" compoundref="conn__builder__impl_8h" startline="36" endline="47">nest::ConnBuilder::single_disconnect_</referencedby>
        <referencedby refid="namespacenest_1abeb6d77b027892716ab7dcaa1b34dc75" compoundref="nest_8cpp" startline="410" endline="433">slice_positions_if_sliced_nc</referencedby>
        <referencedby refid="classnest_1_1SourceTable_1ad8820b545b13a93b1fa33f46eaf1d186" compoundref="source__table_8cpp" startline="276" endline="286">nest::SourceTable::source_should_be_processed_</referencedby>
        <referencedby refid="classnest_1_1SPBuilder_1afd48465903e920c31f81dee5bb6b317f" compoundref="conn__builder_8cpp" startline="1817" endline="1829">nest::SPBuilder::sp_connect</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a5b19ec07f4ed9e7c79cbff755c5c112b" compoundref="conn__builder_8cpp" startline="743" endline="787">nest::OneToOneBuilder::sp_connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a63715afc65b67a92bc0e6777bd61a91b" compoundref="conn__builder_8cpp" startline="931" endline="974">nest::AllToAllBuilder::sp_connect_</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1aa0018649c25aba23ea18edd33f817403" compoundref="conn__builder_8cpp" startline="796" endline="833">nest::OneToOneBuilder::sp_disconnect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a906d70bc39e3caba3afe5dff1fdc1eb0" compoundref="conn__builder_8cpp" startline="1038" endline="1075">nest::AllToAllBuilder::sp_disconnect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a5a764e628f02ad0ed9cd088428ec9c84" compoundref="connection__manager_8cpp" startline="1032" endline="1054">nest::ConnectionManager::split_to_neuron_device_vectors_</referencedby>
        <referencedby refid="classnest_1_1SynapticElement_1a1a57404bbeec3fd2a3a9df273286f923" compoundref="synaptic__element_8cpp" startline="55" endline="68">nest::SynapticElement::SynapticElement</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1ada2a71610370c6802f330191a06e7815" compoundref="connection__manager_8cpp" startline="1600" endline="1603">nest::ConnectionManager::sync_has_primary_connections</referencedby>
        <referencedby refid="classnest_1_1VPManager_1aa3d11af1445df6d186a4be6a5bbd5b3f" compoundref="vp__manager__impl_8h" startline="67" endline="70">nest::VPManager::thread_to_vp</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a831fe8bbe7a7f042a2add7c25a6c7906" compoundref="connection__manager_8cpp" startline="884" endline="899">nest::ConnectionManager::trigger_update_weight</referencedby>
        <referencedby refid="classnest_1_1iaf__chs__2007_1a7d016fdc308961e45176270517931310" compoundref="iaf__chs__2007_8cpp" startline="218" endline="258">nest::iaf_chs_2007::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp_1aae9549e793b3333b55295c25c2e129d7" compoundref="iaf__psc__exp_8cpp" startline="284" endline="347">nest::iaf_psc_exp::update</referencedby>
        <referencedby refid="classnest_1_1volume__transmitter_1a82b242f2aa00edebf8d09404deba98f7" compoundref="volume__transmitter_8cpp" startline="96" endline="130">nest::volume_transmitter::update</referencedby>
        <referencedby refid="classnest_1_1glif__psc_1a991462dfe7560219ae1f1b8e06712dce" compoundref="glif__psc_8cpp" startline="465" endline="593">nest::glif_psc::update</referencedby>
        <referencedby refid="classnest_1_1ac__generator_1a4705615637b1f0b825d1d383ca39b876" compoundref="ac__generator_8cpp" startline="202" endline="227">nest::ac_generator::update</referencedby>
        <referencedby refid="classnest_1_1amat2__psc__exp_1aeade54dfbec239411e5a51d6c98e46ae" compoundref="amat2__psc__exp_8cpp" startline="362" endline="422">nest::amat2_psc_exp::update</referencedby>
        <referencedby refid="classnest_1_1binary__neuron_1aca374e9704d7c6b7e2e0b2baf16dd645" compoundref="binary__neuron_8h" startline="457" endline="506">nest::binary_neuron&lt; TGainfunction &gt;::update</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a32a8a0a8d9720bb1aff55d2bca5b1fef" compoundref="cm__default_8cpp" startline="305" endline="328">nest::cm_default::update</referencedby>
        <referencedby refid="classnest_1_1dc__generator_1a9563668cf75ef013b2245126f3590a53" compoundref="dc__generator_8cpp" startline="162" endline="181">nest::dc_generator::update</referencedby>
        <referencedby refid="classnest_1_1gamma__sup__generator_1a7b347ee7edef38f6f94393c3c3be4f0b" compoundref="gamma__sup__generator_8cpp" startline="230" endline="252">nest::gamma_sup_generator::update</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp_1aefdc2fabaee2469d8373c5d900724f81" compoundref="gif__psc__exp_8cpp" startline="321" endline="399">nest::gif_psc_exp::update</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp__multisynapse_1a08a2d4d9e728e9b11ddec66354b92855" compoundref="gif__psc__exp__multisynapse_8cpp" startline="344" endline="423">nest::gif_psc_exp_multisynapse::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha_1ab9d9aa64a102d6b276d0588a12e6437e" compoundref="iaf__psc__alpha_8cpp" startline="300" endline="368">nest::iaf_psc_alpha::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__multisynapse_1abf3e3db6ae5397e09c887b6337da65dc" compoundref="iaf__psc__alpha__multisynapse_8cpp" startline="325" endline="382">nest::iaf_psc_alpha_multisynapse::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta_1a9e745bf89178e504a285d0c40c6d2e49" compoundref="iaf__psc__delta_8cpp" startline="268" endline="328">nest::iaf_psc_delta::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__delta__ps_1a421e244e7bf1400a2326ee75054aeee5" compoundref="iaf__psc__delta__ps_8cpp" startline="258" endline="446">nest::iaf_psc_delta_ps::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a9e6a7c8866462dfb4619d2bbb2ec24fa" compoundref="iaf__psc__exp__htum_8cpp" startline="292" endline="347">nest::iaf_psc_exp_htum::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__multisynapse_1aa74239fcf47290e0f7b86e4403fbb84a" compoundref="iaf__psc__exp__multisynapse_8cpp" startline="300" endline="348">nest::iaf_psc_exp_multisynapse::update</referencedby>
        <referencedby refid="classnest_1_1inhomogeneous__poisson__generator_1a60d840a269197f560d4400c167b1a251" compoundref="inhomogeneous__poisson__generator_8cpp" startline="237" endline="273">nest::inhomogeneous_poisson_generator::update</referencedby>
        <referencedby refid="classnest_1_1izhikevich_1a4ed2beb7b2ccd8f757bc3f38ebce6de0" compoundref="izhikevich_8cpp" startline="189" endline="241">nest::izhikevich::update</referencedby>
        <referencedby refid="classnest_1_1mat2__psc__exp_1ae9f577854b433bb050ed603b995010cc" compoundref="mat2__psc__exp_8cpp" startline="303" endline="355">nest::mat2_psc_exp::update</referencedby>
        <referencedby refid="classnest_1_1mip__generator_1a480d772b54fef98b7a3f273d8d098467" compoundref="mip__generator_8cpp" startline="120" endline="143">nest::mip_generator::update</referencedby>
        <referencedby refid="classnest_1_1multimeter_1abbad23126653a41a7590a55b971c6dd2" compoundref="multimeter_8cpp" startline="179" endline="200">nest::multimeter::update</referencedby>
        <referencedby refid="classnest_1_1noise__generator_1a4e470deac0d4aabeeb3020250b42ca65" compoundref="noise__generator_8cpp" startline="289" endline="340">nest::noise_generator::update</referencedby>
        <referencedby refid="classnest_1_1parrot__neuron_1a999a763bac330b4d8bec83eec5aebf06" compoundref="parrot__neuron_8cpp" startline="53" endline="75">nest::parrot_neuron::update</referencedby>
        <referencedby refid="classnest_1_1parrot__neuron__ps_1a557dfb7872cdc45b8840b16ea755b4da" compoundref="parrot__neuron__ps_8cpp" startline="53" endline="90">nest::parrot_neuron_ps::update</referencedby>
        <referencedby refid="classnest_1_1poisson__generator_1a4cebfa0a444930c045725ccf40d896a1" compoundref="poisson__generator_8cpp" startline="118" endline="138">nest::poisson_generator::update</referencedby>
        <referencedby refid="classnest_1_1poisson__generator__ps_1a61693db596fef528c2b52614d5d52622" compoundref="poisson__generator__ps_8cpp" startline="179" endline="207">nest::poisson_generator_ps::update</referencedby>
        <referencedby refid="classnest_1_1pp__psc__delta_1a2ea479d86c1470a335247ad32960ce47" compoundref="pp__psc__delta_8cpp" startline="357" endline="462">nest::pp_psc_delta::update</referencedby>
        <referencedby refid="classnest_1_1ppd__sup__generator_1ad9d25b379172d5363ef3b99df931e2cb" compoundref="ppd__sup__generator_8cpp" startline="232" endline="265">nest::ppd_sup_generator::update</referencedby>
        <referencedby refid="classnest_1_1pulsepacket__generator_1afc0ef90d6141445fee89e0856cb586e5" compoundref="pulsepacket__generator_8cpp" startline="167" endline="231">nest::pulsepacket_generator::update</referencedby>
        <referencedby refid="classnest_1_1sinusoidal__poisson__generator_1accf5d4be845204104fb67d3b193d3fc6" compoundref="sinusoidal__poisson__generator_8cpp" startline="230" endline="283">nest::sinusoidal_poisson_generator::update</referencedby>
        <referencedby refid="classnest_1_1spike__dilutor_1a06800e67b58775edfd74890cb22ddc1e" compoundref="spike__dilutor_8cpp" startline="120" endline="143">nest::spike_dilutor::update</referencedby>
        <referencedby refid="classnest_1_1spike__generator_1a1ed2922a414a4e4d8469398ea5c4f984" compoundref="spike__generator_8cpp" startline="320" endline="387">nest::spike_generator::update</referencedby>
        <referencedby refid="classnest_1_1step__rate__generator_1a3e1950f9a332db79103df7636483c9aa" compoundref="step__rate__generator_8cpp" startline="274" endline="328">nest::step_rate_generator::update</referencedby>
        <referencedby refid="classnest_1_1step__current__generator_1af05954acb25332ea46fcc8d5b24a7a6c" compoundref="step__current__generator_8cpp" startline="273" endline="315">nest::step_current_generator::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__alpha__ps_1a36f9e294838630afac790d7b7537f309" compoundref="iaf__psc__alpha__ps_8cpp" startline="299" endline="453">nest::iaf_psc_alpha_ps::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps_1aebf116502d0de4017dd16592625d8dff" compoundref="iaf__psc__exp__ps_8cpp" startline="275" endline="429">nest::iaf_psc_exp_ps::update</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__ps__lossless_1a2a10685c48e126fae2f936448c5f6f54" compoundref="iaf__psc__exp__ps__lossless_8cpp" startline="316" endline="473">nest::iaf_psc_exp_ps_lossless::update</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1a4ad2ea77edb56fb13176de0932bac835" compoundref="simulation__manager_8cpp" startline="763" endline="1062">nest::SimulationManager::update_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a2ba90a0d2806a0379cbd1e11388abd08" compoundref="rate__neuron__ipn__impl_8h" startline="268" endline="395">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::update_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__opn_1aa8f19c2d41620fedcbe60467f3300f04" compoundref="rate__neuron__opn__impl_8h" startline="244" endline="368">nest::rate_neuron_opn&lt; TNonlinearities &gt;::update_</referencedby>
        <referencedby refid="classnest_1_1rate__transformer__node_1a56f655c73fcf14082776b6650e21d420" compoundref="rate__transformer__node__impl_8h" startline="179" endline="263">nest::rate_transformer_node&lt; TNonlinearities &gt;::update_</referencedby>
        <referencedby refid="classnest_1_1SimulationManager_1aa457cadae541547d8d82bda9b1925ab0" compoundref="simulation__manager_8cpp" startline="676" endline="754">nest::SimulationManager::update_connection_infrastructure</referencedby>
        <referencedby refid="classnest_1_1SPBuilder_1a6b2967497f66cc6c1a6ccf4a45e9c3e5" compoundref="conn__builder_8cpp" startline="1806" endline="1814">nest::SPBuilder::update_delay</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1adb41052adde337156940c1cccb0dd157" compoundref="connection__manager_8cpp" startline="461" endline="491">nest::ConnectionManager::update_delay_extrema_</referencedby>
        <referencedby refid="classnest_1_1StimulationBackendMPI_1a9871ce874b65ddefe64a766efe5cd26c" compoundref="stimulation__backend__mpi_8cpp" startline="353" endline="395">nest::StimulationBackendMPI::update_device</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a18e210cef727c0b93605fa3dcd941a28" compoundref="event__delivery__manager_8cpp" startline="239" endline="263">nest::EventDeliveryManager::update_moduli</referencedby>
        <referencedby refid="classnest_1_1ConnBuilder_1a4b0dff13dcdd94d8a1e7184911b5f4b8" compoundref="conn__builder_8cpp" startline="291" endline="316">nest::ConnBuilder::update_param_dict_</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a6c5563d7088a144d3b630e4ed8faee3b" compoundref="sp__manager_8cpp" startline="341" endline="417">nest::SPManager::update_structural_plasticity</referencedby>
        <referencedby refid="namespacenest_1a6d83992e5c06d61f33858456ac630dc4" compoundref="dict__util_8h" startline="45" endline="66">updateValueParam</referencedby>
        <referencedby refid="classnest_1_1GenericConnectorModel_1a20dcb39b4807eb02c6d55d737f4afa83" compoundref="connector__model__impl_8h" startline="135" endline="174">nest::GenericConnectorModel&lt; ConnectionT &gt;::used_default_delay</referencedby>
        <referencedby refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" compoundref="node__collection_8cpp" startline="266" endline="269">nest::NodeCollection::valid</referencedby>
        <referencedby refid="classnest_1_1NormalParameter_1af8f84653ced0e1db8f58882f4cc0a5bb" compoundref="parameter_8cpp" startline="99" endline="104">nest::NormalParameter::value</referencedby>
        <referencedby refid="classnest_1_1LognormalParameter_1aae79ab35ee3bbee67c84d21101bb5266" compoundref="parameter_8cpp" startline="125" endline="130">nest::LognormalParameter::value</referencedby>
        <referencedby refid="classnest_1_1VPManager_1a58ddc7ca0a301790ffe71f5a9c795de7" compoundref="vp__manager__impl_8h" startline="49" endline="52">nest::VPManager::vp_to_thread</referencedby>
        <referencedby refid="classnest_1_1RecordingDevice_1a79b4d2540dc042282d81d1e7d41fdf81" compoundref="recording__device_8cpp" startline="212" endline="218">nest::RecordingDevice::write</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendMPI_1a66706a8e4259b49223922d02a3b6d12e" compoundref="recording__backend__mpi_8cpp" startline="319" endline="340">nest::RecordingBackendMPI::write</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1af1a3ceddd4ba303238c6d508dfc135b1" compoundref="event__delivery__manager_8cpp" startline="293" endline="301">nest::EventDeliveryManager::write_done_marker_secondary_events_</referencedby>
        <referencedby refid="classnest_1_1EventDeliveryManager_1a9a140d30b7f622d0290c78dd211eb3d2" compoundref="event__delivery__manager__impl_8h" startline="177" endline="180">nest::EventDeliveryManager::write_toggle</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ab5d05273018e80f953b50a3792c1f4ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::test_link</definition>
        <argsstring>(int, int)</argsstring>
        <name>test_link</name>
        <qualifiedname>nest::test_link</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mpi_manager.h" line="713" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mpi_manager.h" bodystart="713" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af0c388d8afa8dd1ffb55907af49d8d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::test_links</definition>
        <argsstring>()</argsstring>
        <name>test_links</name>
        <qualifiedname>nest::test_links</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/mpi_manager.h" line="718" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/mpi_manager.h" bodystart="718" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a4effb3b01c598aff32da450323a7bc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::init_nest</definition>
        <argsstring>(int *argc, char **argv[])</argsstring>
        <name>init_nest</name>
        <qualifiedname>nest::init_nest</qualifiedname>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="42" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="42" bodyend="47" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="45" declcolumn="6"/>
        <references refid="classnest_1_1KernelManager_1a4f1afc42929ded7d2911ee8976347d3c" compoundref="kernel__manager_8cpp" startline="28" endline="38">nest::KernelManager::create_kernel_manager</references>
        <references refid="classnest_1_1MPIManager_1a339bb79dd6ca362ef20da865ec7feca7" compoundref="mpi__manager_8cpp" startline="83" endline="96">nest::MPIManager::init_mpi</references>
        <references refid="classnest_1_1KernelManager_1aa731562f03c98d8fa67f1d530056ede2" compoundref="kernel__manager_8cpp" startline="84" endline="93">nest::KernelManager::initialize</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="242">nest::KernelManager::mpi_manager</references>
        <referencedby refid="neststartup_8cpp_1ad3935984e6911e711b0a40aa27670e75" compoundref="neststartup_8cpp" startline="71" endline="149">neststartup</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aaf1c3c714a2c113e9a2b0c5a56797a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::fail_exit</definition>
        <argsstring>(int)</argsstring>
        <name>fail_exit</name>
        <qualifiedname>nest::fail_exit</qualifiedname>
        <param>
          <type>int</type>
          <defname>exitcode</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="50" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="50" bodyend="52" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1abdabbaee9501449d33b21be875f09fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::install_module</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>install_module</name>
        <qualifiedname>nest::install_module</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <defname>module_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="55" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="55" bodyend="57" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a75785465b86e1c71e993158e6200efb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::reset_kernel</definition>
        <argsstring>()</argsstring>
        <name>reset_kernel</name>
        <qualifiedname>nest::reset_kernel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="60" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="60" bodyend="63" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="50" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1ab02294c81d950069b7d861c9ada5d7df" compoundref="kernel__manager_8cpp" startline="124" endline="128">nest::KernelManager::reset</references>
        <referencedby refid="classnest_1_1NestModule_1_1ResetKernelFunction_1a7d07831ff2707057f055b41ae83e7f02" compoundref="nestmodule_8cpp" startline="881" endline="885">nest::NestModule::ResetKernelFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ab0d151cd0f6b4a68551541dbdd38c531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::enable_dryrun_mode</definition>
        <argsstring>(const index n_procs)</argsstring>
        <name>enable_dryrun_mode</name>
        <qualifiedname>nest::enable_dryrun_mode</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>n_procs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="66" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="66" bodyend="69" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="52" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="242">nest::KernelManager::mpi_manager</references>
        <references refid="classnest_1_1MPIManager_1a746fe27ef39fe10ee6acbfa58957aeb6" compoundref="mpi__manager_8h" startline="519" endline="522">nest::MPIManager::set_num_processes</references>
        <referencedby refid="classnest_1_1NestModule_1_1SetFakeNumProcesses__iFunction_1a02731945c7eb3d405558c70eb9baf34b" compoundref="nestmodule_8cpp" startline="1108" endline="1117">nest::NestModule::SetFakeNumProcesses_iFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a2790d3c6c87c60627f8cfd1fc4fac771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::register_logger_client</definition>
        <argsstring>(const deliver_logging_event_ptr client_callback)</argsstring>
        <name>register_logger_client</name>
        <qualifiedname>nest::register_logger_client</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a01af9cf2f688ea73b6d89575eda63156" kindref="member">deliver_logging_event_ptr</ref></type>
          <declname>client_callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="72" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="72" bodyend="75" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="54" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a1fd7bc2174776a5c17db95b72cbd773d" compoundref="kernel__manager_8h" startline="241">nest::KernelManager::logging_manager</references>
        <references refid="classnest_1_1LoggingManager_1a0a78d6496c332ac5f5537dd00a0da413" compoundref="logging__manager_8cpp" startline="69" endline="74">nest::LoggingManager::register_logging_client</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a4ed8a25d4c6dc9e616579164a16a8630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::print_nodes_to_stream</definition>
        <argsstring>(std::ostream &amp;ostr)</argsstring>
        <name>print_nodes_to_stream</name>
        <qualifiedname>nest::print_nodes_to_stream</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="78" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="78" bodyend="81" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="95" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1NodeManager_1a6c70952e62625a89a6b82a972d31e488" compoundref="node__manager_8cpp" startline="715" endline="742">nest::NodeManager::print</references>
        <referencedby refid="classnest_1_1NestModule_1_1PrintNodesFunction_1ab7d3866e67494385a449cb6bcc2cf496" compoundref="nestmodule_8cpp" startline="1000" endline="1005">nest::NestModule::PrintNodesFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1PrintNodesToStreamFunction_1ad4d1cf8608166779c0338e75d45e5458" compoundref="nestmodule_8cpp" startline="1018" endline="1025">nest::NestModule::PrintNodesToStreamFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::get_rank_synced_rng</definition>
        <argsstring>()</argsstring>
        <name>get_rank_synced_rng</name>
        <qualifiedname>nest::get_rank_synced_rng</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="84" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="84" bodyend="87" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="97" declcolumn="8"/>
        <references refid="classnest_1_1RandomManager_1a7c42e8a4a9a0d3c1046100defc807dc3" compoundref="random__manager_8h" startline="158" endline="161">nest::RandomManager::get_rank_synced_rng</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a9b688b52b6a9c1673051084e681720de" compoundref="kernel__manager_8h" startline="244">nest::KernelManager::random_manager</references>
        <referencedby refid="classnest_1_1Parameter_1a73d93795275bcb0ba6e59761ab52c928" compoundref="parameter_8cpp" startline="37" endline="79">nest::Parameter::apply</referencedby>
        <referencedby refid="namespacenest_1ae70d1711c4858531e2f644ce06800846" compoundref="nest_8cpp" startline="351" endline="362">apply</referencedby>
        <referencedby refid="classnest_1_1FixedOutDegreeBuilder_1ab9a2bb23bb142823ef65509b1486ed53" compoundref="conn__builder_8cpp" startline="1299" endline="1369">nest::FixedOutDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedTotalNumberBuilder_1abab6d39ad2dc94125e09f5c6fc4212c4" compoundref="conn__builder_8cpp" startline="1407" endline="1538">nest::FixedTotalNumberBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="640" endline="788">nest::ConnectionCreator::fixed_outdegree_</referencedby>
        <referencedby refid="namespacenest_1a1b78ba86b1996d6b20ba42854f9dc29e" compoundref="nest_8cpp" startline="338" endline="342">get_value</referencedby>
        <referencedby refid="classnest_1_1SPManager_1a660e2d7f16859a0e1807eef4331c6628" compoundref="sp__manager_8cpp" startline="714" endline="734">nest::SPManager::global_shuffle</referencedby>
        <referencedby refid="classnest_1_1FreeLayer_1acb2f436d36da84d837609d56562af384" compoundref="free__layer_8h" startline="113" endline="251">nest::FreeLayer&lt; D &gt;::set_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a7b35c25e014d6ea1ad299a69a0e0484e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::get_vp_synced_rng</definition>
        <argsstring>(thread tid)</argsstring>
        <name>get_vp_synced_rng</name>
        <qualifiedname>nest::get_vp_synced_rng</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="90" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="90" bodyend="93" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="98" declcolumn="8"/>
        <references refid="classnest_1_1RandomManager_1ac5608c89ee24b79dbda31e9457f72613" compoundref="random__manager_8h" startline="164" endline="169">nest::RandomManager::get_vp_synced_rng</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a9b688b52b6a9c1673051084e681720de" compoundref="kernel__manager_8h" startline="244">nest::KernelManager::random_manager</references>
        <referencedby refid="classnest_1_1SymmetricBernoulliBuilder_1a7dc57144fbbfb3bdacc30a8b6de8307b" compoundref="conn__builder_8cpp" startline="1689" endline="1780">nest::SymmetricBernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1mip__generator_1a480d772b54fef98b7a3f273d8d098467" compoundref="mip__generator_8cpp" startline="120" endline="143">nest::mip_generator::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a0f1b44a02fc7b34260b4edea0fee204f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        <definition>RngPtr nest::get_vp_specific_rng</definition>
        <argsstring>(thread tid)</argsstring>
        <name>get_vp_specific_rng</name>
        <qualifiedname>nest::get_vp_specific_rng</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="96" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="96" bodyend="99" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="99" declcolumn="8"/>
        <references refid="classnest_1_1RandomManager_1af00c31081f1256d0ad7b4ce0f5d1a2ad" compoundref="random__manager_8h" startline="172" endline="177">nest::RandomManager::get_vp_specific_rng</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a9b688b52b6a9c1673051084e681720de" compoundref="kernel__manager_8h" startline="244">nest::KernelManager::random_manager</references>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a32044ab7e189d7ca5389165781b1b126" compoundref="conn__builder_8cpp" startline="605" endline="681">nest::OneToOneBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a923eef1a06a2714c07fbfb18a8be03a3" compoundref="conn__builder_8cpp" startline="836" endline="889">nest::AllToAllBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedInDegreeBuilder_1a831a8c5343e315c97863c5112ea27f57" compoundref="conn__builder_8cpp" startline="1133" endline="1191">nest::FixedInDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedOutDegreeBuilder_1ab9a2bb23bb142823ef65509b1486ed53" compoundref="conn__builder_8cpp" startline="1299" endline="1369">nest::FixedOutDegreeBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1FixedTotalNumberBuilder_1abab6d39ad2dc94125e09f5c6fc4212c4" compoundref="conn__builder_8cpp" startline="1407" endline="1538">nest::FixedTotalNumberBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1BernoulliBuilder_1a0aa500518f0f92edf83f9273f25a3495" compoundref="conn__builder_8cpp" startline="1567" endline="1621">nest::BernoulliBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1SPBuilder_1a3f3cc4e89529157f3c2381423d8f79ad" compoundref="conn__builder_8cpp" startline="1847" endline="1893">nest::SPBuilder::connect_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1a9406f2b55a5fdbb556a8c5642e150967" compoundref="connection__creator__impl_8h" startline="73" endline="111">nest::ConnectionCreator::connect_to_target_</referencedby>
        <referencedby refid="classnest_1_1gamma__sup__generator_1a7183c2af094cc3da93aedc8a2884e171" compoundref="gamma__sup__generator_8cpp" startline="256" endline="273">nest::gamma_sup_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1inhomogeneous__poisson__generator_1a7044bfad819c1ec418da23a82af4739f" compoundref="inhomogeneous__poisson__generator_8cpp" startline="276" endline="286">nest::inhomogeneous_poisson_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1mip__generator_1abd0c2c060dc2a93380c6625fc9d6dcc1" compoundref="mip__generator_8cpp" startline="146" endline="177">nest::mip_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1poisson__generator_1afbdf62663600b3e6932014bccf60bfc5" compoundref="poisson__generator_8cpp" startline="141" endline="150">nest::poisson_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1poisson__generator__ps_1adc4906d29813d0f609b23efe52ad3fca" compoundref="poisson__generator__ps_8cpp" startline="210" endline="281">nest::poisson_generator_ps::event_hook</referencedby>
        <referencedby refid="classnest_1_1ppd__sup__generator_1a566dc2e4a64e0da3b9ff77be0da54bbd" compoundref="ppd__sup__generator_8cpp" startline="269" endline="287">nest::ppd_sup_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1sinusoidal__poisson__generator_1a0443e2c5c94b18bd1cd38f898266d13b" compoundref="sinusoidal__poisson__generator_8cpp" startline="286" endline="296">nest::sinusoidal_poisson_generator::event_hook</referencedby>
        <referencedby refid="classnest_1_1spike__dilutor_1ab5564617469b1eaf34aa1b8ccfa7f080" compoundref="spike__dilutor_8cpp" startline="146" endline="176">nest::spike_dilutor::event_hook</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="635">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a24c8070cea942180acbad89588f0ce54" compoundref="rate__neuron__ipn__impl_8h" startline="216" endline="236">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::init_buffers_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__opn_1af361f439c50e86c8d8e291a515aa6eb4" compoundref="rate__neuron__opn__impl_8h" startline="200" endline="220">nest::rate_neuron_opn&lt; TNonlinearities &gt;::init_buffers_</referencedby>
        <referencedby refid="classnest_1_1binary__neuron_1a6bbdea3ac268b679ec0741101e2893b6" compoundref="binary__neuron_8h" startline="436" endline="448">nest::binary_neuron&lt; TGainfunction &gt;::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp_1af400b7dc659129ea7cd13bcf7d2fa2a8" compoundref="gif__psc__exp_8cpp" startline="277" endline="314">nest::gif_psc_exp::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1gif__psc__exp__multisynapse_1ab38d8fa73028186075e78399920d1587" compoundref="gif__psc__exp__multisynapse_8cpp" startline="291" endline="337">nest::gif_psc_exp_multisynapse::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp_1aabe22b6edde52b1529ccaf0bd46a7ba3" compoundref="iaf__psc__exp_8cpp" startline="240" endline="281">nest::iaf_psc_exp::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1pp__psc__delta_1a66b25bd25cca6c053ff7f381e0b39c77" compoundref="pp__psc__delta_8cpp" startline="289" endline="350">nest::pp_psc_delta::pre_run_hook</referencedby>
        <referencedby refid="classnest_1_1bernoulli__synapse_1a621c9a6947bdf1225d1d98dbbe27f407" compoundref="bernoulli__synapse_8h" startline="147" endline="174">nest::bernoulli_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1quantal__stp__synapse_1a99ec542d220fbfda54165a9887c7e0e4" compoundref="quantal__stp__synapse_8h" startline="196" endline="238">nest::quantal_stp_synapse&lt; targetidentifierT &gt;::send</referencedby>
        <referencedby refid="classnest_1_1OneToOneBuilder_1a5b19ec07f4ed9e7c79cbff755c5c112b" compoundref="conn__builder_8cpp" startline="743" endline="787">nest::OneToOneBuilder::sp_connect_</referencedby>
        <referencedby refid="classnest_1_1AllToAllBuilder_1a63715afc65b67a92bc0e6777bd61a91b" compoundref="conn__builder_8cpp" startline="931" endline="974">nest::AllToAllBuilder::sp_connect_</referencedby>
        <referencedby refid="classnest_1_1noise__generator_1a4e470deac0d4aabeeb3020250b42ca65" compoundref="noise__generator_8cpp" startline="289" endline="340">nest::noise_generator::update</referencedby>
        <referencedby refid="classnest_1_1pulsepacket__generator_1afc0ef90d6141445fee89e0856cb586e5" compoundref="pulsepacket__generator_8cpp" startline="167" endline="231">nest::pulsepacket_generator::update</referencedby>
        <referencedby refid="classnest_1_1sinusoidal__poisson__generator_1accf5d4be845204104fb67d3b193d3fc6" compoundref="sinusoidal__poisson__generator_8cpp" startline="230" endline="283">nest::sinusoidal_poisson_generator::update</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__ipn_1a2ba90a0d2806a0379cbd1e11388abd08" compoundref="rate__neuron__ipn__impl_8h" startline="268" endline="395">nest::rate_neuron_ipn&lt; TNonlinearities &gt;::update_</referencedby>
        <referencedby refid="classnest_1_1rate__neuron__opn_1aa8f19c2d41620fedcbe60467f3300f04" compoundref="rate__neuron__opn__impl_8h" startline="244" endline="368">nest::rate_neuron_opn&lt; TNonlinearities &gt;::update_</referencedby>
        <referencedby refid="namespacenest_1a6d83992e5c06d61f33858456ac630dc4" compoundref="dict__util_8h" startline="45" endline="66">updateValueParam</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a4739f5733533e0e7934ba5b3450dc901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::set_kernel_status</definition>
        <argsstring>(const DictionaryDatum &amp;dict)</argsstring>
        <name>set_kernel_status</name>
        <qualifiedname>nest::set_kernel_status</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="102" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="102" bodyend="107" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="101" declcolumn="6"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a5faf0b3ca89382ef740ef151f5dedd41" compoundref="kernel__manager_8cpp" startline="148" endline="156">nest::KernelManager::set_status</references>
        <referencedby refid="classnest_1_1NestModule_1_1SetKernelStatus__DFunction_1a809093c50358a45841773e36ba290c0e" compoundref="nestmodule_8cpp" startline="366" endline="376">nest::NestModule::SetKernelStatus_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a13d3c3245741015b3862ea668dc37c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref></type>
        <definition>DictionaryDatum nest::get_kernel_status</definition>
        <argsstring>()</argsstring>
        <name>get_kernel_status</name>
        <qualifiedname>nest::get_kernel_status</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="110" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="110" bodyend="118" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="102" declcolumn="17"/>
        <references refid="classnest_1_1KernelManager_1af192b68cd69260d1d7e6547628282b16" compoundref="kernel__manager_8cpp" startline="159" endline="167">nest::KernelManager::get_status</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetKernelStatus__Function_1a2d8b03628920476854414efea36af079" compoundref="nestmodule_8cpp" startline="605" endline="611">nest::NestModule::GetKernelStatus_Function::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1afd19b490a761b78c43c216c7b1b47106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::set_node_status</definition>
        <argsstring>(const index node_id, const DictionaryDatum &amp;dict)</argsstring>
        <name>set_node_status</name>
        <qualifiedname>nest::set_node_status</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="121" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="121" bodyend="124" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="104" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1NodeManager_1a88ff132a048d366a6a24dada6add71f4" compoundref="node__manager_8cpp" startline="765" endline="767">nest::NodeManager::set_status</references>
        <referencedby refid="classnest_1_1NestModule_1_1SetStatus__idFunction_1a6591dd8ec090461f3000aa2ed9f23c00" compoundref="nestmodule_8cpp" startline="338" endline="349">nest::NestModule::SetStatus_idFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1CreateLayer__D__DFunction_1a25957c3795b862920d3f116d9f8f22f5" compoundref="nestmodule_8cpp" startline="2166" endline="2183">nest::NestModule::CreateLayer_D_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a6e5a92a44e3eda3be872a61843a32430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref></type>
        <definition>DictionaryDatum nest::get_node_status</definition>
        <argsstring>(const index node_id)</argsstring>
        <name>get_node_status</name>
        <qualifiedname>nest::get_node_status</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="127" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="127" bodyend="130" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="105" declcolumn="17"/>
        <references refid="classnest_1_1NodeManager_1a4c9026ded8f30c78fc99cc9ca690f601" compoundref="node__manager_8cpp" startline="758" endline="762">nest::NodeManager::get_status</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetStatus__gFunction_1add909d4ed590dfb159dcfd2cb9f1947e" compoundref="nestmodule_8cpp" startline="491" endline="517">nest::NestModule::GetStatus_gFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1GetStatus__iFunction_1adec4fa8a8fb1aba118aecce38aace0cd" compoundref="nestmodule_8cpp" startline="520" endline="530">nest::NestModule::GetStatus_iFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a66727cbf2db54d042cb6dac04cf2a816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::set_connection_status</definition>
        <argsstring>(const ConnectionDatum &amp;conn, const DictionaryDatum &amp;dict)</argsstring>
        <name>set_connection_status</name>
        <qualifiedname>nest::set_connection_status</qualifiedname>
        <param>
          <type>const <ref refid="nest__datums_8h_1ad270d551a80539e002674c15122e2cb5" kindref="member">ConnectionDatum</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="133" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="133" bodyend="151" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="107" declcolumn="6"/>
        <references refid="logging_8h_1aabca3cd3924b469517a715717d280561" compoundref="logging_8h" startline="40">ALL_ENTRIES_ACCESSED2</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="tokenutils_8cc_1a32eba92c5abb6cb955fad91324b7f076" compoundref="tokenutils_8cc" startline="41" endline="50">getValue&lt; long &gt;</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="namespacenest_1_1names_1a3a5d4f3df0d8b12adeeec1813f7321ca" compoundref="nest__names_8h" startline="369">nest::names::port</references>
        <references refid="classnest_1_1ConnectionManager_1a9b5dd166871f9902c15de576936dca8f" compoundref="connection__manager_8cpp" startline="260" endline="307">nest::ConnectionManager::set_synapse_status</references>
        <references refid="namespacenest_1_1names_1a1a7afd3c7c58dc8b2987d85b9ddd708b" compoundref="nest__names_8h" startline="442">nest::names::source</references>
        <references refid="namespacenest_1_1names_1a2808cd36234dbcc16cce6f065e7f10d0" compoundref="nest__names_8h" startline="462">nest::names::synapse_modelid</references>
        <references refid="namespacenest_1_1names_1a83d2632e91d15673db6f7990fcdfe232" compoundref="nest__names_8h" startline="479">nest::names::target</references>
        <references refid="namespacenest_1_1names_1ae35c2a4bc1016b87f1d8b52b01a2fd6c" compoundref="nest__names_8h" startline="480">nest::names::target_thread</references>
        <referencedby refid="classnest_1_1NestModule_1_1SetStatus__CDFunction_1a36756d98dd0e8be16915a9ba551da56e" compoundref="nestmodule_8cpp" startline="352" endline="363">nest::NestModule::SetStatus_CDFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ab62942f739d1f2d4833471d1c54f4400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref></type>
        <definition>DictionaryDatum nest::get_connection_status</definition>
        <argsstring>(const ConnectionDatum &amp;conn)</argsstring>
        <name>get_connection_status</name>
        <qualifiedname>nest::get_connection_status</qualifiedname>
        <param>
          <type>const <ref refid="nest__datums_8h_1ad270d551a80539e002674c15122e2cb5" kindref="member">ConnectionDatum</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="154" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="154" bodyend="161" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="108" declcolumn="17"/>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnectionManager_1a1906487a726e8f4bb4e65fe5868e4825" compoundref="connection__manager_8cpp" startline="216" endline="257">nest::ConnectionManager::get_synapse_status</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aa2a77f5dfa38b2ed7837975a4ef39a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::create</definition>
        <argsstring>(const Name &amp;model_name, const index n_nodes)</argsstring>
        <name>create</name>
        <qualifiedname>nest::create</qualifiedname>
        <param>
          <type>const <ref refid="className" kindref="compound">Name</ref> &amp;</type>
          <declname>model_name</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>n_nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="164" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="164" bodyend="173" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="110" declcolumn="19"/>
        <references refid="classnest_1_1NodeManager_1a8e6c4a313d6bf3d30f0d0ef111567575" compoundref="node__manager_8cpp" startline="105" endline="183">nest::NodeManager::add_node</references>
        <references refid="classnest_1_1ModelManager_1a0206d78c642e0dc97def42aff26034b6" compoundref="model__manager_8cpp" startline="366" endline="380">nest::ModelManager::get_node_model_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1Create__l__iFunction_1a8bd0a17b5924c6494aa4c7305df8f4ca" compoundref="nestmodule_8cpp" startline="823" endline="842">nest::NestModule::Create_l_iFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aceadf186ded6e26f22792d6ae9e9159f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::get_nodes</definition>
        <argsstring>(const DictionaryDatum &amp;params, const bool local_only)</argsstring>
        <name>get_nodes</name>
        <qualifiedname>nest::get_nodes</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>local_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="176" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="176" bodyend="179" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="112" declcolumn="19"/>
        <references refid="classnest_1_1NodeManager_1ae485df8e2fb82bca92d59d538e47aa99" compoundref="node__manager_8cpp" startline="312" endline="393">nest::NodeManager::get_nodes</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetNodes__D__b_1a3879e16a5f66403ed4536f83301b482b" compoundref="nestmodule_8cpp" startline="845" endline="859">nest::NestModule::GetNodes_D_b::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af6ec6494018607109b78df691ed06e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::connect</definition>
        <argsstring>(NodeCollectionPTR sources, NodeCollectionPTR targets, const DictionaryDatum &amp;connectivity, const std::vector&lt; DictionaryDatum &gt; &amp;synapse_params)</argsstring>
        <name>connect</name>
        <qualifiedname>nest::connect</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>sources</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>targets</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>connectivity</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &gt; &amp;</type>
          <declname>synapse_params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="182" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="182" bodyend="188" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="114" declcolumn="6"/>
        <references refid="classnest_1_1ConnectionManager_1a719414132e35d4b6ffa6c2a636df92eb" compoundref="connection__manager_8cpp" startline="384" endline="433">nest::ConnectionManager::connect</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <referencedby refid="classnest_1_1ConnectionManager_1a4f5d4769f422431b7560df35af23867a" compoundref="connection__manager_8cpp" startline="568" endline="740">nest::ConnectionManager::connect_arrays</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a09866d06afe4905d1c363ac9e4306d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::connect_arrays</definition>
        <argsstring>(long *sources, long *targets, double *weights, double *delays, std::vector&lt; std::string &gt; &amp;p_keys, double *p_values, size_t n, std::string syn_model)</argsstring>
        <name>connect_arrays</name>
        <qualifiedname>nest::connect_arrays</qualifiedname>
        <param>
          <type>long *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>targets</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>delays</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>p_keys</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_values</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>syn_model</declname>
        </param>
        <briefdescription>
<para>Connect arrays of node IDs one-to-one. </para>
        </briefdescription>
        <detaileddescription>
<para>Connects an array of sources to an array of targets, with weights and delays from specified arrays, using the one-to-one rule. Additional synapse parameters can be specified with p_keys and p_values. Sources, targets, weights, delays, and receptor types are given as pointers to the first element. All arrays must have the same length, n. Weights, delays, and receptor types can be unspecified by passing a nullptr.</para>
<para>The p_keys vector contains keys of additional synapse parameters, with associated values in the flat array p_values. If there are n sources and targets, and M additional synapse parameters, p_keys has a size of M, and the p_values array has length of M*n. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="191" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="191" bodyend="201" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="135" declcolumn="6"/>
        <references refid="classnest_1_1ConnectionManager_1a4f5d4769f422431b7560df35af23867a" compoundref="connection__manager_8cpp" startline="568" endline="740">nest::ConnectionManager::connect_arrays</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af07409401611ae3fa1c2558cd0f014ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
        <definition>ArrayDatum nest::get_connections</definition>
        <argsstring>(const DictionaryDatum &amp;dict)</argsstring>
        <name>get_connections</name>
        <qualifiedname>nest::get_connections</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="204" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="204" bodyend="213" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="144" declcolumn="12"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="classnest_1_1ConnectionManager_1a42095f521521f147812163a8b98ee96f" compoundref="connection__manager_8cpp" startline="946" endline="1015">nest::ConnectionManager::get_connections</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetConnections__DFunction_1a08bb267f127676654b1d593d46cea86b" compoundref="nestmodule_8cpp" startline="656" endline="667">nest::NestModule::GetConnections_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1ConnectionManager_1a42095f521521f147812163a8b98ee96f" compoundref="connection__manager_8cpp" startline="946" endline="1015">nest::ConnectionManager::get_connections</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a5d96a7094e3aaa072e4d940a47378b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::disconnect</definition>
        <argsstring>(const ArrayDatum &amp;conns)</argsstring>
        <name>disconnect</name>
        <qualifiedname>nest::disconnect</qualifiedname>
        <param>
          <type>const <ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref> &amp;</type>
          <declname>conns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="216" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="216" bodyend="225" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="146" declcolumn="6"/>
        <references refid="classnest_1_1SPManager_1af9961e9c3f1968bb1ff558a540d53923" compoundref="sp__manager_8cpp" startline="264" endline="322">nest::SPManager::disconnect</references>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <references refid="classnest_1_1KernelManager_1a1bb61f56ad18de2dbd28058a4b05256b" compoundref="kernel__manager_8h" startline="248">nest::KernelManager::sp_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1Disconnect__aFunction_1a92e97ef2aa47752e2f20b810a9239bf3" compoundref="nestmodule_8cpp" startline="907" endline="917">nest::NestModule::Disconnect_aFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ab9b390746b0a6fc00893571a8823161a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::simulate</definition>
        <argsstring>(const double &amp;t)</argsstring>
        <name>simulate</name>
        <qualifiedname>nest::simulate</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="228" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="228" bodyend="233" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="148" declcolumn="6"/>
        <references refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" compoundref="nest_8cpp" startline="265" endline="268">cleanup</references>
        <references refid="namespacenest_1a9312add735871538abc84f0c3d791d16" compoundref="nest_8cpp" startline="259" endline="262">prepare</references>
        <references refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" compoundref="nest_8cpp" startline="236" endline="256">run</references>
        <referencedby refid="classnest_1_1NestModule_1_1SimulateFunction_1a80d1f9b95d879850a2887fc18bcdace3" compoundref="nestmodule_8cpp" startline="680" endline="691">nest::NestModule::SimulateFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::run</definition>
        <argsstring>(const double &amp;time)</argsstring>
        <name>run</name>
        <qualifiedname>nest::run</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Run a partial simulation for <computeroutput>time</computeroutput> ms. </para>
        </briefdescription>
        <detaileddescription>
<para>Runs a partial simulation for <computeroutput>time</computeroutput> ms after a call to <ref refid="namespacenest_1a9312add735871538abc84f0c3d791d16" kindref="member">prepare()</ref> and before a <ref refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" kindref="member">cleanup()</ref>. Can be called multiple times between a <ref refid="namespacenest_1a9312add735871538abc84f0c3d791d16" kindref="member">prepare()</ref>/cleanup() pair to divide a simulation into multiple pieces with access to the API in between.</para>
<para>Thus, simulate(t) = <ref refid="namespacenest_1a9312add735871538abc84f0c3d791d16" kindref="member">prepare()</ref>; run(t/2); run(t/2); <ref refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" kindref="member">cleanup()</ref></para>
<para><simplesect kind="see"><para><ref refid="namespacenest_1a9312add735871538abc84f0c3d791d16" kindref="member">prepare()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" kindref="member">cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="236" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="236" bodyend="256" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="165" declcolumn="6"/>
        <references refid="classnest_1_1Time_1a544e7b940882df61da1e7fcb94b660cd" compoundref="nest__time_8h" startline="385" endline="388">nest::Time::is_finite</references>
        <references refid="classnest_1_1Time_1af4bee0999582f2d3ae868a671e9a1bf5" compoundref="nest__time_8h" startline="412" endline="415">nest::Time::is_grid_time</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1SimulationManager_1af942eab41c595fc8769f067dfb31c84b" compoundref="simulation__manager_8cpp" startline="541" endline="597">nest::SimulationManager::run</references>
        <references refid="classnest_1_1KernelManager_1a4feb2ae20c19197830bf57c5e7247560" compoundref="kernel__manager_8h" startline="245">nest::KernelManager::simulation_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1RunFunction_1ad3e4dd16b4eb8b82f1b05faf15097c99" compoundref="nestmodule_8cpp" startline="711" endline="721">nest::NestModule::RunFunction::execute</referencedby>
        <referencedby refid="namespacenest_1ab9b390746b0a6fc00893571a8823161a" compoundref="nest_8cpp" startline="228" endline="233">simulate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a9312add735871538abc84f0c3d791d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::prepare</definition>
        <argsstring>()</argsstring>
        <name>prepare</name>
        <qualifiedname>nest::prepare</qualifiedname>
        <briefdescription>
<para>do calibrations for network, open files, ... before <ref refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" kindref="member">run()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Prepares a simulation before calling any number of run(t_n) calls to actually run the simulation</para>
<para><simplesect kind="see"><para><ref refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" kindref="member">run()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" kindref="member">cleanup()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="259" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="259" bodyend="262" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="177" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1aa04eacfced16ba64667115aea94ff79a" compoundref="kernel__manager_8cpp" startline="96" endline="102">nest::KernelManager::prepare</references>
        <referencedby refid="classnest_1_1NestModule_1_1PrepareFunction_1a97e33d3cddb35ef9e4eb7f1f398cf0ff" compoundref="nestmodule_8cpp" startline="741" endline="745">nest::NestModule::PrepareFunction::execute</referencedby>
        <referencedby refid="namespacenest_1ab9b390746b0a6fc00893571a8823161a" compoundref="nest_8cpp" startline="228" endline="233">simulate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a94016e86725ee987facd98121dcea7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <qualifiedname>nest::cleanup</qualifiedname>
        <briefdescription>
<para>do cleanup after a simulation, such as closing files </para>
        </briefdescription>
        <detaileddescription>
<para>Do cleanup to end a simulation using <ref refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" kindref="member">run()</ref> commands. After calling <ref refid="namespacenest_1a94016e86725ee987facd98121dcea7a6" kindref="member">cleanup()</ref>, further <ref refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" kindref="member">run()</ref> calls must only happen after another call to <ref refid="namespacenest_1a9312add735871538abc84f0c3d791d16" kindref="member">prepare()</ref></para>
<para><simplesect kind="see"><para><ref refid="namespacenest_1a19ac46b17d6b9cc90262297f847f1901" kindref="member">run()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacenest_1a9312add735871538abc84f0c3d791d16" kindref="member">prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="265" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="265" bodyend="268" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="190" declcolumn="6"/>
        <references refid="classnest_1_1KernelManager_1a342dc637e6149e63765cb49a1215690b" compoundref="kernel__manager_8cpp" startline="105" endline="111">nest::KernelManager::cleanup</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <referencedby refid="classnest_1_1NestModule_1_1CleanupFunction_1aabc920007821963cb8da81f2eec9ca28" compoundref="nestmodule_8cpp" startline="764" endline="768">nest::NestModule::CleanupFunction::execute</referencedby>
        <referencedby refid="namespacenest_1ab9b390746b0a6fc00893571a8823161a" compoundref="nest_8cpp" startline="228" endline="233">simulate</referencedby>
        <referencedby refid="classnest_1_1RecordingBackendSIONlib_1a852db7deeb736a9c7160df3de3067900" compoundref="recording__backend__sionlib_8cpp" startline="56" endline="59">nest::RecordingBackendSIONlib::~RecordingBackendSIONlib</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af48027ba5206175b7540ff91ba3d07b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::copy_model</definition>
        <argsstring>(const Name &amp;oldmodname, const Name &amp;newmodname, const DictionaryDatum &amp;dict)</argsstring>
        <name>copy_model</name>
        <qualifiedname>nest::copy_model</qualifiedname>
        <param>
          <type>const <ref refid="className" kindref="compound">Name</ref> &amp;</type>
          <declname>oldmodname</declname>
        </param>
        <param>
          <type>const <ref refid="className" kindref="compound">Name</ref> &amp;</type>
          <declname>newmodname</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="271" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="271" bodyend="274" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="192" declcolumn="6"/>
        <references refid="classnest_1_1ModelManager_1ad5640bc6c249b00cf94e816b7d954318" compoundref="model__manager_8cpp" startline="186" endline="215">nest::ModelManager::copy_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af18c7cd06bb7de7b85883a470ec1238e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::set_model_defaults</definition>
        <argsstring>(const std::string component, const DictionaryDatum &amp;dict)</argsstring>
        <name>set_model_defaults</name>
        <qualifiedname>nest::set_model_defaults</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>component</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="277" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="277" bodyend="291" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="194" declcolumn="6"/>
        <references refid="classnest_1_1KernelManager_1abbcfa9636c48be572ae900cd57958a2f" compoundref="kernel__manager_8h" startline="253">nest::KernelManager::io_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1IOManager_1a51667a7f223ca51e759864a82d80a39d" compoundref="io__manager_8cpp" startline="184" endline="187">nest::IOManager::set_recording_backend_status</references>
        <referencedby refid="classnest_1_1NestModule_1_1SetDefaults__l__DFunction_1a32942b6e9c6e4ebc1ceb78d4f8df18ae" compoundref="nestmodule_8cpp" startline="621" endline="632">nest::NestModule::SetDefaults_l_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aacef87bbf60279472b2642b3c460bcde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref></type>
        <definition>DictionaryDatum nest::get_model_defaults</definition>
        <argsstring>(const std::string component)</argsstring>
        <name>get_model_defaults</name>
        <qualifiedname>nest::get_model_defaults</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>component</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="294" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="294" bodyend="323" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="195" declcolumn="17"/>
        <references refid="classnest_1_1ModelManager_1a4ee6b18a6bad6d272e07d838a2af7f1a" compoundref="model__manager_8cpp" startline="394" endline="410">nest::ModelManager::get_connector_defaults</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="classnest_1_1ModelManager_1a0206d78c642e0dc97def42aff26034b6" compoundref="model__manager_8cpp" startline="366" endline="380">nest::ModelManager::get_node_model_id</references>
        <references refid="classnest_1_1IOManager_1ad533f89beed43cfe1a551294d3291e4c" compoundref="io__manager_8cpp" startline="197" endline="203">nest::IOManager::get_recording_backend_status</references>
        <references refid="group__status__interface_1ga6b9f905cffe67e97a38715757cd31779" compoundref="model_8cpp" startline="121" endline="150">nest::Model::get_status</references>
        <references refid="classnest_1_1ModelManager_1a5da676347a1deaa1a434d3d6a95532d0" compoundref="model__manager_8cpp" startline="383" endline="391">nest::ModelManager::get_synapse_model_id</references>
        <references refid="classnest_1_1KernelManager_1abbcfa9636c48be572ae900cd57958a2f" compoundref="kernel__manager_8h" startline="253">nest::KernelManager::io_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetDefaults__lFunction_1a3cc6cb0d13afd31d3d29337eebf01358" compoundref="nestmodule_8cpp" startline="642" endline="653">nest::NestModule::GetDefaults_lFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a938d9f39d4231f8f30f12df8dca60883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="nest__datums_8h_1a7e761153c7304ea99cb0ab869a2d25e0" kindref="member">ParameterDatum</ref></type>
        <definition>ParameterDatum nest::create_parameter</definition>
        <argsstring>(const DictionaryDatum &amp;param_dict)</argsstring>
        <name>create_parameter</name>
        <qualifiedname>nest::create_parameter</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>param_dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="326" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="326" bodyend="335" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="197" declcolumn="16"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="classnest_1_1NestModule_1a4c20345ebae75215125fb19fe97e363c" compoundref="nestmodule_8cpp" startline="108" endline="152">nest::NestModule::create_parameter</references>
        <referencedby refid="classnest_1_1NestModule_1_1CreateParameter__DFunction_1ac1d9c61f4e6107b79e913be072e9351e" compoundref="nestmodule_8cpp" startline="1732" endline="1742">nest::NestModule::CreateParameter_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a1b78ba86b1996d6b20ba42854f9dc29e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double nest::get_value</definition>
        <argsstring>(const ParameterDatum &amp;param)</argsstring>
        <name>get_value</name>
        <qualifiedname>nest::get_value</qualifiedname>
        <param>
          <type>const <ref refid="nest__datums_8h_1a7e761153c7304ea99cb0ab869a2d25e0" kindref="member">ParameterDatum</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="338" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="338" bodyend="342" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="198" declcolumn="8"/>
        <references refid="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" compoundref="nest_8cpp" startline="84" endline="87">get_rank_synced_rng</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetValue__PFunction_1a3af7631db42005fdf30e86525ca1eea7" compoundref="nestmodule_8cpp" startline="1976" endline="1987">nest::NestModule::GetValue_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a624620ef6c6156e4c1c233e35874f421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::is_spatial</definition>
        <argsstring>(const ParameterDatum &amp;param)</argsstring>
        <name>is_spatial</name>
        <qualifiedname>nest::is_spatial</qualifiedname>
        <param>
          <type>const <ref refid="nest__datums_8h_1a7e761153c7304ea99cb0ab869a2d25e0" kindref="member">ParameterDatum</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="345" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="345" bodyend="348" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="199" declcolumn="6"/>
        <referencedby refid="classnest_1_1NestModule_1_1IsSpatial__PFunction_1a5e2d23daf0da90a7bce8b6848dac6fd8" compoundref="nestmodule_8cpp" startline="1990" endline="2001">nest::NestModule::IsSpatial_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ae70d1711c4858531e2f644ce06800846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::apply</definition>
        <argsstring>(const ParameterDatum &amp;param, const NodeCollectionDatum &amp;nc)</argsstring>
        <name>apply</name>
        <qualifiedname>nest::apply</qualifiedname>
        <param>
          <type>const <ref refid="nest__datums_8h_1a7e761153c7304ea99cb0ab869a2d25e0" kindref="member">ParameterDatum</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const <ref refid="nest__datums_8h_1a46dc3375f57e5fdc088238d79b4545f9" kindref="member">NodeCollectionDatum</ref> &amp;</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="351" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="351" bodyend="362" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="200" declcolumn="13"/>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="namespacenest_1a16717a46436ebcc2eae54f5baf6ab33f" compoundref="nest_8cpp" startline="84" endline="87">get_rank_synced_rng</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1Apply__P__DFunction_1aeae22d50cf9444ac9eb041db8edc59ed" compoundref="nestmodule_8cpp" startline="2007" endline="2021">nest::NestModule::Apply_P_DFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Apply__P__gFunction_1a9ceab1e7886750793f68f8cb0ba922c6" compoundref="nestmodule_8cpp" startline="2024" endline="2038">nest::NestModule::Apply_P_gFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a11fe37332767e88070eb4b5cf342df8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::apply</definition>
        <argsstring>(const ParameterDatum &amp;param, const DictionaryDatum &amp;positions)</argsstring>
        <name>apply</name>
        <qualifiedname>nest::apply</qualifiedname>
        <param>
          <type>const <ref refid="nest__datums_8h_1a7e761153c7304ea99cb0ab869a2d25e0" kindref="member">ParameterDatum</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="365" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="365" bodyend="373" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="201" declcolumn="13"/>
        <references refid="className_1a8ee5a44599eb7a686ee64c343e0c8e18" compoundref="name_8h" startline="118" endline="122">Name::lookup</references>
        <references refid="namespacenest_1_1names_1a1a7afd3c7c58dc8b2987d85b9ddd708b" compoundref="nest__names_8h" startline="442">nest::names::source</references>
        <references refid="namespacenest_1_1names_1a40afe7cb4c3468c31edd24ba736b438b" compoundref="nest__names_8h" startline="481">nest::names::targets</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ad2b46e5fbc127088af40a982954db52d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDatum" kindref="compound">Datum</ref> *</type>
        <definition>Datum * nest::node_collection_array_index</definition>
        <argsstring>(const Datum *datum, const long *array, unsigned long n)</argsstring>
        <name>node_collection_array_index</name>
        <qualifiedname>nest::node_collection_array_index</qualifiedname>
        <param>
          <type>const <ref refid="classDatum" kindref="compound">Datum</ref> *</type>
          <declname>datum</declname>
        </param>
        <param>
          <type>const long *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="376" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="376" bodyend="388" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="203" declcolumn="7"/>
        <references refid="classnest_1_1NodeCollection_1a932abae77aca0346af2c5a3981d4e16e" compoundref="node__collection_8cpp" startline="147" endline="166">nest::NodeCollection::create</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a15726e794e4fa366a7b18529b3801ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDatum" kindref="compound">Datum</ref> *</type>
        <definition>Datum * nest::node_collection_array_index</definition>
        <argsstring>(const Datum *datum, const bool *array, unsigned long n)</argsstring>
        <name>node_collection_array_index</name>
        <qualifiedname>nest::node_collection_array_index</qualifiedname>
        <param>
          <type>const <ref refid="classDatum" kindref="compound">Datum</ref> *</type>
          <declname>datum</declname>
        </param>
        <param>
          <type>const bool *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="391" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="391" bodyend="407" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="204" declcolumn="7"/>
        <references refid="classnest_1_1NodeCollection_1a932abae77aca0346af2c5a3981d4e16e" compoundref="node__collection_8cpp" startline="147" endline="166">nest::NodeCollection::create</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1abeb6d77b027892716ab7dcaa1b34dc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::slice_positions_if_sliced_nc</definition>
        <argsstring>(DictionaryDatum &amp;dict, const NodeCollectionDatum &amp;nc)</argsstring>
        <name>slice_positions_if_sliced_nc</name>
        <qualifiedname>nest::slice_positions_if_sliced_nc</qualifiedname>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <param>
          <type>const <ref refid="nest__datums_8h_1a46dc3375f57e5fdc088238d79b4545f9" kindref="member">NodeCollectionDatum</ref> &amp;</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
<para>Get only positions of the sliced nodes if metadata contains node positions and the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> is sliced. </para>
        </briefdescription>
        <detaileddescription>
<para>Puts an array of positions sliced the same way as a sliced <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> into dict. Positions have to be sliced on introspection because metadata of a sliced <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> for internal consistency and efficiency points to the metadata of the original <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" line="410" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.cpp" bodystart="410" bodyend="433" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="214" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="namespacenest_1_1names_1ad361447568cf4aa76b9ae33410acb636" compoundref="nest__names_8h" startline="373">nest::names::positions</references>
        <references refid="classTokenArray_1acbf2202157ead1bb583c43a8465b3876" compoundref="tokenarray_8h" startline="266" endline="270">TokenArray::push_back</references>
        <referencedby refid="classnest_1_1NestModule_1_1GetMetadata__gFunction_1a582995dc2b2858ad928ff0f1c6558a7d" compoundref="nestmodule_8cpp" startline="576" endline="602">nest::NestModule::GetMetadata_gFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a5a315cc6d8817d6c98c2b37ebd0cd817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>ConnectorModelT</declname>
            <defname>ConnectorModelT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::register_connection_model</definition>
        <argsstring>(const std::string &amp;name, const RegisterConnectionModelFlags flags=default_connection_model_flags)</argsstring>
        <name>register_connection_model</name>
        <qualifiedname>nest::register_connection_model</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6" kindref="member">RegisterConnectionModelFlags</ref></type>
          <declname>flags</declname>
          <defval><ref refid="namespacenest_1aef4228724908932f9349113ea9543f2b" kindref="member">default_connection_model_flags</ref></defval>
        </param>
        <briefdescription>
<para>Register connection model (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>an instance of a class inheriting from <computeroutput><ref refid="classnest_1_1Connection" kindref="compound">Connection</ref></computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_impl.h" line="33" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_impl.h" bodystart="33" bodyend="36" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="85" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1ModelManager_1a647d0f754ac09d9a17ab7567fd05801f" compoundref="model__manager__impl_8h" startline="58" endline="95">nest::ModelManager::register_connection_model</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a409b2c475d9c450fa0e9ff72b8dc81cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>ConnectorModelT</declname>
            <defname>ConnectorModelT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::register_secondary_connection_model</definition>
        <argsstring>(const std::string &amp;name, const RegisterConnectionModelFlags flags=default_secondary_connection_model_flags)</argsstring>
        <name>register_secondary_connection_model</name>
        <qualifiedname>nest::register_secondary_connection_model</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ac001f21a4824b6f148d72a1a7f1f8ac6" kindref="member">RegisterConnectionModelFlags</ref></type>
          <declname>flags</declname>
          <defval><ref refid="namespacenest_1a0a576490bb86915afd10578f9577721e" kindref="member">default_secondary_connection_model_flags</ref></defval>
        </param>
        <briefdescription>
<para>Register secondary connection models (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>gap junctions, rate-based models). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_impl.h" line="40" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_impl.h" bodystart="40" bodyend="43" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest.h" declline="92" declcolumn="6"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1ModelManager_1a5377d2ef98724312850ab1613dc019f7" compoundref="model__manager__impl_8h" startline="102" endline="118">nest::ModelManager::register_secondary_connection_model</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a1f9d4eea146a521eb36e8b1081129d25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N nest::time_abs</definition>
        <argsstring>(const N n)</argsstring>
        <name>time_abs</name>
        <qualifiedname>nest::time_abs</qualifiedname>
        <param>
          <type>const N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Class to handle simulation time and realtime. </para>
        </briefdescription>
        <detaileddescription>
<para>Main idea:</para>
<para>All times given in multiples of &quot;tics&quot;: A &quot;tic&quot; is a microsecond by default, but may be changed through the option -Dtics_per_ms to configure.</para>
<para>User access to time only through accessor functions:<itemizedlist>
<listitem><para>Times can be added, subtracted, and multiplied by ints</para>
</listitem><listitem><para>All real world time is given in ms as double</para>
</listitem><listitem><para>All computation is done based on tics</para>
</listitem></itemizedlist>
</para>
<para>Three time variables are kept: #- time in tics #- time in ms #- time in steps</para>
<para>The largest representable time is available through <ref refid="classnest_1_1Time_1ae9dee1ca672a6379a3864633c5da2ce9" kindref="member">Time::max()</ref>.</para>
<para>@NOTE<itemizedlist>
<listitem><para>The time base (tics per millisecond) can only be set at compile time and by the <ref refid="classnest_1_1Time_1a88a842c2c20510cfb5155abe250c7e43" kindref="member">Time::set_resolution()</ref>.</para>
</listitem><listitem><para>Times in ms are rounded up to the next tic interval. This ensures that the time intervals (0, h] are open at the left point and closed at the right point. It also ensures compatibility with precise timing, namely that the offset u fulfills -h &gt; u &gt;= 0.</para>
</listitem><listitem><para>The resolution (tics per step) can only be set before the first node is created and before the simulation starts. The resolution can be changed after the network has been deleted and the time reset.</para>
</listitem><listitem><para>Implementers of models or methods containing persistent (member variable) <ref refid="classnest_1_1Time" kindref="compound">Time</ref> objects, must ensure that these are recalibrated before the simulation starts. This is necessary to ensure that step values are updated after a change in resolution.</para>
</listitem><listitem><para>The default resolution can be changed using the <ndash/>with-tics_per_step option to configure.</para>
</listitem></itemizedlist>
</para>
<para>@NOTE The step-time counter is NOT changed when the resolution is changed. This is of no consequence, since changes in resolution are permitted at t=0 only.</para>
<para>@NOTE<itemizedlist>
<listitem><para>Neurons update themselves in min-delay intervals. During such a min-delay update step, time is in a sense undefined, since it is up to the model how it takes its dynamics across the interval. Any spikes emitted and voltage information returned must be fixed to time grid points.</para>
</listitem><listitem><para>One may later consider to introduce per-tread simulation time variables.</para>
</listitem></itemizedlist>
</para>
<para>@NOTE Delays must be added to current time, and moduloed each time a spike is inserted into a ring buffer. That operation must be very fast, and there is no time for conversions. Thus, delays must be stored in steps. Given the large number of delays in a system, we cannot use class <ref refid="classnest_1_1Time" kindref="compound">Time</ref> with its three member variables to store delays. Delays must thus be stored explicitly as delay steps.</para>
<para>Markus Diesmann, 2008-01-25 Hans Ekkehard Plesser, 2004-01-25, 2006-12-18 Marc-Oliver Gewaltig, 2004-01-27 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="125" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="125" bodyend="128"/>
        <referencedby refid="classnest_1_1Time_1adf6042589aa2cfebb7023c05738338dc" compoundref="nest__time_8h" startline="464" endline="471">nest::Time::range</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ae45a8853afe9cc16c6ff31da5b53fffc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>long long</type>
        <definition>long long nest::time_abs</definition>
        <argsstring>(long long n)</argsstring>
        <name>time_abs</name>
        <qualifiedname>nest::time_abs</qualifiedname>
        <param>
          <type>long long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="132" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ae5bab62b273991f1db0773ebe4356a4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator==</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator==</name>
        <qualifiedname>nest::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="575" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="575" bodyend="578"/>
        <referencedby refid="namespacenest_1a3e7243d7bd0cb51830d70c36a319eee4" compoundref="source__table__position_8h" startline="146" endline="149">operator!=</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af49ed87bca9111179144d575439c65c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator!=</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>nest::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="581" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a3786a9222ca1476d0435002301c89e85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&lt;</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>nest::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="586" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="587" bodyend="590"/>
        <referencedby refid="namespacenest_1a71bf046dd4aca9297f19fe64b1c568f3" compoundref="source__table__position_8h" startline="172" endline="175">operator&gt;</referencedby>
        <referencedby refid="namespacenest_1ade3f597b2444d0f8a653a8455f4bc585" compoundref="source__table__position_8h" startline="184" endline="187">operator&gt;=</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aa77bb5d603919e4a7f50ce265e62a707" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&gt;</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>nest::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="593" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="593" bodyend="596"/>
        <referencedby refid="namespacenest_1aa0fc7dca79f6e8ef260bf6f9a2767cd3" compoundref="source__table__position_8h" startline="178" endline="181">operator&lt;=</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a3e180e873dc6eb6ba149758db8644e04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&lt;=</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>nest::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="598" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="599" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aefb847d5c9e1a2b9bd1fd099554b509e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&gt;=</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>nest::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="605" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a67b7a3a2f3d8ba2fd5308e956bf02c4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time nest::operator+</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator+</name>
        <qualifiedname>nest::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="611" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="611" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a1d9ffd1c40624d5707550bc539f3ac50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time nest::operator-</definition>
        <argsstring>(const Time &amp;t1, const Time &amp;t2)</argsstring>
        <name>operator-</name>
        <qualifiedname>nest::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="617" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a399b18a116d193ada5611781de07793e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time nest::operator*</definition>
        <argsstring>(const long factor, const Time &amp;t)</argsstring>
        <name>operator*</name>
        <qualifiedname>nest::operator*</qualifiedname>
        <param>
          <type>const long</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="623" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="623" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a51a8e6ecbacd6090499a601f48af40c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time nest::operator*</definition>
        <argsstring>(const Time &amp;t, long factor)</argsstring>
        <name>operator*</name>
        <qualifiedname>nest::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Time" kindref="compound">Time</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" line="642" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_time.h" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a0dbdd7756d9b72709b0567c7ffd9d92b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t nest::generate_bit_mask</definition>
        <argsstring>(const uint8_t num_bits, const uint8_t bit_position)</argsstring>
        <name>generate_bit_mask</name>
        <qualifiedname>nest::generate_bit_mask</qualifiedname>
        <param>
          <type>const uint8_t</type>
          <declname>num_bits</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>bit_position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="67" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac8e9028e48c277fb5d15d73d83578e28" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t nest::generate_max_value</definition>
        <argsstring>(const uint8_t num_bits)</argsstring>
        <name>generate_max_value</name>
        <qualifiedname>nest::generate_max_value</qualifiedname>
        <param>
          <type>const uint8_t</type>
          <declname>num_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="73" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ad87fa4783ecbaa345d3fc8cdd4d0e01d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::__attribute__</definition>
        <argsstring>((__unused__)) const index invalid_index</argsstring>
        <name>__attribute__</name>
        <qualifiedname>nest::__attribute__</qualifiedname>
        <param>
          <type>(__unused__)</type>
        </param>
        <initializer>= <ref refid="namespacenest_1a76d010a7f940c7edbcdf77d42bd37207" kindref="member">invalid_targetindex</ref> - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" line="132" column="1" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nest_types.h" declline="132" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac620aec28a3820569a2bbffe140dfad2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1AbstractMask" kindref="compound">AbstractMask</ref> *</type>
        <definition>static AbstractMask * nest::create_doughnut</definition>
        <argsstring>(const DictionaryDatum &amp;d)</argsstring>
        <name>create_doughnut</name>
        <qualifiedname>nest::create_doughnut</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nestmodule.cpp" line="287" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nestmodule.cpp" bodystart="287" bodyend="309"/>
        <references refid="namespacenest_1_1names_1ade16a7228be2a6c1e4f8686e4caf2ab4" compoundref="nest__names_8h" startline="92">nest::names::anchor</references>
        <references refid="tokenutils_8cc_1aeb08d5341a6bafebc5f8513da1eccb2b" compoundref="tokenutils_8cc" startline="74" endline="91">getValue&lt; double &gt;</references>
        <references refid="namespacenest_1_1names_1a92c3bbe8179f78df3c28ac3fb4a526ee" compoundref="nest__names_8h" startline="272">nest::names::inner_radius</references>
        <references refid="namespacenest_1_1names_1a1e34e835895d37ab48222ef05dd8f8c7" compoundref="nest__names_8h" startline="354">nest::names::outer_radius</references>
        <referencedby refid="classnest_1_1NestModule_1a246da59f22b9398cc08e13bfc2355ae8" compoundref="nestmodule_8cpp" startline="2910" endline="3110">nest::NestModule::init</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a27b32bb9a6056f58f41dbfdbf00fcb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::operator+</definition>
        <argsstring>(NodeCollectionPTR lhs, NodeCollectionPTR rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>nest::operator+</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" line="136" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="136" bodyend="139" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" declline="512" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a113f9049bd2e4bf0b496cb6e8625df45" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double nest::mod</definition>
        <argsstring>(double x, double p)</argsstring>
        <name>mod</name>
        <qualifiedname>nest::mod</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/ntree_impl.h" line="113" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/ntree_impl.h" bodystart="113" bodyend="121"/>
        <referencedby refid="classnest_1_1Ntree_1_1masked__iterator_1a573e9a6c350f7d5c0b691a82ceeaeb67" compoundref="ntree__impl_8h" startline="124" endline="179">nest::Ntree&lt; D, T, max_capacity, max_depth &gt;::masked_iterator::masked_iterator</referencedby>
        <referencedby refid="classnest_1_1ModelManager_1a3ddc2ab6cebf94540774acea4730e004" compoundref="model__manager_8cpp" startline="510" endline="543">nest::ModelManager::memory_info</referencedby>
        <referencedby refid="classnest_1_1NodeManager_1a6c70952e62625a89a6b82a972d31e488" compoundref="node__manager_8cpp" startline="715" endline="742">nest::NodeManager::print</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a3308172bc71c4a3349cf1444b481b134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::multiply_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; first, const std::shared_ptr&lt; Parameter &gt; second)</argsstring>
        <name>multiply_parameter</name>
        <qualifiedname>nest::multiply_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Create the product of one parameter with another. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="385" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="385" bodyend="388" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1488" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Mul__P__PFunction_1a5ad0e739c608759e60c73e64c7813a8b" compoundref="nestmodule_8cpp" startline="1745" endline="1757">nest::NestModule::Mul_P_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a6660019b79fa68201597f16091e0ad24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::divide_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; first, const std::shared_ptr&lt; Parameter &gt; second)</argsstring>
        <name>divide_parameter</name>
        <qualifiedname>nest::divide_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Create the quotient of one parameter with another. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="391" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="391" bodyend="394" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1495" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Div__P__PFunction_1abf498610344217af9c6aace39c59be70" compoundref="nestmodule_8cpp" startline="1760" endline="1772">nest::NestModule::Div_P_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af409f5e14bc9f9f0e889c575a62ef6c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::add_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; first, const std::shared_ptr&lt; Parameter &gt; second)</argsstring>
        <name>add_parameter</name>
        <qualifiedname>nest::add_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Create the sum of one parameter with another. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="397" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="397" bodyend="400" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1502" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Add__P__PFunction_1a24b8ceeaf8c3353bffcee71861a2cf9e" compoundref="nestmodule_8cpp" startline="1775" endline="1787">nest::NestModule::Add_P_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ae0e599deb8a59aa282f9e2c5e3afb6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::subtract_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; first, const std::shared_ptr&lt; Parameter &gt; second)</argsstring>
        <name>subtract_parameter</name>
        <qualifiedname>nest::subtract_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Create the difference between one parameter and another. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="403" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="403" bodyend="406" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1509" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Sub__P__PFunction_1a77fa045f0a855b5a65df517fd7eaa105" compoundref="nestmodule_8cpp" startline="1847" endline="1859">nest::NestModule::Sub_P_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a9d76f2213c0635d1636d91d212a59cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::compare_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; first, const std::shared_ptr&lt; Parameter &gt; second, const DictionaryDatum &amp;d)</argsstring>
        <name>compare_parameter</name>
        <qualifiedname>nest::compare_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>second</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Create comparison of one parameter with another. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="409" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="409" bodyend="414" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1516" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Compare__P__P__DFunction_1a04c9b340a0167d85bbc4783ec4d88c2d" compoundref="nestmodule_8cpp" startline="1863" endline="1876">nest::NestModule::Compare_P_P_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a3cb527af360d4621f4cdfe0ccda1dd4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::conditional_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; condition, const std::shared_ptr&lt; Parameter &gt; if_true, const std::shared_ptr&lt; Parameter &gt; if_false)</argsstring>
        <name>conditional_parameter</name>
        <qualifiedname>nest::conditional_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>if_true</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>if_false</declname>
        </param>
        <briefdescription>
<para>Create a parameter that chooses between two other parameters, based on a given condition parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting value of the condition parameter is treated as a bool, meaning that a zero value evaluates as false, and all other values evaluate as true. <simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="417" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="417" bodyend="422" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1527" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Conditional__P__P__PFunction_1ade99f0e7b7f78543edc3ca2e88e3db08" compoundref="nestmodule_8cpp" startline="1880" endline="1893">nest::NestModule::Conditional_P_P_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a9479de83b3bbefe365380e551de2e27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::min_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter, const double other)</argsstring>
        <name>min_parameter</name>
        <qualifiedname>nest::min_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create parameter whose value is the minimum of a given parameter&apos;s value and the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="425" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="425" bodyend="428" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1535" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Min__P__dFunction_1aa3fc6cde09e7c16604d14e6ec1722fea" compoundref="nestmodule_8cpp" startline="1896" endline="1908">nest::NestModule::Min_P_dFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1acc78313974b26cd5be47f89138fe19eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::max_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter, const double other)</argsstring>
        <name>max_parameter</name>
        <qualifiedname>nest::max_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create parameter whose value is the maximum of a given parameter&apos;s value and the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="431" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="431" bodyend="434" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1541" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Max__P__dFunction_1a275920fd70c09eaca8265d4cc6f141bb" compoundref="nestmodule_8cpp" startline="1911" endline="1923">nest::NestModule::Max_P_dFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac6801dbe55ebea5c54a50f53bcc860ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::redraw_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter, const double min, const double max)</argsstring>
        <name>redraw_parameter</name>
        <qualifiedname>nest::redraw_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Create parameter redrawing the value if the value of a parameter is outside the set limits. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="437" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="437" bodyend="440" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1548" declcolumn="1"/>
        <referencedby refid="classnest_1_1NestModule_1_1Redraw__P__d__dFunction_1a641fc5776bc40bfe036b7ea79e01c6f8" compoundref="nestmodule_8cpp" startline="1926" endline="1939">nest::NestModule::Redraw_P_d_dFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1adb6093fc25fdd73df3f72ed55cf6676e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::exp_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter)</argsstring>
        <name>exp_parameter</name>
        <qualifiedname>nest::exp_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Create the exponential of a parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="443" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="443" bodyend="446" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1554" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Exp__PFunction_1aab8d1d9f8b5a0e434b541ad069f2ad71" compoundref="nestmodule_8cpp" startline="1790" endline="1801">nest::NestModule::Exp_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac5cb3ff2975b46dcf8ff8ed656881c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::sin_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter)</argsstring>
        <name>sin_parameter</name>
        <qualifiedname>nest::sin_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Create the sine of a parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="449" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="449" bodyend="452" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1560" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Sin__PFunction_1afb3b4792fc6d3255ed7f5520855a7ab1" compoundref="nestmodule_8cpp" startline="1804" endline="1815">nest::NestModule::Sin_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ae9ee6ab7a9b58c22633802b685e40b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::cos_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter)</argsstring>
        <name>cos_parameter</name>
        <qualifiedname>nest::cos_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>Create the cosine of a parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="455" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="455" bodyend="458" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1566" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Cos__PFunction_1abaa9b30b1077a0f3679edaaf4d3397e4" compoundref="nestmodule_8cpp" startline="1818" endline="1829">nest::NestModule::Cos_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a25444baac628506cd7f32cf02a3b9815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::pow_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; parameter, const double exponent)</argsstring>
        <name>pow_parameter</name>
        <qualifiedname>nest::pow_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Create a parameter raised to the power of an exponent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="461" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="461" bodyend="464" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1572" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Pow__P__dFunction_1a0a5de85176364485ba6a8f99e80f343e" compoundref="nestmodule_8cpp" startline="1832" endline="1844">nest::NestModule::Pow_P_dFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a0c53befc0360f49ae05e993d97c97b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::dimension_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; x_parameter, const std::shared_ptr&lt; Parameter &gt; y_parameter)</argsstring>
        <name>dimension_parameter</name>
        <qualifiedname>nest::dimension_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>x_parameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>y_parameter</declname>
        </param>
        <briefdescription>
<para>Create a parameter that can generate position vectors from a given set of parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a new dynamically allocated parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="467" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="467" bodyend="470" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1578" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1Dimension2d__P__PFunction_1a82450bd5d7d6aaeee5becc5168ef0d9a" compoundref="nestmodule_8cpp" startline="1942" endline="1954">nest::NestModule::Dimension2d_P_PFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Dimension3d__P__P__PFunction_1a5da841ce518791903a4fa105233ddbf7" compoundref="nestmodule_8cpp" startline="1957" endline="1970">nest::NestModule::Dimension3d_P_P_PFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a1e0add56f1a36c9a69336f06c42cddf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Parameter &gt; nest::dimension_parameter</definition>
        <argsstring>(const std::shared_ptr&lt; Parameter &gt; x_parameter, const std::shared_ptr&lt; Parameter &gt; y_parameter, const std::shared_ptr&lt; Parameter &gt; z_parameter)</argsstring>
        <name>dimension_parameter</name>
        <qualifiedname>nest::dimension_parameter</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>x_parameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>y_parameter</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>z_parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" line="473" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.cpp" bodystart="473" bodyend="478" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" declline="1581" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a01029255b83d6f589f958d6f4cafb75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>D</declname>
            <defname>D</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; nest::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Position&lt; D, T &gt; &amp;pos)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>nest::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="812" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="813" bodyend="826" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a62667dd4a252f51759809504f3369e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t nest::number_of_uints_covered</definition>
        <argsstring>()</argsstring>
        <name>number_of_uints_covered</name>
        <qualifiedname>nest::number_of_uints_covered</qualifiedname>
        <briefdescription>
<para>This template function returns the number of uints covered by a variable of type T. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to determine the storage demands for a variable of type T in the NEST communication buffer, which is of type std::vector&lt;unsigned int&gt;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/secondary_event.h" line="73" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/secondary_event.h" bodystart="73" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a822a71bff2d3332a54a997e62d0a0929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::write_to_comm_buffer</definition>
        <argsstring>(T d, std::vector&lt; unsigned int &gt;::iterator &amp;pos)</argsstring>
        <name>write_to_comm_buffer</name>
        <qualifiedname>nest::write_to_comm_buffer</qualifiedname>
        <param>
          <type>T</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>This template function writes data of type T to a given position of a std::vector&lt; unsigned int &gt;. </para>
        </briefdescription>
        <detaileddescription>
<para>Please note that this function does not increase the size of the vector, it just writes the data to the position given by the iterator. The function is used to write data from SecondaryEvents to the NEST communication buffer. The pos iterator is advanced during execution. For a discussion on the functionality of this function see github issue #181 and pull request #184. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/secondary_event.h" line="95" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/secondary_event.h" bodystart="95" bodyend="111"/>
        <referencedby refid="classnest_1_1DataSecondaryEvent_1ad1214a5f2b6998ca31f5c63aae7a86ed" compoundref="secondary__event_8h" startline="266" endline="275">nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::operator&gt;&gt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a97f1da1a1028f8e11e47b2069b5071ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::read_from_comm_buffer</definition>
        <argsstring>(T &amp;d, std::vector&lt; unsigned int &gt;::iterator &amp;pos)</argsstring>
        <name>read_from_comm_buffer</name>
        <qualifiedname>nest::read_from_comm_buffer</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>This template function reads data of type T from a given position of a std::vector&lt; unsigned int &gt;. </para>
        </briefdescription>
        <detaileddescription>
<para>The function is used to read SecondaryEvents data from the NEST communication buffer. The pos iterator is advanced during execution. For a discussion on the functionality of this function see github issue #181 and pull request #184. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/secondary_event.h" line="122" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/secondary_event.h" bodystart="122" bodyend="138"/>
        <referencedby refid="classnest_1_1DataSecondaryEvent_1abb2817c593793852b8063b090dc469d6" compoundref="secondary__event_8h" startline="388" endline="393">nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::get_coeffvalue</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ad76494482f822fae01d875f59793f242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&lt;</definition>
        <argsstring>(const Source &amp;lhs, const Source &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>nest::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source.h" line="154" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a01a1cbcbf8e953763f98ac90cf17d5bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&gt;</definition>
        <argsstring>(const Source &amp;lhs, const Source &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>nest::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source.h" line="161" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aa7f1d98f67ee3750fd23c9cd42ce8238" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator==</definition>
        <argsstring>(const Source &amp;lhs, const Source &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>nest::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Source" kindref="compound">Source</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source.h" line="167" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a01e0b9e7073d3fe301a7ca633f1ab634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator==</definition>
        <argsstring>(const SourceTablePosition &amp;lhs, const SourceTablePosition &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>nest::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" line="140" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" bodystart="140" bodyend="143"/>
        <references refid="structnest_1_1SourceTablePosition_1a9933a27f4dd5fa2425f6a12c1c66fb8a" compoundref="source__table__position_8h" startline="43">nest::SourceTablePosition::lcid</references>
        <references refid="structnest_1_1SourceTablePosition_1ae69cfab7bb31b98f628860420a93af40" compoundref="source__table__position_8h" startline="42">nest::SourceTablePosition::syn_id</references>
        <references refid="structnest_1_1SourceTablePosition_1a892e3fadf8dba86b823b69837ff7ee86" compoundref="source__table__position_8h" startline="41">nest::SourceTablePosition::tid</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a3e7243d7bd0cb51830d70c36a319eee4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator!=</definition>
        <argsstring>(const SourceTablePosition &amp;lhs, const SourceTablePosition &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>nest::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" line="146" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" bodystart="146" bodyend="149"/>
        <references refid="namespacenest_1ae5bab62b273991f1db0773ebe4356a4d" compoundref="nest__time_8h" startline="575" endline="578">operator==</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aea8d40740025eadbae92ea5a3b6e0d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&lt;</definition>
        <argsstring>(const SourceTablePosition &amp;lhs, const SourceTablePosition &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>nest::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" line="151" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" bodystart="152" bodyend="169"/>
        <references refid="structnest_1_1SourceTablePosition_1a9933a27f4dd5fa2425f6a12c1c66fb8a" compoundref="source__table__position_8h" startline="43">nest::SourceTablePosition::lcid</references>
        <references refid="structnest_1_1SourceTablePosition_1ae69cfab7bb31b98f628860420a93af40" compoundref="source__table__position_8h" startline="42">nest::SourceTablePosition::syn_id</references>
        <references refid="structnest_1_1SourceTablePosition_1a892e3fadf8dba86b823b69837ff7ee86" compoundref="source__table__position_8h" startline="41">nest::SourceTablePosition::tid</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a71bf046dd4aca9297f19fe64b1c568f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&gt;</definition>
        <argsstring>(const SourceTablePosition &amp;lhs, const SourceTablePosition &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>nest::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" line="172" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" bodystart="172" bodyend="175"/>
        <references refid="namespacenest_1a3786a9222ca1476d0435002301c89e85" compoundref="nest__time_8h" startline="587" endline="590">operator&lt;</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aa0fc7dca79f6e8ef260bf6f9a2767cd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&lt;=</definition>
        <argsstring>(const SourceTablePosition &amp;lhs, const SourceTablePosition &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>nest::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" line="177" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" bodystart="178" bodyend="181"/>
        <references refid="namespacenest_1aa77bb5d603919e4a7f50ce265e62a707" compoundref="nest__time_8h" startline="593" endline="596">operator&gt;</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ade3f597b2444d0f8a653a8455f4bc585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::operator&gt;=</definition>
        <argsstring>(const SourceTablePosition &amp;lhs, const SourceTablePosition &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>nest::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structnest_1_1SourceTablePosition" kindref="compound">SourceTablePosition</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" line="184" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/source_table_position.h" bodystart="184" bodyend="187"/>
        <references refid="namespacenest_1a3786a9222ca1476d0435002301c89e85" compoundref="nest__time_8h" startline="587" endline="590">operator&lt;</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a6a3aa7b764c6e972d90a6faa2c27e7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::print_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vec)</argsstring>
        <name>print_vector</name>
        <qualifiedname>nest::print_vector</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" line="48" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/sp_manager.cpp" bodystart="48" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a6779693086ed293feb10b317db6e193e" kindref="member">AbstractLayerPTR</ref></type>
        <definition>AbstractLayerPTR nest::get_layer</definition>
        <argsstring>(NodeCollectionPTR nc)</argsstring>
        <name>get_layer</name>
        <qualifiedname>nest::get_layer</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="58" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="58" bodyend="68" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="115" declcolumn="18"/>
        <references refid="classnest_1_1LayerMetadata_1ade03caeb30c777aad9f72822b5995506" compoundref="spatial_8h" startline="70" endline="73">nest::LayerMetadata::get_layer</references>
        <referencedby refid="namespacenest_1a33bd25216b470958f2f7000bdf6eedf9" compoundref="spatial_8cpp" startline="405" endline="418">connect_layers</referencedby>
        <referencedby refid="classnest_1_1AbstractLayer_1a268b14297e57188c5f29a44bad369990" compoundref="layer_8cpp" startline="55" endline="160">nest::AbstractLayer::create_layer</referencedby>
        <referencedby refid="namespacenest_1acd27b8e605b9217b44c1cdbcafef61dc" compoundref="spatial_8cpp" startline="139" endline="196">displacement</referencedby>
        <referencedby refid="namespacenest_1a110b54fe73a6033aab002995564c4e8a" compoundref="spatial_8cpp" startline="232" endline="289">distance</referencedby>
        <referencedby refid="namespacenest_1a91111d805ab0c64f090bcae96ff8c5e2" compoundref="spatial_8cpp" startline="432" endline="444">dump_layer_connections</referencedby>
        <referencedby refid="namespacenest_1a67cd867a183faebc9d9814271868af0a" compoundref="spatial_8cpp" startline="421" endline="429">dump_layer_nodes</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1SelectNodesByMask__g__a__MFunction_1a25462ddd263f2def194950cc57442786" compoundref="nestmodule_8cpp" startline="2850" endline="2906">nest::NestModule::SelectNodesByMask_g_a_MFunction::execute</referencedby>
        <referencedby refid="namespacenest_1a9127a40cb54f0b6b64a6bc716c4ffa57" compoundref="spatial_8cpp" startline="83" endline="108">get_position</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1accca8ae42fb9a0dd77bef43d1662e3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::create_layer</definition>
        <argsstring>(const DictionaryDatum &amp;layer_dict)</argsstring>
        <name>create_layer</name>
        <qualifiedname>nest::create_layer</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>layer_dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="71" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="71" bodyend="80" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="116" declcolumn="19"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="classnest_1_1AbstractLayer_1a268b14297e57188c5f29a44bad369990" compoundref="layer_8cpp" startline="55" endline="160">nest::AbstractLayer::create_layer</references>
        <referencedby refid="classnest_1_1NestModule_1_1CreateLayer__D__DFunction_1a25957c3795b862920d3f116d9f8f22f5" compoundref="nestmodule_8cpp" startline="2166" endline="2183">nest::NestModule::CreateLayer_D_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a9127a40cb54f0b6b64a6bc716c4ffa57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
        <definition>ArrayDatum nest::get_position</definition>
        <argsstring>(NodeCollectionPTR layer_nc)</argsstring>
        <name>get_position</name>
        <qualifiedname>nest::get_position</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="83" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="83" bodyend="108" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="117" declcolumn="12"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <referencedby refid="classnest_1_1FreeLayer_1ad3fe5e6f34d4be2486cd8d325c71ec56" compoundref="free__layer_8h" startline="277" endline="327">nest::FreeLayer&lt; D &gt;::communicate_positions_</referencedby>
        <referencedby refid="classnest_1_1Layer_1a066ca032ad333cb421c3f4538fb2630f" compoundref="layer_8h" startline="618" endline="621">nest::Layer&lt; D &gt;::compute_displacement</referencedby>
        <referencedby refid="namespacenest_1acd27b8e605b9217b44c1cdbcafef61dc" compoundref="spatial_8cpp" startline="139" endline="196">displacement</referencedby>
        <referencedby refid="namespacenest_1a110b54fe73a6033aab002995564c4e8a" compoundref="spatial_8cpp" startline="232" endline="289">distance</referencedby>
        <referencedby refid="classnest_1_1Layer_1a84ccd5b88b173dedb7cb3b4b9b6c2a95" compoundref="layer__impl_8h" startline="286" endline="296">nest::Layer&lt; D &gt;::dump_nodes</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1GetPosition__gFunction_1a3f93380c370b2a9813c0e965b7029f05" compoundref="nestmodule_8cpp" startline="2214" endline="2232">nest::NestModule::GetPosition_gFunction::execute</referencedby>
        <referencedby refid="classnest_1_1Layer_1a96bf140046dc1815263bad1be6395219" compoundref="layer_8h" startline="659" endline="662">nest::Layer&lt; D &gt;::get_position_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1aed80cb7b194e1d7a6644e3585e76f1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::get_position</definition>
        <argsstring>(const index node_id)</argsstring>
        <name>get_position</name>
        <qualifiedname>nest::get_position</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="111" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="111" bodyend="136" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="118" declcolumn="13"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" compoundref="node_8h" startline="978" endline="981">nest::Node::get_nc</references>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1acd27b8e605b9217b44c1cdbcafef61dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
        <definition>ArrayDatum nest::displacement</definition>
        <argsstring>(NodeCollectionPTR layer_to_nc, NodeCollectionPTR layer_from_nc)</argsstring>
        <name>displacement</name>
        <qualifiedname>nest::displacement</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_to_nc</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_from_nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="139" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="139" bodyend="196" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="119" declcolumn="12"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="namespacenest_1a9127a40cb54f0b6b64a6bc716c4ffa57" compoundref="spatial_8cpp" startline="83" endline="108">get_position</references>
        <references refid="classnest_1_1NodeManager_1ad1aef057211358f9a75baa1ca8ba58c1" compoundref="node__manager_8cpp" startline="402" endline="406">nest::NodeManager::is_local_node_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <referencedby refid="classnest_1_1Layer_1a52c45681c7e56df3264fe31db5032108" compoundref="layer__impl_8h" startline="68" endline="78">nest::Layer&lt; D &gt;::compute_displacement</referencedby>
        <referencedby refid="classnest_1_1Layer_1a8680705537ec5ed10f3dadd966075feb" compoundref="layer_8h" startline="646" endline="655">nest::Layer&lt; D &gt;::compute_distance</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Displacement__g__gFunction_1a81bcdc72520a35250564e866919fb41f" compoundref="nestmodule_8cpp" startline="2277" endline="2295">nest::NestModule::Displacement_g_gFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Displacement__a__gFunction_1a37c67d27f49e6c3156a25fd881901f7b" compoundref="nestmodule_8cpp" startline="2298" endline="2310">nest::NestModule::Displacement_a_gFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ad07a55c6ababa297910fe7ebb618d6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
        <definition>ArrayDatum nest::displacement</definition>
        <argsstring>(NodeCollectionPTR layer_nc, const ArrayDatum point)</argsstring>
        <name>displacement</name>
        <qualifiedname>nest::displacement</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_nc</declname>
        </param>
        <param>
          <type>const <ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="199" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="199" bodyend="229" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="120" declcolumn="12"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a110b54fe73a6033aab002995564c4e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::distance</definition>
        <argsstring>(NodeCollectionPTR layer_to_nc, NodeCollectionPTR layer_from_nc)</argsstring>
        <name>distance</name>
        <qualifiedname>nest::distance</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_to_nc</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_from_nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="232" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="232" bodyend="289" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="121" declcolumn="13"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="namespacenest_1a9127a40cb54f0b6b64a6bc716c4ffa57" compoundref="spatial_8cpp" startline="83" endline="108">get_position</references>
        <references refid="classnest_1_1NodeManager_1ad1aef057211358f9a75baa1ca8ba58c1" compoundref="node__manager_8cpp" startline="402" endline="406">nest::NodeManager::is_local_node_id</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
        <referencedby refid="classnest_1_1NestModule_1_1Distance__g__gFunction_1a5cfec7fe58010897335b457afd48d9bc" compoundref="nestmodule_8cpp" startline="2355" endline="2373">nest::NestModule::Distance_g_gFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Distance__a__gFunction_1a9ac838745e2c636cb3aab9e1d22742ba" compoundref="nestmodule_8cpp" startline="2376" endline="2388">nest::NestModule::Distance_a_gFunction::execute</referencedby>
        <referencedby refid="classnest_1_1NestModule_1_1Distance__aFunction_1a0d055bf805709a66668b70c0acd69f15" compoundref="nestmodule_8cpp" startline="2391" endline="2402">nest::NestModule::Distance_aFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a7b8dc1f14c85c0990c8e3b6536829ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::distance</definition>
        <argsstring>(NodeCollectionPTR layer_nc, const ArrayDatum point)</argsstring>
        <name>distance</name>
        <qualifiedname>nest::distance</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_nc</declname>
        </param>
        <param>
          <type>const <ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="292" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="292" bodyend="322" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="122" declcolumn="13"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a6443c6b38e840631d5173ba8392a9f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::distance</definition>
        <argsstring>(const ArrayDatum conns)</argsstring>
        <name>distance</name>
        <qualifiedname>nest::distance</qualifiedname>
        <param>
          <type>const <ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
          <declname>conns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="325" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="325" bodyend="366" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="123" declcolumn="13"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" compoundref="node_8h" startline="978" endline="981">nest::Node::get_nc</references>
        <references refid="classnest_1_1NodeManager_1a166690647e1a88d96c67e83c4c72fa19" compoundref="node__manager_8cpp" startline="422" endline="434">nest::NodeManager::get_node_or_proxy</references>
        <references refid="namespacenest_1a9127a40cb54f0b6b64a6bc716c4ffa57" compoundref="spatial_8cpp" startline="83" endline="108">get_position</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1KernelManager_1a209742409c6552dbf3923b892a594db3" compoundref="kernel__manager_8h" startline="252">nest::KernelManager::node_manager</references>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1ac30c2406c5dda659b9fbf74bc0489126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref></type>
        <definition>MaskDatum nest::create_mask</definition>
        <argsstring>(const DictionaryDatum &amp;mask_dict)</argsstring>
        <name>create_mask</name>
        <qualifiedname>nest::create_mask</qualifiedname>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>mask_dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="369" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="369" bodyend="378" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="124" declcolumn="11"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="classnest_1_1NestModule_1abf42d4f1fe428138838c05157320e16d" compoundref="nestmodule_8cpp" startline="179" endline="284">nest::NestModule::create_mask</references>
        <referencedby refid="classnest_1_1NestModule_1_1CreateMask__DFunction_1a4c2caf90537da90e7a97c80e260e3231" compoundref="nestmodule_8cpp" startline="2423" endline="2434">nest::NestModule::CreateMask_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1af83e7e1d4ba3689610d5e9d44b60337b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBoolDatum" kindref="compound">BoolDatum</ref></type>
        <definition>BoolDatum nest::inside</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;point, const MaskDatum &amp;mask)</argsstring>
        <name>inside</name>
        <qualifiedname>nest::inside</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="381" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="381" bodyend="384" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="125" declcolumn="11"/>
        <referencedby refid="classnest_1_1NestModule_1_1Inside__a__MFunction_1a07e2c7322e365ec168733cd95c414cf7" compoundref="nestmodule_8cpp" startline="2450" endline="2462">nest::NestModule::Inside_a_MFunction::execute</referencedby>
        <referencedby refid="classnest_1_1BallMask_1a72a9ce76a66aa5b8f5db46f76da8a148" compoundref="mask_8cpp" startline="33" endline="60">nest::BallMask&lt; D &gt;::inside</referencedby>
        <referencedby refid="classnest_1_1EllipseMask_1a101cfc6613e908b6f47ea5b9613b47fe" compoundref="mask_8cpp" startline="373" endline="402">nest::EllipseMask&lt; D &gt;::inside</referencedby>
        <referencedby refid="classnest_1_1BoxMask_1aea241631da9ecae255d4bd1ef66b01ee" compoundref="mask__impl_8h" startline="91" endline="94">nest::BoxMask&lt; D &gt;::inside</referencedby>
        <referencedby refid="classnest_1_1Mask_1a8f5f7b1b18f31e4a927705b536c05a72" compoundref="mask__impl_8h" startline="69" endline="72">nest::Mask&lt; D &gt;::inside</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a212a6085587ef25d18be43ecaeea4392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref></type>
        <definition>MaskDatum nest::intersect_mask</definition>
        <argsstring>(const MaskDatum &amp;mask1, const MaskDatum &amp;mask2)</argsstring>
        <name>intersect_mask</name>
        <qualifiedname>nest::intersect_mask</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="387" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="387" bodyend="390" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="126" declcolumn="11"/>
        <referencedby refid="classnest_1_1NestModule_1_1And__M__MFunction_1a8b3a01d80925d90a0d6607545d29c389" compoundref="nestmodule_8cpp" startline="2465" endline="2477">nest::NestModule::And_M_MFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a93d966d15faca2789500f7e48e0ee384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref></type>
        <definition>MaskDatum nest::union_mask</definition>
        <argsstring>(const MaskDatum &amp;mask1, const MaskDatum &amp;mask2)</argsstring>
        <name>union_mask</name>
        <qualifiedname>nest::union_mask</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="393" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="393" bodyend="396" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="127" declcolumn="11"/>
        <referencedby refid="classnest_1_1NestModule_1_1Or__M__MFunction_1a199cbfc89ffa094d0ab664f16f0b1b93" compoundref="nestmodule_8cpp" startline="2480" endline="2492">nest::NestModule::Or_M_MFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a5be96a84af54b0b382920059cfff0e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref></type>
        <definition>MaskDatum nest::minus_mask</definition>
        <argsstring>(const MaskDatum &amp;mask1, const MaskDatum &amp;mask2)</argsstring>
        <name>minus_mask</name>
        <qualifiedname>nest::minus_mask</qualifiedname>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="399" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="399" bodyend="402" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="128" declcolumn="11"/>
        <referencedby refid="classnest_1_1NestModule_1_1Sub__M__MFunction_1a244fc64360f149ce45aac6779bd3f10b" compoundref="nestmodule_8cpp" startline="2495" endline="2507">nest::NestModule::Sub_M_MFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a33bd25216b470958f2f7000bdf6eedf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::connect_layers</definition>
        <argsstring>(NodeCollectionPTR source_nc, NodeCollectionPTR target_nc, const DictionaryDatum &amp;connection_dict)</argsstring>
        <name>connect_layers</name>
        <qualifiedname>nest::connect_layers</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>source_nc</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>target_nc</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>connection_dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="405" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="405" bodyend="418" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="129" declcolumn="6"/>
        <references refid="logging_8h_1a91f6a947f0219a1ffb76f912c65cba95" compoundref="logging_8h" startline="34">ALL_ENTRIES_ACCESSED</references>
        <references refid="classnest_1_1KernelManager_1a0e27508a351fe5c17f42aea52caedb3e" compoundref="kernel__manager_8h" startline="247">nest::KernelManager::connection_manager</references>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">kernel</references>
        <references refid="classnest_1_1ConnectionManager_1a364992a5aca6c29407e9ed0d97ec766b" compoundref="connection__manager_8cpp" startline="1612" endline="1626">nest::ConnectionManager::set_connections_have_changed</references>
        <referencedby refid="classnest_1_1NestModule_1_1ConnectLayers__g__g__DFunction_1ab0557c28442c2601fb6da5ebed659344" compoundref="nestmodule_8cpp" startline="2685" endline="2701">nest::NestModule::ConnectLayers_g_g_DFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a67cd867a183faebc9d9814271868af0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::dump_layer_nodes</definition>
        <argsstring>(NodeCollectionPTR layer_nc, OstreamDatum &amp;out)</argsstring>
        <name>dump_layer_nodes</name>
        <qualifiedname>nest::dump_layer_nodes</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>layer_nc</declname>
        </param>
        <param>
          <type><ref refid="iostreamdatum_8h_1a0afa48cd57405c982e9916b326544796" kindref="member">OstreamDatum</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="421" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="421" bodyend="429" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="130" declcolumn="6"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <referencedby refid="classnest_1_1NestModule_1_1DumpLayerNodes__os__gFunction_1ae418f7fb387c927efaae3989f042477e" compoundref="nestmodule_8cpp" startline="2768" endline="2779">nest::NestModule::DumpLayerNodes_os_gFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a91111d805ab0c64f090bcae96ff8c5e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::dump_layer_connections</definition>
        <argsstring>(const Token &amp;syn_model, NodeCollectionPTR source_layer_nc, NodeCollectionPTR target_layer_nc, OstreamDatum &amp;out)</argsstring>
        <name>dump_layer_connections</name>
        <qualifiedname>nest::dump_layer_connections</qualifiedname>
        <param>
          <type>const <ref refid="classToken" kindref="compound">Token</ref> &amp;</type>
          <declname>syn_model</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>source_layer_nc</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>target_layer_nc</declname>
        </param>
        <param>
          <type><ref refid="iostreamdatum_8h_1a0afa48cd57405c982e9916b326544796" kindref="member">OstreamDatum</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="432" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="432" bodyend="444" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="131" declcolumn="6"/>
        <references refid="namespacenest_1a32b3e378d9e1074462af1dd7267a7049" compoundref="spatial_8cpp" startline="58" endline="68">get_layer</references>
        <referencedby refid="classnest_1_1NestModule_1_1DumpLayerConnections__os__g__g__lFunction_1adbb671990b0d34345991c1cdcb8d0527" compoundref="nestmodule_8cpp" startline="2820" endline="2833">nest::NestModule::DumpLayerConnections_os_g_g_lFunction::execute</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacenest_1a69aa231b72333a4b7d4850c7d416c62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref></type>
        <definition>DictionaryDatum nest::get_layer_status</definition>
        <argsstring>(NodeCollectionPTR)</argsstring>
        <name>get_layer_status</name>
        <qualifiedname>nest::get_layer_status</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>layer_nc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" line="447" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.cpp" bodystart="447" bodyend="452" declfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/spatial.h" declline="135" declcolumn="17"/>
        <referencedby refid="classnest_1_1NestModule_1_1GetLayerStatus__gFunction_1a9cb68c72e1e016fcc685cc1a2b3299fc" compoundref="nestmodule_8cpp" startline="2717" endline="2728">nest::NestModule::GetLayerStatus_gFunction::execute</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>@BeginDocumentation </para>
    </briefdescription>
    <detaileddescription>
<para>@BeginDocumentation <ref refid="className" kindref="compound">Name</ref>: synaptic_element - Contact point element for the dynamic creation and deletion of synapses.</para>
<para>Namespace for the NEST simulation kernel.</para>
<para>@BeginDocumentation <ref refid="className" kindref="compound">Name</ref>: kernel - Global properties of the simulation kernel.</para>
<para>Base class for parameters provided to connection routines.</para>
<para>Class managing flexible connection creation.</para>
<para><ref refid="className" kindref="compound">Name</ref>: <ref refid="classnest_1_1static__synapse__hom__w" kindref="compound">static_synapse_hom_w</ref> - Static synapse type using homogeneous weight, i.e. all synapses feature the same w.</para>
<para>FirstVersion: April 2008</para>
<para>Author: Moritz Helias, Susanne Kunkel</para>
<para>SeeAlso: <ref refid="classnest_1_1static__synapse" kindref="compound">static_synapse</ref></para>
<para>Created based on the connection_creator used for spatial networks.</para>
<para>Principles for these parameters are<itemizedlist>
<listitem><para>Each parameter is a single scalar value.</para>
</listitem><listitem><para>The parameter will be returned as type double.</para>
</listitem><listitem><para>The parameter values can be given either as<itemizedlist>
<listitem><para>a single scalar: the same value is returned for each call</para>
</listitem><listitem><para>a random deviate generator: a new random values is returned for each call</para>
</listitem><listitem><para>an array of scalars: values are returned in order</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><ref refid="className" kindref="compound">Name</ref>: <ref refid="classnest_1_1DeprecationWarning" kindref="compound">DeprecationWarning</ref> - General deprecation warning class for models with deprecated parameters</para>
<para>Description: General class for handling deprecations. The deprecation warning will only be issued the first time the deprecated parameter is updated.</para>
<para>How to use: In model constructor put this-&gt;deprecation_warning.set_deprecated(deprecated_parameter);</para>
<para>In function updating the deprecated parameter put node-&gt;deprecation_warning.deprecation_warning(deprecated_parameter); or node-&gt;deprecation_warning.deprecation_warning(deprecated_parameter,
                                                new_parameter);</para>
<para>Description: Global properties of the simulation kernel.</para>
<para>Parameters: The following parameters are available in the kernel status dictionary.</para>
<para>kernel_status dicttype - Get the complete kernel status (read only).</para>
<para><ref refid="classnest_1_1Time" kindref="compound">Time</ref> and resolution biological_time doubletype - The current simulation time (in ms). max_delay doubletype - The maximum delay in the network, defaults to 0.1 (in ms). min_delay doubletype - The minimum delay in the network, defaults to 0.1 (in ms). max_update_time doubletype - Longest wall-clock time measured so far for a full update step (in s; read only). min_update_time doubletype - Shortest wall-clock time measured so far for a full update step (in s; read only). ms_per_tic doubletype - The number of milliseconds per tic, defaults to 0.001. resolution doubletype - The resolution of the simulation (in ms), defaults to 0.1. time doubletype - The current simulation time (in ms). tics_per_ms doubletype - The number of tics per millisecond, defaults to 1000.0. tics_per_step integertype - The number of tics per simulation time step, defaults to 100. to_do integertype - The number of steps yet to be simulated (read only). T_max doubletype - The largest representable time value (in ms; read only). T_min doubletype - The smallest representable time value (in ms; read only). update_time_limit doubletype - Maximum wall-clock time for one full update step (in s; default +∞). This can be used to terminate simulations that slow down significantly. Simulations may still get stuck if the slowdown occurs within a single update step.</para>
<para>Parallel processing adaptive_spike_buffers booltype - Whether MPI buffers for communication of spikes resize on the fly, defaults to true. adaptive_target_buffers booltype - Whether MPI buffers for communication of connections resize on the fly, defaults to true. send_buffer_size_secondary_events integertype - Size of MPI send buffers for communicating secondary events (in bytes; per MPI rank; for developers; read only). recv_buffer_size_secondary_events integertype - Size of MPI recv buffers for communicating secondary events (in bytes; per MPI rank; for developers; read only). buffer_size_spike_data integertype - Total size of MPI buffer for communication of spikes, defaults to 2. buffer_size_target_data integertype - Total size of MPI buffer for communication of connections, defaults to 2. local_num_threads integertype - The local number of threads, defaults to 1. max_buffer_size_spike_data integertype - Maximal size of MPI buffers for communication of spikes, defaults to 8388608. max_buffer_size_target_data integertype - Maximal size of MPI buffers for communication of connections, defaults to 16777216. num_processes integertype - The number of MPI processes (read only). off_grid_spiking booltype - Whether to transmit precise spike times in MPI communication (read only). sort_connections_by_source booltype - Whether to sort connections by their source; increases construction time of presynaptic data structures, decreases simulation time if the average number of outgoing connections per neuron is smaller than the total number of threads, defaults to true. total_num_virtual_procs integertype - The total number of virtual processes, defaults to 1. use_compressed_spikes booltype - Whether to use spike compression; if a neuron has targets on multiple threads of a process, this switch makes sure that only a single packet is sent to the process instead of one packet per target thread (requires sort_connections_by_source = true), defaults to true.</para>
<para>Random number generators rng_seed integertype - Seed value used as basis of seeding of all random number generators managed by the kernel ( <formula id="0">$1 leq s \leq 2^{32}-1$</formula>). rng_type stringtype - <ref refid="className" kindref="compound">Name</ref> of random number generator type used by NEST, defaults to mt19937_64. rng_types arraytype - List of available random number generator types (read only).</para>
<para>Output data_path stringtype - A path, where all data is written to, defaults to current directory. data_prefix stringtype - A common prefix for all data files. overwrite_files booltype - Whether to overwrite existing data files, defaults to false. print_time booltype - Whether to print progress information during the simulation, defaults to false. recording_backends arraytype - List of available backends for recording devices (read only).</para>
<para>Network information connection_rules arraytype - The list of available connection rules (read only). growth_curves arraytype - The list of the available structural plasticity growth curves (read only). growth_factor_buffer_spike_data double - If MPI buffers for communication of spikes resize on the fly, grow them by this factor each round, defaults to 1.5. growth_factor_buffer_target_data double - If MPI buffers for communication of connections resize on the fly, grow them by this factor each round, defaults to 1.5. keep_source_table booltype - Whether to keep source table after connection setup is complete, defaults to true. local_spike_counter integertype - Number of spikes fired by neurons on a given MPI rank during the most recent call to Simulate(). Only spikes from “normal” neurons are counted, not spikes generated by devices such as <ref refid="classnest_1_1poisson__generator" kindref="compound">poisson_generator</ref> (read only). max_num_syn_models integertype - Maximal number of synapse models supported (read only). network_size integertype - The number of nodes in the network (read only). node_models arraytype - The list of available node models (neurons and devices; read only). num_connections integertype - The number of connections in the network (read only; local only). stimulation_backends arraytype - List of available backends for stimulation devices (read-only). structural_plasticity_synapses dicttype - Defines all synapses which are plastic for the structural plasticity algorithm. Each entry in the dictionary is composed of a synapse model, the presynaptic element and the postsynaptic element. structural_plasticity_update_interval integertype - Defines the time interval in ms at which the structural plasticity manager will make changes in the structure of the network (creation and deletion of plastic synapses), defaults to 10000.0. synapse_models arraytype - The list of the available synapse models (read only).</para>
<para>Waveform relaxation method (wfr) use_wfr booltype - Whether to use waveform relaxation method, defaults to true. wfr_comm_interval doubletype - Desired waveform relaxation communication interval, defaults to 1.0. wfr_interpolation_order integertype - Interpolation order of polynomial used in wfr iterations, defaults to 3. wfr_max_iterations integertype - Maximal number of iterations used for waveform relaxation, defaults to 15. wfr_tol doubletype - Convergence tolerance of waveform relaxation method, defaults to 0.0001.</para>
<para>Miscellaneous dict_miss_is_error booltype - Whether missed dictionary entries are treated as errors.</para>
<para>SeeAlso: Simulate, <ref refid="classnest_1_1Node" kindref="compound">Node</ref></para>
<para>Description: This class represents synaptic element of a node (like Axonl boutons or dendritic spines) used for structural plasticity. The synaptic elements represent connection points between two neurons. They grow according to a homeostatic growth rule. The dynamics of the number of synaptic elements is driven by the average electrical activity of the neuron (indirectly measured through the Calcium concentration of the node). The probability of two neurons creating a new synapse between them, depends on the number of available synaptic elements of each neuron.</para>
<para>Parameters: z double - Current number of synaptic elements. Stored as a double variable but the actual usable number of synaptic elements is an integer truncated from this double value. An standard value for the growth of a synaptic element is around 0.0001 elements/ms. continuous boolean - Defines if the number of synaptic elements should be treated as a continuous double number or as an integer value. Default is false. growth_rate double - The maximum amount by which the synaptic elements will change between time steps. In elements/ms. tau_vacant double - Rate at which vacant synaptic elements will decay. Typical is 0.1 which represents a loss of 10% of the vacant synaptic elements each time the structural_plasticity_update_interval is reached by the simulation time. growth_curve GrowthCurve* - Rule which defines the dynamics of this synaptic element.</para>
<para>References: [1] Butz, Markus, Florentin Wörgötter, and Arjen van Ooyen. &quot;Activity-dependent structural plasticity.&quot; Brain research reviews 60.2 (2009): 287-305.</para>
<para>[2] Butz, Markus, and Arjen van Ooyen. &quot;A simple rule for dendritic spine
 and axonal bouton formation can account for cortical reorganization after
 focal retinal lesions.&quot; PLoS Comput Biol 9.10 (2013): e1003259.</para>
<para>FirstVersion: July 2013</para>
<para>Author: Mikael Naveau, Sandra Diaz</para>
<para>SeeAlso: <ref refid="classnest_1_1GrowthCurve" kindref="compound">GrowthCurve</ref>, <ref refid="classnest_1_1SPManager" kindref="compound">SPManager</ref>, <ref refid="classnest_1_1SPBuilder" kindref="compound">SPBuilder</ref>, <ref refid="classnest_1_1Node" kindref="compound">Node</ref>, <ref refid="classnest_1_1ArchivingNode" kindref="compound">ArchivingNode</ref>. </para>
    </detaileddescription>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/beta_normalization_factor.h" line="32" column="1"/>
  </compounddef>
</doxygen>
