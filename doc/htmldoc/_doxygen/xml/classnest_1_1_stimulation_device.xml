<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_stimulation_device" kind="class" language="C++" prot="public">
    <compoundname>nest::StimulationDevice</compoundname>
    <basecompoundref refid="classnest_1_1_device_node" prot="public" virt="non-virtual">nest::DeviceNode</basecompoundref>
    <basecompoundref refid="classnest_1_1_device" prot="public" virt="non-virtual">nest::Device</basecompoundref>
    <includes refid="stimulation__device_8h" local="no">stimulation_device.h</includes>
    <innerclass refid="structnest_1_1_stimulation_device_1_1_parameters__" prot="protected">nest::StimulationDevice::Parameters_</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62" prot="public" static="no" strong="no">
        <type></type>
        <name>Type</name>
        <enumvalue id="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62a12528cd6da80e85b7c9ae820257226d9" prot="public">
          <name>CURRENT_GENERATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62ab9c4f2a5779e6380a2715ea508bf4cd0" prot="public">
          <name>SPIKE_GENERATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62add61e044e7971f4411dc32a8dbe87e61" prot="public">
          <name>DOUBLE_DATA_GENERATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62a83de8d8ce44368db01f5163e2297dbfe" prot="public">
          <name>DELAYED_RATE_CONNECTION_GENERATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1_device" kindref="compound">Device</ref> type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="179" column="3" bodyfile="nestkernel/stimulation_device.h" bodystart="180" bodyend="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_stimulation_device_1a96fda3d157099a9653ca0a4ea1a1b527" prot="protected" static="no" mutable="no">
        <type>struct <ref refid="structnest_1_1_stimulation_device_1_1_parameters__" kindref="compound">nest::StimulationDevice::Parameters_</ref></type>
        <definition>struct nest::StimulationDevice::Parameters_ nest::StimulationDevice::P_</definition>
        <argsstring></argsstring>
        <name>P_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="209" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_stimulation_device_1abff1868f1e27f6c4fc169cfadfd44856" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        <definition>synindex nest::StimulationDevice::first_syn_id_</definition>
        <argsstring></argsstring>
        <name>first_syn_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synapse type of the first outgoing connection made by the <ref refid="classnest_1_1_device" kindref="compound">Device</ref>.</para>
<para>Used to check that devices connect using only a single synapse type, see #481 and #737. Since this value must survive resets, it is stored here, even though it is an implementation detail. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="219" column="12" bodyfile="nestkernel/stimulation_device.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_stimulation_device_1a9d182e84798604a76fcf328eb135dd77" prot="private" static="no" mutable="no">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::StimulationDevice::backend_params_</definition>
        <argsstring></argsstring>
        <name>backend_params_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="221" column="19" bodyfile="nestkernel/stimulation_device.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a26634ef9b2543d2475725980700333b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::StimulationDevice::StimulationDevice</definition>
        <argsstring>()</argsstring>
        <name>StimulationDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="150" column="3" bodyfile="nestkernel/stimulation_device.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1ab2a3965daa883409a68c29f264726e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::StimulationDevice::StimulationDevice</definition>
        <argsstring>(StimulationDevice const &amp;)</argsstring>
        <name>StimulationDevice</name>
        <param>
          <type><ref refid="classnest_1_1_stimulation_device" kindref="compound">StimulationDevice</ref> const &amp;</type>
          <defname>sd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="151" column="3" bodyfile="nestkernel/stimulation_device.cpp" bodystart="37" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1ac249af71b4b12eb10265614b676da7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::StimulationDevice::~StimulationDevice</definition>
        <argsstring>() override=default</argsstring>
        <name>~StimulationDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="152" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a32a13f00b9c9b4bb0112105c08c6a2ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::StimulationDevice::is_active</definition>
        <argsstring>(const Time &amp;) const override</argsstring>
        <name>is_active</name>
        <reimplements refid="classnest_1_1_device_1a70ac0c03cf931db59d611a974f51cf3b">is_active</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref> &amp;</type>
          <defname>T</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether device is active. The argument is the value of the simulation time. <simplesect kind="see"><para>class comment for details. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="159" column="8" bodyfile="nestkernel/stimulation_device.cpp" bodystart="47" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a3c17981ffa0b79bf9b2e559bcfba1573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::StimulationDevice::get_status</definition>
        <argsstring>(DictionaryDatum &amp;d) const override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_device_1ad04b50c499901228d9c672f8a677962e">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="160" column="8" bodyfile="nestkernel/stimulation_device.cpp" bodystart="166" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a1ebf88604667e02e4070d73ffcc63845" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::StimulationDevice::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_device_1a7e7f029d1c677e8d5727fc80b103e990">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="161" column="8" bodyfile="nestkernel/stimulation_device.cpp" bodystart="123" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a800a7aa91f1dc9411b1f7e052999a3b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::StimulationDevice::has_proxies</definition>
        <argsstring>() const override</argsstring>
        <name>has_proxies</name>
        <reimplements refid="classnest_1_1_node_1a3cadfe2698c39c5fd327f5d70d0b8adf">has_proxies</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the node has proxies on remote threads. This is used to discriminate between different types of nodes, when adding new nodes to the network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="163" column="8" bodyfile="nestkernel/stimulation_device.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a07a29a4f1da521707bf0f8149fe9b9fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>Name</type>
        <definition>Name nest::StimulationDevice::get_element_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_element_type</name>
        <reimplements refid="classnest_1_1_node_1a59915001de69fc05d8a155da42a89e56">get_element_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the element type of the node. The returned Name is a free label describing the class of network elements a node belongs to. Currently used values are &quot;neuron&quot;, &quot;recorder&quot;, &quot;stimulator&quot;, and &quot;other&quot;, which are all defined as static Name objects in the names namespace. This function is overwritten with a corresponding value in the derived classes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="164" column="8" bodyfile="nestkernel/stimulation_device.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a53ca0035b5b2ddedbf5f5d7a5fc47718" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::StimulationDevice::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1_device_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set internal variables before calls to <ref refid="classnest_1_1_simulation_manager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="171" column="8" bodyfile="nestkernel/stimulation_device.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a1da58471abc5507ffd31884c9fda070f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::StimulationDevice::enforce_single_syn_type</definition>
        <argsstring>(synindex)</argsstring>
        <name>enforce_single_syn_type</name>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <defname>syn_id</defname>
        </param>
        <briefdescription>
<para>Throws <ref refid="classnest_1_1_illegal_connection" kindref="compound">IllegalConnection</ref> if synapse id differs from initial synapse id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="174" column="8" bodyfile="nestkernel/stimulation_device.cpp" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a89ae6559338e2d9d45abf77e7a10d42c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62" kindref="member">Type</ref></type>
        <definition>virtual Type nest::StimulationDevice::get_type</definition>
        <argsstring>() const</argsstring>
        <name>get_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="188" column="3" bodyfile="nestkernel/stimulation_device.h" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a616090703a892ad9c77539a2d4ab22d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; nest::StimulationDevice::get_label</definition>
        <argsstring>() const</argsstring>
        <name>get_label</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="192" column="21" bodyfile="nestkernel/stimulation_device.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a617933b71a1b75a31585f88b92f905b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::StimulationDevice::set_data_from_stimulation_backend</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;)</argsstring>
        <name>set_data_from_stimulation_backend</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="193" column="16" bodyfile="nestkernel/stimulation_device.h" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a423c87811fa0812e957c9867344ac217" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::StimulationDevice::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <reimplements refid="classnest_1_1_node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1_time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bring the node from state $t$ to $t+n*dt$.</para>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="194" column="8" bodyfile="nestkernel/stimulation_device.h" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1aac3d7dd71fd9f86cd8306b2faeefa6a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Device::init_buffers</definition>
        <argsstring>()</argsstring>
        <name>init_buffers</name>
        <reimplements refid="classnest_1_1_device_1aac3d7dd71fd9f86cd8306b2faeefa6a0">init_buffers</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset buffers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="166" column="3" bodyfile="nestkernel/device.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1acfb7d327f43c0bcf3c86920b188c5830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Device::init_state</definition>
        <argsstring>()</argsstring>
        <name>init_state</name>
        <reimplements refid="classnest_1_1_device_1acfb7d327f43c0bcf3c86920b188c5830">init_state</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset dynamic state to that of model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="167" column="3" bodyfile="nestkernel/device.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1a56f87d667d7b32a2cd3f95459e424834" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Device::pre_run_hook</definition>
        <argsstring>()</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1_device_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set internal variables before calls to <ref refid="classnest_1_1_simulation_manager_1af942eab41c595fc8769f067dfb31c84b" kindref="member">SimulationManager::run()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="168" column="3" bodyfile="nestkernel/device.cpp" bodystart="144" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1ad51550af656588536bcdf5afecdbf788" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::Node::pre_run_hook</definition>
        <argsstring>()=0</argsstring>
        <name>pre_run_hook</name>
        <reimplements refid="classnest_1_1_device_1a56f87d667d7b32a2cd3f95459e424834">pre_run_hook</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Re-calculate dependent parameters of the node. This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="169" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1_stimulation_device_1ac67e5262a139223625a3eea557e7aa45" prot="protected" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::StimulationDevice::set_initialized_</definition>
        <argsstring>() final</argsstring>
        <name>set_initialized_</name>
        <reimplements refid="classnest_1_1_node_1af1edec8d44fc63df732b8ff58f0788bf">set_initialized_</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/stimulation_device.h" line="197" column="8" bodyfile="nestkernel/stimulation_device.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for common properties of StimulationDevices.</para>
<para>Stimulation devices are all devices injecting currents, spike trains or other signals into a network. They provide only output and do not receive any input.</para>
<para>Stimulation devices come in (at least) two varieties: those providing analog signals (<ref refid="classnest_1_1_current_event" kindref="compound">CurrentEvent</ref>) and thos providing spike trains (<ref refid="classnest_1_1_spike_event" kindref="compound">SpikeEvent</ref>). <ref refid="classnest_1_1_device" kindref="compound">Device</ref> activation needs to be handled differently in both cases. The general principle is that of the left-open, right-closed interval (start, stop]. For devices emitting spikes, spikes with times in that interval will be emitted.</para>
<para>For analog stimuli, e.g., currents, a stimulus is present in the interval (t, t+h], where h is the simulation resolution, if the effect of the stimulus can be observed at t+h. Thus, if a stimulus is to be active from time a, its effect will first be observable at a+h. This requires that the <ref refid="classnest_1_1_event" kindref="compound">Event</ref> communicating the stimulus must be delivered at time a, i.e., by the deliver_events() call prior to the update for (a, a+h].</para>
<para>Since stimulation devices are connected to their targets with a delay of one time step, this means that analog stimulation devices need to emit the event during the update step for the interval (a-h, a]. Thus, the device needs to be PRO-ACTIVE.</para>
<para>Further, activity of stimulation devices is determined on the basis of simulation time, not event time stamps. This means that the first simulation time step during which the device must emit events is the step for which the global clock has time a-h. If stimulation is to end by time b, this means that the last event should be emitted during the time step for which the global clock has time b-2h.</para>
<para><simplesect kind="note"><para>Any stimulation devices transmitting analog signals must NOT HAVE PROXIES.</para>
</simplesect>
<simplesect kind="note"><para>The distinction between analog and spike emitting devices is implemented by making <ref refid="classnest_1_1_stimulation_device" kindref="compound">StimulationDevice</ref> a template class with the type of the <ref refid="classnest_1_1_event" kindref="compound">Event</ref> sent as template parameter. Member <ref refid="classnest_1_1_stimulation_device_1a32a13f00b9c9b4bb0112105c08c6a2ba" kindref="member">is_active()</ref> is not implemented in general and is available only for those cases for which it is explicitly specialized.</para>
</simplesect>
<simplesect kind="note"><para><ref refid="classnest_1_1_stimulation_device" kindref="compound">StimulationDevice</ref> inherits protected from <ref refid="classnest_1_1_device" kindref="compound">Device</ref>, so that implementations of <ref refid="classnest_1_1_stimulation_device_1a32a13f00b9c9b4bb0112105c08c6a2ba" kindref="member">is_active()</ref> can access t_min and t_max.</para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1_device_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::Device</label>
        <link refid="classnest_1_1_device"/>
      </node>
      <node id="3">
        <label>nest::Node</label>
        <link refid="classnest_1_1_node"/>
      </node>
      <node id="1">
        <label>nest::StimulationDevice</label>
        <link refid="classnest_1_1_stimulation_device"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1_deprecation_warning"/>
      </node>
      <node id="6">
        <label>nest::StimulationDevice::Parameters_</label>
        <link refid="structnest_1_1_stimulation_device_1_1_parameters__"/>
      </node>
      <node id="2">
        <label>nest::DeviceNode</label>
        <link refid="classnest_1_1_device_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::Device</label>
        <link refid="classnest_1_1_device"/>
      </node>
      <node id="3">
        <label>nest::Node</label>
        <link refid="classnest_1_1_node"/>
        <childnode refid="4" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::StimulationDevice</label>
        <link refid="classnest_1_1_stimulation_device"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#P_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/stimulation_device.h" line="147" column="1" bodyfile="nestkernel/stimulation_device.h" bodystart="148" bodyend="222"/>
    <listofallmembers>
      <member refid="classnest_1_1_stimulation_device_1a9d182e84798604a76fcf328eb135dd77" prot="private" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>backend_params_</name></member>
      <member refid="classnest_1_1_node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1_node_1ad88edfd6f881579328b545d88372807d" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>clone</name></member>
      <member refid="group___s_p__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>connect_synaptic_element</name></member>
      <member refid="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62a12528cd6da80e85b7c9ae820257226d9" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>CURRENT_GENERATOR</name></member>
      <member refid="group___s_p__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62a83de8d8ce44368db01f5163e2297dbfe" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>DELAYED_RATE_CONNECTION_GENERATOR</name></member>
      <member refid="classnest_1_1_node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1_device_1aea88c464444468044c92ed53ec521334" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>Device</name></member>
      <member refid="classnest_1_1_device_1a2ff1a2fd348f7109db47e1bbac3b5ac5" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>Device</name></member>
      <member refid="classnest_1_1_device_node_1a528097bccee9d8364ba626c9ac573221" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>DeviceNode</name></member>
      <member refid="classnest_1_1_device_node_1acb8cad4e7bc743f7469fe145cbf318f0" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>DeviceNode</name></member>
      <member refid="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62add61e044e7971f4411dc32a8dbe87e61" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>DOUBLE_DATA_GENERATOR</name></member>
      <member refid="classnest_1_1_node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>downcast</name></member>
      <member refid="classnest_1_1_stimulation_device_1a1da58471abc5507ffd31884c9fda070f" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>enforce_single_syn_type</name></member>
      <member refid="classnest_1_1_node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>event_hook</name></member>
      <member refid="classnest_1_1_node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>event_hook</name></member>
      <member refid="classnest_1_1_node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>finalize</name></member>
      <member refid="classnest_1_1_stimulation_device_1abff1868f1e27f6c4fc169cfadfd44856" prot="private" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>first_syn_id_</name></member>
      <member refid="classnest_1_1_node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_C_m</name></member>
      <member refid="group___s_p__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1_stimulation_device_1a07a29a4f1da521707bf0f8149fe9b9fb" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1_node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1_node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_history</name></member>
      <member refid="classnest_1_1_node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1_node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1_stimulation_device_1a616090703a892ad9c77539a2d4ab22d0" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_label</name></member>
      <member refid="classnest_1_1_device_node_1a170639eec44df6f43d5f9a5403959ba4" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1_node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1_node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1_node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_model_</name></member>
      <member refid="classnest_1_1_node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1_node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_name</name></member>
      <member refid="classnest_1_1_node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_nc</name></member>
      <member refid="classnest_1_1_node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1_device_1aa971ee0786f8fb04f3d76c65429d3d06" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_origin</name></member>
      <member refid="classnest_1_1_device_1a38b889e483489692ba03d3910167c30f" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_start</name></member>
      <member refid="classnest_1_1_stimulation_device_1a3c17981ffa0b79bf9b2e559bcfba1573" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_status</name></member>
      <member refid="classnest_1_1_node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1_device_1a398741486c43d247d75ba784b6b14b1f" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_stop</name></member>
      <member refid="group___s_p__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_synaptic_elements</name></member>
      <member refid="group___s_p__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_synaptic_elements</name></member>
      <member refid="group___s_p__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="group___s_p__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1_device_1ab78b2c8c5dd25d5328790c3d2d77bc02" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_t_max_</name></member>
      <member refid="classnest_1_1_device_1a84e4ade576e165a46597963ae943b829" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_t_min_</name></member>
      <member refid="classnest_1_1_node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1_node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1_node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1_node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1_node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_thread</name></member>
      <member refid="classnest_1_1_node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1_stimulation_device_1a89ae6559338e2d9d45abf77e7a10d42c" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_type</name></member>
      <member refid="classnest_1_1_node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1_node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>get_vp</name></member>
      <member refid="group__event__interface_1gae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_node_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1_stimulation_device_1a800a7aa91f1dc9411b1f7e052999a3b5" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1_node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>init</name></member>
      <member refid="classnest_1_1_stimulation_device_1aac3d7dd71fd9f86cd8306b2faeefa6a0" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>init_buffers</name></member>
      <member refid="classnest_1_1_node_1a5881b951d112d2c408865d080287f453" prot="protected" virt="virtual"><scope>nest::StimulationDevice</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1_stimulation_device_1acfb7d327f43c0bcf3c86920b188c5830" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>init_state</name></member>
      <member refid="classnest_1_1_node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::StimulationDevice</scope><name>init_state_</name></member>
      <member refid="classnest_1_1_stimulation_device_1a32a13f00b9c9b4bb0112105c08c6a2ba" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>is_active</name></member>
      <member refid="classnest_1_1_node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1_node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1_node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1_node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1_device_node_1aa345406ceab967b0dd50907ac380747c" prot="protected" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>local_device_id_</name></member>
      <member refid="classnest_1_1_node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1_node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>Node</name></member>
      <member refid="classnest_1_1_node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>Node</name></member>
      <member refid="classnest_1_1_node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1_node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1_stimulation_device_1a96fda3d157099a9653ca0a4ea1a1b527" prot="protected" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>P_</name></member>
      <member refid="classnest_1_1_node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1_stimulation_device_1a53ca0035b5b2ddedbf5f5d7a5fc47718" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1_stimulation_device_1a56f87d667d7b32a2cd3f95459e424834" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1_stimulation_device_1ad51550af656588536bcdf5afecdbf788" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1_node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>print_network</name></member>
      <member refid="classnest_1_1_node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1_node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1_node_1a60608af8d6238b96071a9f64544ec5e3" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1_node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1_stimulation_device_1a617933b71a1b75a31585f88b92f905b7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>set_data_from_stimulation_backend</name></member>
      <member refid="classnest_1_1_node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1_node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1_stimulation_device_1ac67e5262a139223625a3eea557e7aa45" prot="protected" virt="virtual"><scope>nest::StimulationDevice</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1_device_node_1a8c8b80f5be38584cb4b36a18a2977772" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1_node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1_node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1_stimulation_device_1a1ebf88604667e02e4070d73ffcc63845" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>set_status</name></member>
      <member refid="classnest_1_1_node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1_node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_thread</name></member>
      <member refid="classnest_1_1_node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1_node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>set_vp</name></member>
      <member refid="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62ab9c4f2a5779e6380a2715ea508bf4cd0" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>SPIKE_GENERATOR</name></member>
      <member refid="classnest_1_1_stimulation_device_1a26634ef9b2543d2475725980700333b0" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>StimulationDevice</name></member>
      <member refid="classnest_1_1_stimulation_device_1ab2a3965daa883409a68c29f264726e66" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>StimulationDevice</name></member>
      <member refid="classnest_1_1_node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1_stimulation_device_1a5d8eb948492115bb137a35ecb5cfdc62" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>Type</name></member>
      <member refid="classnest_1_1_stimulation_device_1a423c87811fa0812e957c9867344ac217" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>update</name></member>
      <member refid="group___s_p__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1_node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1_device_1adabaff79bdfe01d0986f94241bcbd027" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>~Device</name></member>
      <member refid="classnest_1_1_node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::StimulationDevice</scope><name>~Node</name></member>
      <member refid="classnest_1_1_stimulation_device_1ac249af71b4b12eb10265614b676da7cd" prot="public" virt="non-virtual"><scope>nest::StimulationDevice</scope><name>~StimulationDevice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
