<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1NodeCollectionPrimitive" kind="class" language="C++" prot="public">
    <compoundname>nest::NodeCollectionPrimitive</compoundname>
    <basecompoundref refid="classnest_1_1NodeCollection" prot="public" virt="non-virtual">nest::NodeCollection</basecompoundref>
    <includes refid="node__collection_8h" local="no">node_collection.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" prot="public" static="no">
        <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref></type>
        <definition>using nest::NodeCollectionPrimitive::const_iterator =  nc_const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>nest::NodeCollectionPrimitive::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="404" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1NodeCollectionPrimitive_1af51984c097badaedaf49424fd9bf9653" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class nc_const_iterator</definition>
        <argsstring></argsstring>
        <name>nc_const_iterator</name>
        <qualifiedname>nest::NodeCollectionPrimitive::nc_const_iterator</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1nc__const__iterator" kindref="compound">nc_const_iterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="385" column="16" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeCollectionPrimitive::first_</definition>
        <argsstring></argsstring>
        <name>first_</name>
        <qualifiedname>nest::NodeCollectionPrimitive::first_</qualifiedname>
        <briefdescription>
<para>The first node ID in the primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="388" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="388" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1aee4a028d40203ccb529b003faae007e7" compoundref="node__collection_8cpp" startline="521" endline="535">assert_consistent_model_ids_</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a9e9d723aba38a88e5ea2669772733789" compoundref="node__collection_8h" startline="820" endline="823">contains</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a71f385028830bab3750667189d5bc2a9" compoundref="node__collection_8h" startline="850" endline="860">find</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a8a5b705a9f23b67e1b0c07cd1ec27e4b" compoundref="node__collection_8cpp" startline="407" endline="422">local_begin</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a16365e3d62fc5b8dcdcad5889016e18f" compoundref="node__collection_8cpp" startline="425" endline="439">MPI_local_begin</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac6726624cb02a512406af3449f006afe" compoundref="node__collection_8cpp" startline="271" endline="284">NodeCollectionPrimitive</referencedby>
        <referencedby refid="classnest_1_1nc__const__iterator_1a4e6c5c727d55c7197afe2e8ce5b60f77" compoundref="node__collection_8h" startline="638" endline="690">nest::nc_const_iterator::operator*</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113" compoundref="node__collection_8h" startline="765" endline="781">operator==</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1aa9ecaec828c3ece4643d4308fcf2fcfd" compoundref="node__collection_8h" startline="754" endline="762">operator[]</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" compoundref="node__collection_8cpp" startline="515" endline="518">overlapping</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" compoundref="node__collection_8cpp" startline="491" endline="506">print_primitive</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" compoundref="node__collection_8cpp" startline="442" endline="471">slice</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeCollectionPrimitive::last_</definition>
        <argsstring></argsstring>
        <name>last_</name>
        <qualifiedname>nest::NodeCollectionPrimitive::last_</qualifiedname>
        <briefdescription>
<para>The last node ID in the primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="389" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="389" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1aee4a028d40203ccb529b003faae007e7" compoundref="node__collection_8cpp" startline="521" endline="535">assert_consistent_model_ids_</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a9e9d723aba38a88e5ea2669772733789" compoundref="node__collection_8h" startline="820" endline="823">contains</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" compoundref="node__collection_8h" startline="844" endline="847">empty</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a71f385028830bab3750667189d5bc2a9" compoundref="node__collection_8h" startline="850" endline="860">find</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a32dec7ea9f704308fea0264324876d54" compoundref="node__collection_8cpp" startline="509" endline="512">is_contiguous_ascending</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac6726624cb02a512406af3449f006afe" compoundref="node__collection_8cpp" startline="271" endline="284">NodeCollectionPrimitive</referencedby>
        <referencedby refid="classnest_1_1nc__const__iterator_1a4e6c5c727d55c7197afe2e8ce5b60f77" compoundref="node__collection_8h" startline="638" endline="690">nest::nc_const_iterator::operator*</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113" compoundref="node__collection_8h" startline="765" endline="781">operator==</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1aa9ecaec828c3ece4643d4308fcf2fcfd" compoundref="node__collection_8h" startline="754" endline="762">operator[]</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" compoundref="node__collection_8cpp" startline="515" endline="518">overlapping</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" compoundref="node__collection_8cpp" startline="491" endline="506">print_primitive</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeCollectionPrimitive::model_id_</definition>
        <argsstring></argsstring>
        <name>model_id_</name>
        <qualifiedname>nest::NodeCollectionPrimitive::model_id_</qualifiedname>
        <briefdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> ID of the node IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="390" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="390" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a32dec7ea9f704308fea0264324876d54" compoundref="node__collection_8cpp" startline="509" endline="512">is_contiguous_ascending</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac6726624cb02a512406af3449f006afe" compoundref="node__collection_8cpp" startline="271" endline="284">NodeCollectionPrimitive</referencedby>
        <referencedby refid="classnest_1_1nc__const__iterator_1a4e6c5c727d55c7197afe2e8ce5b60f77" compoundref="node__collection_8h" startline="638" endline="690">nest::nc_const_iterator::operator*</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113" compoundref="node__collection_8h" startline="765" endline="781">operator==</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" compoundref="node__collection_8cpp" startline="491" endline="506">print_primitive</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" compoundref="node__collection_8cpp" startline="442" endline="471">slice</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        <definition>NodeCollectionMetadataPTR nest::NodeCollectionPrimitive::metadata_</definition>
        <argsstring></argsstring>
        <name>metadata_</name>
        <qualifiedname>nest::NodeCollectionPrimitive::metadata_</qualifiedname>
        <briefdescription>
<para>Pointer to the metadata of the node IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="391" column="29" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="391" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399" compoundref="node__collection_8h" startline="832" endline="835">get_metadata</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113" compoundref="node__collection_8h" startline="765" endline="781">operator==</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137" compoundref="node__collection_8cpp" startline="474" endline="488">print_me</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a4a18e217a101a22cc6c8b431f7eae2f7" compoundref="node__collection_8h" startline="826" endline="829">set_metadata</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" compoundref="node__collection_8cpp" startline="442" endline="471">slice</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1NodeCollectionPrimitive_1a8f7a7ded6dd927afa98e98e52907bd45" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::nodes_have_no_proxies_</definition>
        <argsstring></argsstring>
        <name>nodes_have_no_proxies_</name>
        <qualifiedname>nest::NodeCollectionPrimitive::nodes_have_no_proxies_</qualifiedname>
        <briefdescription>
<para>Whether the primitive contains devices or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="392" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="392" bodyend="-1"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a0e6e9c17aea9b0d4c46f3dda5f4b1624" compoundref="node__collection_8h" startline="863" endline="866">has_proxies</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a5c0aa51c68cd9bb66a46dd12d800d46b" compoundref="node__collection_8cpp" startline="296" endline="316">NodeCollectionPrimitive</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1aee4a028d40203ccb529b003faae007e7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeCollectionPrimitive::assert_consistent_model_ids_</definition>
        <argsstring>(index) const</argsstring>
        <name>assert_consistent_model_ids_</name>
        <qualifiedname>nest::NodeCollectionPrimitive::assert_consistent_model_ids_</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>expected_model_id</defname>
        </param>
        <briefdescription>
<para>Raise an error if the model IDs of all nodes in the primitive are not the same as the expected model id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For use in the constructor only.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected model id. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="401" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="521" bodyend="535"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" compoundref="modelrange__manager_8cpp" startline="81" endline="110">nest::ModelRangeManager::get_model_id</references>
        <references refid="classnest_1_1ModelRangeManager_1ab2ea2aea12115408f37d8c0acc8460db" compoundref="modelrange__manager_8cpp" startline="113" endline="116">nest::ModelRangeManager::get_model_of_node_id</references>
        <references refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" compoundref="model_8h" startline="254" endline="257">nest::Model::get_name</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" compoundref="kernel__manager_8h" startline="246">nest::KernelManager::modelrange_manager</references>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac6726624cb02a512406af3449f006afe" compoundref="node__collection_8cpp" startline="271" endline="284">NodeCollectionPrimitive</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1ac6726624cb02a512406af3449f006afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</definition>
        <argsstring>(index first, index last, index model_id, NodeCollectionMetadataPTR)</argsstring>
        <name>NodeCollectionPrimitive</name>
        <qualifiedname>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>model_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
          <defname>meta</defname>
        </param>
        <briefdescription>
<para>Create a primitive from a range of node IDs, with provided model ID and metadata pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first node ID in the primitive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The last node ID in the primitive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> ID of the node IDs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Metadata pointer of the node IDs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="415" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="271" bodyend="284"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aee4a028d40203ccb529b003faae007e7" compoundref="node__collection_8cpp" startline="521" endline="535">assert_consistent_model_ids_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a46d5ece2e23837beef3c9c262a934083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</definition>
        <argsstring>(index first, index last, index model_id)</argsstring>
        <name>NodeCollectionPrimitive</name>
        <qualifiedname>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>model_id</declname>
        </param>
        <briefdescription>
<para>Create a primitive from a range of node IDs, with provided model ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first node ID in the primitive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The last node ID in the primitive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Model" kindref="compound">Model</ref> ID of the node IDs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="424" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="286" bodyend="294"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a5c0aa51c68cd9bb66a46dd12d800d46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</definition>
        <argsstring>(index first, index last)</argsstring>
        <name>NodeCollectionPrimitive</name>
        <qualifiedname>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Create a primitive from a range of node IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>The model ID has to be found by the constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>The first node ID in the primitive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>The last node ID in the primitive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="433" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="296" bodyend="316"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" compoundref="modelrange__manager_8cpp" startline="81" endline="110">nest::ModelRangeManager::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="classnest_1_1Model_1a543b9f87792c1f7ad6078d855567d93a">nest::Model::has_proxies</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" compoundref="kernel__manager_8h" startline="246">nest::KernelManager::modelrange_manager</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a8f7a7ded6dd927afa98e98e52907bd45" compoundref="node__collection_8h" startline="392">nodes_have_no_proxies_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a66a671a4ee60ebc6b8738ea339b1f33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</definition>
        <argsstring>(const NodeCollectionPrimitive &amp;)=default</argsstring>
        <name>NodeCollectionPrimitive</name>
        <qualifiedname>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Primitive copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="440" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a4f44db3ce395b11eedc6a7ffe4012f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
        <definition>NodeCollectionPrimitive &amp; nest::NodeCollectionPrimitive::operator=</definition>
        <argsstring>(const NodeCollectionPrimitive &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>nest::NodeCollectionPrimitive::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Primitive assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive to assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="447" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</definition>
        <argsstring>()</argsstring>
        <name>NodeCollectionPrimitive</name>
        <qualifiedname>nest::NodeCollectionPrimitive::NodeCollectionPrimitive</qualifiedname>
        <briefdescription>
<para>Create empty <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is only for use by <ref refid="classnest_1_1SPBuilder" kindref="compound">SPBuilder</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="454" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="318" bodyend="325"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeCollectionPrimitive::print_me</definition>
        <argsstring>(std::ostream &amp;) const override</argsstring>
        <name>print_me</name>
        <qualifiedname>nest::NodeCollectionPrimitive::print_me</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1ac51897b80c4fda2ef7326457c891936b">print_me</reimplements>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <briefdescription>
<para>Print out the contents of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> in a pretty and informative way. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="456" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="474" bodyend="488"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" compoundref="node__collection_8h" startline="844" endline="847">empty</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" compoundref="node__collection_8cpp" startline="491" endline="506">print_primitive</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NodeCollectionPrimitive::print_primitive</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>print_primitive</name>
        <qualifiedname>nest::NodeCollectionPrimitive::print_primitive</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="457" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="491" bodyend="506"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" compoundref="model_8h" startline="254" endline="257">nest::Model::get_name</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</references>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137" compoundref="node__collection_8cpp" startline="474" endline="488">print_me</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1aa9ecaec828c3ece4643d4308fcf2fcfd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::NodeCollectionPrimitive::operator[]</definition>
        <argsstring>(const size_t) const override</argsstring>
        <name>operator[]</name>
        <qualifiedname>nest::NodeCollectionPrimitive::operator[]</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a502cfba765cec504e14d04ef66704b78">operator[]</reimplements>
        <param>
          <type>const</type>
        </param>
        <briefdescription>
<para>Get the node ID in the specified index in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a node ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="459" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="754" bodyend="762"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::NodeCollectionPrimitive::operator+</definition>
        <argsstring>(NodeCollectionPTR rhs) const override</argsstring>
        <name>operator+</name>
        <qualifiedname>nest::NodeCollectionPrimitive::operator+</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1ae01887046fa8cc3f3a99c55f4bd4f602">operator+</reimplements>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        </param>
        <briefdescription>
<para>Join two NodeCollections. </para>
        </briefdescription>
        <detaileddescription>
<para>May return a primitive or composite, depending on the input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="460" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="340" bodyend="404"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" compoundref="node__collection_8h" startline="844" endline="847">empty</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399" compoundref="node__collection_8h" startline="832" endline="835">get_metadata</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" compoundref="node__collection_8cpp" startline="318" endline="325">NodeCollectionPrimitive</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" compoundref="node__collection_8cpp" startline="515" endline="518">overlapping</references>
        <references refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" compoundref="node__collection_8cpp" startline="266" endline="269">nest::NodeCollection::valid</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::operator==</definition>
        <argsstring>(const NodeCollectionPTR rhs) const override</argsstring>
        <name>operator==</name>
        <qualifiedname>nest::NodeCollectionPrimitive::operator==</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1afeb48bca3d5a550bb9a299c91d9b8631">operator==</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="461" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="765" bodyend="781"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1aed61e3aa6a1996e396913517ba94b384" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::operator==</definition>
        <argsstring>(const NodeCollectionPrimitive &amp;rhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>nest::NodeCollectionPrimitive::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="462" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="784" bodyend="792"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a11fa015ae3a1e31c795fa80f284cbba7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref></type>
        <definition>NodeCollectionPrimitive::const_iterator nest::NodeCollectionPrimitive::begin</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const override</argsstring>
        <name>begin</name>
        <qualifiedname>nest::NodeCollectionPrimitive::begin</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1abf07fcbde67213640c5483c4a403f98c">begin</reimplements>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="464" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="795" bodyend="798"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677" compoundref="node__collection_8cpp" startline="328" endline="337">to_array</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a8a5b705a9f23b67e1b0c07cd1ec27e4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref></type>
        <definition>NodeCollectionPrimitive::const_iterator nest::NodeCollectionPrimitive::local_begin</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const override</argsstring>
        <name>local_begin</name>
        <qualifiedname>nest::NodeCollectionPrimitive::local_begin</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1ad90668fbeaefd6e8776586d30b4e42aa">local_begin</reimplements>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>, in a parallel context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="465" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="407" bodyend="422"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1VPManager_1a8ddd2beb1aea2c9385b93ad4b842a2cb" compoundref="vp__manager__impl_8h" startline="55" endline="58">nest::VPManager::get_num_virtual_processes</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" compoundref="vp__manager__impl_8h" startline="43" endline="46">nest::VPManager::node_id_to_vp</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</references>
        <references refid="classnest_1_1VPManager_1aa3d11af1445df6d186a4be6a5bbd5b3f" compoundref="vp__manager__impl_8h" startline="67" endline="70">nest::VPManager::thread_to_vp</references>
        <references refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" compoundref="kernel__manager_8h" startline="243">nest::KernelManager::vp_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a16365e3d62fc5b8dcdcad5889016e18f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref></type>
        <definition>NodeCollectionPrimitive::const_iterator nest::NodeCollectionPrimitive::MPI_local_begin</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const override</argsstring>
        <name>MPI_local_begin</name>
        <qualifiedname>nest::NodeCollectionPrimitive::MPI_local_begin</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1abf47c514428fa0f84689504753210dac">MPI_local_begin</reimplements>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator representing the beginning of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>, in an MPI-parallel context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="466" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="425" bodyend="439"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1MPIManager_1a496c51140dd2f76db937357bb70ac565" compoundref="mpi__manager_8h" startline="513" endline="516">nest::MPIManager::get_num_processes</references>
        <references refid="classnest_1_1MPIManager_1a1fbad26739451a698618a1407b85124f" compoundref="mpi__manager__impl_8h" startline="39" endline="42">nest::MPIManager::get_process_id_of_vp</references>
        <references refid="classnest_1_1MPIManager_1a6fa640ce78eda75f8304879ff396ab78" compoundref="mpi__manager_8h" startline="525" endline="528">nest::MPIManager::get_rank</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" compoundref="kernel__manager_8h" startline="242">nest::KernelManager::mpi_manager</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref></type>
        <definition>NodeCollectionPrimitive::const_iterator nest::NodeCollectionPrimitive::end</definition>
        <argsstring>(NodeCollectionPTR=NodeCollectionPTR(nullptr)) const override</argsstring>
        <name>end</name>
        <qualifiedname>nest::NodeCollectionPrimitive::end</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a51eca62c54656ff2734d6cb5a0e483b5">end</reimplements>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defval><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(nullptr)</defval>
        </param>
        <briefdescription>
<para>Method to get an iterator representing the end of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of element NC that iterator points to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator representing the end of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>, taking offset into account </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="467" column="18" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="801" bodyend="804"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</references>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" compoundref="node__collection_8cpp" startline="442" endline="471">slice</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677" compoundref="node__collection_8cpp" startline="328" endline="337">to_array</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="arraydatum_8h_1ae28f9f22dee7553c3f044e7f48e4f314" kindref="member">ArrayDatum</ref></type>
        <definition>ArrayDatum nest::NodeCollectionPrimitive::to_array</definition>
        <argsstring>() const override</argsstring>
        <name>to_array</name>
        <qualifiedname>nest::NodeCollectionPrimitive::to_array</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a679f6c266ee4ecd5d1ccddec3fbe1a74">to_array</reimplements>
        <briefdescription>
<para>Returns an ArrayDatum filled with node IDs from the primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="470" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="328" bodyend="337"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a11fa015ae3a1e31c795fa80f284cbba7" compoundref="node__collection_8h" startline="795" endline="798">begin</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" compoundref="node__collection_8h" startline="801" endline="804">end</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>size_t nest::NodeCollectionPrimitive::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>nest::NodeCollectionPrimitive::size</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1ae03394582431b592a1329009113d5d51">size</reimplements>
        <briefdescription>
<para>Returns total number of node IDs in the primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="473" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="807" bodyend="811"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" compoundref="node__collection_8h" startline="801" endline="804">end</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a8a5b705a9f23b67e1b0c07cd1ec27e4b" compoundref="node__collection_8cpp" startline="407" endline="422">local_begin</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a16365e3d62fc5b8dcdcad5889016e18f" compoundref="node__collection_8cpp" startline="425" endline="439">MPI_local_begin</referencedby>
        <referencedby refid="classnest_1_1nc__const__iterator_1aab9b6e632bf54c087e6ba5216f507062" compoundref="node__collection_8cpp" startline="54" endline="71">nest::nc_const_iterator::nc_const_iterator</referencedby>
        <referencedby refid="classnest_1_1nc__const__iterator_1a68d929deca666bdd18f3bb6fb3b5db0e" compoundref="node__collection_8h" startline="693" endline="708">nest::nc_const_iterator::operator++</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" compoundref="node__collection_8cpp" startline="491" endline="506">print_primitive</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" compoundref="node__collection_8cpp" startline="442" endline="471">slice</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677" compoundref="node__collection_8cpp" startline="328" endline="337">to_array</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a1744efa14d2e783728a7ffcfaf2c7ec5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>size_t nest::NodeCollectionPrimitive::step</definition>
        <argsstring>() const override</argsstring>
        <name>step</name>
        <qualifiedname>nest::NodeCollectionPrimitive::step</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a0667870543f9c93d54bf38074e508889">step</reimplements>
        <briefdescription>
<para>Returns the step between node IDs in the primitive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="476" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="814" bodyend="817"/>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" compoundref="node__collection_8cpp" startline="442" endline="471">slice</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a9e9d723aba38a88e5ea2669772733789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::contains</definition>
        <argsstring>(index node_id) const override</argsstring>
        <name>contains</name>
        <qualifiedname>nest::NodeCollectionPrimitive::contains</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1ad7635ed62df3bfaf654211b7e8f677f0">contains</reimplements>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
<para>Check if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> contains a specified node ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID to see if exists in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> contains the node ID, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="478" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="820" bodyend="823"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        <definition>NodeCollectionPTR nest::NodeCollectionPrimitive::slice</definition>
        <argsstring>(size_t start, size_t end, size_t step=1) const override</argsstring>
        <name>slice</name>
        <qualifiedname>nest::NodeCollectionPrimitive::slice</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a5fea3ad07ecd7ee522ba789b50862eb7">slice</reimplements>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>end</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Slices the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to the boundaries, with an optional step parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the boundaries being specified are inclusive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to start at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>One past the index of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> to stop at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of places between node IDs to skip. Defaults to 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> pointer to the new, sliced <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="479" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="442" bodyend="471"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" compoundref="node__collection_8h" startline="801" endline="804">end</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" compoundref="node__collection_8h" startline="807" endline="811">size</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a1744efa14d2e783728a7ffcfaf2c7ec5" compoundref="node__collection_8h" startline="814" endline="817">step</references>
        <references refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" compoundref="node__collection_8cpp" startline="266" endline="269">nest::NodeCollection::valid</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a4a18e217a101a22cc6c8b431f7eae2f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::NodeCollectionPrimitive::set_metadata</definition>
        <argsstring>(NodeCollectionMetadataPTR) override</argsstring>
        <name>set_metadata</name>
        <qualifiedname>nest::NodeCollectionPrimitive::set_metadata</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a64459a3e2385a9203abd33ccb3929c0f">set_metadata</reimplements>
        <param>
          <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        </param>
        <briefdescription>
<para>Sets the metadata of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>A Metadata pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="481" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="826" bodyend="829"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref></type>
        <definition>NodeCollectionMetadataPTR nest::NodeCollectionPrimitive::get_metadata</definition>
        <argsstring>() const override</argsstring>
        <name>get_metadata</name>
        <qualifiedname>nest::NodeCollectionPrimitive::get_metadata</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1aba46b54dcc6a61e6357d3978d463c6a1">get_metadata</reimplements>
        <briefdescription>
<para>Gets the metadata of the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Metadata pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="483" column="29" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="832" bodyend="835"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" compoundref="node__collection_8h" startline="391">metadata_</references>
        <referencedby refid="classnest_1_1NodeCollectionComposite_1a2f23fd18dffa2ab06dfbbf728b0dc26a" compoundref="node__collection_8cpp" startline="736" endline="764">nest::NodeCollectionComposite::operator+</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1afc4e775b6f06c8d66fd1e7c8670c1151" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::is_range</definition>
        <argsstring>() const override</argsstring>
        <name>is_range</name>
        <qualifiedname>nest::NodeCollectionPrimitive::is_range</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a15053e02c1951f76f797730666861d35">is_range</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="485" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="838" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::empty</definition>
        <argsstring>() const override</argsstring>
        <name>empty</name>
        <qualifiedname>nest::NodeCollectionPrimitive::empty</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1a6ceaf7ec37849ef7652b1268b5c84ef8">empty</reimplements>
        <briefdescription>
<para>Checks if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> has no elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> is empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="486" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="844" bodyend="847"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137" compoundref="node__collection_8cpp" startline="474" endline="488">print_me</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a71f385028830bab3750667189d5bc2a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>long</type>
        <definition>long nest::NodeCollectionPrimitive::find</definition>
        <argsstring>(const index) const override</argsstring>
        <name>find</name>
        <qualifiedname>nest::NodeCollectionPrimitive::find</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1ae829046948e5618f4d39ace2873be0be">find</reimplements>
        <param>
          <type>const</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns index of node with given node ID in <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Index of node with given node ID; -1 if node not in <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="488" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="850" bodyend="860"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a0e6e9c17aea9b0d4c46f3dda5f4b1624" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::has_proxies</definition>
        <argsstring>() const override</argsstring>
        <name>has_proxies</name>
        <qualifiedname>nest::NodeCollectionPrimitive::has_proxies</qualifiedname>
        <reimplements refid="classnest_1_1NodeCollection_1addfa5a2ab61eef2d38e4783ff6c8d285">has_proxies</reimplements>
        <briefdescription>
<para>Returns whether the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> contains any nodes with proxies or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if any nodes in the <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> has proxies, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="490" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="863" bodyend="866"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a8f7a7ded6dd927afa98e98e52907bd45" compoundref="node__collection_8h" startline="392">nodes_have_no_proxies_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1a32dec7ea9f704308fea0264324876d54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::is_contiguous_ascending</definition>
        <argsstring>(NodeCollectionPrimitive &amp;other) const</argsstring>
        <name>is_contiguous_ascending</name>
        <qualifiedname>nest::NodeCollectionPrimitive::is_contiguous_ascending</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks if node IDs in another primitive is a continuation of node IDs in this primitive. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive to check for continuity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the first element in the other primitive is the next after the last element in this primitive, and they both have the same model ID. Otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="501" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="509" bodyend="512"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" compoundref="node__collection_8h" startline="390">model_id_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::NodeCollectionPrimitive::overlapping</definition>
        <argsstring>(const NodeCollectionPrimitive &amp;rhs) const</argsstring>
        <name>overlapping</name>
        <qualifiedname>nest::NodeCollectionPrimitive::overlapping</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Checks if node IDs of another primitive is overlapping node IDs of this primitive. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the other primitive overlaps, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="509" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp" bodystart="515" bodyend="518"/>
        <references refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" compoundref="node__collection_8h" startline="388">first_</references>
        <references refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" compoundref="node__collection_8h" startline="389">last_</references>
        <referencedby refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" compoundref="node__collection_8cpp" startline="340" endline="404">operator+</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Subclass for the primitive <ref refid="classnest_1_1NodeCollection" kindref="compound">NodeCollection</ref> type. </para>
    </briefdescription>
    <detaileddescription>
<para>The primitive type contains only homogeneous and contiguous node IDs. It also contains model ID and metadata of the node IDs. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::NodeCollection</label>
        <link refid="classnest_1_1NodeCollection"/>
      </node>
      <node id="1">
        <label>nest::NodeCollectionPrimitive</label>
        <link refid="classnest_1_1NodeCollectionPrimitive"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::NodeCollection</label>
        <link refid="classnest_1_1NodeCollection"/>
      </node>
      <node id="1">
        <label>nest::NodeCollectionPrimitive</label>
        <link refid="classnest_1_1NodeCollectionPrimitive"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" line="383" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.h" bodystart="384" bodyend="510"/>
    <listofallmembers>
      <member refid="classnest_1_1NodeCollectionPrimitive_1aee4a028d40203ccb529b003faae007e7" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>assert_consistent_model_ids_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a11fa015ae3a1e31c795fa80f284cbba7" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>begin</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>const_iterator</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a9e9d723aba38a88e5ea2669772733789" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>contains</name></member>
      <member refid="classnest_1_1NodeCollection_1a932abae77aca0346af2c5a3981d4e16e" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1ac4160a17e0e0fdc38db8c477cf59bbfe" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1a400fc4f9da79150c3d902d1d045d95d6" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1af981dda792f7a447b5b49e6a8ad90d2c" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>create</name></member>
      <member refid="classnest_1_1NodeCollection_1a003b11f18919e0bd64cde5fc746ad371" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>create_</name></member>
      <member refid="classnest_1_1NodeCollection_1a2db8eb2c7ad39de9852f1bf563328a76" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>create_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>empty</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>end</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a71f385028830bab3750667189d5bc2a9" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>find</name></member>
      <member refid="classnest_1_1NodeCollection_1ab5d5b3687f26500ad6106d4d4eeba15a" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>fingerprint_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>first_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>get_metadata</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a0e6e9c17aea9b0d4c46f3dda5f4b1624" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a32dec7ea9f704308fea0264324876d54" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>is_contiguous_ascending</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1afc4e775b6f06c8d66fd1e7c8670c1151" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>is_range</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>last_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a8a5b705a9f23b67e1b0c07cd1ec27e4b" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>local_begin</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>metadata_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>model_id_</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a16365e3d62fc5b8dcdcad5889016e18f" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>MPI_local_begin</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1af51984c097badaedaf49424fd9bf9653" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>nc_const_iterator</name></member>
      <member refid="classnest_1_1NodeCollection_1ae29b034a0d1cda526d76b352dc5be027" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>NodeCollection</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1ac6726624cb02a512406af3449f006afe" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>NodeCollectionPrimitive</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a46d5ece2e23837beef3c9c262a934083" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>NodeCollectionPrimitive</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a5c0aa51c68cd9bb66a46dd12d800d46b" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>NodeCollectionPrimitive</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a66a671a4ee60ebc6b8738ea339b1f33f" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>NodeCollectionPrimitive</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>NodeCollectionPrimitive</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a8f7a7ded6dd927afa98e98e52907bd45" prot="private" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>nodes_have_no_proxies_</name></member>
      <member refid="classnest_1_1NodeCollection_1ab20b171713e27f9b7429e09db6f0e7a5" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>operator!=</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>operator+</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a4f44db3ce395b11eedc6a7ffe4012f7b" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>operator=</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a81086a4d0dc128fb316cd6b231464113" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>operator==</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1aed61e3aa6a1996e396913517ba94b384" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>operator==</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1aa9ecaec828c3ece4643d4308fcf2fcfd" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>operator[]</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>overlapping</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>print_me</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>print_primitive</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a4a18e217a101a22cc6c8b431f7eae2f7" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>set_metadata</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>size</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>slice</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a1744efa14d2e783728a7ffcfaf2c7ec5" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>step</name></member>
      <member refid="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>to_array</name></member>
      <member refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" prot="public" virt="non-virtual"><scope>nest::NodeCollectionPrimitive</scope><name>valid</name></member>
      <member refid="classnest_1_1NodeCollection_1ad2fd7c36b215859c8d6fb1717f5bebd9" prot="public" virt="virtual"><scope>nest::NodeCollectionPrimitive</scope><name>~NodeCollection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
