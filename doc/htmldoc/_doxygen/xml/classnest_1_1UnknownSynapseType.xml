<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1UnknownSynapseType" kind="class" language="C++" prot="public">
    <compoundname>nest::UnknownSynapseType</compoundname>
    <basecompoundref refid="classnest_1_1KernelException" prot="public" virt="non-virtual">nest::KernelException</basecompoundref>
    <includes refid="exceptions_8h" local="no">exceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1UnknownSynapseType_1a9d95610b2ce61de7185f9c60a48fb463" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int nest::UnknownSynapseType::synapseid_</definition>
        <argsstring></argsstring>
        <name>synapseid_</name>
        <qualifiedname>nest::UnknownSynapseType::synapseid_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="185" column="7" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1UnknownSynapseType_1a4a0c17929c7c9294ffb2d067af8c9236" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string nest::UnknownSynapseType::synapsename_</definition>
        <argsstring></argsstring>
        <name>synapsename_</name>
        <qualifiedname>nest::UnknownSynapseType::synapsename_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="186" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1UnknownSynapseType_1a6200d46d554c26c69657b67d9df61e30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UnknownSynapseType::UnknownSynapseType</definition>
        <argsstring>(int id)</argsstring>
        <name>UnknownSynapseType</name>
        <qualifiedname>nest::UnknownSynapseType::UnknownSynapseType</qualifiedname>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="189" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1UnknownSynapseType_1aae06de4312b2fafd49404f0e332a3724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UnknownSynapseType::UnknownSynapseType</definition>
        <argsstring>(std::string name)</argsstring>
        <name>UnknownSynapseType</name>
        <qualifiedname>nest::UnknownSynapseType::UnknownSynapseType</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="196" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="196" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1UnknownSynapseType_1ab84d3a525eeaee22103a0e2b38752180" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UnknownSynapseType::~UnknownSynapseType</definition>
        <argsstring>() override</argsstring>
        <name>~UnknownSynapseType</name>
        <qualifiedname>nest::UnknownSynapseType::~UnknownSynapseType</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="203" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1UnknownSynapseType_1ab7de426cfefd0f3d7d93fef4c6542bcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string nest::UnknownSynapseType::message</definition>
        <argsstring>() const override</argsstring>
        <name>message</name>
        <qualifiedname>nest::UnknownSynapseType::message</qualifiedname>
        <reimplements refid="classnest_1_1KernelException_1a485c64ff3ea756a5eb6118799e0f1c74">message</reimplements>
        <briefdescription>
<para>Returns a diagnostic message or empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="207" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.cpp" bodystart="76" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception to be thrown if the specified Synapse type does not exist. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::KernelException</label>
        <link refid="classnest_1_1KernelException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::UnknownSynapseType</label>
        <link refid="classnest_1_1UnknownSynapseType"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::KernelException</label>
        <link refid="classnest_1_1KernelException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::UnknownSynapseType</label>
        <link refid="classnest_1_1UnknownSynapseType"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" line="183" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/exceptions.h" bodystart="184" bodyend="208"/>
    <listofallmembers>
      <member refid="classnest_1_1KernelException_1aeb4d5e1c6351372f03f535806264fb6d" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KernelException_1a587cc59f8f1fac92da4370934c03ab15" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>KernelException</name></member>
      <member refid="classnest_1_1KernelException_1a1a10edf2a54c9d48aeab137024cd3144" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>KernelException</name></member>
      <member refid="classnest_1_1UnknownSynapseType_1ab7de426cfefd0f3d7d93fef4c6542bcb" prot="public" virt="virtual"><scope>nest::UnknownSynapseType</scope><name>message</name></member>
      <member refid="classSLIException_1ace48f5938754e82931bab7f54471dd3f" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a5da1b6d493d134687d9ce01e9799b59d" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>SLIException</name></member>
      <member refid="classnest_1_1UnknownSynapseType_1a9d95610b2ce61de7185f9c60a48fb463" prot="private" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>synapseid_</name></member>
      <member refid="classnest_1_1UnknownSynapseType_1a4a0c17929c7c9294ffb2d067af8c9236" prot="private" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>synapsename_</name></member>
      <member refid="classnest_1_1UnknownSynapseType_1a6200d46d554c26c69657b67d9df61e30" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>UnknownSynapseType</name></member>
      <member refid="classnest_1_1UnknownSynapseType_1aae06de4312b2fafd49404f0e332a3724" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>UnknownSynapseType</name></member>
      <member refid="classSLIException_1a4ac56d362c7d86819a47c76571c9c031" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>what</name></member>
      <member refid="classSLIException_1af0e8f12a5e346db4c028d23a2974f016" prot="private" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>what_</name></member>
      <member refid="classnest_1_1KernelException_1aeaa4cd0b8db52d17bb0907ea6db41a44" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>~KernelException</name></member>
      <member refid="classSLIException_1a671677b69bcc3895df94a069067c0578" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>~SLIException</name></member>
      <member refid="classnest_1_1UnknownSynapseType_1ab84d3a525eeaee22103a0e2b38752180" prot="public" virt="non-virtual"><scope>nest::UnknownSynapseType</scope><name>~UnknownSynapseType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
