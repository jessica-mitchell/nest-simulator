<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_generic_factory" kind="class" language="C++" prot="public">
    <compoundname>nest::GenericFactory</compoundname>
    <includes refid="generic__factory_8h" local="no">generic_factory.h</includes>
    <templateparamlist>
      <param>
        <type>class BaseT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1_generic_factory_1ae3d9fca2dded3f7663a85fbbe544c174" prot="public" static="no">
        <type>BaseT *(*</type>
        <definition>typedef BaseT*( * nest::GenericFactory&lt; BaseT &gt;::CreatorFunction) (const DictionaryDatum &amp;d)</definition>
        <argsstring>)(const DictionaryDatum &amp;d)</argsstring>
        <name>CreatorFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="51" column="11" bodyfile="nestkernel/generic_factory.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnest_1_1_generic_factory_1a0f9285defb2a2003cb885f9f3078d3f8" prot="public" static="no">
        <type>std::map&lt; Name, <ref refid="classnest_1_1_generic_factory_1ae3d9fca2dded3f7663a85fbbe544c174" kindref="member">CreatorFunction</ref> &gt;</type>
        <definition>typedef std::map&lt; Name, CreatorFunction &gt; nest::GenericFactory&lt; BaseT &gt;::AssocMap</definition>
        <argsstring></argsstring>
        <name>AssocMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="52" column="20" bodyfile="nestkernel/generic_factory.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_generic_factory_1a6cb46b3763ed8cc100133f4b3ae87620" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_generic_factory_1a0f9285defb2a2003cb885f9f3078d3f8" kindref="member">AssocMap</ref></type>
        <definition>AssocMap nest::GenericFactory&lt; BaseT &gt;::associations_</definition>
        <argsstring></argsstring>
        <name>associations_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="86" column="12" bodyfile="nestkernel/generic_factory.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_generic_factory_1af2b2368daa22f7f0058acd927a41c100" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BaseT *</type>
        <definition>BaseT * nest::GenericFactory&lt; BaseT &gt;::create</definition>
        <argsstring>(const Name &amp;name, const DictionaryDatum &amp;d) const</argsstring>
        <name>create</name>
        <param>
          <type>const Name &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Factory function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Subtype. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary containing parameters for this subtype. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dynamically allocated new object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="60" column="9" bodyfile="nestkernel/generic_factory.h" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_generic_factory_1aaefefe3a81e5f86c7496b2a91021477c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nest::GenericFactory&lt; BaseT &gt;::register_subtype</definition>
        <argsstring>(const Name &amp;name)</argsstring>
        <name>register_subtype</name>
        <param>
          <type>const Name &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new subtype. The type name must not already exist. The class for the subtype is supplied via the template argument. This class should have a constructor taking a const DictionaryDatum&amp; as parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>subtype name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if subtype was successfully registered. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="71" column="8" bodyfile="nestkernel/generic_factory.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_generic_factory_1a81bcaa75b31dc7324e306b8116db4702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::GenericFactory&lt; BaseT &gt;::register_subtype</definition>
        <argsstring>(const Name &amp;name, CreatorFunction creator)</argsstring>
        <name>register_subtype</name>
        <param>
          <type>const Name &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_generic_factory_1ae3d9fca2dded3f7663a85fbbe544c174" kindref="member">CreatorFunction</ref></type>
          <declname>creator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new subtype. The type name must not already exist. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Subtype name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>creator</parametername>
</parameternamelist>
<parameterdescription>
<para>A factory function creating objects of this subtype from a const DictionaryDatum&amp; containing parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if mask was successfully registered. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="80" column="8" bodyfile="nestkernel/generic_factory.h" bodystart="111" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnest_1_1_generic_factory_1ab9a004df2ff7aae9ca990df7e844c31e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>BaseT *</type>
        <definition>BaseT * nest::GenericFactory&lt; BaseT &gt;::new_from_dict_</definition>
        <argsstring>(const DictionaryDatum &amp;d)</argsstring>
        <name>new_from_dict_</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/generic_factory.h" line="84" column="16" bodyfile="nestkernel/generic_factory.h" bodystart="119" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Generic Factory class for objects deriving from a base class BaseT. Keeps a register of subtypes which may be created dynamically. New subtypes may be added by registering either a class (which must have a constructor taking as a parameter a dictionary containing parameters for the mask) or a specialized factory function. <simplesect kind="see"><para>Alexandrescu, A (2001). Modern C++ Design, Addison-Wesley, ch. 8. </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::GenericFactory&lt; BaseT &gt;</label>
        <link refid="classnest_1_1_generic_factory"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/generic_factory.h" line="48" column="1" bodyfile="nestkernel/generic_factory.h" bodystart="49" bodyend="87"/>
    <listofallmembers>
      <member refid="classnest_1_1_generic_factory_1a6cb46b3763ed8cc100133f4b3ae87620" prot="private" virt="non-virtual"><scope>nest::GenericFactory</scope><name>associations_</name></member>
      <member refid="classnest_1_1_generic_factory_1a0f9285defb2a2003cb885f9f3078d3f8" prot="public" virt="non-virtual"><scope>nest::GenericFactory</scope><name>AssocMap</name></member>
      <member refid="classnest_1_1_generic_factory_1af2b2368daa22f7f0058acd927a41c100" prot="public" virt="non-virtual"><scope>nest::GenericFactory</scope><name>create</name></member>
      <member refid="classnest_1_1_generic_factory_1ae3d9fca2dded3f7663a85fbbe544c174" prot="public" virt="non-virtual"><scope>nest::GenericFactory</scope><name>CreatorFunction</name></member>
      <member refid="classnest_1_1_generic_factory_1ab9a004df2ff7aae9ca990df7e844c31e" prot="private" virt="non-virtual"><scope>nest::GenericFactory</scope><name>new_from_dict_</name></member>
      <member refid="classnest_1_1_generic_factory_1aaefefe3a81e5f86c7496b2a91021477c" prot="public" virt="non-virtual"><scope>nest::GenericFactory</scope><name>register_subtype</name></member>
      <member refid="classnest_1_1_generic_factory_1a81bcaa75b31dc7324e306b8116db4702" prot="public" virt="non-virtual"><scope>nest::GenericFactory</scope><name>register_subtype</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
