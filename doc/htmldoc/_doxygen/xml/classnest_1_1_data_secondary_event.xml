<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_data_secondary_event" kind="class" language="C++" prot="public">
    <compoundname>nest::DataSecondaryEvent</compoundname>
    <basecompoundref refid="classnest_1_1_secondary_event" prot="public" virt="non-virtual">nest::SecondaryEvent</basecompoundref>
    <includes refid="secondary__event_8h" local="no">secondary_event.h</includes>
    <innerclass refid="unionnest_1_1_data_secondary_event_1_1_coeffarray_begin" prot="private">nest::DataSecondaryEvent::CoeffarrayBegin</innerclass>
    <innerclass refid="unionnest_1_1_data_secondary_event_1_1_coeffarray_end" prot="private">nest::DataSecondaryEvent::CoeffarrayEnd</innerclass>
    <templateparamlist>
      <param>
        <type>typename DataType</type>
      </param>
      <param>
        <type>typename Subclass</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classnest_1_1_data_secondary_event_1a4e2d5ae044ccd845363dfe472b6281d4" prot="private" static="yes" mutable="no">
        <type>std::set&lt; <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref> &gt;</type>
        <definition>std::set&lt; synindex &gt; nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::supported_syn_ids_</definition>
        <argsstring></argsstring>
        <name>supported_syn_ids_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="165" column="19" bodyfile="nestkernel/secondary_event.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_data_secondary_event_1a6f086e99bc6d6b06d92293ce47683360" prot="private" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::coeff_length_</definition>
        <argsstring></argsstring>
        <name>coeff_length_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="166" column="17" bodyfile="nestkernel/secondary_event.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_data_secondary_event_1a9956c15de5bf85613756ff1cbe14d2ab" prot="private" static="no" mutable="no">
        <type>union nest::DataSecondaryEvent::CoeffarrayBegin</type>
        <definition>union nest::DataSecondaryEvent::CoeffarrayBegin nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::coeffarray_begin_</definition>
        <argsstring></argsstring>
        <name>coeffarray_begin_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="175" column="21"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_data_secondary_event_1a8f01b8fa53d5436b4c4af1e7a1e0e5e8" prot="private" static="no" mutable="no">
        <type>union nest::DataSecondaryEvent::CoeffarrayEnd</type>
        <definition>union nest::DataSecondaryEvent::CoeffarrayEnd nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::coeffarray_end_</definition>
        <argsstring></argsstring>
        <name>coeffarray_end_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="184" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::add_syn_id</definition>
        <argsstring>(const synindex synid) override</argsstring>
        <name>add_syn_id</name>
        <reimplements refid="classnest_1_1_secondary_event_1a94981d28268bf2a0c63e9f37b74f05fe">add_syn_id</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>synid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function adds the ids of connection models that use this event type. This is called when the model is registered with the kernel and when the corresponded connector model is copied.</para>
<para>This function needs to be a virtual function of the base class <ref refid="classnest_1_1_data_secondary_event" kindref="compound">DataSecondaryEvent</ref> as it is usually called from a pointer or reference of type <ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref>.</para>
<para>See also: </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="199" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::set&lt; <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref> &gt; &amp;</type>
        <definition>const std::set&lt; synindex &gt;&amp; nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::get_supported_syn_ids</definition>
        <argsstring>() const override</argsstring>
        <name>get_supported_syn_ids</name>
        <reimplements refid="classnest_1_1_secondary_event_1a30246f896d5a978f0aeaa857afa3ecd7">get_supported_syn_ids</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="206" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::reset_supported_syn_ids</definition>
        <argsstring>() override</argsstring>
        <name>reset_supported_syn_ids</name>
        <reimplements refid="classnest_1_1_secondary_event_1a73b8f4bbb93704afdaafc5dd25af6025">reset_supported_syn_ids</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets the vector of supported syn ids to those originally registered via ModelsModule or user defined Modules, i.e., removes all syn ids created by CopyModel. This is important to maintain consistency across ResetKernel, which removes all copied models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="219" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a74fb39a1de88a532ab1afa32403cf22b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::set_coeffarray</definition>
        <argsstring>(std::vector&lt; DataType &gt; &amp;ca)</argsstring>
        <name>set_coeffarray</name>
        <param>
          <type>std::vector&lt; DataType &gt; &amp;</type>
          <declname>ca</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="232" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
        <definition>std::vector&lt; unsigned int &gt;::iterator&amp; nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::operator&lt;&lt;</definition>
        <argsstring>(std::vector&lt; unsigned int &gt;::iterator &amp;pos) override</argsstring>
        <name>operator&lt;&lt;</name>
        <reimplements refid="classnest_1_1_secondary_event_1a3e8f284d97cb8537bdeb4698709583fb">operator&lt;&lt;</reimplements>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following operator is used to read the information of the <ref refid="classnest_1_1_data_secondary_event" kindref="compound">DataSecondaryEvent</ref> from the buffer in EventDeliveryManager::deliver_events </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="243" column="15" bodyfile="nestkernel/secondary_event.h" bodystart="244" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
        <definition>std::vector&lt; unsigned int &gt;::iterator&amp; nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::operator&gt;&gt;</definition>
        <argsstring>(std::vector&lt; unsigned int &gt;::iterator &amp;pos) override</argsstring>
        <name>operator&gt;&gt;</name>
        <reimplements refid="classnest_1_1_secondary_event_1af02313204f43c0b5e4a63e41ee72cb16">operator&gt;&gt;</reimplements>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following operator is used to write the information of the <ref refid="classnest_1_1_data_secondary_event" kindref="compound">DataSecondaryEvent</ref> into the secondary_events_buffer_. All DataSecondaryEvents are identified by the synid of the first element in supported_syn_ids_. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="266" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="266" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>size_t nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::size</definition>
        <argsstring>() override</argsstring>
        <name>size</name>
        <reimplements refid="classnest_1_1_secondary_event_1a3f6c1179457aca98bbc84b2fe4ba21e3">size</reimplements>
        <briefdescription>
<para>size of event in units of unsigned int </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="278" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="278" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1af6a54b0d949686c59430037619a3fd0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; unsigned int &gt;::iterator &amp;</type>
        <definition>const std::vector&lt; unsigned int &gt;::iterator&amp; nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="288" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a9a6eb7c7fa472cae253f224a4a8e642b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; unsigned int &gt;::iterator &amp;</type>
        <definition>const std::vector&lt; unsigned int &gt;::iterator&amp; nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="294" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1abb2817c593793852b8063b090dc469d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::get_coeffvalue</definition>
        <argsstring>(std::vector&lt; unsigned int &gt;::iterator &amp;pos)</argsstring>
        <name>get_coeffvalue</name>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="299" column="12" bodyfile="nestkernel/secondary_event.h" bodystart="388" bodyend="393"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnest_1_1_data_secondary_event_1a3640d11d4d2359909f612263eda76492" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nest::DataSecondaryEvent&lt; DataType, Subclass &gt;::set_coeff_length</definition>
        <argsstring>(const size_t coeff_length)</argsstring>
        <name>set_coeff_length</name>
        <param>
          <type>const size_t</type>
          <declname>coeff_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="225" column="3" bodyfile="nestkernel/secondary_event.h" bodystart="225" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Template class for the storage and communication of a std::vector of type DataType. The class provides the functionality to communicate homogeneous data of type DataType. The second template type Subclass (which should be chosen as the derived class itself) is used to distinguish derived classes with the same DataType. This is required because of the included static variables in the base class (as otherwise all derived classes with the same DataType would share the same static variables).</para>
<para>Technically the <ref refid="classnest_1_1_data_secondary_event" kindref="compound">DataSecondaryEvent</ref> only contains iterators pointing to the memory location of the std::vector&lt; DataType &gt;.</para>
<para>Conceptually, there is a one-to-one mapping between a <ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> and a <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> using it. The synindex of this particular <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> is stored as first element in the static set <computeroutput>supported_syn_ids_</computeroutput> on model registration. There are however reasons (e.g. the usage of CopyModel() or the creation of the labeled synapse model duplicates for pyNN) which make it necessary to register several ConnectorModels with one <ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref>. Therefore the synindices of all these models are added to <computeroutput>supported_syn_ids_</computeroutput>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>nest::InstantaneousRateConnectionEvent</label>
        <link refid="classnest_1_1_instantaneous_rate_connection_event"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::SecondaryEvent</label>
        <link refid="classnest_1_1_secondary_event"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>nest::DelayedRateConnectionEvent</label>
        <link refid="classnest_1_1_delayed_rate_connection_event"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::DiffusionConnectionEvent</label>
        <link refid="classnest_1_1_diffusion_connection_event"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::DataSecondaryEvent&lt; double, DelayedRateConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, DelayedRateConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>nest::DataSecondaryEvent&lt; double, InstantaneousRateConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, InstantaneousRateConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
      </node>
      <node id="10">
        <label>nest::DataSecondaryEvent&lt; double, GapJunctionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, GapJunctionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>nest::GapJunctionEvent</label>
        <link refid="classnest_1_1_gap_junction_event"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::DataSecondaryEvent&lt; double, DiffusionConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, DiffusionConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::DataSecondaryEvent&lt; DataType, Subclass &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1_deprecation_warning"/>
      </node>
      <node id="2">
        <label>nest::SecondaryEvent</label>
        <link refid="classnest_1_1_secondary_event"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::Time::LimitPosInf</label>
      </node>
      <node id="10">
        <label>nest::SpikeData</label>
        <link refid="classnest_1_1_spike_data"/>
      </node>
      <node id="7">
        <label>nest::Time::LimitNegInf</label>
      </node>
      <node id="6">
        <label>nest::Time</label>
        <link refid="classnest_1_1_time"/>
        <childnode refid="7" relation="usage">
          <edgelabel>#LIM_NEG_INF</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>#LIM_MAX</edgelabel>
          <edgelabel>#LIM_MIN</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
        <childnode refid="4" relation="usage">
          <edgelabel>#receiver_</edgelabel>
          <edgelabel>#sender_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#stamp_</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>#sender_spike_data_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1_time_1_1_limit"/>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1_node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::DataSecondaryEvent&lt; DataType, Subclass &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/secondary_event.h" line="162" column="1" bodyfile="nestkernel/secondary_event.h" bodystart="163" bodyend="300"/>
    <listofallmembers>
      <member refid="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>add_syn_id</name></member>
      <member refid="classnest_1_1_data_secondary_event_1af6a54b0d949686c59430037619a3fd0f" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>begin</name></member>
      <member refid="classnest_1_1_secondary_event_1abc08cdd9aa7ef8ce98f86ac745fd7231" prot="public" virt="pure-virtual"><scope>nest::DataSecondaryEvent</scope><name>clone</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a6f086e99bc6d6b06d92293ce47683360" prot="private" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>coeff_length_</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a9956c15de5bf85613756ff1cbe14d2ab" prot="private" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>coeffarray_begin_</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a8f01b8fa53d5436b4c4af1e7a1e0e5e8" prot="private" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>coeffarray_end_</name></member>
      <member refid="classnest_1_1_event_1a206e330b6cbc6e93887fc21908d4df43" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>d_</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a9a6eb7c7fa472cae253f224a4a8e642b" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>end</name></member>
      <member refid="classnest_1_1_event_1a5fd02c2d20b0caf43899f563d419e0bd" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>Event</name></member>
      <member refid="classnest_1_1_data_secondary_event_1abb2817c593793852b8063b090dc469d6" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_coeffvalue</name></member>
      <member refid="classnest_1_1_event_1a7f3dc0d0bb05d4f98ad2bf13cc67b940" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_delay_steps</name></member>
      <member refid="classnest_1_1_event_1ad2fcc703a758e0dba77c00385cb5041c" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_offset</name></member>
      <member refid="classnest_1_1_event_1a583d84f37d575fbc7f2ab711fb494b66" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_port</name></member>
      <member refid="classnest_1_1_event_1a8c1d83bbbebd23bb85b7ba3dd743d38c" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_receiver</name></member>
      <member refid="classnest_1_1_event_1aaa1bfdd94c07c6a94547086f8139a960" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_receiver_node_id</name></member>
      <member refid="classnest_1_1_event_1a4802a116b9b4e4f3ffcd71a7cfb1729e" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_rel_delivery_steps</name></member>
      <member refid="classnest_1_1_event_1a54709441635d23d80acd9d18eb869856" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_rport</name></member>
      <member refid="classnest_1_1_event_1aca5d7f11547cb61848956360d656ccfc" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_sender</name></member>
      <member refid="classnest_1_1_event_1a32291607d1143c5c7ade223a12ddd54e" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a02f02f11531fefd932a1ac9c0c0891d0" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_stamp</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>get_supported_syn_ids</name></member>
      <member refid="classnest_1_1_event_1abf2d6610c35bd35cf67910f5c39b7cc4" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>get_weight</name></member>
      <member refid="classnest_1_1_event_1aa1d8adc602682b70876729e830956dce" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>is_valid</name></member>
      <member refid="classnest_1_1_event_1afd698f1dc0985f25ac821060e060c64b" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>offset_</name></member>
      <member refid="classnest_1_1_event_1a5d94fae6ba8645be63749c08289adcbe" prot="public" virt="pure-virtual"><scope>nest::DataSecondaryEvent</scope><name>operator()</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnest_1_1_event_1a8515d7a39d4f3c8ba47bde7bcfdf80a7" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>p_</name></member>
      <member refid="classnest_1_1_event_1aba7585287096e9d1189007fa60244eef" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>receiver_</name></member>
      <member refid="classnest_1_1_event_1acf9f5b244e87b4d2d83b0a67463b76f6" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>receiver_is_valid</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>reset_supported_syn_ids</name></member>
      <member refid="classnest_1_1_event_1aaf68e08591d41518b70181862a6b4877" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>retrieve_sender_node_id_from_source_table</name></member>
      <member refid="classnest_1_1_event_1aaff33b6ca47aa351962509ba81ac7ed7" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>rp_</name></member>
      <member refid="classnest_1_1_event_1ac23f2f4beb8407a1cb01560a316268fd" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>sender_</name></member>
      <member refid="classnest_1_1_event_1a43ca356032fe29a848b9d72f7a43eafd" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>sender_is_valid</name></member>
      <member refid="classnest_1_1_event_1a7221735e8c788ee4a730f7ba6595483b" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>sender_node_id_</name></member>
      <member refid="classnest_1_1_event_1af6213aa38ebec48b1fc8be9e00a62d1c" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>sender_spike_data_</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a3640d11d4d2359909f612263eda76492" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_coeff_length</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a74fb39a1de88a532ab1afa32403cf22b" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_coeffarray</name></member>
      <member refid="classnest_1_1_event_1ae662ecac352f57893c104563dd53c7fe" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_delay_steps</name></member>
      <member refid="classnest_1_1_event_1a488b68c43fe5d4d29d87d2578487264d" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>set_diffusion_factor</name></member>
      <member refid="classnest_1_1_event_1a956496d418cf58ca78925a22dfe2e21d" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>set_drift_factor</name></member>
      <member refid="classnest_1_1_event_1a950cfc88c56d3098f1445dcc2b6f4805" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_offset</name></member>
      <member refid="classnest_1_1_event_1a934d28b25e817dd9ed45fbbab3436288" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_port</name></member>
      <member refid="classnest_1_1_event_1a16234c886ae93c42bf120bf77abece30" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_receiver</name></member>
      <member refid="classnest_1_1_event_1aeac7ec4158ac45bf8e503ee04888d367" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_rport</name></member>
      <member refid="classnest_1_1_event_1a63cf602cb38d901021bbe9096f161850" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_sender</name></member>
      <member refid="classnest_1_1_event_1a7ba2a5690a5345624a8ed57c7633cc03" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a5bb763582d2d6a09987d1d91a0646b05" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_sender_node_id_info</name></member>
      <member refid="classnest_1_1_event_1a47c5bdb5473b5b8971b2a077aec754e0" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_stamp</name></member>
      <member refid="classnest_1_1_event_1ab5269d296a67598c7d6cbb9117756de0" prot="public" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>set_weight</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>size</name></member>
      <member refid="classnest_1_1_event_1a8ccecfeabf8f8a5bc3166dd3408f8295" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>stamp_</name></member>
      <member refid="classnest_1_1_event_1af35dca186785c4b12995f35d2b51a3de" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>stamp_steps_</name></member>
      <member refid="classnest_1_1_data_secondary_event_1a4e2d5ae044ccd845363dfe472b6281d4" prot="private" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>supported_syn_ids_</name></member>
      <member refid="classnest_1_1_event_1a2e85d3a413ae97d1dbf9cf6dbd791259" prot="protected" virt="non-virtual"><scope>nest::DataSecondaryEvent</scope><name>w_</name></member>
      <member refid="classnest_1_1_event_1af3f85780e2fab06dd2d934bf965dd142" prot="public" virt="virtual"><scope>nest::DataSecondaryEvent</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
