<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_model_manager" kind="class" language="C++" prot="public">
    <compoundname>nest::ModelManager</compoundname>
    <basecompoundref refid="classnest_1_1_manager_interface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="model__manager_8h" local="no">model_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_model_manager_1ad2d24c7fcdaca79e88599ac2ca853b65" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_model" kindref="compound">Model</ref> * &gt;</type>
        <definition>std::vector&lt; Model* &gt; nest::ModelManager::builtin_node_models_</definition>
        <argsstring></argsstring>
        <name>builtin_node_models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of clean built-in node models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="225" column="15" bodyfile="nestkernel/model_manager.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1aa1c6fa63d5865f15c37a50adcccf8360" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_model" kindref="compound">Model</ref> * &gt;</type>
        <definition>std::vector&lt; Model* &gt; nest::ModelManager::node_models_</definition>
        <argsstring></argsstring>
        <name>node_models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of usable node models. This list is cleared and repopulated upon application startup and calls to ResetKernel. It contains copies of the built-in models, models registered from extension modules, and models created by calls to CopyModel(). The elements of this list also keep the user-modified defaults. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="234" column="15" bodyfile="nestkernel/model_manager.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1a59cf58cc2e5682cd927996154b95ddf2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt;</type>
        <definition>std::vector&lt; ConnectorModel* &gt; nest::ModelManager::builtin_connection_models_</definition>
        <argsstring></argsstring>
        <name>builtin_connection_models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of built-in clean connection models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="239" column="15" bodyfile="nestkernel/model_manager.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1a27d925f00d58fca37cf9dcfd6a81a3a0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; ConnectorModel* &gt; &gt; nest::ModelManager::connection_models_</definition>
        <argsstring></argsstring>
        <name>connection_models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The list of usable connection models. The first dimension keeps one entry per thread, the second dimension has the actual models. This list is cleared and repopulated upon application startup and calls to ResetKernel. The inner list contains copies of the built-in models, models registered from extension modules, and models created by calls to CopyModel(). The elements of the list also keep the user-modified defaults. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="250" column="15" bodyfile="nestkernel/model_manager.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1a0f4652a7c93f5e8b9c36c05d54aa1be1" prot="private" static="no" mutable="no">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::ModelManager::modeldict_</definition>
        <argsstring></argsstring>
        <name>modeldict_</name>
        <briefdescription>
<para>Dictionary of all node models. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="252" column="19" bodyfile="nestkernel/model_manager.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1ab29f274daea3d4378c4cedd84d178021" prot="private" static="no" mutable="no">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::ModelManager::synapsedict_</definition>
        <argsstring></argsstring>
        <name>synapsedict_</name>
        <briefdescription>
<para>Dictionary of all synapse models. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="253" column="19" bodyfile="nestkernel/model_manager.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1a4c30bd45e80b5e01e705b1a87734a35d" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> *</type>
        <definition>Model* nest::ModelManager::proxynode_model_</definition>
        <argsstring></argsstring>
        <name>proxynode_model_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="255" column="9" bodyfile="nestkernel/model_manager.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1aa255aec6ce5e727f30ad863c0a6854cf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_node" kindref="compound">Node</ref> * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Node* &gt; &gt; nest::ModelManager::proxy_nodes_</definition>
        <argsstring></argsstring>
        <name>proxy_nodes_</name>
        <briefdescription>
<para>Placeholders for remote nodes, one per thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="260" column="15" bodyfile="nestkernel/model_manager.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_model_manager_1aaa45100f24b234abcfd9d0406b4b7d43" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ModelManager::model_defaults_modified_</definition>
        <argsstring></argsstring>
        <name>model_defaults_modified_</name>
        <briefdescription>
<para>True if any model defaults have been modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="262" column="8" bodyfile="nestkernel/model_manager.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_model_manager_1acdc9190132c0c7a0c2ef387d84f136f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::ModelManager::ModelManager</definition>
        <argsstring>()</argsstring>
        <name>ModelManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="49" column="3" bodyfile="nestkernel/model_manager.cpp" bodystart="45" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a41c350e0207435ffc6891c93fe76d80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::ModelManager::~ModelManager</definition>
        <argsstring>() override</argsstring>
        <name>~ModelManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="50" column="3" bodyfile="nestkernel/model_manager.cpp" bodystart="58" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1ae14b26efd9515b1596ecfeaf25b04e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare manager for operation.</para>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1_kernel_manager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_manager_1a02895f199ad38d7bd3ac24f4ea799f44" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="52" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="80" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a02895f199ad38d7bd3ac24f4ea799f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take down manager after operation.</para>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1_kernel_manager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1_model_manager_1ae14b26efd9515b1596ecfeaf25b04e64" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_manager_1ae14b26efd9515b1596ecfeaf25b04e64" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="53" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="139" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1af5afbb0c126b604d32806bcec62ab559" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelManager::change_number_of_threads</definition>
        <argsstring>() override</argsstring>
        <name>change_number_of_threads</name>
        <reimplements refid="classnest_1_1_manager_interface_1aa88c28844a59b4791eab4b7930fc62b0">change_number_of_threads</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the number of threads</para>
<para>Many data structures within the different managers depend on the number of threads. This function is called on each manager upon a change of that number and allows the manager to re-allocate data structures accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="54" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a6d009316ac3aebeb02cf9813584ff101" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="55" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a49632b3af5b4a82098707a82c6107a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ModelManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>dict</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="56" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="165" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1af51df51b09ebbf233be7af6bd39137b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::calibrate</definition>
        <argsstring>(const TimeConverter &amp;)</argsstring>
        <name>calibrate</name>
        <param>
          <type>const <ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref> &amp;</type>
          <defname>tc</defname>
        </param>
        <briefdescription>
<para>Functor to compare Models by their name. </para>
        </briefdescription>
        <detaileddescription>
<para>Resize the structures for the <ref refid="classnest_1_1_connector" kindref="compound">Connector</ref> objects if necessary. This function should be called after number of threads, min_delay, max_delay, and time representation have been changed in the scheduler. The <ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref> is used to convert times from the old to the new representation. It is also forwarding the calibration request to all <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="66" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1acc955f7172e28dd05d2d0496ecdf2423" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::ModelManager::get_proxy_node</definition>
        <argsstring>(thread tid, index node_id)</argsstring>
        <name>get_proxy_node</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a proxynode configured for thread tid and the given node_id. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="73" column="8" bodyfile="nestkernel/model_manager_impl.h" bodystart="80" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a328a98e2391f07ffdcd31a986982f826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> &amp;</type>
        <definition>ConnectorModel &amp; nest::ModelManager::get_connection_model</definition>
        <argsstring>(synindex syn_id, thread t=0)</argsstring>
        <name>get_connection_model</name>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to protoype for given synapse id. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_unknown_synapse_type" kindref="compound">UnknownSynapseType</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="83" column="18" bodyfile="nestkernel/model_manager.h" bodystart="280" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1aea052fc6150494e8e66ebdbe1127b876" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; ConnectorModel * &gt; &amp; nest::ModelManager::get_connection_models</definition>
        <argsstring>(thread tid)</argsstring>
        <name>get_connection_models</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="85" column="21" bodyfile="nestkernel/model_manager.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1aed100533c2c7f259d03d9d10e10308cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ModelT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::register_node_model</definition>
        <argsstring>(const Name &amp;name, std::string deprecation_info=std::string())</argsstring>
        <name>register_node_model</name>
        <param>
          <type>const Name &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>deprecation_info</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a node-model prototype. This function must be called exactly once for each model class to make it known in the simulator. The natural place for a call to this function is in a *module.cpp file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the new node model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deprecation_info</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-empty string, deprecation warning will be issued for model with this info to user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID of the new model object. </para>
</simplesect>
<simplesect kind="see"><para>register_prototype_connection </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="99" column="9" bodyfile="nestkernel/model_manager_impl.h" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1ad5640bc6c249b00cf94e816b7d954318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::copy_model</definition>
        <argsstring>(Name old_name, Name new_name, DictionaryDatum params)</argsstring>
        <name>copy_model</name>
        <param>
          <type>Name</type>
          <declname>old_name</declname>
        </param>
        <param>
          <type>Name</type>
          <declname>new_name</declname>
        </param>
        <param>
          <type>DictionaryDatum</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an existing model and register it as a new model. This function allows users to create their own, cloned models. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of existing model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of new model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>default parameters of new model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>model ID of new <ref refid="classnest_1_1_model" kindref="compound">Model</ref> object. </para>
</simplesect>
<simplesect kind="see"><para>copy_node_model_, copy_connection_model_ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="110" column="9" bodyfile="nestkernel/model_manager.cpp" bodystart="186" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a1408ac5b290bdea20840104e19415a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ModelManager::set_model_defaults</definition>
        <argsstring>(Name name, DictionaryDatum params)</argsstring>
        <name>set_model_defaults</name>
        <param>
          <type>Name</type>
          <declname>name</declname>
        </param>
        <param>
          <type>DictionaryDatum</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default parameters of a model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>default parameters to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operation succeeded, else false </para>
</simplesect>
<simplesect kind="see"><para>set_node_defaults_, set_synapse_defaults_ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="119" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="291" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a865e88345ba93ab2e578d4a315aaf2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename targetidentifierT &gt; class</type>
            <declname>ConnectionT</declname>
            <defname>ConnectionT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::ModelManager::register_connection_model</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>register_connection_model</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a synape model with a custom <ref refid="classnest_1_1_connector" kindref="compound">Connector</ref> model and without any common properties.</para>
<para>&quot;hpc synapses&quot; use <computeroutput><ref refid="classnest_1_1_target_identifier_index" kindref="compound">TargetIdentifierIndex</ref></computeroutput> for <computeroutput>ConnectionT</computeroutput> and store the target neuron in form of a 2 Byte index instead of an 8 Byte pointer. This limits the number of thread local neurons to 65,536. No support for different receptor types. Otherwise identical to non-hpc version.</para>
<para>When called, this function should be specialised by a class template, e.g. <computeroutput>bernoulli_synapse&lt; targetidentifierT &gt;</computeroutput></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name under which the <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> will be registered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="136" column="8" bodyfile="nestkernel/model_manager_impl.h" bodystart="58" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a0206d78c642e0dc97def42aff26034b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::get_node_model_id</definition>
        <argsstring>(const Name) const</argsstring>
        <name>get_node_model_id</name>
        <param>
          <type>const</type>
          <declname>Name</declname>
          <defname>name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The model ID for a <ref refid="classnest_1_1_model" kindref="compound">Model</ref> with a given name </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_unknown_model_name" kindref="compound">UnknownModelName</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the model is not available </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="142" column="9" bodyfile="nestkernel/model_manager.cpp" bodystart="366" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a8058f85d46bd4af4c2f726be59aa269b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> *</type>
        <definition>Model * nest::ModelManager::get_node_model</definition>
        <argsstring>(index) const</argsstring>
        <name>get_node_model</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classnest_1_1_model" kindref="compound">Model</ref> registered with the given model ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="147" column="9" bodyfile="nestkernel/model_manager.h" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a5da676347a1deaa1a434d3d6a95532d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::get_synapse_model_id</definition>
        <argsstring>(std::string model_name)</argsstring>
        <name>get_synapse_model_id</name>
        <param>
          <type>std::string</type>
          <declname>model_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The numeric ID of a given synapse model </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_unknown_synapse_type" kindref="compound">UnknownSynapseType</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the model is not available </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="153" column="9" bodyfile="nestkernel/model_manager.cpp" bodystart="383" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a4ee6b18a6bad6d272e07d838a2af7f1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::ModelManager::get_connector_defaults</definition>
        <argsstring>(synindex syn_id) const</argsstring>
        <name>get_connector_defaults</name>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="155" column="19" bodyfile="nestkernel/model_manager.cpp" bodystart="394" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1abaf1dfc7e9fc787b46f99ffb79c19994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::set_connector_defaults</definition>
        <argsstring>(synindex syn_id, const DictionaryDatum &amp;d)</argsstring>
        <name>set_connector_defaults</name>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="157" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1ac0f410c34344596285d9d3e886a80148" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::assert_valid_syn_id</definition>
        <argsstring>(synindex syn_id, thread t=0) const</argsstring>
        <name>assert_valid_syn_id</name>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asserts validity of synapse index, otherwise throws exception. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1_unknown_synapse_type" kindref="compound">UnknownSynapseType</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="163" column="8" bodyfile="nestkernel/model_manager.h" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a60290fe12f0334e0fdc1ae9d2be79d1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ModelManager::are_model_defaults_modified</definition>
        <argsstring>() const</argsstring>
        <name>are_model_defaults_modified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="165" column="8" bodyfile="nestkernel/model_manager.h" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a6b4dd572130a87b4819be5b8abd45bd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::ModelManager::get_num_connection_models</definition>
        <argsstring>() const</argsstring>
        <name>get_num_connection_models</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="167" column="10" bodyfile="nestkernel/model_manager.h" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a3ddc2ab6cebf94540774acea4730e004" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::memory_info</definition>
        <argsstring>() const</argsstring>
        <name>memory_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print out the memory information for each node model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="172" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="488" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a4de0bb9d981c92958e0d52b1ff3e7dea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> &amp;</type>
        <definition>SecondaryEvent &amp; nest::ModelManager::get_secondary_event_prototype</definition>
        <argsstring>(const synindex syn_id, const thread tid)</argsstring>
        <name>get_secondary_event_prototype</name>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="174" column="18" bodyfile="nestkernel/model_manager.h" bodystart="309" bodyend="313"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_model_manager_1a37da25c5b419f0f74d17166f9acf7b71" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::clear_node_models_</definition>
        <argsstring>()</argsstring>
        <name>clear_node_models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="177" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="413" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a095a416070ca495514b51d4c3bd1af29" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::clear_connection_models_</definition>
        <argsstring>()</argsstring>
        <name>clear_connection_models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="179" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="438" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1aa9dd5b9db696ebef3355e4e31e184735" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::register_node_model_</definition>
        <argsstring>(Model *model)</argsstring>
        <name>register_node_model_</name>
        <param>
          <type><ref refid="classnest_1_1_model" kindref="compound">Model</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="181" column="9" bodyfile="nestkernel/model_manager.cpp" bodystart="218" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1aa8a2fe6be154cbb0768bf71942387520" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
        <definition>synindex nest::ModelManager::register_connection_model_</definition>
        <argsstring>(ConnectorModel *)</argsstring>
        <name>register_connection_model_</name>
        <param>
          <type><ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> *</type>
          <defname>cf</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="183" column="12" bodyfile="nestkernel/model_manager.cpp" bodystart="524" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a14ec157c17bfe589d51f82c206aba049" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::copy_node_model_</definition>
        <argsstring>(index old_id, Name new_name)</argsstring>
        <name>copy_node_model_</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>old_id</declname>
        </param>
        <param>
          <type>Name</type>
          <declname>new_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an existing node model and register it as a new model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of existing model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of new model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>model ID of new <ref refid="classnest_1_1_model" kindref="compound">Model</ref> object. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_manager_1ad5640bc6c249b00cf94e816b7d954318" kindref="member">copy_model()</ref>, copy_connection_model_() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="192" column="9" bodyfile="nestkernel/model_manager.cpp" bodystart="243" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1afdca64fbdcc8897ed6e25a8e534b482e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ModelManager::copy_connection_model_</definition>
        <argsstring>(index old_id, Name new_name)</argsstring>
        <name>copy_connection_model_</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>old_id</declname>
        </param>
        <param>
          <type>Name</type>
          <declname>new_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an existing synapse model and register it as a new model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of existing model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of new model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>model ID of new <ref refid="classnest_1_1_model" kindref="compound">Model</ref> object. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_manager_1ad5640bc6c249b00cf94e816b7d954318" kindref="member">copy_model()</ref>, copy_node_model_() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="201" column="9" bodyfile="nestkernel/model_manager.cpp" bodystart="265" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1ac6142dc3a2f6100aa1510e65dfb7b8e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::set_node_defaults_</definition>
        <argsstring>(index model_id, const DictionaryDatum &amp;params)</argsstring>
        <name>set_node_defaults_</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>model_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default parameters of a model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_id</parametername>
</parameternamelist>
<parameterdescription>
<para>of model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>default parameters to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_manager_1a1408ac5b290bdea20840104e19415a99" kindref="member">set_model_defaults</ref>, set_synapse_defaults_ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="209" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="317" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a9508db769f2e7c2b62743f5774872111" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ModelManager::set_synapse_defaults_</definition>
        <argsstring>(index model_id, const DictionaryDatum &amp;params)</argsstring>
        <name>set_synapse_defaults_</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>model_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the default parameters of a model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>default parameters to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnest_1_1_model_manager_1a1408ac5b290bdea20840104e19415a99" kindref="member">set_model_defaults</ref>, set_node_defaults_ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="217" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="328" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_model_manager_1a0ad4bd5a087c2c6143ef01213e2b1aba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node * nest::ModelManager::create_proxynode_</definition>
        <argsstring>(thread t, int model_id)</argsstring>
        <name>create_proxynode_</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>model_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="257" column="8" bodyfile="nestkernel/model_manager.cpp" bodystart="552" bodyend="557"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnest_1_1_model_manager_1aa27ab465e73a0186b77d64d81ab306e5" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ModelManager::compare_model_by_id_</definition>
        <argsstring>(const int a, const int b)</argsstring>
        <name>compare_model_by_id_</name>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compares model ids for sorting in memory_info. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/model_manager.h" line="220" column="15" bodyfile="nestkernel/model_manager.cpp" bodystart="481" bodyend="485"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
      <node id="1">
        <label>nest::ModelManager</label>
        <link refid="classnest_1_1_model_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
      <node id="1">
        <label>nest::ModelManager</label>
        <link refid="classnest_1_1_model_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/model_manager.h" line="46" column="1" bodyfile="nestkernel/model_manager.h" bodystart="47" bodyend="263"/>
    <listofallmembers>
      <member refid="classnest_1_1_model_manager_1a60290fe12f0334e0fdc1ae9d2be79d1b" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>are_model_defaults_modified</name></member>
      <member refid="classnest_1_1_model_manager_1ac0f410c34344596285d9d3e886a80148" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>assert_valid_syn_id</name></member>
      <member refid="classnest_1_1_model_manager_1a59cf58cc2e5682cd927996154b95ddf2" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>builtin_connection_models_</name></member>
      <member refid="classnest_1_1_model_manager_1ad2d24c7fcdaca79e88599ac2ca853b65" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>builtin_node_models_</name></member>
      <member refid="classnest_1_1_model_manager_1af51df51b09ebbf233be7af6bd39137b1" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>calibrate</name></member>
      <member refid="classnest_1_1_model_manager_1af5afbb0c126b604d32806bcec62ab559" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1_manager_interface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1_model_manager_1a095a416070ca495514b51d4c3bd1af29" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>clear_connection_models_</name></member>
      <member refid="classnest_1_1_model_manager_1a37da25c5b419f0f74d17166f9acf7b71" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>clear_node_models_</name></member>
      <member refid="classnest_1_1_model_manager_1aa27ab465e73a0186b77d64d81ab306e5" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>compare_model_by_id_</name></member>
      <member refid="classnest_1_1_model_manager_1a27d925f00d58fca37cf9dcfd6a81a3a0" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>connection_models_</name></member>
      <member refid="classnest_1_1_model_manager_1afdca64fbdcc8897ed6e25a8e534b482e" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>copy_connection_model_</name></member>
      <member refid="classnest_1_1_model_manager_1ad5640bc6c249b00cf94e816b7d954318" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>copy_model</name></member>
      <member refid="classnest_1_1_model_manager_1a14ec157c17bfe589d51f82c206aba049" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>copy_node_model_</name></member>
      <member refid="classnest_1_1_model_manager_1a0ad4bd5a087c2c6143ef01213e2b1aba" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>create_proxynode_</name></member>
      <member refid="classnest_1_1_model_manager_1a02895f199ad38d7bd3ac24f4ea799f44" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1_model_manager_1a328a98e2391f07ffdcd31a986982f826" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_connection_model</name></member>
      <member refid="classnest_1_1_model_manager_1aea052fc6150494e8e66ebdbe1127b876" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_connection_models</name></member>
      <member refid="classnest_1_1_model_manager_1a4ee6b18a6bad6d272e07d838a2af7f1a" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_connector_defaults</name></member>
      <member refid="classnest_1_1_model_manager_1a8058f85d46bd4af4c2f726be59aa269b" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_node_model</name></member>
      <member refid="classnest_1_1_model_manager_1a0206d78c642e0dc97def42aff26034b6" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_node_model_id</name></member>
      <member refid="classnest_1_1_model_manager_1a6b4dd572130a87b4819be5b8abd45bd9" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_num_connection_models</name></member>
      <member refid="classnest_1_1_model_manager_1acc955f7172e28dd05d2d0496ecdf2423" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_proxy_node</name></member>
      <member refid="classnest_1_1_model_manager_1a4de0bb9d981c92958e0d52b1ff3e7dea" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_secondary_event_prototype</name></member>
      <member refid="classnest_1_1_model_manager_1a49632b3af5b4a82098707a82c6107a49" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1_model_manager_1a5da676347a1deaa1a434d3d6a95532d0" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>get_synapse_model_id</name></member>
      <member refid="classnest_1_1_model_manager_1ae14b26efd9515b1596ecfeaf25b04e64" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1_manager_interface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_manager_interface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_model_manager_1a3ddc2ab6cebf94540774acea4730e004" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>memory_info</name></member>
      <member refid="classnest_1_1_model_manager_1aaa45100f24b234abcfd9d0406b4b7d43" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>model_defaults_modified_</name></member>
      <member refid="classnest_1_1_model_manager_1a0f4652a7c93f5e8b9c36c05d54aa1be1" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>modeldict_</name></member>
      <member refid="classnest_1_1_model_manager_1acdc9190132c0c7a0c2ef387d84f136f6" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>ModelManager</name></member>
      <member refid="classnest_1_1_model_manager_1aa1c6fa63d5865f15c37a50adcccf8360" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>node_models_</name></member>
      <member refid="classnest_1_1_manager_interface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1_manager_interface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1_model_manager_1aa255aec6ce5e727f30ad863c0a6854cf" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>proxy_nodes_</name></member>
      <member refid="classnest_1_1_model_manager_1a4c30bd45e80b5e01e705b1a87734a35d" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>proxynode_model_</name></member>
      <member refid="classnest_1_1_model_manager_1a865e88345ba93ab2e578d4a315aaf2ad" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>register_connection_model</name></member>
      <member refid="classnest_1_1_model_manager_1aa8a2fe6be154cbb0768bf71942387520" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>register_connection_model_</name></member>
      <member refid="classnest_1_1_model_manager_1aed100533c2c7f259d03d9d10e10308cb" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>register_node_model</name></member>
      <member refid="classnest_1_1_model_manager_1aa9dd5b9db696ebef3355e4e31e184735" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>register_node_model_</name></member>
      <member refid="classnest_1_1_model_manager_1abaf1dfc7e9fc787b46f99ffb79c19994" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>set_connector_defaults</name></member>
      <member refid="classnest_1_1_model_manager_1a1408ac5b290bdea20840104e19415a99" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>set_model_defaults</name></member>
      <member refid="classnest_1_1_model_manager_1ac6142dc3a2f6100aa1510e65dfb7b8e9" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>set_node_defaults_</name></member>
      <member refid="classnest_1_1_model_manager_1a6d009316ac3aebeb02cf9813584ff101" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1_model_manager_1a9508db769f2e7c2b62743f5774872111" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>set_synapse_defaults_</name></member>
      <member refid="classnest_1_1_model_manager_1ab29f274daea3d4378c4cedd84d178021" prot="private" virt="non-virtual"><scope>nest::ModelManager</scope><name>synapsedict_</name></member>
      <member refid="classnest_1_1_manager_interface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::ModelManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1_model_manager_1a41c350e0207435ffc6891c93fe76d80e" prot="public" virt="non-virtual"><scope>nest::ModelManager</scope><name>~ModelManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
