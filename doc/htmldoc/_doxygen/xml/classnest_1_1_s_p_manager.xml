<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_s_p_manager" kind="class" language="C++" prot="public">
    <compoundname>nest::SPManager</compoundname>
    <basecompoundref refid="classnest_1_1_manager_interface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="sp__manager_8h" local="no">sp_manager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_s_p_manager_1ad45f80808966464c9a1079f8800f7712" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::SPManager::structural_plasticity_update_interval_</definition>
        <argsstring></argsstring>
        <name>structural_plasticity_update_interval_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1_time" kindref="compound">Time</ref> interval for structural plasticity update (creation/deletion of synapses). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="183" column="10" bodyfile="nestkernel/sp_manager.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_s_p_manager_1a14a4c875e5792d81a5c81ac78f97219c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::SPManager::structural_plasticity_enabled_</definition>
        <argsstring></argsstring>
        <name>structural_plasticity_enabled_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether the Structrual Plasticity functionality is On (True) of Off (False). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="189" column="8" bodyfile="nestkernel/sp_manager.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_s_p_manager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_s_p_builder" kindref="compound">SPBuilder</ref> * &gt;</type>
        <definition>std::vector&lt; SPBuilder* &gt; nest::SPManager::sp_conn_builders_</definition>
        <argsstring></argsstring>
        <name>sp_conn_builders_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="190" column="15" bodyfile="nestkernel/sp_manager.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_s_p_manager_1a998c3bc309bf7c354df9b6876c6e77c0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_generic_growth_curve_factory" kindref="compound">GenericGrowthCurveFactory</ref> * &gt;</type>
        <definition>std::vector&lt; GenericGrowthCurveFactory* &gt; nest::SPManager::growthcurve_factories_</definition>
        <argsstring></argsstring>
        <name>growthcurve_factories_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1_growth_curve" kindref="compound">GrowthCurve</ref> factories, indexed by growthcurvedict_ elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="195" column="15" bodyfile="nestkernel/sp_manager.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_s_p_manager_1a9abde5b9b0883a14cf58709312b91828" prot="private" static="no" mutable="no">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::SPManager::growthcurvedict_</definition>
        <argsstring></argsstring>
        <name>growthcurvedict_</name>
        <briefdescription>
<para>Dictionary for growth rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="197" column="19" bodyfile="nestkernel/sp_manager.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a4e8743b8323dca07db67e08615f147ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::SPManager::SPManager</definition>
        <argsstring>()</argsstring>
        <name>SPManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="66" column="3" bodyfile="nestkernel/sp_manager.cpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a32a98d81f2d61298e8d43427900dc038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::SPManager::~SPManager</definition>
        <argsstring>() override</argsstring>
        <name>~SPManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="67" column="3" bodyfile="nestkernel/sp_manager.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a81bd08bb0734b0910c216220fce57e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare manager for operation.</para>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1_kernel_manager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_s_p_manager_1a929ad597fdb40a6b0080991eb4b36aa3" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="69" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a929ad597fdb40a6b0080991eb4b36aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take down manager after operation.</para>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1_kernel_manager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1_s_p_manager_1a81bd08bb0734b0910c216220fce57e5c" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_s_p_manager_1a81bd08bb0734b0910c216220fce57e5c" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="70" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="81" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1ad53307b4caba0acaa2b074ed31ca146c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="72" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="94" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a826cbcc83e2da5a24acf3345917e7921" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::SPManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set status of synaptic plasticity variables: synaptic update interval, synapses and synaptic elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary containing the values to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="73" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="128" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a1470e14e9487d38617e217a3c5cbd117" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_growth_curve" kindref="compound">GrowthCurve</ref> *</type>
        <definition>GrowthCurve * nest::SPManager::new_growth_curve</definition>
        <argsstring>(Name name)</argsstring>
        <name>new_growth_curve</name>
        <param>
          <type>Name</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new Growth Curve object using the <ref refid="classnest_1_1_growth_curve" kindref="compound">GrowthCurve</ref> Factory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>which defines the type of NC to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new Growth Curve object of the type indicated by name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="80" column="15" bodyfile="nestkernel/sp_manager.h" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a34c0919b05dcf42548d2f3cc9f36a058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classnest_1_1_growth_curve" kindref="compound">GrowthCurve</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::SPManager::register_growth_curve</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>register_growth_curve</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a growth curve for MSP </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="86" column="8" bodyfile="nestkernel/sp_manager_impl.h" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1af9961e9c3f1968bb1ff558a540d53923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::disconnect</definition>
        <argsstring>(NodeCollectionPTR, NodeCollectionPTR, DictionaryDatum &amp;, DictionaryDatum &amp;)</argsstring>
        <name>disconnect</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>sources</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>targets</defname>
        </param>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>conn_spec</defname>
        </param>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>syn_spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnect two collections of nodes. The connection is established on the thread/process that owns the target node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node" kindref="compound">Node</ref> collection of the source Nodes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node" kindref="compound">Node</ref> collection of the target Nodes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connectivityParams</parametername>
</parameternamelist>
<parameterdescription>
<para>connectivity Dictionary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapseParams</parametername>
</parameternamelist>
<parameterdescription>
<para>synapse parameters Dictionary</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Obtains the right connection builder and performs a synapse deletion according to the specified connection specs. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>collection of sources </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para>collection of targets </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>disconnection specs. For now only all to all and one to one rules are implemented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>synapse specs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="97" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="264" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1ae5b9af1301a59e2ccde8633c203e34a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::disconnect</definition>
        <argsstring>(const index snode_id, Node *target, thread target_thread, const index syn_id)</argsstring>
        <name>disconnect</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>snode_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>target_thread</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disconnect two nodes. The source node is defined by its global ID. The target node is defined by the node. The connection is established on the thread/process that owns the target node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to target <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread that hosts the target node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Deletes synapses between a source and a target. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="110" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="215" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a6f0cc34c3cc807bf1d6b9399b318d35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::update_structural_plasticity</definition>
        <argsstring>()</argsstring>
        <name>update_structural_plasticity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="112" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="325" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a6c5563d7088a144d3b630e4ed8faee3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::update_structural_plasticity</definition>
        <argsstring>(SPBuilder *)</argsstring>
        <name>update_structural_plasticity</name>
        <param>
          <type><ref refid="classnest_1_1_s_p_builder" kindref="compound">SPBuilder</ref> *</type>
          <defname>sp_builder</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles the general dynamic creation and deletion of synapses when structural plasticity is enabled. Retrieves the number of available synaptic elements to create new synapses. Retrieves the number of deleted synaptic elements to delete already created synapses. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp_builder</parametername>
</parameternamelist>
<parameterdescription>
<para>The structural plasticity connection builder to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="113" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="341" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a9b388e2d3ab09e4bdebce02aa9ea3a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::enable_structural_plasticity</definition>
        <argsstring>()</argsstring>
        <name>enable_structural_plasticity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable structural plasticity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="118" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="741" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1aee20052338bd8a2f47f33c59e3e2ed37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::disable_structural_plasticity</definition>
        <argsstring>()</argsstring>
        <name>disable_structural_plasticity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable structural plasticity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="123" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="766" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a64d3dd5d243cd1dfd0784b10816c5e28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::SPManager::is_structural_plasticity_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_structural_plasticity_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="125" column="8" bodyfile="nestkernel/sp_manager.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a18b5d9686702015ccbe4feb482a7abf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::SPManager::get_structural_plasticity_update_interval</definition>
        <argsstring>() const</argsstring>
        <name>get_structural_plasticity_update_interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="127" column="10" bodyfile="nestkernel/sp_manager.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a5412e3381cceb64ff0b1dedf869cd288" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::SPManager::builder_min_delay</definition>
        <argsstring>() const</argsstring>
        <name>builder_min_delay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum delay of all SP builders. This influences the min_delay of the kernel, as the connections are build during the simulation. Hence, the <ref refid="namespacenest_1_1names_1a4dafd0ba22d5e86faacb875050b6f544" kindref="member">ConnectionManager::min_delay()</ref> methods have to respect this delay as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="136" column="9" bodyfile="nestkernel/sp_manager.cpp" bodystart="180" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a921fce1870107ce8d1a4fd4395051fe2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::SPManager::builder_max_delay</definition>
        <argsstring>() const</argsstring>
        <name>builder_max_delay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum delay of all SP builders. This influences the max_delay of the kernel, as the connections are build during the simulation. Hence, the <ref refid="namespacenest_1_1names_1a377a20cde03833197dafab3a17f2d174" kindref="member">ConnectionManager::max_delay()</ref> methods have to respect this delay as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="145" column="9" bodyfile="nestkernel/sp_manager.cpp" bodystart="194" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a9d99744a7e3f8990558b5636dec66c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::SPManager::create_synapses</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;pre_vacant_id, std::vector&lt; int &gt; &amp;pre_vacant_n, std::vector&lt; index &gt; &amp;post_vacant_id, std::vector&lt; int &gt; &amp;post_vacant_n, SPBuilder *sp_conn_builder)</argsstring>
        <name>create_synapses</name>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>pre_vacant_id</declname>
          <defname>pre_id</defname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pre_vacant_n</declname>
          <defname>pre_n</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>post_vacant_id</declname>
          <defname>post_id</defname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>post_vacant_n</declname>
          <defname>post_n</defname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_s_p_builder" kindref="compound">SPBuilder</ref> *</type>
          <declname>sp_conn_builder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dynamic creation of synapses <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pre_id</parametername>
</parameternamelist>
<parameterdescription>
<para>source id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pre_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available synaptic elements in the pre node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_id</parametername>
</parameternamelist>
<parameterdescription>
<para>target id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of available synaptic elements in the post node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sp_conn_builder</parametername>
</parameternamelist>
<parameterdescription>
<para>structural plasticity connection builder to use</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if synapses are created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="148" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="430" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a135b22e6cd3f6888480ceb0ef2ef9706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::delete_synapses_from_pre</definition>
        <argsstring>(const std::vector&lt; index &gt; &amp;pre_deleted_id, std::vector&lt; int &gt; &amp;pre_deleted_n, const index synapse_model, const std::string &amp;se_pre_name, const std::string &amp;se_post_name)</argsstring>
        <name>delete_synapses_from_pre</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>pre_deleted_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pre_deleted_n</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>synapse_model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>se_pre_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>se_post_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletion of synapses due to the loss of a pre synaptic element. The corresponding pre synaptic element will still remain available for a new connection on the following updates in connectivity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pre_deleted_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node with the deleted pre synaptic element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pre_deleted_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of deleted pre synaptic elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapse_model</parametername>
</parameternamelist>
<parameterdescription>
<para>model name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_pre_name</parametername>
</parameternamelist>
<parameterdescription>
<para>pre synaptic element name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_post_name</parametername>
</parameternamelist>
<parameterdescription>
<para>postsynaptic element name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="154" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="476" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a3f7183684e5410096b01044c13da7f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::delete_synapses_from_post</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;post_deleted_id, std::vector&lt; int &gt; &amp;post_deleted_n, index synapse_model, std::string se_pre_name, std::string se_post_name)</argsstring>
        <name>delete_synapses_from_post</name>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>post_deleted_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>post_deleted_n</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>synapse_model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_pre_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_post_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletion of synapses due to the loss of a postsynaptic element. The corresponding pre synaptic element will still remain available for a new connection on the following updates in connectivity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>post_deleted_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node with the deleted postsynaptic element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_deleted_n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of deleted postsynaptic elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapse_model</parametername>
</parameternamelist>
<parameterdescription>
<para>model name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_pre_name</parametername>
</parameternamelist>
<parameterdescription>
<para>pre synaptic element name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_post_name</parametername>
</parameternamelist>
<parameterdescription>
<para>postsynaptic element name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="160" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="575" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1ae2c3831a343dd28da33c87fed976b2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::delete_synapse</definition>
        <argsstring>(index source, index target, long syn_id, std::string se_pre_name, std::string se_post_name)</argsstring>
        <name>delete_synapse</name>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type>long</type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_pre_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>se_post_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles the deletion of synapses between source and target nodes. The deletion is defined by the pre and postsynaptic elements and the synapse type. Updates the number of connected synaptic elements in the source and target. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>source id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tnode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>target id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>synapse type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_pre_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the pre synaptic element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>se_post_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the postsynaptic element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="166" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="533" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1aab1b488f46bba7cc7978b4313d525437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::get_synaptic_elements</definition>
        <argsstring>(std::string se_name, std::vector&lt; index &gt; &amp;se_vacant_id, std::vector&lt; int &gt; &amp;se_vacant_n, std::vector&lt; index &gt; &amp;se_deleted_id, std::vector&lt; int &gt; &amp;se_deleted_n)</argsstring>
        <name>get_synaptic_elements</name>
        <param>
          <type>std::string</type>
          <declname>se_name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>se_vacant_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>se_vacant_n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>se_deleted_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>se_deleted_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="168" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="624" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1af80c9f1feede698cdde50c11de1d6485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::serialize_id</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;id, std::vector&lt; int &gt; &amp;n, std::vector&lt; index &gt; &amp;res)</argsstring>
        <name>serialize_id</name>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="174" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="686" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a6e004038af740a172c54dc533d31e3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::global_shuffle</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;v)</argsstring>
        <name>global_shuffle</name>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="175" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="705" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_s_p_manager_1a660e2d7f16859a0e1807eef4331c6628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::SPManager::global_shuffle</definition>
        <argsstring>(std::vector&lt; index &gt; &amp;v, size_t n)</argsstring>
        <name>global_shuffle</name>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/sp_manager.h" line="176" column="8" bodyfile="nestkernel/sp_manager.cpp" bodystart="714" bodyend="734"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classnest_1_1_s_p_manager" kindref="compound">SPManager</ref> class is in charge of managing the dynamic creation and deletion of synapses in the simulation when structural plasticity is enabled. Otherwise it behaves as the normal <ref refid="classnest_1_1_connection_manager" kindref="compound">ConnectionManager</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::SPManager</label>
        <link refid="classnest_1_1_s_p_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::SPManager</label>
        <link refid="classnest_1_1_s_p_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/sp_manager.h" line="62" column="1" bodyfile="nestkernel/sp_manager.h" bodystart="63" bodyend="198"/>
    <listofallmembers>
      <member refid="classnest_1_1_s_p_manager_1a921fce1870107ce8d1a4fd4395051fe2" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>builder_max_delay</name></member>
      <member refid="classnest_1_1_s_p_manager_1a5412e3381cceb64ff0b1dedf869cd288" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>builder_min_delay</name></member>
      <member refid="classnest_1_1_manager_interface_1aa88c28844a59b4791eab4b7930fc62b0" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1_manager_interface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1_s_p_manager_1a9d99744a7e3f8990558b5636dec66c47" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>create_synapses</name></member>
      <member refid="classnest_1_1_s_p_manager_1ae2c3831a343dd28da33c87fed976b2a9" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>delete_synapse</name></member>
      <member refid="classnest_1_1_s_p_manager_1a3f7183684e5410096b01044c13da7f80" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>delete_synapses_from_post</name></member>
      <member refid="classnest_1_1_s_p_manager_1a135b22e6cd3f6888480ceb0ef2ef9706" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>delete_synapses_from_pre</name></member>
      <member refid="classnest_1_1_s_p_manager_1aee20052338bd8a2f47f33c59e3e2ed37" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>disable_structural_plasticity</name></member>
      <member refid="classnest_1_1_s_p_manager_1af9961e9c3f1968bb1ff558a540d53923" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>disconnect</name></member>
      <member refid="classnest_1_1_s_p_manager_1ae5b9af1301a59e2ccde8633c203e34a3" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>disconnect</name></member>
      <member refid="classnest_1_1_s_p_manager_1a9b388e2d3ab09e4bdebce02aa9ea3a60" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>enable_structural_plasticity</name></member>
      <member refid="classnest_1_1_s_p_manager_1a929ad597fdb40a6b0080991eb4b36aa3" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1_s_p_manager_1ad53307b4caba0acaa2b074ed31ca146c" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1_s_p_manager_1a18b5d9686702015ccbe4feb482a7abf2" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>get_structural_plasticity_update_interval</name></member>
      <member refid="classnest_1_1_s_p_manager_1aab1b488f46bba7cc7978b4313d525437" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1_s_p_manager_1a6e004038af740a172c54dc533d31e3a1" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>global_shuffle</name></member>
      <member refid="classnest_1_1_s_p_manager_1a660e2d7f16859a0e1807eef4331c6628" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>global_shuffle</name></member>
      <member refid="classnest_1_1_s_p_manager_1a998c3bc309bf7c354df9b6876c6e77c0" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>growthcurve_factories_</name></member>
      <member refid="classnest_1_1_s_p_manager_1a9abde5b9b0883a14cf58709312b91828" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>growthcurvedict_</name></member>
      <member refid="classnest_1_1_s_p_manager_1a81bd08bb0734b0910c216220fce57e5c" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1_s_p_manager_1a64d3dd5d243cd1dfd0784b10816c5e28" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>is_structural_plasticity_enabled</name></member>
      <member refid="classnest_1_1_manager_interface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_manager_interface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_s_p_manager_1a1470e14e9487d38617e217a3c5cbd117" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>new_growth_curve</name></member>
      <member refid="classnest_1_1_manager_interface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1_manager_interface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1_s_p_manager_1a34c0919b05dcf42548d2f3cc9f36a058" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>register_growth_curve</name></member>
      <member refid="classnest_1_1_s_p_manager_1af80c9f1feede698cdde50c11de1d6485" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>serialize_id</name></member>
      <member refid="classnest_1_1_s_p_manager_1a826cbcc83e2da5a24acf3345917e7921" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1_s_p_manager_1a1f1da97e5c9e9ad10846a7bc6ab0698e" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>sp_conn_builders_</name></member>
      <member refid="classnest_1_1_s_p_manager_1a4e8743b8323dca07db67e08615f147ad" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>SPManager</name></member>
      <member refid="classnest_1_1_s_p_manager_1a14a4c875e5792d81a5c81ac78f97219c" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>structural_plasticity_enabled_</name></member>
      <member refid="classnest_1_1_s_p_manager_1ad45f80808966464c9a1079f8800f7712" prot="private" virt="non-virtual"><scope>nest::SPManager</scope><name>structural_plasticity_update_interval_</name></member>
      <member refid="classnest_1_1_s_p_manager_1a6f0cc34c3cc807bf1d6b9399b318d35a" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>update_structural_plasticity</name></member>
      <member refid="classnest_1_1_s_p_manager_1a6c5563d7088a144d3b630e4ed8faee3b" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>update_structural_plasticity</name></member>
      <member refid="classnest_1_1_manager_interface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::SPManager</scope><name>~ManagerInterface</name></member>
      <member refid="classnest_1_1_s_p_manager_1a32a98d81f2d61298e8d43427900dc038" prot="public" virt="non-virtual"><scope>nest::SPManager</scope><name>~SPManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
