<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classWrappedThreadException" kind="class" language="C++" prot="public">
    <compoundname>WrappedThreadException</compoundname>
    <basecompoundref refid="classSLIException" prot="public" virt="non-virtual">SLIException</basecompoundref>
    <includes refid="sliexceptions_8h" local="no">sliexceptions.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classWrappedThreadException_1aa6b96b74ca02177de129fc0159c54d2e" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string WrappedThreadException::message_</definition>
        <argsstring></argsstring>
        <name>message_</name>
        <qualifiedname>WrappedThreadException::message_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="144" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="144" bodyend="-1"/>
        <referencedby refid="classWrappedThreadException_1a746af7e87193947b1d082eab02d4be4c" compoundref="sliexceptions_8h" startline="138" endline="141">message</referencedby>
        <referencedby refid="classWrappedThreadException_1a813d27d1d68a1faef3373c5fdfb1c751" compoundref="sliexceptions_8cc" startline="31" endline="43">WrappedThreadException</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classWrappedThreadException_1a813d27d1d68a1faef3373c5fdfb1c751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WrappedThreadException::WrappedThreadException</definition>
        <argsstring>(const std::exception &amp;)</argsstring>
        <name>WrappedThreadException</name>
        <qualifiedname>WrappedThreadException::WrappedThreadException</qualifiedname>
        <param>
          <type>const std::exception &amp;</type>
          <defname>exc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="133" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.cc" bodystart="31" bodyend="43"/>
        <references refid="classSLIException_1a8f0a43c586456cc0e161d683ff316531">SLIException::message</references>
        <references refid="classWrappedThreadException_1aa6b96b74ca02177de129fc0159c54d2e" compoundref="sliexceptions_8h" startline="144">message_</references>
      </memberdef>
      <memberdef kind="function" id="classWrappedThreadException_1a0aec1549825de9cc2b088b926387f17d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>WrappedThreadException::~WrappedThreadException</definition>
        <argsstring>() override</argsstring>
        <name>~WrappedThreadException</name>
        <qualifiedname>WrappedThreadException::~WrappedThreadException</qualifiedname>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="134" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classWrappedThreadException_1a746af7e87193947b1d082eab02d4be4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string WrappedThreadException::message</definition>
        <argsstring>() const override</argsstring>
        <name>message</name>
        <qualifiedname>WrappedThreadException::message</qualifiedname>
        <reimplements refid="classSLIException_1a8f0a43c586456cc0e161d683ff316531">message</reimplements>
        <briefdescription>
<para>Returns a diagnostic message or empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="138" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="138" bodyend="141"/>
        <references refid="classWrappedThreadException_1aa6b96b74ca02177de129fc0159c54d2e" compoundref="sliexceptions_8h" startline="144">message_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for packaging exceptions thrown in threads. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is used to wrap exceptions thrown in threads. It essentially packages the message of the wrapped exception, avoiding the need of a clone() operation for each exception type. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>WrappedThreadException</label>
        <link refid="classWrappedThreadException"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>SLIException</label>
        <link refid="classSLIException"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>WrappedThreadException</label>
        <link refid="classWrappedThreadException"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" line="130" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliexceptions.h" bodystart="131" bodyend="145"/>
    <listofallmembers>
      <member refid="classWrappedThreadException_1a746af7e87193947b1d082eab02d4be4c" prot="public" virt="virtual"><scope>WrappedThreadException</scope><name>message</name></member>
      <member refid="classWrappedThreadException_1aa6b96b74ca02177de129fc0159c54d2e" prot="private" virt="non-virtual"><scope>WrappedThreadException</scope><name>message_</name></member>
      <member refid="classSLIException_1ace48f5938754e82931bab7f54471dd3f" prot="public" virt="non-virtual"><scope>WrappedThreadException</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a5da1b6d493d134687d9ce01e9799b59d" prot="public" virt="non-virtual"><scope>WrappedThreadException</scope><name>SLIException</name></member>
      <member refid="classSLIException_1a4ac56d362c7d86819a47c76571c9c031" prot="public" virt="non-virtual"><scope>WrappedThreadException</scope><name>what</name></member>
      <member refid="classSLIException_1af0e8f12a5e346db4c028d23a2974f016" prot="private" virt="non-virtual"><scope>WrappedThreadException</scope><name>what_</name></member>
      <member refid="classWrappedThreadException_1a813d27d1d68a1faef3373c5fdfb1c751" prot="public" virt="non-virtual"><scope>WrappedThreadException</scope><name>WrappedThreadException</name></member>
      <member refid="classSLIException_1a671677b69bcc3895df94a069067c0578" prot="public" virt="non-virtual"><scope>WrappedThreadException</scope><name>~SLIException</name></member>
      <member refid="classWrappedThreadException_1a0aec1549825de9cc2b088b926387f17d" prot="public" virt="non-virtual"><scope>WrappedThreadException</scope><name>~WrappedThreadException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
