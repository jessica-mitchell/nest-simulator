<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classSLIArrayModule_1_1MapFunction" kind="class" language="C++" prot="private">
    <compoundname>SLIArrayModule::MapFunction</compoundname>
    <basecompoundref refid="classSLIFunction" prot="public" virt="non-virtual">SLIFunction</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classSLIArrayModule_1_1MapFunction_1abcd9126b3d411d21fabe02dfc723bc50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SLIArrayModule::MapFunction::execute</definition>
        <argsstring>(SLIInterpreter *) const override</argsstring>
        <name>execute</name>
        <qualifiedname>SLIArrayModule::MapFunction::execute</qualifiedname>
        <reimplements refid="classSLIFunction_1abb5b37eaff928b43534627ed6f668e7d">execute</reimplements>
        <param>
          <type><ref refid="classSLIInterpreter" kindref="compound">SLIInterpreter</ref> *</type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>@BeginDocumentation <ref refid="className" kindref="compound">Name</ref>: Map - Apply a procedure to each element of a list or string </para>
        </briefdescription>
        <detaileddescription>
<para>Synopsis: [v1 ... vn] {f} Map -&gt; [ f(v1) ... f(vn) ] [ [... n levels [a1 ... an] ... [b1 ... bn] ...] ] {f} [n] Map -&gt; [ [... [f(a1) ... f(an)] ... [f(b1) ... f(bn)] ...] ]</para>
<para>(c1 ... cn) {f} Map -&gt; (f(c1)...f(vn))</para>
<para>Parameters: [v1 ... vn] - list of n arbitrary objects (c1 ... cn) - string with n characters</para>
<para>{f} - function which can operate on the elements of [array]. This function must return exaclty one value. [n] - nesting level at which {f} is applied</para>
<para>Description: Map works like the corresponding Mathematica function. For each element of the input array, Map calls f and replaces the element with the result of f. Note that f must return exactly one value! The result of Map is a list with the same number of values as the argument list. If f does not return a value, Map fails. If f returns more than one value, the result of Map is undefined.</para>
<para>The specification of the nesting level in Mathematica is more general. Currently NEST only supports [n]</para>
<para>Examples:</para>
<para>[1 2 3 4 5] {2 mul} Map --&gt; [2 4 6 8 10] [ [3. 4.] [7. 8.] ] {cvi} [2] Map --&gt; [[3 4] [7 8]] [3. 4. 7. 8.] {cvi} [1] Map --&gt; [3 4 7 8]</para>
<para>(abc) {1 add} Map --&gt; (bcd)</para>
<para>Author: Marc-Oliver Gewaltig</para>
<para>Remarks: Map is not part of PostScript</para>
<para>References: The Mathematica Book</para>
<para>SeeAlso: MapAt, MapIndexed, Table, forall, forallindexed, NestList </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliarray.h" line="47" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliarray.cc" bodystart="1384" bodyend="1419"/>
        <references refid="classSLIInterpreter_1a96c3eff127bf8a56860f05ff199cb6ff" compoundref="interpret_8cc" startline="311" endline="314">SLIInterpreter::baselookup</references>
        <references refid="classToken_1a309bb2d7f89471b3aa7ca63cfbde65e4" compoundref="token_8h" startline="360" endline="364">Token::datum</references>
        <references refid="classSLIInterpreter_1a3fe2d135bbae0ac57317ff6db9e39055" compoundref="interpret_8h" startline="251">SLIInterpreter::EStack</references>
        <references refid="namespacesli_1a653d13d55a986570e5dcc3a9b041b804">sli::imap</references>
        <references refid="namespacesli_1a3dc8b5e974c7d743aba0dc5f8583f7a4">sli::imap_dv</references>
        <references refid="namespacesli_1aafec88fc2fdd463275672770d715ae63">sli::imap_iv</references>
        <references refid="classSLIInterpreter_1a29a1dfe19e4620ae85beeeff6b4f6b87" compoundref="interpret_8h" startline="355" endline="358">SLIInterpreter::inc_call_depth</references>
        <references refid="classSLIInterpreter_1afe0e3fe443a8fa59dfaf31a4a5f46526" compoundref="interpret_8h" startline="130">SLIInterpreter::mark_name</references>
        <references refid="classSLIInterpreter_1ab50b50d10259d50fd78939273af5e4f5" compoundref="interpret_8h" startline="250">SLIInterpreter::OStack</references>
        <references refid="classTokenStack_1ac861cc2282484dd2a27dd1304aa719a4" compoundref="tokenstack_8h" startline="127" endline="130">TokenStack::pick</references>
        <references refid="classTokenStack_1a759f4b3c1c8955ab6f236de28a7f1cc0" compoundref="tokenstack_8h" startline="96" endline="99">TokenStack::pop</references>
        <references refid="classTokenStack_1a585f38fb0ed122da90489eccbfd7a187" compoundref="tokenstack_8h" startline="62" endline="65">TokenStack::push</references>
        <references refid="classTokenStack_1a75a8af662288b54a64d5185c90401dec" compoundref="tokenstack_8h" startline="90" endline="93">TokenStack::push_by_pointer</references>
        <references refid="classTokenStack_1a9d3b72926bfa2090389f0782cd2b6e76" compoundref="tokenstack_8h" startline="68" endline="71">TokenStack::push_move</references>
        <references refid="classTokenStack_1a25006b53032030f38d6512076ee70abf" compoundref="tokenstack_8h" startline="116" endline="119">TokenStack::top</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>SLIArrayModule::MapFunction</label>
        <link refid="classSLIArrayModule_1_1MapFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SLIArrayModule::MapFunction</label>
        <link refid="classSLIArrayModule_1_1MapFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
        <link refid="classSLIFunction"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/sli/sliarray.h" line="44" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/sli/sliarray.h" bodystart="45" bodyend="48"/>
    <listofallmembers>
      <member refid="classSLIFunction_1a68fd2ac46dd904673f3a8c96009221ba" prot="public" virt="virtual"><scope>SLIArrayModule::MapFunction</scope><name>backtrace</name></member>
      <member refid="classSLIArrayModule_1_1MapFunction_1abcd9126b3d411d21fabe02dfc723bc50" prot="public" virt="virtual"><scope>SLIArrayModule::MapFunction</scope><name>execute</name></member>
      <member refid="classSLIFunction_1a3c4393dfc6f80af057a81d34a1a8bbad" prot="public" virt="non-virtual"><scope>SLIArrayModule::MapFunction</scope><name>SLIFunction</name></member>
      <member refid="classSLIFunction_1a1d35138a5956abbaf4a57d051bcb397b" prot="public" virt="virtual"><scope>SLIArrayModule::MapFunction</scope><name>~SLIFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
