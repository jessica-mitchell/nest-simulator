<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1proxynode" kind="class" language="C++" prot="public">
    <compoundname>nest::proxynode</compoundname>
    <basecompoundref refid="classnest_1_1Node" prot="public" virt="non-virtual">nest::Node</basecompoundref>
    <includes refid="proxynode_8h" local="no">proxynode.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1proxynode_1aa5996e000dbc9af6496e51d89a4303a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::proxynode::proxynode</definition>
        <argsstring>()</argsstring>
        <name>proxynode</name>
        <qualifiedname>nest::proxynode::proxynode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="55" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="55" bodyend="59"/>
        <references refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" compoundref="node_8h" startline="867" endline="870">nest::Node::set_frozen_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a6eb03709d7f4617dda0104b306321596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::proxynode::proxynode</definition>
        <argsstring>(index, index, index)</argsstring>
        <name>proxynode</name>
        <qualifiedname>nest::proxynode::proxynode</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>node_id</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>model_id</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <defname>vp</defname>
        </param>
        <briefdescription>
<para>Construct proxy node for internal use from. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>of represented node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>id of represented node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>of represented node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="67" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="36" bodyend="43"/>
        <references refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" compoundref="node_8h" startline="867" endline="870">nest::Node::set_frozen_</references>
        <references refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" compoundref="node_8h" startline="1003" endline="1006">nest::Node::set_model_id</references>
        <references refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" compoundref="node_8h" startline="984" endline="987">nest::Node::set_node_id_</references>
        <references refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" compoundref="node_8h" startline="1027" endline="1030">nest::Node::set_vp</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a38ee31043d430d96132c5110e784e3a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::proxynode::send_test_event</definition>
        <argsstring>(Node &amp;, rport, synindex, bool) override</argsstring>
        <name>send_test_event</name>
        <qualifiedname>nest::proxynode::send_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3">send_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>receiving_node</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dummy_target</declname>
        </param>
        <briefdescription>
<para>Send an event to the receiving_node passed as an argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of check_connection just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para>This is required during the connection handshaking to test, if the receiving_node can handle the event type and receptor_type sent by the source node.</para>
<para>If dummy_target is true, this indicates that receiving_node is derived from <ref refid="classnest_1_1ConnTestDummyNodeBase" kindref="compound">ConnTestDummyNodeBase</ref> and used in the first call to <ref refid="classnest_1_1proxynode_1a38ee31043d430d96132c5110e784e3a5" kindref="member">send_test_event()</ref>. This can be ignored in most cases, but Nodes sending DS*Events to their own event hooks and then *Events to their proper targets must send DS*Events when called with the dummy target, and *Events when called with the real target, see #478. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="80" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="46" bodyend="50"/>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="997" endline="1000">nest::Node::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1afdfb38f8d6bd5837527a75eb4c6ff76e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::sends_secondary_event</definition>
        <argsstring>(GapJunctionEvent &amp;) override</argsstring>
        <name>sends_secondary_event</name>
        <qualifiedname>nest::proxynode::sends_secondary_event</qualifiedname>
        <reimplements refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de">sends_secondary_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>ge</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="82" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="53" bodyend="56"/>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="997" endline="1000">nest::Node::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1Model_1a6d8c7b66a530f0cdea7e148aed1439f1">nest::Model::sends_secondary_event</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a86ae0ceb13ec36aeaeaea6e0f1257ec0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>nest::SignalType nest::proxynode::sends_signal</definition>
        <argsstring>() const override</argsstring>
        <name>sends_signal</name>
        <qualifiedname>nest::proxynode::sends_signal</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f">sends_signal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node produces used in check_connection to only connect neurons which send / receive compatible information delgates to underlying model </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="84" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="83" bodyend="86"/>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="997" endline="1000">nest::Node::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1Model_1a63cef74468717e015ee9f34ca4b2edab">nest::Model::sends_signal</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1ac211e3fbd950837944a19b0397a49bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::sends_secondary_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;) override</argsstring>
        <name>sends_secondary_event</name>
        <qualifiedname>nest::proxynode::sends_secondary_event</qualifiedname>
        <reimplements refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120">sends_secondary_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="86" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="59" bodyend="62"/>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="997" endline="1000">nest::Node::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1Model_1a6d8c7b66a530f0cdea7e148aed1439f1">nest::Model::sends_secondary_event</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1af4c165393526562c694aeee07fc62c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::sends_secondary_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;) override</argsstring>
        <name>sends_secondary_event</name>
        <qualifiedname>nest::proxynode::sends_secondary_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0">sends_secondary_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>de</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="88" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="65" bodyend="68"/>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="997" endline="1000">nest::Node::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1Model_1a6d8c7b66a530f0cdea7e148aed1439f1">nest::Model::sends_secondary_event</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a2f9d087e4ad8a23bc023d1d17e927806" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::sends_secondary_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;) override</argsstring>
        <name>sends_secondary_event</name>
        <qualifiedname>nest::proxynode::sends_secondary_event</qualifiedname>
        <reimplements refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7">sends_secondary_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>re</declname>
        </param>
        <briefdescription>
<para>Required to check, if source neuron may send a <ref refid="classnest_1_1SecondaryEvent" kindref="compound">SecondaryEvent</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This base class implementation throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> and needs to be overwritten in the derived class.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="90" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="71" bodyend="74"/>
        <references refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" compoundref="node_8h" startline="997" endline="1000">nest::Node::get_model_id</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
        <references refid="classnest_1_1Model_1a6d8c7b66a530f0cdea7e148aed1439f1">nest::Model::sends_secondary_event</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1afee2333ceda2f29df27139c8703456c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::handle</definition>
        <argsstring>(SpikeEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="93" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1adca2ab6d0bee88577982522f07ea6649" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::proxynode::get_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="97" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.cpp" bodystart="89" bodyend="94"/>
        <references refid="namespacenest_1_1names_1ac1e5e69d82969d55a9e7111dfb40c95e" compoundref="nest__names_8h" startline="187">nest::names::element_type</references>
        <references refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" compoundref="model__manager_8h" startline="286" endline="290">nest::ModelManager::get_node_model</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" compoundref="node_8h" startline="900">nest::Node::model_id_</references>
        <references refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" compoundref="kernel__manager_8h" startline="250">nest::KernelManager::model_manager</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1afe676f263f8848ca1a6990cf1949f634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::proxynode::set_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Proxy nodes have no properties. </para>
        </briefdescription>
        <detaileddescription>
<para>If <ref refid="classnest_1_1proxynode_1afe676f263f8848ca1a6990cf1949f634" kindref="member">set_status()</ref> gets called for a proxy node, this is and error; we must prevent this from happening, since the user might otherwise thaw a proxy node. It also causes problems with dictionary entry checking </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="107" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a62ddd878060750beaf7f1c7806076876" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool nest::proxynode::is_proxy</definition>
        <argsstring>() const override</argsstring>
        <name>is_proxy</name>
        <qualifiedname>nest::proxynode::is_proxy</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3">is_proxy</reimplements>
        <briefdescription>
<para>Returns true if the node is a proxy node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is implemented because the use of RTTI is rather expensive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="112" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1ae1544c86355dec3ec14e1a96818e8b94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        <definition>thread nest::proxynode::get_thread</definition>
        <argsstring>() const</argsstring>
        <name>get_thread</name>
        <qualifiedname>nest::proxynode::get_thread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="115" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::proxynode::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to explicitly include sets of overloaded virtual functions into the current scope. According to the SUN C++ FAQ, this is the correct way of doing things, although all other compilers happily live without. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="77" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1ae09c68cd9f93a04713e7566dc7e732a2" kindref="member">SignalType</ref></type>
        <definition>virtual SignalType nest::Node::sends_signal</definition>
        <argsstring>() const</argsstring>
        <name>sends_signal</name>
        <qualifiedname>nest::proxynode::sends_signal</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f">sends_signal</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>type of signal this node produces used in check_connection to only connect neurons which send / receive compatible information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="78" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.h" bodystart="758" bodyend="761"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1proxynode_1ae20ada5a19b34560c124febd373e9b04" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::init_state_</definition>
        <argsstring>() override</argsstring>
        <name>init_state_</name>
        <qualifiedname>nest::proxynode::init_state_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef">init_state_</reimplements>
        <briefdescription>
<para>Configure state variables depending on runtime information. </para>
        </briefdescription>
        <detaileddescription>
<para>Overload this method if the node needs to adapt state variables prior to first simulation to runtime information, e.g., the number of incoming connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="122" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1a6816f94d8e9be4ff2a89ee27b36c178d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::init_buffers_</definition>
        <argsstring>() override</argsstring>
        <name>init_buffers_</name>
        <qualifiedname>nest::proxynode::init_buffers_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453">init_buffers_</reimplements>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="126" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1aff7a8cc3e37e89c6b541cefe4ba1919c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <qualifiedname>nest::proxynode::pre_run_hook</qualifiedname>
        <reimplements refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplements>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="130" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1proxynode_1abe83a049360c372ca96e6776b4d91d1a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::proxynode::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <qualifiedname>nest::proxynode::update</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$. </para>
        </briefdescription>
        <detaileddescription>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="134" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="134" bodyend="136"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>@BeginDocumentation <ref refid="className" kindref="compound">Name</ref>: proxynode - Proxy to provide Nodes on remote machines </para>
    </briefdescription>
    <detaileddescription>
<para>Description:</para>
<para>Remarks:</para>
<para>Parameters:</para>
<para>References:</para>
<para>Author: June 2005, Jochen Martin Eppler Proxy <ref refid="classnest_1_1Node" kindref="compound">Node</ref> to provide Nodes, where there aren&apos;t real Nodes to be </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="1">
        <label>nest::proxynode</label>
        <link refid="classnest_1_1proxynode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="2">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="3" relation="usage">
          <edgelabel>deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>nest::proxynode</label>
        <link refid="classnest_1_1proxynode"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" line="51" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/proxynode.h" bodystart="52" bodyend="137"/>
    <listofallmembers>
      <member refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1Node_1a09632867c7096c814eeceea1be42fc6b" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>clone</name></member>
      <member refid="group__SP__functions_1gaa5b5f01608036752d816d1980c39cb87" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>connect_synaptic_element</name></member>
      <member refid="group__SP__functions_1ga5242b7d1752a7981676852d1b70263b9" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::proxynode</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_C_m</name></member>
      <member refid="group__SP__functions_1gae46decb34ba3dc7f912fa6a691bb0de2" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1Node_1a618d16c4286ef3724da901ce28c46cd6" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_history</name></member>
      <member refid="classnest_1_1Node_1a1043e0cb5ea5bd3e8627e9a777328628" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1Node_1a3c64984a1a3ca6c8fddf52d68dc33ab7" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::proxynode</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1proxynode_1adca2ab6d0bee88577982522f07ea6649" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::proxynode</scope><name>get_status_dict_</name></member>
      <member refid="group__SP__functions_1ga9ba39ec217579e3ef23db9ae20479955" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1gaf35fbeeb8459557ea3a5baf5c6fe7d20" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_synaptic_elements</name></member>
      <member refid="group__SP__functions_1ga7a47b88c558984889d90d5ce027787cf" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="group__SP__functions_1ga058f999dd9dc5a26c98b0a0351c08707" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1proxynode_1ae1544c86355dec3ec14e1a96818e8b94" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>get_vp</name></member>
      <member refid="classnest_1_1proxynode_1afee2333ceda2f29df27139c8703456c1" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1ae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1adef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="classnest_1_1proxynode_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handle</name></member>
      <member refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>init</name></member>
      <member refid="classnest_1_1proxynode_1a6816f94d8e9be4ff2a89ee27b36c178d" prot="private" virt="virtual"><scope>nest::proxynode</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1proxynode_1ae20ada5a19b34560c124febd373e9b04" prot="private" virt="virtual"><scope>nest::proxynode</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>initialized_</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1proxynode_1a62ddd878060750beaf7f1c7806076876" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>model_id_</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a4b28c19bfaa4ac475f5248389ed911e6" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>operator=</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1proxynode_1aff7a8cc3e37e89c6b541cefe4ba1919c" prot="private" virt="virtual"><scope>nest::proxynode</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>print_network</name></member>
      <member refid="classnest_1_1proxynode_1aa5996e000dbc9af6496e51d89a4303a9" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>proxynode</name></member>
      <member refid="classnest_1_1proxynode_1a6eb03709d7f4617dda0104b306321596" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>proxynode</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1Node_1a297b374f3b4513a6de5a5ba6b6d119d9" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>register_stdp_connection</name></member>
      <member refid="classnest_1_1proxynode_1a38ee31043d430d96132c5110e784e3a5" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>send_test_event</name></member>
      <member refid="classnest_1_1proxynode_1afdfb38f8d6bd5837527a75eb4c6ff76e" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1proxynode_1ac211e3fbd950837944a19b0397a49bf7" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1proxynode_1af4c165393526562c694aeee07fc62c31" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1proxynode_1a2f9d087e4ad8a23bc023d1d17e927806" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1proxynode_1a86ae0ceb13ec36aeaeaea6e0f1257ec0" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1proxynode_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::proxynode</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::proxynode</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1proxynode_1afe676f263f8848ca1a6990cf1949f634" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::proxynode</scope><name>set_vp</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1proxynode_1abe83a049360c372ca96e6776b4d91d1a" prot="private" virt="virtual"><scope>nest::proxynode</scope><name>update</name></member>
      <member refid="group__SP__functions_1gaff1fa7703153b16816ad55eef791982c" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>update_synaptic_elements</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::proxynode</scope><name>vp_</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::proxynode</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
