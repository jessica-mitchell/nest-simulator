<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_secondary_event" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::SecondaryEvent</compoundname>
    <basecompoundref refid="classnest_1_1_event" prot="public" virt="non-virtual">nest::Event</basecompoundref>
    <derivedcompoundref refid="classnest_1_1_data_secondary_event" prot="public" virt="non-virtual">nest::DataSecondaryEvent&lt; double, InstantaneousRateConnectionEvent &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_secondary_event" prot="public" virt="non-virtual">nest::DataSecondaryEvent&lt; double, DiffusionConnectionEvent &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_secondary_event" prot="public" virt="non-virtual">nest::DataSecondaryEvent&lt; double, DelayedRateConnectionEvent &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_secondary_event" prot="public" virt="non-virtual">nest::DataSecondaryEvent&lt; double, GapJunctionEvent &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_data_secondary_event" prot="public" virt="non-virtual">nest::DataSecondaryEvent&lt; DataType, Subclass &gt;</derivedcompoundref>
    <includes refid="secondary__event_8h" local="no">secondary_event.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_secondary_event_1abc08cdd9aa7ef8ce98f86ac745fd7231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> *</type>
        <definition>SecondaryEvent* nest::SecondaryEvent::clone</definition>
        <argsstring>() const override=0</argsstring>
        <name>clone</name>
        <reimplements refid="classnest_1_1_event_1a3eeb581400e38c8fd62a105ef812a549">clone</reimplements>
        <reimplementedby refid="classnest_1_1_gap_junction_event_1a3e00564c566bf206aa77e2f80001c2a2">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_instantaneous_rate_connection_event_1a92d3d351ea9f940a727793eedeac47be">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_delayed_rate_connection_event_1ab7820172999828da5580eccd6ffddb4b">clone</reimplementedby>
        <reimplementedby refid="classnest_1_1_diffusion_connection_event_1a2fa10441f1da02e5a977d8b19b4c4eeb">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="51" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_secondary_event_1a94981d28268bf2a0c63e9f37b74f05fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::SecondaryEvent::add_syn_id</definition>
        <argsstring>(const synindex synid)=0</argsstring>
        <name>add_syn_id</name>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0">add_syn_id</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0">add_syn_id</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0">add_syn_id</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0">add_syn_id</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1ac806b4c51bc1abcf7e1b321f7b0c14d0">add_syn_id</reimplementedby>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>synid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="53" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_secondary_event_1a3f6c1179457aca98bbc84b2fe4ba21e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t nest::SecondaryEvent::size</definition>
        <argsstring>()=0</argsstring>
        <name>size</name>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032">size</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032">size</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032">size</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032">size</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a4e33890927207c0bc089167f249ea032">size</reimplementedby>
        <briefdescription>
<para>size of event in units of unsigned int </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="56" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_secondary_event_1a3e8f284d97cb8537bdeb4698709583fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
        <definition>virtual std::vector&lt; unsigned int &gt;::iterator&amp; nest::SecondaryEvent::operator&lt;&lt;</definition>
        <argsstring>(std::vector&lt; unsigned int &gt;::iterator &amp;pos)=0</argsstring>
        <name>operator&lt;&lt;</name>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9">operator&lt;&lt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9">operator&lt;&lt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9">operator&lt;&lt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9">operator&lt;&lt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9765de5a91ec491cf36b2f0d62905cd9">operator&lt;&lt;</reimplementedby>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="57" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_secondary_event_1af02313204f43c0b5e4a63e41ee72cb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
        <definition>virtual std::vector&lt; unsigned int &gt;::iterator&amp; nest::SecondaryEvent::operator&gt;&gt;</definition>
        <argsstring>(std::vector&lt; unsigned int &gt;::iterator &amp;pos)=0</argsstring>
        <name>operator&gt;&gt;</name>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f">operator&gt;&gt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f">operator&gt;&gt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f">operator&gt;&gt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f">operator&gt;&gt;</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a9e7cdfd530eeb6a4d5de6f413738fc9f">operator&gt;&gt;</reimplementedby>
        <param>
          <type>std::vector&lt; unsigned int &gt;::iterator &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="58" column="34"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_secondary_event_1a30246f896d5a978f0aeaa857afa3ecd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::set&lt; <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref> &gt; &amp;</type>
        <definition>virtual const std::set&lt; synindex &gt;&amp; nest::SecondaryEvent::get_supported_syn_ids</definition>
        <argsstring>() const =0</argsstring>
        <name>get_supported_syn_ids</name>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f">get_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f">get_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f">get_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f">get_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a3f969c724dcb8fbc60085946a8bd331f">get_supported_syn_ids</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="60" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_secondary_event_1a73b8f4bbb93704afdaafc5dd25af6025" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::SecondaryEvent::reset_supported_syn_ids</definition>
        <argsstring>()=0</argsstring>
        <name>reset_supported_syn_ids</name>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759">reset_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759">reset_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759">reset_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759">reset_supported_syn_ids</reimplementedby>
        <reimplementedby refid="classnest_1_1_data_secondary_event_1a607e44ee7366048f270f75ec2fafa759">reset_supported_syn_ids</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/secondary_event.h" line="62" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class of secondary events. Provides interface for serialization and deserialization. This event type may be used to transmit data on a regular basis Further information about secondary events and their usage with gap junctions can be found in</para>
<para>Hahne, J., Helias, M., Kunkel, S., Igarashi, J., Bolten, M., Frommer, A. and Diesmann, M., A unified framework for spiking and gap-junction interactions in distributed neuronal network simulations, Front. Neuroinform. 9:22. (2015), doi: 10.3389/fninf.2015.00022 </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>nest::InstantaneousRateConnectionEvent</label>
        <link refid="classnest_1_1_instantaneous_rate_connection_event"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::SecondaryEvent</label>
        <link refid="classnest_1_1_secondary_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>nest::DelayedRateConnectionEvent</label>
        <link refid="classnest_1_1_delayed_rate_connection_event"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::DiffusionConnectionEvent</label>
        <link refid="classnest_1_1_diffusion_connection_event"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::DataSecondaryEvent&lt; double, DelayedRateConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="template-instance">
          <edgelabel>&lt; double, DelayedRateConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::DataSecondaryEvent&lt; double, InstantaneousRateConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="template-instance">
          <edgelabel>&lt; double, InstantaneousRateConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
      </node>
      <node id="9">
        <label>nest::DataSecondaryEvent&lt; double, GapJunctionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="template-instance">
          <edgelabel>&lt; double, GapJunctionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>nest::GapJunctionEvent</label>
        <link refid="classnest_1_1_gap_junction_event"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::DataSecondaryEvent&lt; double, DiffusionConnectionEvent &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="template-instance">
          <edgelabel>&lt; double, DiffusionConnectionEvent &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>nest::DataSecondaryEvent&lt; DataType, Subclass &gt;</label>
        <link refid="classnest_1_1_data_secondary_event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1_deprecation_warning"/>
      </node>
      <node id="1">
        <label>nest::SecondaryEvent</label>
        <link refid="classnest_1_1_secondary_event"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>nest::Time::LimitPosInf</label>
      </node>
      <node id="9">
        <label>nest::SpikeData</label>
        <link refid="classnest_1_1_spike_data"/>
      </node>
      <node id="6">
        <label>nest::Time::LimitNegInf</label>
      </node>
      <node id="5">
        <label>nest::Time</label>
        <link refid="classnest_1_1_time"/>
        <childnode refid="6" relation="usage">
          <edgelabel>#LIM_NEG_INF</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>#LIM_POS_INF</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#LIM_MAX</edgelabel>
          <edgelabel>#LIM_MIN</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::Event</label>
        <link refid="classnest_1_1_event"/>
        <childnode refid="3" relation="usage">
          <edgelabel>#receiver_</edgelabel>
          <edgelabel>#sender_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>#stamp_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>#sender_spike_data_</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>nest::Time::Limit</label>
        <link refid="structnest_1_1_time_1_1_limit"/>
      </node>
      <node id="3">
        <label>nest::Node</label>
        <link refid="classnest_1_1_node"/>
        <childnode refid="4" relation="usage">
          <edgelabel>+deprecation_warning</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/secondary_event.h" line="47" column="1" bodyfile="nestkernel/secondary_event.h" bodystart="48" bodyend="63"/>
    <listofallmembers>
      <member refid="classnest_1_1_secondary_event_1a94981d28268bf2a0c63e9f37b74f05fe" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>add_syn_id</name></member>
      <member refid="classnest_1_1_secondary_event_1abc08cdd9aa7ef8ce98f86ac745fd7231" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>clone</name></member>
      <member refid="classnest_1_1_event_1a206e330b6cbc6e93887fc21908d4df43" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>d_</name></member>
      <member refid="classnest_1_1_event_1a5fd02c2d20b0caf43899f563d419e0bd" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>Event</name></member>
      <member refid="classnest_1_1_event_1a7f3dc0d0bb05d4f98ad2bf13cc67b940" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_delay_steps</name></member>
      <member refid="classnest_1_1_event_1ad2fcc703a758e0dba77c00385cb5041c" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_offset</name></member>
      <member refid="classnest_1_1_event_1a583d84f37d575fbc7f2ab711fb494b66" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_port</name></member>
      <member refid="classnest_1_1_event_1a8c1d83bbbebd23bb85b7ba3dd743d38c" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_receiver</name></member>
      <member refid="classnest_1_1_event_1aaa1bfdd94c07c6a94547086f8139a960" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_receiver_node_id</name></member>
      <member refid="classnest_1_1_event_1a4802a116b9b4e4f3ffcd71a7cfb1729e" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_rel_delivery_steps</name></member>
      <member refid="classnest_1_1_event_1a54709441635d23d80acd9d18eb869856" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_rport</name></member>
      <member refid="classnest_1_1_event_1aca5d7f11547cb61848956360d656ccfc" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_sender</name></member>
      <member refid="classnest_1_1_event_1a32291607d1143c5c7ade223a12ddd54e" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a02f02f11531fefd932a1ac9c0c0891d0" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_stamp</name></member>
      <member refid="classnest_1_1_secondary_event_1a30246f896d5a978f0aeaa857afa3ecd7" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>get_supported_syn_ids</name></member>
      <member refid="classnest_1_1_event_1abf2d6610c35bd35cf67910f5c39b7cc4" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>get_weight</name></member>
      <member refid="classnest_1_1_event_1aa1d8adc602682b70876729e830956dce" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>is_valid</name></member>
      <member refid="classnest_1_1_event_1afd698f1dc0985f25ac821060e060c64b" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>offset_</name></member>
      <member refid="classnest_1_1_event_1a5d94fae6ba8645be63749c08289adcbe" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>operator()</name></member>
      <member refid="classnest_1_1_secondary_event_1a3e8f284d97cb8537bdeb4698709583fb" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnest_1_1_secondary_event_1af02313204f43c0b5e4a63e41ee72cb16" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnest_1_1_event_1a8515d7a39d4f3c8ba47bde7bcfdf80a7" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>p_</name></member>
      <member refid="classnest_1_1_event_1aba7585287096e9d1189007fa60244eef" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>receiver_</name></member>
      <member refid="classnest_1_1_event_1acf9f5b244e87b4d2d83b0a67463b76f6" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>receiver_is_valid</name></member>
      <member refid="classnest_1_1_secondary_event_1a73b8f4bbb93704afdaafc5dd25af6025" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>reset_supported_syn_ids</name></member>
      <member refid="classnest_1_1_event_1aaf68e08591d41518b70181862a6b4877" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>retrieve_sender_node_id_from_source_table</name></member>
      <member refid="classnest_1_1_event_1aaff33b6ca47aa351962509ba81ac7ed7" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>rp_</name></member>
      <member refid="classnest_1_1_event_1ac23f2f4beb8407a1cb01560a316268fd" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>sender_</name></member>
      <member refid="classnest_1_1_event_1a43ca356032fe29a848b9d72f7a43eafd" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>sender_is_valid</name></member>
      <member refid="classnest_1_1_event_1a7221735e8c788ee4a730f7ba6595483b" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>sender_node_id_</name></member>
      <member refid="classnest_1_1_event_1af6213aa38ebec48b1fc8be9e00a62d1c" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>sender_spike_data_</name></member>
      <member refid="classnest_1_1_event_1ae662ecac352f57893c104563dd53c7fe" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_delay_steps</name></member>
      <member refid="classnest_1_1_event_1a488b68c43fe5d4d29d87d2578487264d" prot="public" virt="virtual"><scope>nest::SecondaryEvent</scope><name>set_diffusion_factor</name></member>
      <member refid="classnest_1_1_event_1a956496d418cf58ca78925a22dfe2e21d" prot="public" virt="virtual"><scope>nest::SecondaryEvent</scope><name>set_drift_factor</name></member>
      <member refid="classnest_1_1_event_1a950cfc88c56d3098f1445dcc2b6f4805" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_offset</name></member>
      <member refid="classnest_1_1_event_1a934d28b25e817dd9ed45fbbab3436288" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_port</name></member>
      <member refid="classnest_1_1_event_1a16234c886ae93c42bf120bf77abece30" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_receiver</name></member>
      <member refid="classnest_1_1_event_1aeac7ec4158ac45bf8e503ee04888d367" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_rport</name></member>
      <member refid="classnest_1_1_event_1a63cf602cb38d901021bbe9096f161850" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_sender</name></member>
      <member refid="classnest_1_1_event_1a7ba2a5690a5345624a8ed57c7633cc03" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_sender_node_id</name></member>
      <member refid="classnest_1_1_event_1a5bb763582d2d6a09987d1d91a0646b05" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_sender_node_id_info</name></member>
      <member refid="classnest_1_1_event_1a47c5bdb5473b5b8971b2a077aec754e0" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_stamp</name></member>
      <member refid="classnest_1_1_event_1ab5269d296a67598c7d6cbb9117756de0" prot="public" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>set_weight</name></member>
      <member refid="classnest_1_1_secondary_event_1a3f6c1179457aca98bbc84b2fe4ba21e3" prot="public" virt="pure-virtual"><scope>nest::SecondaryEvent</scope><name>size</name></member>
      <member refid="classnest_1_1_event_1a8ccecfeabf8f8a5bc3166dd3408f8295" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>stamp_</name></member>
      <member refid="classnest_1_1_event_1af35dca186785c4b12995f35d2b51a3de" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>stamp_steps_</name></member>
      <member refid="classnest_1_1_event_1a2e85d3a413ae97d1dbf9cf6dbd791259" prot="protected" virt="non-virtual"><scope>nest::SecondaryEvent</scope><name>w_</name></member>
      <member refid="classnest_1_1_event_1af3f85780e2fab06dd2d934bf965dd142" prot="public" virt="virtual"><scope>nest::SecondaryEvent</scope><name>~Event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
