<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="iterator__pair_8h" kind="file" language="C++">
    <compoundname>iterator_pair.h</compoundname>
    <includes local="no">boost/iterator/iterator_adaptor.hpp</includes>
    <includes local="no">boost/tuple/tuple.hpp</includes>
    <includes refid="source_8h" local="yes">source.h</includes>
    <incdepgraph>
      <node id="1">
        <label>iterator_pair.h</label>
        <link refid="iterator__pair_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>nest_types.h</label>
        <link refid="nest__types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>source.h</label>
        <link refid="source_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="3">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>cfloat</label>
      </node>
      <node id="8">
        <label>climits</label>
      </node>
      <node id="12">
        <label>config.h</label>
      </node>
      <node id="9">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structiterator__pair__types" prot="public">iterator_pair_types</innerclass>
    <innerclass refid="classIteratorPair" prot="public">IteratorPair</innerclass>
    <innerclass refid="structrightshift__iterator__pair" prot="public">rightshift_iterator_pair</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1tuples">boost::tuples</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="iterator__pair_8h_1a146822c90de931b26de898c60dbbb764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class sort_iter_type_</type>
          </param>
          <param>
            <type>class perm_iter_type_</type>
          </param>
        </templateparamlist>
        <type><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref>&lt; sort_iter_type_, perm_iter_type_ &gt;</type>
        <definition>IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt; make_iterator_pair</definition>
        <argsstring>(sort_iter_type_ sort_iter, perm_iter_type_ perm_iter)</argsstring>
        <name>make_iterator_pair</name>
        <param>
          <type>sort_iter_type_</type>
          <declname>sort_iter</declname>
        </param>
        <param>
          <type>perm_iter_type_</type>
          <declname>perm_iter</declname>
        </param>
        <briefdescription>
<para>Creates an <ref refid="classIteratorPair" kindref="compound">IteratorPair</ref> object, deducing iterator types from the types of arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>sort_iter_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator type of the container being sorted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm_iter_type_</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator type of the container being permuted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" line="154" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h" bodystart="154" bodyend="157"/>
        <referencedby refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" compoundref="sort_8h" startline="177" endline="186">nest::sort</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>iterator_pair.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ITERATOR_PAIR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ITERATOR_PAIR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator/iterator_adaptor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/tuple/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="source_8h" kindref="compound">source.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespaceboost" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost" kindref="compound">boost</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33" refid="namespaceboost_1_1tuples" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tuples</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="namespaceboost_1_1tuples_1aa87b0f687682daa154ba6aae65ca909c" refkind="member"><highlight class="normal"><ref refid="namespaceboost_1_1tuples_1aa87b0f687682daa154ba6aae65ca909c" kindref="member">swap</ref>(<sp/>boost::tuple&lt;<sp/>T&amp;,<sp/>U&amp;<sp/>&gt;<sp/>a,<sp/>boost::tuple&lt;<sp/>T&amp;,<sp/>U&amp;<sp/>&gt;<sp/>b<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="namespaceboost_1_1tuples_1aa87b0f687682daa154ba6aae65ca909c" kindref="member">swap</ref>(<sp/>boost::get&lt;<sp/>0<sp/>&gt;(<sp/>a<sp/>),<sp/>boost::get&lt;<sp/>0<sp/>&gt;(<sp/>b<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="namespaceboost_1_1tuples_1aa87b0f687682daa154ba6aae65ca909c" kindref="member">swap</ref>(<sp/>boost::get&lt;<sp/>1<sp/>&gt;(<sp/>a<sp/>),<sp/>boost::get&lt;<sp/>1<sp/>&gt;(<sp/>b<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S2<sp/>&gt;</highlight></codeline>
<codeline lineno="59" refid="namespaceboost_1_1tuples_1a2428ae10f291fedea3ad9d1a425dcefd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="namespaceboost_1_1tuples_1a2428ae10f291fedea3ad9d1a425dcefd" kindref="member">operator&lt;</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cons&lt;<sp/>T1,<sp/>T2<sp/>&gt;&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cons&lt;<sp/>S1,<sp/>S2<sp/>&gt;&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>tuple<sp/>lengths<sp/>are<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>BOOST_STATIC_ASSERT(<sp/>length&lt;<sp/>T2<sp/>&gt;::value<sp/>==<sp/>length&lt;<sp/>S2<sp/>&gt;::value<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.get_head()<sp/>&lt;<sp/>rhs.get_head();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tuples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="76" refid="structiterator__pair__types" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structiterator__pair__types" kindref="compound">iterator_pair_types</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78" refid="structiterator__pair__types_1ac7514f6463f9f8c62f8b570d7af9af2a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structiterator__pair__types_1ac7514f6463f9f8c62f8b570d7af9af2a" kindref="member">value_type</ref><sp/>=<sp/>boost::tuple&lt;<sp/>typename<sp/>std::iterator_traits&lt;<sp/>sort_iter_type_<sp/>&gt;::value_type,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;<sp/>perm_iter_type_<sp/>&gt;::value_type<sp/>&gt;;</highlight></codeline>
<codeline lineno="80" refid="structiterator__pair__types_1a6c6ac9c20f9f0a6efd110931879c3618" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structiterator__pair__types_1a6c6ac9c20f9f0a6efd110931879c3618" kindref="member">ref_type</ref><sp/>=<sp/>boost::tuple&lt;<sp/>typename<sp/>std::iterator_traits&lt;<sp/>sort_iter_type_<sp/>&gt;::reference,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;<sp/>perm_iter_type_<sp/>&gt;::reference<sp/>&gt;;</highlight></codeline>
<codeline lineno="82" refid="structiterator__pair__types_1a5bfa32b5a8cb44a7382c3867bbba984b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structiterator__pair__types_1a5bfa32b5a8cb44a7382c3867bbba984b" kindref="member">difference_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;<sp/>sort_iter_type_<sp/>&gt;::difference_type;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="92" refid="classIteratorPair" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>boost::iterator_facade&lt;<sp/>IteratorPair&lt;<sp/>sort_iter_type_,<sp/>perm_iter_type_<sp/>&gt;,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>iterator_pair_types&lt;<sp/>sort_iter_type_,<sp/>perm_iter_type_<sp/>&gt;::value_type,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::random_access_iterator_tag,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>iterator_pair_types&lt;<sp/>sort_iter_type_,<sp/>perm_iter_type_<sp/>&gt;::ref_type,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>iterator_pair_types&lt;<sp/>sort_iter_type_,<sp/>perm_iter_type_<sp/>&gt;::difference_type<sp/>&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99" refid="classIteratorPair_1ac723216dd445b13d0ed0d4c8cdd18878" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classIteratorPair_1ac723216dd445b13d0ed0d4c8cdd18878" kindref="member">IteratorPair</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="classIteratorPair_1ac723216dd445b13d0ed0d4c8cdd18878" kindref="member">IteratorPair</ref>(<sp/>sort_iter_type_,<sp/>perm_iter_type_<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="103" refid="classIteratorPair_1ac09f73e325921cc50ebcd96bed0f8096" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIteratorPair_1ac09f73e325921cc50ebcd96bed0f8096" kindref="member">boost::iterator_core_access</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classIteratorPair_1a12e89209da2412f4a9523c2936dbd092" refkind="member"><highlight class="normal"><sp/><sp/>sort_iter_type_<sp/><ref refid="classIteratorPair_1a12e89209da2412f4a9523c2936dbd092" kindref="member">sort_iter_</ref>;</highlight></codeline>
<codeline lineno="108" refid="classIteratorPair_1a13467d96d0bfc82b60a7d7e212f5661b" refkind="member"><highlight class="normal"><sp/><sp/>perm_iter_type_<sp/><ref refid="classIteratorPair_1a13467d96d0bfc82b60a7d7e212f5661b" kindref="member">perm_iter_</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>are<sp/>required<sp/>as<sp/>building<sp/>blocks<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Boost&apos;s<sp/>iterator_facade.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classIteratorPair_1ac2cf5ca02b556683e8417532b417dd35" kindref="member">increment</ref>();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classIteratorPair_1a06e93fcd4d290f1ef439000a945656e0" kindref="member">decrement</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIteratorPair_1a79f316416f39664780b25bcee5c24226" kindref="member">equal</ref>(<sp/><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classIteratorPair_1a1c1523279dee6276b0926d4c22cd187a" kindref="member">advance</ref>(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a5bfa32b5a8cb44a7382c3867bbba984b" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type</ref><sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a6c6ac9c20f9f0a6efd110931879c3618" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type</ref><sp/><ref refid="classIteratorPair_1a3e2bc550fbfc57d4a357e079dcfb385c" kindref="member">dereference</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a5bfa32b5a8cb44a7382c3867bbba984b" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type</ref><sp/><ref refid="classIteratorPair_1a2a8510c2853a750ac21632cc6e0c64f2" kindref="member">distance_to</ref>(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="classIteratorPair" kindref="compound">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;</ref></highlight></codeline>
<codeline lineno="154" refid="iterator__pair_8h_1a146822c90de931b26de898c60dbbb764" refkind="member"><highlight class="normal"><ref refid="iterator__pair_8h_1a146822c90de931b26de898c60dbbb764" kindref="member">make_iterator_pair</ref>(<sp/>sort_iter_type_<sp/>sort_iter,<sp/>perm_iter_type_<sp/>perm_iter<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>sort_iter,<sp/>perm_iter<sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structrightshift__iterator__pair" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrightshift__iterator__pair" kindref="compound">rightshift_iterator_pair</ref></highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structrightshift__iterator__pair_1a010fd8679e299917199841bc5e6330b7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structrightshift__iterator__pair_1a010fd8679e299917199841bc5e6330b7" kindref="member">operator()</ref>(<sp/>boost::tuples::tuple&lt;<sp/>int&amp;,<sp/>T&amp;<sp/>&gt;<sp/>s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::get&lt;<sp/>0<sp/>&gt;(<sp/>s<sp/>)<sp/>&gt;&gt;<sp/>offset;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="structrightshift__iterator__pair_1a7122d8c53f7ac1fb0f4678ff3674af5c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structrightshift__iterator__pair_1a7122d8c53f7ac1fb0f4678ff3674af5c" kindref="member">operator()</ref>(<sp/>boost::tuples::tuple&lt;<sp/>nest::Source&amp;,<sp/>T&amp;<sp/>&gt;<sp/>s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::get&lt;<sp/>0<sp/>&gt;(<sp/>s<sp/>).get_node_id()<sp/>&gt;&gt;<sp/>offset;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="181" refid="classIteratorPair_1a9a1e93eef0a8b2a5863b614af84b5a67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classIteratorPair_1ac723216dd445b13d0ed0d4c8cdd18878" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::IteratorPair</ref>(<sp/>sort_iter_type_<sp/>sort_iter,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>perm_iter_type_<sp/>perm_iter<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>:<sp/>sort_iter_(<sp/>sort_iter<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>,<sp/>perm_iter_(<sp/>perm_iter<sp/>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classIteratorPair_1ac2cf5ca02b556683e8417532b417dd35" refkind="member"><highlight class="normal"><ref refid="classIteratorPair_1ac2cf5ca02b556683e8417532b417dd35" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::increment</ref>()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>++sort_iter_;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>++perm_iter_;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classIteratorPair_1a06e93fcd4d290f1ef439000a945656e0" refkind="member"><highlight class="normal"><ref refid="classIteratorPair_1a06e93fcd4d290f1ef439000a945656e0" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::decrement</ref>()</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>--sort_iter_;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>--perm_iter_;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classIteratorPair_1a79f316416f39664780b25bcee5c24226" refkind="member"><highlight class="normal"><ref refid="classIteratorPair_1a79f316416f39664780b25bcee5c24226" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::equal</ref>(<sp/><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="207"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>sort_iter_<sp/>==<sp/>other.sort_iter_<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="classIteratorPair_1a1c1523279dee6276b0926d4c22cd187a" refkind="member"><highlight class="normal"><ref refid="classIteratorPair_1a1c1523279dee6276b0926d4c22cd187a" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::advance</ref>(</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a5bfa32b5a8cb44a7382c3867bbba984b" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type</ref><sp/>n<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>sort_iter_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>perm_iter_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a6c6ac9c20f9f0a6efd110931879c3618" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type</ref></highlight></codeline>
<codeline lineno="222" refid="classIteratorPair_1a3e2bc550fbfc57d4a357e079dcfb385c" refkind="member"><highlight class="normal"><ref refid="classIteratorPair_1a3e2bc550fbfc57d4a357e079dcfb385c" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::dereference</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="223"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a6c6ac9c20f9f0a6efd110931879c3618" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::ref_type</ref>(<sp/>*sort_iter_,<sp/>*perm_iter_<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>sort_iter_type_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>perm_iter_type_<sp/>&gt;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structiterator__pair__types_1a5bfa32b5a8cb44a7382c3867bbba984b" kindref="member">iterator_pair_types&lt; sort_iter_type_, perm_iter_type_ &gt;::difference_type</ref></highlight></codeline>
<codeline lineno="229" refid="classIteratorPair_1a2a8510c2853a750ac21632cc6e0c64f2" refkind="member"><highlight class="normal"><ref refid="classIteratorPair_1a2a8510c2853a750ac21632cc6e0c64f2" kindref="member">IteratorPair&lt; sort_iter_type_, perm_iter_type_ &gt;::distance_to</ref>(<sp/><ref refid="classIteratorPair" kindref="compound">IteratorPair</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="230"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>other.sort_iter_<sp/>-<sp/>sort_iter_<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/libnestutil/iterator_pair.h"/>
  </compounddef>
</doxygen>
