<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_union_mask" kind="class" language="C++" prot="public">
    <compoundname>nest::UnionMask</compoundname>
    <basecompoundref refid="classnest_1_1_mask" prot="public" virt="non-virtual">nest::Mask&lt; D &gt;</basecompoundref>
    <includes refid="mask_8h" local="no">mask.h</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>D</declname>
        <defname>D</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_union_mask_1a98259aef611c7392e0719e5aacf9a0d4" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>Mask&lt; D &gt;* nest::UnionMask&lt; D &gt;::mask1_</definition>
        <argsstring></argsstring>
        <name>mask1_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="583" column="7" bodyfile="nestkernel/mask.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_union_mask_1a3b78056b4cd9924f991352ee1260b0b7" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>Mask&lt; D &gt; * nest::UnionMask&lt; D &gt;::mask2_</definition>
        <argsstring></argsstring>
        <name>mask2_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="583" column="14" bodyfile="nestkernel/mask.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_union_mask_1abc190a8303d9ff1f75809fe6d9fb4a15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UnionMask&lt; D &gt;::UnionMask</definition>
        <argsstring>(const Mask&lt; D &gt; &amp;m1, const Mask&lt; D &gt; &amp;m2)</argsstring>
        <name>UnionMask</name>
        <param>
          <type>const <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the union of the two given masks. Copies are made of the supplied <ref refid="classnest_1_1_mask" kindref="compound">Mask</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="550" column="3" bodyfile="nestkernel/mask.h" bodystart="550" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1afcd15291127cfb4a329b75a4a3f50fa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UnionMask&lt; D &gt;::UnionMask</definition>
        <argsstring>(const UnionMask &amp;m)</argsstring>
        <name>UnionMask</name>
        <param>
          <type>const <ref refid="classnest_1_1_union_mask" kindref="compound">UnionMask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="559" column="3" bodyfile="nestkernel/mask.h" bodystart="559" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1a4ca96c137410f41f4ab7363b5a419c6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::UnionMask&lt; D &gt;::~UnionMask</definition>
        <argsstring>()</argsstring>
        <name>~UnionMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="566" column="3" bodyfile="nestkernel/mask.h" bodystart="566" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1a485d2090f419ab681f7d385fd7d8c445" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::UnionMask&lt; D &gt;::inside</definition>
        <argsstring>(const Position&lt; D &gt; &amp;p) const</argsstring>
        <name>inside</name>
        <reimplements refid="classnest_1_1_mask_1a43d1949f739d9bc932e2aadb25d573de">inside</reimplements>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if point is inside mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="572" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1add6c7bfb4a10d49c91e338b2793f148d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::UnionMask&lt; D &gt;::inside</definition>
        <argsstring>(const Box&lt; D &gt; &amp;b) const</argsstring>
        <name>inside</name>
        <reimplements refid="classnest_1_1_mask_1a4ca07f89ca3d3139c2903137a642c114">inside</reimplements>
        <param>
          <type>const <ref refid="structnest_1_1_box" kindref="compound">Box</ref>&lt; D &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the whole box is inside the mask. </para>
</simplesect>
<simplesect kind="note"><para>a return value of false is not a guarantee that the whole box is not inside the mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="574" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1ace8240b0e3b49ed4936aba7b55251186" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool nest::UnionMask&lt; D &gt;::outside</definition>
        <argsstring>(const Box&lt; D &gt; &amp;b) const</argsstring>
        <name>outside</name>
        <reimplements refid="classnest_1_1_mask_1a7b0e35f7bed34d2b143d322caad7b40d">outside</reimplements>
        <param>
          <type>const <ref refid="structnest_1_1_box" kindref="compound">Box</ref>&lt; D &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the whole box is outside the mask. </para>
</simplesect>
<simplesect kind="note"><para>a return value of false is not a guarantee that the whole box is not outside the mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="576" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1a5d05be9a0c42df0b2fcc82ae0b502c93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structnest_1_1_box" kindref="compound">Box</ref>&lt; D &gt;</type>
        <definition>Box&lt; D &gt; nest::UnionMask&lt; D &gt;::get_bbox</definition>
        <argsstring>() const</argsstring>
        <name>get_bbox</name>
        <reimplements refid="classnest_1_1_mask_1a5762fcaec01449570b208b4de6923295">get_bbox</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The whole mask is inside (i.e., false everywhere outside) the bounding box. <simplesect kind="return"><para>bounding box </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="578" column="7" bodyfile="nestkernel/mask_impl.h" bodystart="372" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_union_mask_1aeb1c46c09d667b5380c2fac2f85077c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref>&lt; D &gt; *</type>
        <definition>Mask&lt; D &gt; * nest::UnionMask&lt; D &gt;::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classnest_1_1_mask_1a9d7b816374204f095198b9f949aebd78">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone method. <simplesect kind="return"><para>dynamically allocated copy of mask object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/mask.h" line="580" column="8" bodyfile="nestkernel/mask_impl.h" bodystart="392" bodyend="395"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classnest_1_1_mask" kindref="compound">Mask</ref> combining two masks with a Boolean OR, the sum. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::UnionMask&lt; D &gt;</label>
        <link refid="classnest_1_1_union_mask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::AbstractMask</label>
        <link refid="classnest_1_1_abstract_mask"/>
      </node>
      <node id="2">
        <label>nest::Mask&lt; D &gt;</label>
        <link refid="classnest_1_1_mask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::UnionMask&lt; D &gt;</label>
        <link refid="classnest_1_1_union_mask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::AbstractMask</label>
        <link refid="classnest_1_1_abstract_mask"/>
      </node>
      <node id="2">
        <label>nest::Mask&lt; D &gt;</label>
        <link refid="classnest_1_1_mask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/mask.h" line="541" column="1" bodyfile="nestkernel/mask.h" bodystart="542" bodyend="584"/>
    <listofallmembers>
      <member refid="classnest_1_1_union_mask_1aeb1c46c09d667b5380c2fac2f85077c3" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>clone</name></member>
      <member refid="classnest_1_1_union_mask_1a5d05be9a0c42df0b2fcc82ae0b502c93" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>get_bbox</name></member>
      <member refid="classnest_1_1_abstract_mask_1afaa2c932fb8581e1417eddc784754a94" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>get_dict</name></member>
      <member refid="classnest_1_1_union_mask_1a485d2090f419ab681f7d385fd7d8c445" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_union_mask_1add6c7bfb4a10d49c91e338b2793f148d" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_mask_1a8f5f7b1b18f31e4a927705b536c05a72" prot="public" virt="virtual" ambiguityscope="nest::Mask::"><scope>nest::UnionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_mask_1a20df18bae0e8e78e06c68b6654f1ca8c" prot="public" virt="non-virtual" ambiguityscope="nest::Mask::"><scope>nest::UnionMask</scope><name>inside</name></member>
      <member refid="classnest_1_1_mask_1a26c865ca83050e6dff23c56ef880f702" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>intersect_mask</name></member>
      <member refid="classnest_1_1_union_mask_1a98259aef611c7392e0719e5aacf9a0d4" prot="protected" virt="non-virtual"><scope>nest::UnionMask</scope><name>mask1_</name></member>
      <member refid="classnest_1_1_union_mask_1a3b78056b4cd9924f991352ee1260b0b7" prot="protected" virt="non-virtual"><scope>nest::UnionMask</scope><name>mask2_</name></member>
      <member refid="classnest_1_1_mask_1ac19b409451836f97eeb0c884009ef6a2" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>minus_mask</name></member>
      <member refid="classnest_1_1_union_mask_1ace8240b0e3b49ed4936aba7b55251186" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>outside</name></member>
      <member refid="classnest_1_1_mask_1ae6318d1bdb788014d3ab08b25c8cc240" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>union_mask</name></member>
      <member refid="classnest_1_1_union_mask_1abc190a8303d9ff1f75809fe6d9fb4a15" prot="public" virt="non-virtual"><scope>nest::UnionMask</scope><name>UnionMask</name></member>
      <member refid="classnest_1_1_union_mask_1afcd15291127cfb4a329b75a4a3f50fa2" prot="public" virt="non-virtual"><scope>nest::UnionMask</scope><name>UnionMask</name></member>
      <member refid="classnest_1_1_abstract_mask_1a5933f9f222c335b21f90ef55c1caa430" prot="public" virt="virtual"><scope>nest::UnionMask</scope><name>~AbstractMask</name></member>
      <member refid="classnest_1_1_mask_1a4361fce7b927c7b0f8f4f7e1384bb00f" prot="public" virt="non-virtual"><scope>nest::UnionMask</scope><name>~Mask</name></member>
      <member refid="classnest_1_1_union_mask_1a4ca96c137410f41f4ab7363b5a419c6c" prot="public" virt="non-virtual"><scope>nest::UnionMask</scope><name>~UnionMask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
