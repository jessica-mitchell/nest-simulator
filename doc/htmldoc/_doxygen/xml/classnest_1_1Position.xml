<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1Position" kind="class" language="C++" prot="public">
    <compoundname>nest::Position</compoundname>
    <includes refid="position_8h" local="no">position.h</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>D</declname>
        <defname>D</defname>
      </param>
      <param>
        <type>class T</type>
        <defval>double</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1Position_1a279e48b09e52565aa496109c59236cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>OD</declname>
            <defname>OD</defname>
          </param>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Position</definition>
        <argsstring></argsstring>
        <name>Position</name>
        <param>
          <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="63" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1Position_1a8e6bd6e0b579499f41dfba2c87ea3e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Position&lt; D, T &gt; &amp;pos)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Output the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> to an ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="303" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="813" bodyend="826"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1Position_1ac27cc3e93376b808ca8c6d6880a0f04d" prot="protected" static="no" mutable="no">
        <type>std::array&lt; T, D &gt;</type>
        <definition>std::array&lt; T, D &gt; nest::Position&lt; D, T &gt;::x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="306" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1Position_1a2d53c87e77c6be0a5be95a0a2c6b6dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>()</argsstring>
        <name>Position</name>
        <briefdescription>
<para>Default constructor, initializing all coordinates to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="68" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a609dd2d167d59b0ba5f16dd7631304ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(const T &amp;, const T &amp;)</argsstring>
        <name>Position</name>
        <param>
          <type>const T &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>y</defname>
        </param>
        <briefdescription>
<para>2D Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="73" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="413" bodyend="418"/>
        <references refid="namespacenest_1_1names_1a02ff20012561603c598107af2b48b440">nest::names::x</references>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a4402be48c9293455d077be3bb19dd902" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(const T &amp;, const T &amp;, const T &amp;)</argsstring>
        <name>Position</name>
        <param>
          <type>const T &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>y</defname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>z</defname>
        </param>
        <briefdescription>
<para>3D Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="78" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="421" bodyend="427"/>
        <references refid="namespacenest_1_1names_1a02ff20012561603c598107af2b48b440">nest::names::x</references>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
        <references refid="namespacenest_1_1names_1a9d35224b65803a09d72c731e47579cd1">nest::names::z</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a374e4070a06415514d53cbec5cabc701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(const T *const y)</argsstring>
        <name>Position</name>
        <param>
          <type>const T *const</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Constructor initializing a <ref refid="classnest_1_1Position" kindref="compound">Position</ref> from an array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="83" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="430" bodyend="436"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ac4562f303d63d579e2a5b316957c6ba0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;y)</argsstring>
        <name>Position</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Constructor initializing a <ref refid="classnest_1_1Position" kindref="compound">Position</ref> from a std::vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="88" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="439" bodyend="446"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a646decae5fc33c027dfac5089a64f4cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(const Position &amp;other)</argsstring>
        <name>Position</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="93" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a8e77e0ea8fcb8d913f0ff56ec2f8af93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(const Position&lt; D, U &gt; &amp;other)</argsstring>
        <name>Position</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="96" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="456" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a3b8849803540053391e77f6992771eaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::Position</definition>
        <argsstring>(Position &amp;&amp;other)</argsstring>
        <name>Position</name>
        <param>
          <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="101" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="462" bodyend="465"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ade1180bde91aec4deaf7952e1edaeab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&amp; nest::Position&lt; D, T &gt;::operator=</definition>
        <argsstring>(const Position &amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="106" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a2f69744c7720f0345772a10b3c887bc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&lt; D, T &gt; &amp; nest::Position&lt; D, T &gt;::operator=</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;y)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="107" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="469" bodyend="478"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ab653d8a9cadd121fcca39e04883b0df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&amp; nest::Position&lt; D, T &gt;::operator=</definition>
        <argsstring>(Position &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="112" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a3a46e46a52ce01d10b213b1121dd54bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; nest::Position&lt; D, T &gt;::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an element (coordinate) of the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="117" column="5" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1aee7b6fb0014b41434888d98610a93d69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; nest::Position&lt; D, T &gt;::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an element (coordinate) of the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="122" column="11" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a11ef1b4583f8d33ecff3a5473844c960" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Token</type>
        <definition>Token nest::Position&lt; D, T &gt;::getToken</definition>
        <argsstring>() const</argsstring>
        <name>getToken</name>
        <briefdescription>
<para>Moves <ref refid="classnest_1_1Position" kindref="compound">Position</ref> variables into an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>array of positions stored as a token object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="128" column="9" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="496" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a695cc92b6b753a3a6ad0b2f16dc02cf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; T &gt;</type>
        <definition>const std::vector&lt; T &gt; nest::Position&lt; D, T &gt;::get_vector</definition>
        <argsstring>() const</argsstring>
        <name>get_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="130" column="21" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="505" bodyend="508"/>
        <referencedby refid="classnest_1_1ConnectionCreator_1a9406f2b55a5fdbb556a8c5642e150967" compoundref="connection__creator__impl_8h" startline="73" endline="111">nest::ConnectionCreator::connect_to_target_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aa17ea21863e869441d8eb30ec68115f1" compoundref="connection__creator__impl_8h" startline="342" endline="632">nest::ConnectionCreator::fixed_indegree_</referencedby>
        <referencedby refid="classnest_1_1ConnectionCreator_1aed574cbd0e3449ff398d4679033fb0f5" compoundref="connection__creator__impl_8h" startline="637" endline="784">nest::ConnectionCreator::fixed_outdegree_</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a16be53adf2c6d497a6699d1d3244147d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Position&lt; D, T &gt;::get_vector</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vector) const</argsstring>
        <name>get_vector</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="131" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="512" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a939c49d7ed7f6037dad726f19b35bc64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position nest::Position&lt; D, T &gt;::operator+</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Elementwise addition. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>elementwise sum of coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="138" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a9e88b35f4d1d6a3bf6e8c93156367e5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position nest::Position&lt; D, T &gt;::operator-</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Elementwise subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>elementwise difference of coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="145" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a0a0340a424277029707fdf7c041b12f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Unary minus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>opposite vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="151" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="541" bodyend="546"/>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ad0d4e7e4bc6ed9def43180973c18768d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position nest::Position&lt; D, T &gt;::operator*</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Elementwise multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>elementwise product of coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="158" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a7075ecaeac751ba3c549a57f5b0db5a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position nest::Position&lt; D, T &gt;::operator/</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Elementwise division. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>elementwise quotient of coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="165" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a0a0460386ea216dbdfcdf40302a14548" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator+</definition>
        <argsstring>(const T &amp;) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Elementwise addition with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>position vector with scalar added to all coordinates </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="171" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="570" bodyend="575"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1acc97ce197fe46b1de9ca3ba7fa609756" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator-</definition>
        <argsstring>(const T &amp;) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Elementwise subtraction with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>position vector with scalar subtracted from all coordinates </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="177" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="579" bodyend="584"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1aeb0a935965216f6f289571a3e076fb59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator*</definition>
        <argsstring>(const T &amp;) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Multiplication with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>position vector multiplied with the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="183" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="588" bodyend="593"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a7ff5277f651acf59ea592eda688f2718" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref></type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator/</definition>
        <argsstring>(const T &amp;) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Division with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>position vector divided by the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="189" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="597" bodyend="602"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ad9149dbf94dbe1a46616079b8907eb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&amp; nest::Position&lt; D, T &gt;::operator+=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
        </param>
        <briefdescription>
<para>In-place elementwise addition. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after adding the other <ref refid="classnest_1_1Position" kindref="compound">Position</ref> elementwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="197" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a2eee930a7083922f46a344287ebe52d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&amp; nest::Position&lt; D, T &gt;::operator-=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
        </param>
        <briefdescription>
<para>In-place elementwise subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after subtracting the other <ref refid="classnest_1_1Position" kindref="compound">Position</ref> elementwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="205" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a6bf2669b01e66cc660bd4e68cee20daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&amp; nest::Position&lt; D, T &gt;::operator*=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
        </param>
        <briefdescription>
<para>In-place elementwise multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after multiplying with the other <ref refid="classnest_1_1Position" kindref="compound">Position</ref> elementwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="213" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a7c44719addfb4873791ed62905479d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&amp; nest::Position&lt; D, T &gt;::operator/=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
        </param>
        <briefdescription>
<para>In-place elementwise division. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after dividing by the other <ref refid="classnest_1_1Position" kindref="compound">Position</ref> elementwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="221" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ad70043e5ccadba044f5ea76ca92d0fa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&lt; D, T &gt; &amp; nest::Position&lt; D, T &gt;::operator+=</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>In-place elementwise addition with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after adding the scalar to all coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="227" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="654" bodyend="661"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ab071037396ed9c47d8ba847a8ff850e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&lt; D, T &gt; &amp; nest::Position&lt; D, T &gt;::operator-=</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>In-place elementwise subtraction with scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after subtracting the scalar from all coordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="234" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="665" bodyend="672"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a3b91647467c8e72d468dd68ca6a9830b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&lt; D, T &gt; &amp; nest::Position&lt; D, T &gt;::operator*=</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>In-place multiplication by scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after multiplying with the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="240" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="676" bodyend="683"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ad662ae7af78c2d59baf3c37199594eb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
        <definition>Position&lt; D, T &gt; &amp; nest::Position&lt; D, T &gt;::operator/=</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>In-place elementwise division. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="classnest_1_1Position" kindref="compound">Position</ref> itself after dividing by the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="246" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="687" bodyend="694"/>
        <references refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e">nest::names::a</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1af3fb3bc4f848e46d8c5c6b143ab6fcc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Position&lt; D, T &gt;::operator==</definition>
        <argsstring>(const Position &amp;y) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all coordinates are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="251" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="698" bodyend="708"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a7af2a1bef86c5b10080607beed34e520" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Position&lt; D, T &gt;::operator!=</definition>
        <argsstring>(const Position &amp;y) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if not all coordinates are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="256" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="712" bodyend="722"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a7309d336c306d1feb95e0415b137f81e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Position&lt; D, T &gt;::operator&lt;</definition>
        <argsstring>(const Position &amp;y) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all coordinates are less </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="261" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="726" bodyend="736"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ade576f834d11116622829d75b6bca844" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Position&lt; D, T &gt;::operator&gt;</definition>
        <argsstring>(const Position &amp;y) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all coordinates are greater </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="266" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="740" bodyend="750"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a17205b277b82b336e148a86d9489c079" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Position&lt; D, T &gt;::operator&lt;=</definition>
        <argsstring>(const Position &amp;y) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all coordinates are less or equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="271" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="754" bodyend="764"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a8c67c0e5cb6a1261308f001475759e68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::Position&lt; D, T &gt;::operator&gt;=</definition>
        <argsstring>(const Position &amp;y) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all coordinates are greater or equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="276" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="768" bodyend="778"/>
        <references refid="namespacenest_1_1names_1a4ace48062a2b7d7d3daecba136c2d64d">nest::names::y</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a5f19f3277241c94e4bc02d83591201ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T nest::Position&lt; D, T &gt;::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
<para>Length of <ref refid="classnest_1_1Position" kindref="compound">Position</ref> vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Euclidian norm of the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="282" column="5" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="782" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a9c255158acd892365602ee4ea9ed9e9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::Position&lt; D, T &gt;::operator std::string</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string representation of <ref refid="classnest_1_1Position" kindref="compound">Position</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="287" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="793" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a04a0c36eec1e69ef8f7a8e28caf69430" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::Position&lt; D, T &gt;::print</definition>
        <argsstring>(std::ostream &amp;out, char sep=&apos; &apos;) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>char</type>
          <declname>sep</declname>
          <defval>&apos; &apos;</defval>
        </param>
        <briefdescription>
<para>Print position to output stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Format: Only as many coordinates as dimensions, separated by spaces [default], no trailing space.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>separator character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="298" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="802" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a516933cb09c16e0a95d0c44d159a70d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt;</type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator+</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="522" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="522" bodyend="527"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ae829111640b7fb0187408ac86f7f8e42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt;</type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator-</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="532" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="532" bodyend="537"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ae7de3308f1fd81276009a3d9e38bb6f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt;</type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator*</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="551" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="551" bodyend="556"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a1cfc98cd91268a6bbc8a322f840188f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt;</type>
        <definition>Position&lt; D, T &gt; nest::Position&lt; D, T &gt;::operator/</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="561" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="561" bodyend="566"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
        <references refid="namespacenest_1_1names_1a4c815121a452a876dd0976c42ab58f1d">nest::names::p</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1ae2aff0edf4d42f380c2a7b15e11bb77b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt; &amp;</type>
        <definition>Position&lt; D, T &gt;&amp; nest::Position&lt; D, T &gt;::operator+=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="607" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="607" bodyend="614"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1af511d8fe9523040f9bea4d18b80c5536" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt; &amp;</type>
        <definition>Position&lt; D, T &gt;&amp; nest::Position&lt; D, T &gt;::operator-=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="619" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="619" bodyend="626"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a7c2e728c75b492450da0847c62347563" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt; &amp;</type>
        <definition>Position&lt; D, T &gt;&amp; nest::Position&lt; D, T &gt;::operator*=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="631" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="631" bodyend="638"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1Position_1a91c18f4a24fc054526fdd02ed9834deb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, T &gt; &amp;</type>
        <definition>Position&lt; D, T &gt;&amp; nest::Position&lt; D, T &gt;::operator/=</definition>
        <argsstring>(const Position&lt; D, OT &gt; &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classnest_1_1Position" kindref="compound">Position</ref>&lt; D, OT &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="643" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="643" bodyend="650"/>
        <references refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d">nest::names::other</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>nest::MultiIndex&lt; D &gt;</label>
        <link refid="classnest_1_1MultiIndex"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Position&lt; D, T &gt;</label>
        <link refid="classnest_1_1Position"/>
      </node>
      <node id="2">
        <label>nest::Position&lt; D, index &gt;</label>
        <link refid="classnest_1_1Position"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; D, index &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::Position&lt; D, int &gt;</label>
        <link refid="classnest_1_1Position"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; D, int &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::Position&lt; D, T &gt;</label>
        <link refid="classnest_1_1Position"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" line="59" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/position.h" bodystart="60" bodyend="307"/>
    <listofallmembers>
      <member refid="classnest_1_1Position_1a695cc92b6b753a3a6ad0b2f16dc02cf6" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>get_vector</name></member>
      <member refid="classnest_1_1Position_1a16be53adf2c6d497a6699d1d3244147d" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>get_vector</name></member>
      <member refid="classnest_1_1Position_1a11ef1b4583f8d33ecff3a5473844c960" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>getToken</name></member>
      <member refid="classnest_1_1Position_1a5f19f3277241c94e4bc02d83591201ec" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>length</name></member>
      <member refid="classnest_1_1Position_1a9c255158acd892365602ee4ea9ed9e9c" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator std::string</name></member>
      <member refid="classnest_1_1Position_1a7af2a1bef86c5b10080607beed34e520" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator!=</name></member>
      <member refid="classnest_1_1Position_1ad0d4e7e4bc6ed9def43180973c18768d" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator*</name></member>
      <member refid="classnest_1_1Position_1aeb0a935965216f6f289571a3e076fb59" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator*</name></member>
      <member refid="classnest_1_1Position_1ae7de3308f1fd81276009a3d9e38bb6f8" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator*</name></member>
      <member refid="classnest_1_1Position_1a6bf2669b01e66cc660bd4e68cee20daf" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator*=</name></member>
      <member refid="classnest_1_1Position_1a3b91647467c8e72d468dd68ca6a9830b" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator*=</name></member>
      <member refid="classnest_1_1Position_1a7c2e728c75b492450da0847c62347563" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator*=</name></member>
      <member refid="classnest_1_1Position_1a939c49d7ed7f6037dad726f19b35bc64" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator+</name></member>
      <member refid="classnest_1_1Position_1a0a0460386ea216dbdfcdf40302a14548" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator+</name></member>
      <member refid="classnest_1_1Position_1a516933cb09c16e0a95d0c44d159a70d2" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator+</name></member>
      <member refid="classnest_1_1Position_1ad9149dbf94dbe1a46616079b8907eb39" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator+=</name></member>
      <member refid="classnest_1_1Position_1ad70043e5ccadba044f5ea76ca92d0fa0" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator+=</name></member>
      <member refid="classnest_1_1Position_1ae2aff0edf4d42f380c2a7b15e11bb77b" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator+=</name></member>
      <member refid="classnest_1_1Position_1a9e88b35f4d1d6a3bf6e8c93156367e5b" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-</name></member>
      <member refid="classnest_1_1Position_1a0a0340a424277029707fdf7c041b12f0" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-</name></member>
      <member refid="classnest_1_1Position_1acc97ce197fe46b1de9ca3ba7fa609756" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-</name></member>
      <member refid="classnest_1_1Position_1ae829111640b7fb0187408ac86f7f8e42" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-</name></member>
      <member refid="classnest_1_1Position_1a2eee930a7083922f46a344287ebe52d5" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-=</name></member>
      <member refid="classnest_1_1Position_1ab071037396ed9c47d8ba847a8ff850e9" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-=</name></member>
      <member refid="classnest_1_1Position_1af511d8fe9523040f9bea4d18b80c5536" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator-=</name></member>
      <member refid="classnest_1_1Position_1a7075ecaeac751ba3c549a57f5b0db5a9" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator/</name></member>
      <member refid="classnest_1_1Position_1a7ff5277f651acf59ea592eda688f2718" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator/</name></member>
      <member refid="classnest_1_1Position_1a1cfc98cd91268a6bbc8a322f840188f1" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator/</name></member>
      <member refid="classnest_1_1Position_1a7c44719addfb4873791ed62905479d7f" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator/=</name></member>
      <member refid="classnest_1_1Position_1ad662ae7af78c2d59baf3c37199594eb2" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator/=</name></member>
      <member refid="classnest_1_1Position_1a91c18f4a24fc054526fdd02ed9834deb" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator/=</name></member>
      <member refid="classnest_1_1Position_1a7309d336c306d1feb95e0415b137f81e" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator&lt;</name></member>
      <member refid="classnest_1_1Position_1a8e6bd6e0b579499f41dfba2c87ea3e9f" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnest_1_1Position_1a17205b277b82b336e148a86d9489c079" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator&lt;=</name></member>
      <member refid="classnest_1_1Position_1ade1180bde91aec4deaf7952e1edaeab9" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator=</name></member>
      <member refid="classnest_1_1Position_1a2f69744c7720f0345772a10b3c887bc5" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator=</name></member>
      <member refid="classnest_1_1Position_1ab653d8a9cadd121fcca39e04883b0df1" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator=</name></member>
      <member refid="classnest_1_1Position_1af3fb3bc4f848e46d8c5c6b143ab6fcc0" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator==</name></member>
      <member refid="classnest_1_1Position_1ade576f834d11116622829d75b6bca844" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator&gt;</name></member>
      <member refid="classnest_1_1Position_1a8c67c0e5cb6a1261308f001475759e68" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator&gt;=</name></member>
      <member refid="classnest_1_1Position_1a3a46e46a52ce01d10b213b1121dd54bd" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator[]</name></member>
      <member refid="classnest_1_1Position_1aee7b6fb0014b41434888d98610a93d69" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>operator[]</name></member>
      <member refid="classnest_1_1Position_1a279e48b09e52565aa496109c59236cf9" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a2d53c87e77c6be0a5be95a0a2c6b6dbc" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a609dd2d167d59b0ba5f16dd7631304ef" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a4402be48c9293455d077be3bb19dd902" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a374e4070a06415514d53cbec5cabc701" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1ac4562f303d63d579e2a5b316957c6ba0" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a646decae5fc33c027dfac5089a64f4cb" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a8e77e0ea8fcb8d913f0ff56ec2f8af93" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a3b8849803540053391e77f6992771eaf" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>Position</name></member>
      <member refid="classnest_1_1Position_1a04a0c36eec1e69ef8f7a8e28caf69430" prot="public" virt="non-virtual"><scope>nest::Position</scope><name>print</name></member>
      <member refid="classnest_1_1Position_1ac27cc3e93376b808ca8c6d6880a0f04d" prot="protected" virt="non-virtual"><scope>nest::Position</scope><name>x_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
