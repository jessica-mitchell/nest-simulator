<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1NestModule_1_1GetStatus__gFunction" kind="class" language="C++" prot="public">
    <compoundname>nest::NestModule::GetStatus_gFunction</compoundname>
    <basecompoundref prot="public" virt="non-virtual">SLIFunction</basecompoundref>
    <includes refid="nestmodule_8h" local="no">nestmodule.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1NestModule_1_1GetStatus__gFunction_1add909d4ed590dfb159dcfd2cb9f1947e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::NestModule::GetStatus_gFunction::execute</definition>
        <argsstring>(SLIInterpreter *) const override</argsstring>
        <name>execute</name>
        <param>
          <type>SLIInterpreter *</type>
          <defname>i</defname>
        </param>
        <briefdescription>
<para>@BeginDocumentation Name: GetStatus - return the property dictionary of a node, connection, or object </para>
        </briefdescription>
        <detaileddescription>
<para>Synopsis: node_id GetStatus -&gt; dict conn GetStatus -&gt; dict obj GetStatus -&gt; dict</para>
<para>Description: GetStatus returns a dictionary with the status information for a node (specified by its node_id), a connection (specified by a connection object), or an object as used in object-oriented programming in SLI (see cvo for more).</para>
<para>The interpreter exchanges data with the network element using its status dictionary. To abbreviate the access pattern node_id GetStatus /lit get a variant of get implicitly calls GetStatus node_id /lit get . In this way network elements and dictionaries can be accessed with the same syntax. Sometimes access to nested data structures in the status dictionary is required. In this case the advanced addressing scheme of get is useful in which the second argument is an array of literals. See the documentation of get for details.</para>
<para>The information contained in the property dictionary depends on the concrete node model.</para>
<para>Please refer to the model documentation for details.</para>
<para>Standard entries for nodes:</para>
<para>global_id - local ID of the node model - literal, defining the current node frozen - frozen nodes are not updated thread - the thread the node is allocated on vp - the virtual process a node belongs to</para>
<para>Note that the standard entries cannot be modified directly.</para>
<para>Author: Marc-Oliver Gewaltig Availability: NEST SeeAlso: ShowStatus, info, SetStatus, get, GetStatus_dict, GetKernelStatus </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nestmodule.h" line="203" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nestmodule.cpp" bodystart="491" bodyend="517"/>
        <references refid="namespacenest_1a6e5a92a44e3eda3be872a61843a32430" compoundref="nest_8cpp" startline="127" endline="130">nest::get_node_status</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::NestModule::GetStatus_gFunction</label>
        <link refid="classnest_1_1NestModule_1_1GetStatus__gFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::NestModule::GetStatus_gFunction</label>
        <link refid="classnest_1_1NestModule_1_1GetStatus__gFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SLIFunction</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/nestmodule.h" line="200" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/nestmodule.h" bodystart="201" bodyend="204"/>
    <listofallmembers>
      <member refid="classnest_1_1NestModule_1_1GetStatus__gFunction_1add909d4ed590dfb159dcfd2cb9f1947e" prot="public" virt="non-virtual"><scope>nest::NestModule::GetStatus_gFunction</scope><name>execute</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
