<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_conn_parameter" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::ConnParameter</compoundname>
    <derivedcompoundref refid="classnest_1_1_array_double_parameter" prot="public" virt="non-virtual">nest::ArrayDoubleParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_array_integer_parameter" prot="public" virt="non-virtual">nest::ArrayIntegerParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_parameter_conn_parameter_wrapper" prot="public" virt="non-virtual">nest::ParameterConnParameterWrapper</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_scalar_double_parameter" prot="public" virt="non-virtual">nest::ScalarDoubleParameter</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_scalar_integer_parameter" prot="public" virt="non-virtual">nest::ScalarIntegerParameter</derivedcompoundref>
    <includes refid="conn__parameter_8h" local="no">conn_parameter.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1aeba222e75a9c6e4021394160c8f0fc9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::ConnParameter::ConnParameter</definition>
        <argsstring>()</argsstring>
        <name>ConnParameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="57" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1ad56f5b8e66ba9cd627f5c0cdd05dfbb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual nest::ConnParameter::~ConnParameter</definition>
        <argsstring>()</argsstring>
        <name>~ConnParameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="61" column="11" bodyfile="nestkernel/conn_parameter.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a891c9bf68a5c8f8f5416d090c4fc02f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double nest::ConnParameter::value_double</definition>
        <argsstring>(thread, RngPtr, index, Node *) const =0</argsstring>
        <name>value_double</name>
        <reimplementedby refid="classnest_1_1_parameter_conn_parameter_wrapper_1a0298b654407d2267c43b45b6ee8312b6">value_double</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_double_parameter_1a3f29783876b25225c4e1b132d239a41e">value_double</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1a97a022b4710f23228e16f393c84bc607">value_double</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_double_parameter_1abc773033c6f6614873b3c550222227fc">value_double</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_integer_parameter_1a71a627f123393a6c417b941bc63e99df">value_double</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return parameter value.</para>
<para>The parameter value may depend on target threads and random numbers. Both must be supplied, even if a concrete parameter type does not use them.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>will be ignored except for array parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>random number generator pointer will be ignored except for random parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="76" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a26c4ff5169680f2ba4a7c8a1694110f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>long</type>
        <definition>virtual long nest::ConnParameter::value_int</definition>
        <argsstring>(thread, RngPtr, index, Node *) const =0</argsstring>
        <name>value_int</name>
        <reimplementedby refid="classnest_1_1_parameter_conn_parameter_wrapper_1a070085526d4a8dc05d0b46b9a2e0ee19">value_int</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1a1dec353ec12e206bc2187aa1e3723821">value_int</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_double_parameter_1abed441b867905987ad18828cc218243e">value_int</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_integer_parameter_1aee166f46f76683135650d5540db808ea">value_int</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_double_parameter_1a96a7d880051a676f96640cdf2af26317">value_int</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="77" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a07bb81308cbcd25b6766faa704680b50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::ConnParameter::skip</definition>
        <argsstring>(thread, size_t) const</argsstring>
        <name>skip</name>
        <reimplementedby refid="classnest_1_1_array_double_parameter_1ad648f61ff11e79c59d8dfe09b231f4a6">skip</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1a3d8720fea4d5642c2823d528bcf4dde0">skip</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="79" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a574bb23d4cd5514b7bf5d51a440abb55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool nest::ConnParameter::is_array</definition>
        <argsstring>() const =0</argsstring>
        <name>is_array</name>
        <reimplementedby refid="classnest_1_1_scalar_double_parameter_1a9858044db72915e264f01e95bac5a370">is_array</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_integer_parameter_1aa6ad85df07541fb1ac532496a93fb408">is_array</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_double_parameter_1a70e0f112d4d9592a8493ebe7a6b0e895">is_array</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1af5efd06a07e8c2d7a16da3ab7da5a27a">is_array</reimplementedby>
        <reimplementedby refid="classnest_1_1_parameter_conn_parameter_wrapper_1a71af5747dff3bb4839e59e8099e0015c">is_array</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="82" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a2bd64986d7840e5cb839fbc9b083c0f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool nest::ConnParameter::is_scalar</definition>
        <argsstring>() const</argsstring>
        <name>is_scalar</name>
        <reimplementedby refid="classnest_1_1_scalar_double_parameter_1aca891eb0eb4eb83cebbffd13339d67e6">is_scalar</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_integer_parameter_1ab57fa119f503ee3fe4ca1b9a604d22d5">is_scalar</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="85" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a89cec93b5a09f8b41ec0c48e9fa3434a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool nest::ConnParameter::provides_long</definition>
        <argsstring>() const</argsstring>
        <name>provides_long</name>
        <reimplementedby refid="classnest_1_1_scalar_integer_parameter_1a5076c9ad0454ce5662246ebcb338299f">provides_long</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1a0b2718f5a85398d1aeb42c8a5e234053">provides_long</reimplementedby>
        <reimplementedby refid="classnest_1_1_parameter_conn_parameter_wrapper_1abe345a09fed4fb24ebd01ae4ec395cd0">provides_long</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="91" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a13d36c79f25051910c1ffe937e31ab1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void nest::ConnParameter::reset</definition>
        <argsstring>() const</argsstring>
        <name>reset</name>
        <reimplementedby refid="classnest_1_1_scalar_double_parameter_1a4c2d7806b311e68a0dda594ddbfb3ec6">reset</reimplementedby>
        <reimplementedby refid="classnest_1_1_scalar_integer_parameter_1a58fe21ceb4948c19454bf40d0e4365f0">reset</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_double_parameter_1a935a8e49443795812f24dca4d3ff28a4">reset</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1a647fca247b3f8d1e92699ed7f6540ced">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="97" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a5be9d99e7d8036723e673cb1d25a6ee1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t nest::ConnParameter::number_of_values</definition>
        <argsstring>() const</argsstring>
        <name>number_of_values</name>
        <reimplementedby refid="classnest_1_1_array_double_parameter_1af4e2d7d2b4c5b5b6fe29dd6f249fb5fc">number_of_values</reimplementedby>
        <reimplementedby refid="classnest_1_1_array_integer_parameter_1a8a0a7c1f9677cccd263ab8498db7094a">number_of_values</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns number of values available.</para>
<para>0 indicates scalar/unlimited supply. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="108" column="3" bodyfile="nestkernel/conn_parameter.h" bodystart="108" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnest_1_1_conn_parameter_1a27fc06b23ad2d6605169b576b0cc2407" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_conn_parameter" kindref="compound">ConnParameter</ref> *</type>
        <definition>nest::ConnParameter * nest::ConnParameter::create</definition>
        <argsstring>(const Token &amp;, const size_t)</argsstring>
        <name>create</name>
        <param>
          <type>const Token &amp;</type>
          <defname>t</defname>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
          <defname>nthreads</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter type is established by casts to all acceptedpossibilities </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nthread</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads required to fix number pointers to the iterator (one for each thread) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/conn_parameter.h" line="119" column="24" bodyfile="nestkernel/conn_parameter.cpp" bodystart="36" bodyend="74"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>nest::ScalarDoubleParameter</label>
        <link refid="classnest_1_1_scalar_double_parameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArrayDoubleParameter</label>
        <link refid="classnest_1_1_array_double_parameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::ArrayIntegerParameter</label>
        <link refid="classnest_1_1_array_integer_parameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>nest::ScalarIntegerParameter</label>
        <link refid="classnest_1_1_scalar_integer_parameter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::ParameterConnParameterWrapper</label>
        <link refid="classnest_1_1_parameter_conn_parameter_wrapper"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::ConnParameter</label>
        <link refid="classnest_1_1_conn_parameter"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::ConnParameter</label>
        <link refid="classnest_1_1_conn_parameter"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/conn_parameter.h" line="53" column="1" bodyfile="nestkernel/conn_parameter.h" bodystart="54" bodyend="120"/>
    <listofallmembers>
      <member refid="classnest_1_1_conn_parameter_1aeba222e75a9c6e4021394160c8f0fc9a" prot="public" virt="non-virtual"><scope>nest::ConnParameter</scope><name>ConnParameter</name></member>
      <member refid="classnest_1_1_conn_parameter_1a27fc06b23ad2d6605169b576b0cc2407" prot="public" virt="non-virtual"><scope>nest::ConnParameter</scope><name>create</name></member>
      <member refid="classnest_1_1_conn_parameter_1a574bb23d4cd5514b7bf5d51a440abb55" prot="public" virt="pure-virtual"><scope>nest::ConnParameter</scope><name>is_array</name></member>
      <member refid="classnest_1_1_conn_parameter_1a2bd64986d7840e5cb839fbc9b083c0f6" prot="public" virt="virtual"><scope>nest::ConnParameter</scope><name>is_scalar</name></member>
      <member refid="classnest_1_1_conn_parameter_1a5be9d99e7d8036723e673cb1d25a6ee1" prot="public" virt="virtual"><scope>nest::ConnParameter</scope><name>number_of_values</name></member>
      <member refid="classnest_1_1_conn_parameter_1a89cec93b5a09f8b41ec0c48e9fa3434a" prot="public" virt="virtual"><scope>nest::ConnParameter</scope><name>provides_long</name></member>
      <member refid="classnest_1_1_conn_parameter_1a13d36c79f25051910c1ffe937e31ab1b" prot="public" virt="virtual"><scope>nest::ConnParameter</scope><name>reset</name></member>
      <member refid="classnest_1_1_conn_parameter_1a07bb81308cbcd25b6766faa704680b50" prot="public" virt="virtual"><scope>nest::ConnParameter</scope><name>skip</name></member>
      <member refid="classnest_1_1_conn_parameter_1a891c9bf68a5c8f8f5416d090c4fc02f9" prot="public" virt="pure-virtual"><scope>nest::ConnParameter</scope><name>value_double</name></member>
      <member refid="classnest_1_1_conn_parameter_1a26c4ff5169680f2ba4a7c8a1694110f4" prot="public" virt="pure-virtual"><scope>nest::ConnParameter</scope><name>value_int</name></member>
      <member refid="classnest_1_1_conn_parameter_1ad56f5b8e66ba9cd627f5c0cdd05dfbb4" prot="public" virt="virtual"><scope>nest::ConnParameter</scope><name>~ConnParameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
