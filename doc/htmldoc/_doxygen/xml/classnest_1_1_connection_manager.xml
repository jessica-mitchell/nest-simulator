<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_connection_manager" kind="class" language="C++" prot="public">
    <compoundname>nest::ConnectionManager</compoundname>
    <basecompoundref refid="classnest_1_1_manager_interface" prot="public" virt="non-virtual">nest::ManagerInterface</basecompoundref>
    <includes refid="connection__manager_8h" local="no">connection_manager.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610" prot="public" static="no" strong="no">
        <type></type>
        <name>ConnectionType</name>
        <enumvalue id="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610ad00d494fd623af0e51b1b3b2cf447384" prot="public">
          <name>CONNECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610adbbce589f2b024525ff08b3f2701b253" prot="public">
          <name>CONNECT_FROM_DEVICE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610a2eea30660d09d0de9cb453132b7b14e6" prot="public">
          <name>CONNECT_TO_DEVICE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610a690fef92f99675616df1560392b420f8" prot="public">
          <name>NO_CONNECTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classnest_1_1_connection" kindref="compound">Connection</ref> type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="70" column="3" bodyfile="nestkernel/connection_manager.h" bodystart="71" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1_connection_manager_1a630a7fe19e19ffa310ad17522b70878e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class SimulationManager</definition>
        <argsstring></argsstring>
        <name>SimulationManager</name>
        <param>
          <type><ref refid="classnest_1_1_simulation_manager" kindref="compound">SimulationManager</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="65" column="3" bodyfile="nestkernel/connection_manager.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a66194774f828bbabf7d8c22e468ee6b7" prot="public" static="no" mutable="no">
        <type>Stopwatch</type>
        <definition>Stopwatch nest::ConnectionManager::sw_construction_connect</definition>
        <argsstring></argsstring>
        <name>sw_construction_connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="408" column="13" bodyfile="nestkernel/connection_manager.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a891084d77a6f4ae258c483126a0ab529" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_connector_base" kindref="compound">ConnectorBase</ref> * &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; ConnectorBase* &gt; &gt; nest::ConnectionManager::connections_</definition>
        <argsstring></argsstring>
        <name>connections_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to hold the <ref refid="classnest_1_1_connector" kindref="compound">Connector</ref> objects which in turn hold the connection information. Corresponds to a three dimensional structure: threads|synapses|connections </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="545" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1affe5d11d6eba3194383e20c22333fd47" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_source_table" kindref="compound">SourceTable</ref></type>
        <definition>SourceTable nest::ConnectionManager::source_table_</definition>
        <argsstring></argsstring>
        <name>source_table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to hold the node IDs of presynaptic neurons during postsynaptic connection creation, before the connection information has been transferred to the presynaptic side. Internally arranged in a 3d structure: threads|synapses|node IDs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="553" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a8fa616b7a33af0e3fa7071238507f75d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; <ref refid="classnest_1_1_spike_data" kindref="compound">SpikeData</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::vector&lt; SpikeData &gt; &gt; &gt; nest::ConnectionManager::compressed_spike_data_</definition>
        <argsstring></argsstring>
        <name>compressed_spike_data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to hold &quot;unpacked&quot; spikes on the postsynaptic side if spike compression is enabled. Internally arranged in a 3d structure: synapses|sources|spike data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="560" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1af9aeb3eb8125ed5cd414541de1eb1ee4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt; &gt; nest::ConnectionManager::secondary_recv_buffer_pos_</definition>
        <argsstring></argsstring>
        <name>secondary_recv_buffer_pos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores absolute position in receive buffer of secondary events. structure: threads|synapses|position </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="566" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a16254804fc3c63f33a1d7b5d220021dc" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref>, size_t &gt;</type>
        <definition>std::map&lt; index, size_t &gt; nest::ConnectionManager::buffer_pos_of_source_node_id_syn_id_</definition>
        <argsstring></argsstring>
        <name>buffer_pos_of_source_node_id_syn_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="568" column="12" bodyfile="nestkernel/connection_manager.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a9b26d39afa156f974081bd098aef6631" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_target_table" kindref="compound">TargetTable</ref></type>
        <definition>TargetTable nest::ConnectionManager::target_table_</definition>
        <argsstring></argsstring>
        <name>target_table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to hold the information about targets for each neuron on the presynaptic side. Internally arranged in a 3d structure: threads|localnodes|targets </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="575" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a9aa3c902d4dffe08db34d67fa85fe782" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_target_table_devices" kindref="compound">TargetTableDevices</ref></type>
        <definition>TargetTableDevices nest::ConnectionManager::target_table_devices_</definition>
        <argsstring></argsstring>
        <name>target_table_devices_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="577" column="22" bodyfile="nestkernel/connection_manager.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a0cf4c08656a0a7517f960cf1cafc9e4b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_delay_checker" kindref="compound">DelayChecker</ref> &gt;</type>
        <definition>std::vector&lt; DelayChecker &gt; nest::ConnectionManager::delay_checkers_</definition>
        <argsstring></argsstring>
        <name>delay_checkers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="579" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a0840641c0fc859a166e19769b648adf1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; size_t &gt; &gt; nest::ConnectionManager::num_connections_</definition>
        <argsstring></argsstring>
        <name>num_connections_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to count the number of synapses of a specific type. Arranged in a 2d structure: threads|synapsetypes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="585" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1af41015f9e5991b865353150024559109" prot="private" static="no" mutable="no">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::ConnectionManager::connruledict_</definition>
        <argsstring></argsstring>
        <name>connruledict_</name>
        <briefdescription>
<para>Dictionary for connection rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="587" column="19" bodyfile="nestkernel/connection_manager.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a6efcfb0fe9a1ca0e427c44410ae693ca" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1_generic_conn_builder_factory" kindref="compound">GenericConnBuilderFactory</ref> * &gt;</type>
        <definition>std::vector&lt; GenericConnBuilderFactory* &gt; nest::ConnectionManager::connbuilder_factories_</definition>
        <argsstring></argsstring>
        <name>connbuilder_factories_</name>
        <briefdescription>
<para><ref refid="classnest_1_1_conn_builder" kindref="compound">ConnBuilder</ref> factories, indexed by connruledict_ elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="590" column="15" bodyfile="nestkernel/connection_manager.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a9c7a1289a47ffa09024d22503041e298" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::ConnectionManager::min_delay_</definition>
        <argsstring></argsstring>
        <name>min_delay_</name>
        <briefdescription>
<para>Value of the smallest delay in the network. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="592" column="9" bodyfile="nestkernel/connection_manager.h" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a78fb1133abe9595a36ecc2ada3165094" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::ConnectionManager::max_delay_</definition>
        <argsstring></argsstring>
        <name>max_delay_</name>
        <briefdescription>
<para>Value of the largest delay in the network in steps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="594" column="9" bodyfile="nestkernel/connection_manager.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1aff1ad5dd0e38cc4dfc0824726869c682" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::keep_source_table_</definition>
        <argsstring></argsstring>
        <name>keep_source_table_</name>
        <briefdescription>
<para>Whether to keep source table after connection setup is complete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="597" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a5f01435a200b4dd2d94e889024058573" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::connections_have_changed_</definition>
        <argsstring></argsstring>
        <name>connections_have_changed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if new connections have been created since startup or last call to simulate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="601" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1ab44482fb59fd93aecf21015935134879" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::get_connections_has_been_called_</definition>
        <argsstring></argsstring>
        <name>get_connections_has_been_called_</name>
        <briefdescription>
<para>true if GetConnections has been called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="604" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a12e83697eae4fc161341ce621dea92cd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::sort_connections_by_source_</definition>
        <argsstring></argsstring>
        <name>sort_connections_by_source_</name>
        <briefdescription>
<para>Whether to sort connections by source node ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="607" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a2a697782b7c4b0f90b083c738a1e16d0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::use_compressed_spikes_</definition>
        <argsstring></argsstring>
        <name>use_compressed_spikes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether to use spike compression; if a neuron has targets on multiple threads of a process, this switch makes sure that only a single packet is sent to the process instead of one packet per target thread; requires sort_connections_by_source_ = true; for more details see the discussion and sketch in <ulink url="https://github.com/nest/nest-simulator/pull/1338">https://github.com/nest/nest-simulator/pull/1338</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="615" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1aafbbe49d9702b5333d6246a3c8a4ccec" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::has_primary_connections_</definition>
        <argsstring></argsstring>
        <name>has_primary_connections_</name>
        <briefdescription>
<para>Whether primary connections (spikes) exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="618" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1a2a24d66858291eaeffeaa51071896cda" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_per_thread_bool_indicator" kindref="compound">PerThreadBoolIndicator</ref></type>
        <definition>PerThreadBoolIndicator nest::ConnectionManager::check_primary_connections_</definition>
        <argsstring></argsstring>
        <name>check_primary_connections_</name>
        <briefdescription>
<para>Check for primary connections (spikes) on each thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="621" column="26" bodyfile="nestkernel/connection_manager.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1ac87b5903245da7dc5a97a83a0a9dd337" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::secondary_connections_exist_</definition>
        <argsstring></argsstring>
        <name>secondary_connections_exist_</name>
        <briefdescription>
<para>Whether secondary connections (e.g., gap junctions) exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="624" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1ad7a765be8ae016a9b59d9d7c3e872016" prot="private" static="no" mutable="no">
        <type><ref refid="classnest_1_1_per_thread_bool_indicator" kindref="compound">PerThreadBoolIndicator</ref></type>
        <definition>PerThreadBoolIndicator nest::ConnectionManager::check_secondary_connections_</definition>
        <argsstring></argsstring>
        <name>check_secondary_connections_</name>
        <briefdescription>
<para>Check for secondary connections (e.g., gap junctions) on each thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="627" column="26" bodyfile="nestkernel/connection_manager.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_connection_manager_1ab9a6d94398e5276021567b8862b9542e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double nest::ConnectionManager::stdp_eps_</definition>
        <argsstring></argsstring>
        <name>stdp_eps_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum distance between (double) spike times in STDP that is still considered 0. See issue #894 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="631" column="10" bodyfile="nestkernel/connection_manager.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ade81fa94b66593d08c5a7f3eab1519e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::ConnectionManager::ConnectionManager</definition>
        <argsstring>()</argsstring>
        <name>ConnectionManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="78" column="3" bodyfile="nestkernel/connection_manager.cpp" bodystart="63" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ab2b44ecf02b391848a5d2760676b1fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::ConnectionManager::~ConnectionManager</definition>
        <argsstring>() override</argsstring>
        <name>~ConnectionManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="79" column="3" bodyfile="nestkernel/connection_manager.cpp" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a95e1aed37d7c704e322fea89ac9dc705" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a43f881ab34500bff012a2514ad99ad79">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepare manager for operation.</para>
<para>After this method has completed, the manager should be completely initialized and &quot;ready for action&quot;.</para>
<para><simplesect kind="note"><para>Initialization of any given manager may depend on other managers having been initialized before. <ref refid="classnest_1_1_kernel_manager_1aa731562f03c98d8fa67f1d530056ede2" kindref="member">KernelManager::initialize()</ref> is responsible for calling the initialization routines on the specific managers in correct order.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_connection_manager_1a6a6d1b63381ca974f610f04e042b0ff2" kindref="member">finalize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="81" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="92" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a6a6d1b63381ca974f610f04e042b0ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="classnest_1_1_manager_interface_1a329d00818a7c57d2c7f9e83dbed56606">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take down manager after operation.</para>
<para>After this method has completed, all dynamic data structures created by the manager shall be deallocated and containers emptied. Plain variables need not be reset.</para>
<para><simplesect kind="note"><para>Finalization of any given manager may depend on other managers not having been finalized yet. <ref refid="classnest_1_1_kernel_manager_1a9e1cccd4670b1da1f68208afb5e6622f" kindref="member">KernelManager::finalize()</ref> is responsible for calling the initialization routines on the specific managers in correct order, i.e., the opposite order of <ref refid="classnest_1_1_connection_manager_1a95e1aed37d7c704e322fea89ac9dc705" kindref="member">initialize()</ref> calls.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnest_1_1_connection_manager_1a95e1aed37d7c704e322fea89ac9dc705" kindref="member">initialize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="82" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5ff7c49e14b799dfc160e679ae8e4d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::change_number_of_threads</definition>
        <argsstring>() override</argsstring>
        <name>change_number_of_threads</name>
        <reimplements refid="classnest_1_1_manager_interface_1aa88c28844a59b4791eab4b7930fc62b0">change_number_of_threads</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the number of threads</para>
<para>Many data structures within the different managers depend on the number of threads. This function is called on each manager upon a change of that number and allows the manager to re-allocate data structures accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="83" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a38567f7aefd520dae214065ed1816f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1ad940557204d456c167f541dd72c81193">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="84" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="153" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aede87b403fb22979e3f81b4fe546a3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_manager_interface_1a0935d5415eafd0bc54d2c01294595a80">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>dict</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="85" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="196" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a71579f9db00c8c3a995f4956036c001d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::valid_connection_rule</definition>
        <argsstring>(std::string)</argsstring>
        <name>valid_connection_rule</name>
        <param>
          <type>std::string</type>
          <defname>rule_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="87" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a4a305862071d9332c29fc4e675ada3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::compute_target_data_buffer_size</definition>
        <argsstring>()</argsstring>
        <name>compute_target_data_buffer_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="89" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1330" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a8b0dbf28a53e184b2f2c6e988e656435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::compute_compressed_secondary_recv_buffer_positions</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>compute_compressed_secondary_recv_buffer_positions</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="90" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1363" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a57a2748ae9ff0b986e6c8769ea2b4f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::collect_compressed_spike_data</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>collect_compressed_spike_data</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="91" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1653" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1abb7f1fdbcba9a1b2d67ebfdb28250160" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::clear_compressed_spike_data_map</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>clear_compressed_spike_data_map</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="92" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a0fe3b21a49179d12a2c7fec5346cfc3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classnest_1_1_conn_builder" kindref="compound">ConnBuilder</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nest::ConnectionManager::register_conn_builder</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>register_conn_builder</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a connectivity rule, i.e. the respective <ref refid="classnest_1_1_conn_builder_factory" kindref="compound">ConnBuilderFactory</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="98" column="8" bodyfile="nestkernel/connection_manager_impl.h" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a7724037fd623d6100e44b3ca7c0d737d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_conn_builder" kindref="compound">ConnBuilder</ref> *</type>
        <definition>nest::ConnBuilder * nest::ConnectionManager::get_conn_builder</definition>
        <argsstring>(const std::string &amp;name, NodeCollectionPTR sources, NodeCollectionPTR targets, const DictionaryDatum &amp;conn_spec, const std::vector&lt; DictionaryDatum &gt; &amp;syn_specs)</argsstring>
        <name>get_conn_builder</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>sources</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>targets</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>conn_spec</declname>
        </param>
        <param>
          <type>const std::vector&lt; DictionaryDatum &gt; &amp;</type>
          <declname>syn_specs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="100" column="15" bodyfile="nestkernel/connection_manager.cpp" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a719414132e35d4b6ffa6c2a636df92eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect</definition>
        <argsstring>(NodeCollectionPTR, NodeCollectionPTR, const DictionaryDatum &amp;, const std::vector&lt; DictionaryDatum &gt; &amp;)</argsstring>
        <name>connect</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>sources</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <defname>targets</defname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>conn_spec</defname>
        </param>
        <param>
          <type>const std::vector&lt; DictionaryDatum &gt; &amp;</type>
          <defname>syn_specs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="109" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="387" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a0594fd0c611ae17f9ebe921d0153e60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect</definition>
        <argsstring>(TokenArray, TokenArray, const DictionaryDatum &amp;)</argsstring>
        <name>connect</name>
        <param>
          <type>TokenArray</type>
          <defname>sources</defname>
        </param>
        <param>
          <type>TokenArray</type>
          <defname>targets</defname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>syn_spec</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="111" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="439" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a246f15c815e9ef17e6f18e9e9c58a1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect</definition>
        <argsstring>(const index snode_id, Node *target, thread target_thread, const synindex syn_id, const DictionaryDatum &amp;params, const double delay=numerics::nan, const double weight=numerics::nan)</argsstring>
        <name>connect</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>snode_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>target_thread</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delay</declname>
          <defval>numerics::nan</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>weight</declname>
          <defval>numerics::nan</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect two nodes. The source node is defined by its global ID. The target node is defined by the node. The connection is established on the thread/process that owns the target node.</para>
<para>The parameters delay and weight have the default value numerics::nan. numerics::nan is a special value, which describes double values that are not a number. If delay or weight is omitted in a connect call, numerics::nan indicates this and weight/delay are set only, if they are valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to target <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread that hosts the target node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_parameter" kindref="compound">Parameter</ref> dictionary to configure the synapse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay of the connection (in ms). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of the connection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="132" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="498" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1acc34cde58d51aec7495e813c76b48d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::connect</definition>
        <argsstring>(const index snode_id, const index target, const DictionaryDatum &amp;params, const synindex syn_id)</argsstring>
        <name>connect</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>snode_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect two nodes. The source and target nodes are defined by their global ID. The connection is established on the thread/process that owns the target node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snode_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>node ID of the target <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_parameter" kindref="compound">Parameter</ref> dictionary to configure the synapse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="150" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="530" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a4f5d4769f422431b7560df35af23867a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect_arrays</definition>
        <argsstring>(long *sources, long *targets, double *weights, double *delays, std::vector&lt; std::string &gt; &amp;p_keys, double *p_values, size_t n, std::string syn_model)</argsstring>
        <name>connect_arrays</name>
        <param>
          <type>long *</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>targets</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>delays</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>p_keys</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_values</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>syn_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="152" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="571" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a94262293e4f3635724ff15bba58b690f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>nest::index nest::ConnectionManager::find_connection</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index snode_id, const index tnode_id)</argsstring>
        <name>find_connection</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>snode_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>tnode_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="161" column="9" bodyfile="nestkernel/connection_manager.cpp" bodystart="840" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aa8f45ec27217524c07048f4c6601b146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::disconnect</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index snode_id, const index tnode_id)</argsstring>
        <name>disconnect</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>snode_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>tnode_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="163" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="865" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aef56ff34a0321cb40e4a13b5e3743323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610" kindref="member">ConnectionType</ref></type>
        <definition>nest::ConnectionManager::ConnectionType nest::ConnectionManager::connection_required</definition>
        <argsstring>(Node *&amp;source, Node *&amp;target, thread tid)</argsstring>
        <name>connection_required</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *&amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> *&amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a connection between the given source and target nodes can be established on the given thread with id tid.</para>
<para><simplesect kind="return"><para>The type of connection as ConnectionType if the connection should be made, ConnectionType::NO_CONNECTION otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="172" column="18" bodyfile="nestkernel/connection_manager.cpp" bodystart="1406" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a1906487a726e8f4bb4e65fe5868e4825" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>DictionaryDatum</type>
        <definition>DictionaryDatum nest::ConnectionManager::get_synapse_status</definition>
        <argsstring>(const index source_node_id, const index target_node_id, const thread tid, const synindex syn_id, const index lcid) const</argsstring>
        <name>get_synapse_status</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="175" column="19" bodyfile="nestkernel/connection_manager.cpp" bodystart="219" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a9b5dd166871f9902c15de576936dca8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::set_synapse_status</definition>
        <argsstring>(const index source_node_id, const index target_node_id, const thread tid, const synindex syn_id, const index lcid, const DictionaryDatum &amp;dict)</argsstring>
        <name>set_synapse_status</name>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>target_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="182" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="263" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a42095f521521f147812163a8b98ee96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ArrayDatum</type>
        <definition>ArrayDatum nest::ConnectionManager::get_connections</definition>
        <argsstring>(const DictionaryDatum &amp;params)</argsstring>
        <name>get_connections</name>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return connections between pairs of neurons. The params dictionary can have the following entries: &apos;source&apos; a token array with node IDs of source neurons. &apos;target&apos; a token array with node IDs of target neuron. If either of these does not exist, all neuron are used for the respective entry. &apos;synapse_model&apos; name of the synapse model, or all synapse models are searched. &apos;synapse_label&apos; label (long) of the synapse, or all synapses are searched. The function then iterates all entries in source and collects the connection IDs to all neurons in target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="203" column="14" bodyfile="nestkernel/connection_manager.cpp" bodystart="949" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aa02010a909e00e2a88ac9d5e51533e4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::get_connections</definition>
        <argsstring>(std::deque&lt; ConnectionID &gt; &amp;connectome, NodeCollectionPTR source, NodeCollectionPTR target, synindex syn_id, long synapse_label) const</argsstring>
        <name>get_connections</name>
        <param>
          <type>std::deque&lt; <ref refid="classnest_1_1_connection_i_d" kindref="compound">ConnectionID</ref> &gt; &amp;</type>
          <declname>connectome</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>long</type>
          <declname>synapse_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="205" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1069" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a60a983ed4638ecc02e7e3f0c73474e94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::ConnectionManager::get_num_connections</definition>
        <argsstring>() const</argsstring>
        <name>get_num_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of connections in the network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="214" column="10" bodyfile="nestkernel/connection_manager.cpp" bodystart="919" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ac62b33a788aeb12b0408ad6af4592576" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::ConnectionManager::get_num_connections</definition>
        <argsstring>(const synindex syn_id) const</argsstring>
        <name>get_num_connections</name>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of connections of this synapse type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="219" column="10" bodyfile="nestkernel/connection_manager.cpp" bodystart="934" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a7cc5104fcceb1b875d22ae6c9f0c2018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::get_sources</definition>
        <argsstring>(const std::vector&lt; index &gt; &amp;targets, const index syn_id, std::vector&lt; std::vector&lt; index &gt; &gt; &amp;sources)</argsstring>
        <name>get_sources</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>targets</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="222" column="3" bodyfile="nestkernel/connection_manager.cpp" bodystart="1268" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a6798d923ce597300f380d3e8bd864ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::get_targets</definition>
        <argsstring>(const std::vector&lt; index &gt; &amp;sources, const index syn_id, const std::string &amp;post_synaptic_element, std::vector&lt; std::vector&lt; index &gt; &gt; &amp;targets)</argsstring>
        <name>get_targets</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>post_synaptic_element</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt; &amp;</type>
          <declname>targets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="224" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1288" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a0cfb6daf412d75b2dafc09bab819a3b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classnest_1_1_target" kindref="compound">Target</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Target &gt; &amp; nest::ConnectionManager::get_remote_targets_of_local_node</definition>
        <argsstring>(const thread tid, const index lid) const</argsstring>
        <name>get_remote_targets_of_local_node</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="229" column="21" bodyfile="nestkernel/connection_manager.h" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1af756929ae281f12df3f395778207f1b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ConnectionManager::get_target_node_id</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index lcid) const</argsstring>
        <name>get_target_node_id</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="231" column="9" bodyfile="nestkernel/connection_manager.h" bodystart="813" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a3c6df98351b30307a7283fe2a3dbdf42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::get_device_connected</definition>
        <argsstring>(thread tid, index lcid) const</argsstring>
        <name>get_device_connected</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="233" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="819" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a831fe8bbe7a7f042a2add7c25a6c7906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::trigger_update_weight</definition>
        <argsstring>(const long vt_node_id, const std::vector&lt; spikecounter &gt; &amp;dopa_spikes, const double t_trig)</argsstring>
        <name>trigger_update_weight</name>
        <param>
          <type>const long</type>
          <declname>vt_node_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1spikecounter" kindref="compound">spikecounter</ref> &gt; &amp;</type>
          <declname>dopa_spikes</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t_trig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Triggered by volume transmitter in update. Triggeres updates for all connectors of dopamine synapses that are registered with the volume transmitter with node_id vt_node_id. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="240" column="3" bodyfile="nestkernel/connection_manager.cpp" bodystart="887" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a9ea22ac11166a9e3ed07638a9dd8a51f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::ConnectionManager::get_min_delay</definition>
        <argsstring>() const</argsstring>
        <name>get_min_delay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return minimal connection delay, which is precomputed by update_delay_extrema_(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="246" column="9" bodyfile="nestkernel/connection_manager.h" bodystart="641" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a4c78cbb86f7d3fc1204395e31c20ef5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a71a30fec90e57e114c45577d5294ce16" kindref="member">delay</ref></type>
        <definition>delay nest::ConnectionManager::get_max_delay</definition>
        <argsstring>() const</argsstring>
        <name>get_max_delay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return maximal connection delay, which is precomputed by update_delay_extrema_(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="252" column="9" bodyfile="nestkernel/connection_manager.h" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a0a1653bb70ca11e329d10e6355be549e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::get_user_set_delay_extrema</definition>
        <argsstring>() const</argsstring>
        <name>get_user_set_delay_extrema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="254" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="353" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aa4cf70c04f3993412ea928313a29b29a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::send</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index lcid, const std::vector&lt; ConnectorModel * &gt; &amp;cm, Event &amp;e)</argsstring>
        <name>send</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> * &gt; &amp;</type>
          <declname>cm</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="257" column="3" bodyfile="nestkernel/connection_manager.h" bodystart="825" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a33f3b39e92b74e442a3d7b708a4da9a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::send_to_devices</definition>
        <argsstring>(const thread tid, const index source_node_id, Event &amp;e)</argsstring>
        <name>send_to_devices</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send event e to all device targets of source source_node_id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="262" column="8" bodyfile="nestkernel/connection_manager_impl.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ad2ac475fde6e791711a2ed8c00bbb71b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::send_to_devices</definition>
        <argsstring>(const thread tid, const index source_node_id, SecondaryEvent &amp;e)</argsstring>
        <name>send_to_devices</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>source_node_id</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_secondary_event" kindref="compound">SecondaryEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="263" column="8" bodyfile="nestkernel/connection_manager_impl.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a97481546e161d8ac38d29da43914f5bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::send_from_device</definition>
        <argsstring>(const thread tid, const index ldid, Event &amp;e)</argsstring>
        <name>send_from_device</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>ldid</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send event e to all targets of source device ldid (local device id) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="268" column="8" bodyfile="nestkernel/connection_manager_impl.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1af322463684d9d9a6fe45c5e47602864f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::send_local</definition>
        <argsstring>(thread t, Node &amp;source, Event &amp;e)</argsstring>
        <name>send_local</name>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_event" kindref="compound">Event</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send event e to all targets of node source on thread t </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="273" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a38c4581862f4bbc6e43c83daaa2453a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::calibrate</definition>
        <argsstring>(const TimeConverter &amp;)</argsstring>
        <name>calibrate</name>
        <param>
          <type>const <ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref> &amp;</type>
          <defname>tc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the structures for the <ref refid="classnest_1_1_connector" kindref="compound">Connector</ref> objects if necessary. This function should be called after number of threads, min_delay, max_delay, and time representation have been changed in the scheduler. The <ref refid="classnest_1_1_time_converter" kindref="compound">TimeConverter</ref> is used to convert times from the old to the new representation. It is also forwarding the calibration request to all <ref refid="classnest_1_1_connector_model" kindref="compound">ConnectorModel</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="283" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="378" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a13545535bee9810548166d5d8606cbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_delay_checker" kindref="compound">DelayChecker</ref> &amp;</type>
        <definition>nest::DelayChecker &amp; nest::ConnectionManager::get_delay_checker</definition>
        <argsstring>()</argsstring>
        <name>get_delay_checker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the delay checker for the current thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="288" column="16" bodyfile="nestkernel/connection_manager.cpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a7f6b0c0c8ba2248ec530438ff56a29f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::clean_source_table</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>clean_source_table</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Removes processed entries from source table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="291" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="653" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a8d6d8762799a09dff63b1113545d86a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::clear_source_table</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>clear_source_table</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Clears all entries in source table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="294" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="662" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a9c2cc2a65db2f3127cac1f9e87c4013b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::get_keep_source_table</definition>
        <argsstring>() const</argsstring>
        <name>get_keep_source_table</name>
        <briefdescription>
<para>Returns true if source table is kept after building network. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="297" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="671" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5c99a2b3039275d1c595ad602f8e0885" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::is_source_table_cleared</definition>
        <argsstring>() const</argsstring>
        <name>is_source_table_cleared</name>
        <briefdescription>
<para>Returns true if source table was cleared. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="300" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ac45e1f5b8cf6a5a40ec328ea0f3df5cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::prepare_target_table</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>prepare_target_table</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="302" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="725" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a8ac8d6d68a9cde77289adee0f18bb03c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::resize_target_table_devices_to_number_of_neurons</definition>
        <argsstring>()</argsstring>
        <name>resize_target_table_devices_to_number_of_neurons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="304" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="683" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a7c615b8040991ef941ed79f1da616e62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::resize_target_table_devices_to_number_of_synapse_types</definition>
        <argsstring>()</argsstring>
        <name>resize_target_table_devices_to_number_of_synapse_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="306" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a6e6a71cb780307b44a72a053037535de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::get_next_target_data</definition>
        <argsstring>(const thread tid, const thread rank_start, const thread rank_end, thread &amp;target_rank, TargetData &amp;next_target_data)</argsstring>
        <name>get_next_target_data</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>rank_start</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>rank_end</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref> &amp;</type>
          <declname>target_rank</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_target_data" kindref="compound">TargetData</ref> &amp;</type>
          <declname>next_target_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="308" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="749" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ab5370350364d70612b51ff75843f09b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::reject_last_target_data</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>reject_last_target_data</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="314" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="695" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ab574046af21302553e4282e9bc3bb839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::save_source_table_entry_point</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>save_source_table_entry_point</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="316" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a92128e48714ee59e21d5d744486598a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::reset_source_table_entry_point</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>reset_source_table_entry_point</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="318" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="713" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ac7738820d617ad9c911ab5740447aa5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::restore_source_table_entry_point</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>restore_source_table_entry_point</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="320" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="719" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a0ae6d51f023edf647d62319a161fe66c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::add_target</definition>
        <argsstring>(const thread tid, const thread target_rank, const TargetData &amp;target_data)</argsstring>
        <name>add_target</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>target_rank</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_target_data" kindref="compound">TargetData</ref> &amp;</type>
          <declname>target_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="322" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="743" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5bb5c7c10d785adab6ce6355ec8b59d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::get_sort_connections_by_source</definition>
        <argsstring>() const</argsstring>
        <name>get_sort_connections_by_source</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return sort_connections_by_source_, which indicates whether connections_ and source_table_ should be sorted according to source node ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="329" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="795" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a89ece61ab9b21dd3001e0096414cabbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::use_compressed_spikes</definition>
        <argsstring>() const</argsstring>
        <name>use_compressed_spikes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="331" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="801" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ae24f61147ce5ba965b04a07f6beda83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::sort_connections</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>sort_connections</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts connections in the presynaptic infrastructure by increasing source node ID. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="337" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1313" bodyend="1327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1acdc6d59644cf4450445a384e4ca9af85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::remove_disabled_connections</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>remove_disabled_connections</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes disabled connections (of structural plasticity) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="342" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1580" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5b30bf975871a4394bcebd9e677c4c8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::connections_have_changed</definition>
        <argsstring>() const</argsstring>
        <name>connections_have_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if connection information needs to be communicated. False otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="348" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a364992a5aca6c29407e9ed0d97ec766b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::set_connections_have_changed</definition>
        <argsstring>()</argsstring>
        <name>set_connections_have_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets flag indicating whether connection information needs to be communicated to true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="354" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1629" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aff0901b4652d3a6eb85d252f432739af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::unset_connections_have_changed</definition>
        <argsstring>()</argsstring>
        <name>unset_connections_have_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets flag indicating whether connection information needs to be communicated to false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="360" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1646" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a43d18405dd8d80fce53fe9c58b52d233" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::restructure_connection_tables</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>restructure_connection_tables</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes <ref refid="classnest_1_1_target_table" kindref="compound">TargetTable</ref> and resets processed flags of <ref refid="classnest_1_1_source_table" kindref="compound">SourceTable</ref>. This function must be called if connections are created after connections have been communicated previously. It basically restores the connection infrastructure to a state where all information only exists on the postsynaptic side. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="369" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="835" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a9d4d94383f51c20182969117ad43f0d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::set_source_has_more_targets</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index lcid, const bool more_targets)</argsstring>
        <name>set_source_has_more_targets</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>more_targets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="372" column="3" bodyfile="nestkernel/connection_manager.h" bodystart="843" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a72cc51766e2587d82850590d5cb423db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::no_targets_to_process</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>no_targets_to_process</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="374" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="707" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a024b7baa6a5dec791de66996f0a245b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; size_t &gt; &amp;</type>
        <definition>const std::vector&lt; size_t &gt; &amp; nest::ConnectionManager::get_secondary_send_buffer_positions</definition>
        <argsstring>(const thread tid, const index lid, const synindex syn_id) const</argsstring>
        <name>get_secondary_send_buffer_positions</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="377" column="3" bodyfile="nestkernel/connection_manager.h" bodystart="759" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a49fc9b9c2fdbfac802bdf440dc172d22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::ConnectionManager::get_secondary_recv_buffer_position</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index lcid) const</argsstring>
        <name>get_secondary_recv_buffer_position</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns read position in MPI receive buffer for secondary connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="382" column="10" bodyfile="nestkernel/connection_manager.h" bodystart="765" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a47d174cc3f78508f825c44806b4bf247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::deliver_secondary_events</definition>
        <argsstring>(const thread tid, const bool called_from_wfr_update, std::vector&lt; unsigned int &gt; &amp;recv_buffer)</argsstring>
        <name>deliver_secondary_events</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>called_from_wfr_update</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>recv_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="384" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1527" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5af006c2effaaa723d63c89e791606b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::compress_secondary_send_buffer_pos</definition>
        <argsstring>(const thread tid)</argsstring>
        <name>compress_secondary_send_buffer_pos</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="388" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1574" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ad424a6e28fe6a4b7f2b8c2363d38352e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::resize_connections</definition>
        <argsstring>()</argsstring>
        <name>resize_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="390" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1600" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ada2a71610370c6802f330191a06e7815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::sync_has_primary_connections</definition>
        <argsstring>()</argsstring>
        <name>sync_has_primary_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="392" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1617" bodyend="1620"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a87618f444ba424475cf5dcc434bde8af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::check_secondary_connections_exist</definition>
        <argsstring>()</argsstring>
        <name>check_secondary_connections_exist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="394" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1623" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a9e4157472a06f656acf385482e1076d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::has_primary_connections</definition>
        <argsstring>() const</argsstring>
        <name>has_primary_connections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="396" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="783" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5becb115b1c13104297a06e52c4ff8e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nest::ConnectionManager::secondary_connections_exist</definition>
        <argsstring>() const</argsstring>
        <name>secondary_connections_exist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="398" column="8" bodyfile="nestkernel/connection_manager.h" bodystart="789" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aad101bf62f3cedecd89c38b1c756a2f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
        <definition>index nest::ConnectionManager::get_source_node_id</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index lcid)</argsstring>
        <name>get_source_node_id</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="400" column="9" bodyfile="nestkernel/connection_manager.h" bodystart="777" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a23712fd1cbe62b5a0b447b49894d181f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::ConnectionManager::get_stdp_eps</definition>
        <argsstring>() const</argsstring>
        <name>get_stdp_eps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="402" column="10" bodyfile="nestkernel/connection_manager.h" bodystart="807" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5f6137160880e15f4d05c5b9f42dd0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::set_stdp_eps</definition>
        <argsstring>(const double stdp_eps)</argsstring>
        <name>set_stdp_eps</name>
        <param>
          <type>const double</type>
          <declname>stdp_eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="404" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1498" bodyend="1522"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1af19370bb7e9945157e9af4c89b3d8b8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classnest_1_1_spike_data" kindref="compound">SpikeData</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; SpikeData &gt; &amp; nest::ConnectionManager::get_compressed_spike_data</definition>
        <argsstring>(const synindex syn_id, const index idx)</argsstring>
        <name>get_compressed_spike_data</name>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="410" column="21" bodyfile="nestkernel/connection_manager.h" bodystart="852" bodyend="855"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1_connection_manager_1ab7b70a03df8e44f34b72415e42138459" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::ConnectionManager::get_num_target_data</definition>
        <argsstring>(const thread tid) const</argsstring>
        <name>get_num_target_data</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="413" column="10" bodyfile="nestkernel/connection_manager.cpp" bodystart="905" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a6a01c2fb98684250820184439034af7d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nest::ConnectionManager::get_num_connections_</definition>
        <argsstring>(const thread tid, const synindex syn_id) const</argsstring>
        <name>get_num_connections_</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="415" column="10" bodyfile="nestkernel/connection_manager.h" bodystart="771" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a42d9e236f58179ada7e7e77de0ee1ce5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::get_source_node_ids_</definition>
        <argsstring>(const thread tid, const synindex syn_id, const index tnode_id, std::vector&lt; index &gt; &amp;sources)</argsstring>
        <name>get_source_node_ids_</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>tnode_id</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="418" column="3" bodyfile="nestkernel/connection_manager.cpp" bodystart="1254" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a5a764e628f02ad0ed9cd088428ec9c84" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::split_to_neuron_device_vectors_</definition>
        <argsstring>(const thread tid, NodeCollectionPTR nodecollection, std::vector&lt; index &gt; &amp;neuron_node_ids, std::vector&lt; index &gt; &amp;device_node_ids) const</argsstring>
        <name>split_to_neuron_device_vectors_</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>nodecollection</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>neuron_node_ids</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>device_node_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits a TokenArray of node IDs to two vectors containing node IDs of neurons and node IDs of devices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="424" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="1044" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1adb41052adde337156940c1cccb0dd157" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::update_delay_extrema_</definition>
        <argsstring>()</argsstring>
        <name>update_delay_extrema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update delay extrema to current values.</para>
<para>Static since it only operates in static variables. This allows it to be called from const-method <ref refid="classnest_1_1_connection_manager_1aede87b403fb22979e3f81b4fe546a3ad" kindref="member">get_status()</ref> as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="435" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="464" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a1daef49b8fa81d3c402aeea866b4835a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>const nest::Time nest::ConnectionManager::get_min_delay_time_</definition>
        <argsstring>() const</argsstring>
        <name>get_min_delay_time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method queries and finds the minimum delay of all local connections </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="441" column="14" bodyfile="nestkernel/connection_manager.cpp" bodystart="325" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a649c22cf8e4dd6eebfe6db96b12dd853" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_time" kindref="compound">Time</ref></type>
        <definition>const nest::Time nest::ConnectionManager::get_max_delay_time_</definition>
        <argsstring>() const</argsstring>
        <name>get_max_delay_time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method queries and finds the maximum delay of all local connections </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="447" column="14" bodyfile="nestkernel/connection_manager.cpp" bodystart="339" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a4cf2d976777b5f79e5ec8d6d624ec876" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::delete_connections_</definition>
        <argsstring>()</argsstring>
        <name>delete_connections_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes all connections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="452" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="313" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a199080ea2054e8a1f9282c6201eec278" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect_</definition>
        <argsstring>(Node &amp;source, Node &amp;target, const index s_node_id, const thread tid, const synindex syn_id, const DictionaryDatum &amp;params, const double delay=numerics::nan, const double weight=numerics::nan)</argsstring>
        <name>connect_</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>s_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delay</declname>
          <defval>numerics::nan</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>weight</declname>
          <defval>numerics::nan</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>connect_ is used to establish a connection between a sender and receiving node which both have proxies.</para>
<para>The parameters delay and weight have the default value numerics::nan. numerics::nan is a special value, which describes double values that are not a number. If delay or weight is omitted in an connect call, numerics::nan indicates this and weight/delay are set only, if they are valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The node ID of the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread of the target node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameters for the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The delay of the connection (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>The weight of the connection (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="473" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="746" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1aa5710ab323a532a27a3bab6d7e0157e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect_to_device_</definition>
        <argsstring>(Node &amp;source, Node &amp;target, const index s_node_id, const thread tid, const synindex syn_id, const DictionaryDatum &amp;params, const double delay=NAN, const double weight=NAN)</argsstring>
        <name>connect_to_device_</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>s_node_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delay</declname>
          <defval>NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>weight</declname>
          <defval>NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>connect_to_device_ is used to establish a connection between a sender and receiving node if the sender has proxies, and the receiver does not.</para>
<para>The parameters delay and weight have the default value NAN. NAN is a special value in cmath, which describes double values that are not a number. If delay or weight is omitted in an connect call, NAN indicates this and weight/delay are set only, if they are valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The node ID of the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread of the target node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameters for the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The delay of the connection (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>The weight of the connection (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="500" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="792" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a6402a1c2012d07ae43e862f6215a43c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::connect_from_device_</definition>
        <argsstring>(Node &amp;source, Node &amp;target, const thread tid, const synindex syn_id, const DictionaryDatum &amp;params, const double delay=NAN, const double weight=NAN)</argsstring>
        <name>connect_from_device_</name>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delay</declname>
          <defval>NAN</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>weight</declname>
          <defval>NAN</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>connect_from_device_ is used to establish a connection between a sender and receiving node if the sender does not have proxies.</para>
<para>The parameters delay and weight have the default value NAN. NAN is a special value in cmath, which describes double values that are not a number. If delay or weight is omitted in an connect call, NAN indicates this and weight/delay are set only, if they are valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the receiving <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The node ID of the sending <ref refid="classnest_1_1_node" kindref="compound">Node</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread of the target node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syn_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The synapse model to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameters for the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The delay of the connection (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>The weight of the connection (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="527" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="808" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_connection_manager_1a785e13b8c24a23dfe161fb50df4ce94f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::ConnectionManager::increase_connection_count</definition>
        <argsstring>(const thread tid, const synindex syn_id)</argsstring>
        <name>increase_connection_count</name>
        <param>
          <type>const <ref refid="namespacenest_1ab32ecb34347794894e38197ccec56813" kindref="member">thread</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increases the connection count. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/connection_manager.h" line="538" column="8" bodyfile="nestkernel/connection_manager.cpp" bodystart="823" bodyend="837"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
      <node id="1">
        <label>nest::ConnectionManager</label>
        <link refid="classnest_1_1_connection_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::ManagerInterface</label>
        <link refid="classnest_1_1_manager_interface"/>
      </node>
      <node id="1">
        <label>nest::ConnectionManager</label>
        <link refid="classnest_1_1_connection_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/connection_manager.h" line="63" column="1" bodyfile="nestkernel/connection_manager.h" bodystart="64" bodyend="632"/>
    <listofallmembers>
      <member refid="classnest_1_1_connection_manager_1a0ae6d51f023edf647d62319a161fe66c" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>add_target</name></member>
      <member refid="classnest_1_1_connection_manager_1a16254804fc3c63f33a1d7b5d220021dc" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>buffer_pos_of_source_node_id_syn_id_</name></member>
      <member refid="classnest_1_1_connection_manager_1a38c4581862f4bbc6e43c83daaa2453a2" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>calibrate</name></member>
      <member refid="classnest_1_1_connection_manager_1a5ff7c49e14b799dfc160e679ae8e4d54" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>change_number_of_threads</name></member>
      <member refid="classnest_1_1_connection_manager_1a2a24d66858291eaeffeaa51071896cda" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>check_primary_connections_</name></member>
      <member refid="classnest_1_1_connection_manager_1ad7a765be8ae016a9b59d9d7c3e872016" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>check_secondary_connections_</name></member>
      <member refid="classnest_1_1_connection_manager_1a87618f444ba424475cf5dcc434bde8af" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>check_secondary_connections_exist</name></member>
      <member refid="classnest_1_1_connection_manager_1a7f6b0c0c8ba2248ec530438ff56a29f0" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>clean_source_table</name></member>
      <member refid="classnest_1_1_manager_interface_1a883efc8a7266a9bc62d43e30cdd87147" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>cleanup</name></member>
      <member refid="classnest_1_1_connection_manager_1abb7f1fdbcba9a1b2d67ebfdb28250160" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>clear_compressed_spike_data_map</name></member>
      <member refid="classnest_1_1_connection_manager_1a8d6d8762799a09dff63b1113545d86a1" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>clear_source_table</name></member>
      <member refid="classnest_1_1_connection_manager_1a57a2748ae9ff0b986e6c8769ea2b4f06" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>collect_compressed_spike_data</name></member>
      <member refid="classnest_1_1_connection_manager_1a5af006c2effaaa723d63c89e791606b1" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>compress_secondary_send_buffer_pos</name></member>
      <member refid="classnest_1_1_connection_manager_1a8fa616b7a33af0e3fa7071238507f75d" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>compressed_spike_data_</name></member>
      <member refid="classnest_1_1_connection_manager_1a8b0dbf28a53e184b2f2c6e988e656435" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>compute_compressed_secondary_recv_buffer_positions</name></member>
      <member refid="classnest_1_1_connection_manager_1a4a305862071d9332c29fc4e675ada3f3" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>compute_target_data_buffer_size</name></member>
      <member refid="classnest_1_1_connection_manager_1a6efcfb0fe9a1ca0e427c44410ae693ca" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connbuilder_factories_</name></member>
      <member refid="classnest_1_1_connection_manager_1a719414132e35d4b6ffa6c2a636df92eb" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect</name></member>
      <member refid="classnest_1_1_connection_manager_1a0594fd0c611ae17f9ebe921d0153e60a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect</name></member>
      <member refid="classnest_1_1_connection_manager_1a246f15c815e9ef17e6f18e9e9c58a1fd" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect</name></member>
      <member refid="classnest_1_1_connection_manager_1acc34cde58d51aec7495e813c76b48d32" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect</name></member>
      <member refid="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610ad00d494fd623af0e51b1b3b2cf447384" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>CONNECT</name></member>
      <member refid="classnest_1_1_connection_manager_1a199080ea2054e8a1f9282c6201eec278" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect_</name></member>
      <member refid="classnest_1_1_connection_manager_1a4f5d4769f422431b7560df35af23867a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect_arrays</name></member>
      <member refid="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610adbbce589f2b024525ff08b3f2701b253" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>CONNECT_FROM_DEVICE</name></member>
      <member refid="classnest_1_1_connection_manager_1a6402a1c2012d07ae43e862f6215a43c3" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect_from_device_</name></member>
      <member refid="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610a2eea30660d09d0de9cb453132b7b14e6" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>CONNECT_TO_DEVICE</name></member>
      <member refid="classnest_1_1_connection_manager_1aa5710ab323a532a27a3bab6d7e0157e0" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connect_to_device_</name></member>
      <member refid="classnest_1_1_connection_manager_1aef56ff34a0321cb40e4a13b5e3743323" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connection_required</name></member>
      <member refid="classnest_1_1_connection_manager_1ade81fa94b66593d08c5a7f3eab1519e2" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>ConnectionManager</name></member>
      <member refid="classnest_1_1_connection_manager_1a891084d77a6f4ae258c483126a0ab529" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connections_</name></member>
      <member refid="classnest_1_1_connection_manager_1a5b30bf975871a4394bcebd9e677c4c8c" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connections_have_changed</name></member>
      <member refid="classnest_1_1_connection_manager_1a5f01435a200b4dd2d94e889024058573" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connections_have_changed_</name></member>
      <member refid="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>ConnectionType</name></member>
      <member refid="classnest_1_1_connection_manager_1af41015f9e5991b865353150024559109" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>connruledict_</name></member>
      <member refid="classnest_1_1_connection_manager_1a0cf4c08656a0a7517f960cf1cafc9e4b" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>delay_checkers_</name></member>
      <member refid="classnest_1_1_connection_manager_1a4cf2d976777b5f79e5ec8d6d624ec876" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>delete_connections_</name></member>
      <member refid="classnest_1_1_connection_manager_1a47d174cc3f78508f825c44806b4bf247" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>deliver_secondary_events</name></member>
      <member refid="classnest_1_1_connection_manager_1aa8f45ec27217524c07048f4c6601b146" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>disconnect</name></member>
      <member refid="classnest_1_1_connection_manager_1a6a6d1b63381ca974f610f04e042b0ff2" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>finalize</name></member>
      <member refid="classnest_1_1_connection_manager_1a94262293e4f3635724ff15bba58b690f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>find_connection</name></member>
      <member refid="classnest_1_1_connection_manager_1af19370bb7e9945157e9af4c89b3d8b8a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_compressed_spike_data</name></member>
      <member refid="classnest_1_1_connection_manager_1a7724037fd623d6100e44b3ca7c0d737d" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_conn_builder</name></member>
      <member refid="classnest_1_1_connection_manager_1a42095f521521f147812163a8b98ee96f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1aa02010a909e00e2a88ac9d5e51533e4a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1ab44482fb59fd93aecf21015935134879" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_connections_has_been_called_</name></member>
      <member refid="classnest_1_1_connection_manager_1a13545535bee9810548166d5d8606cbfc" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_delay_checker</name></member>
      <member refid="classnest_1_1_connection_manager_1a3c6df98351b30307a7283fe2a3dbdf42" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_device_connected</name></member>
      <member refid="classnest_1_1_connection_manager_1a9c2cc2a65db2f3127cac1f9e87c4013b" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_keep_source_table</name></member>
      <member refid="classnest_1_1_connection_manager_1a4c78cbb86f7d3fc1204395e31c20ef5a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_max_delay</name></member>
      <member refid="classnest_1_1_connection_manager_1a649c22cf8e4dd6eebfe6db96b12dd853" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_max_delay_time_</name></member>
      <member refid="classnest_1_1_connection_manager_1a9ea22ac11166a9e3ed07638a9dd8a51f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_min_delay</name></member>
      <member refid="classnest_1_1_connection_manager_1a1daef49b8fa81d3c402aeea866b4835a" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_min_delay_time_</name></member>
      <member refid="classnest_1_1_connection_manager_1a6e6a71cb780307b44a72a053037535de" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_next_target_data</name></member>
      <member refid="classnest_1_1_connection_manager_1a60a983ed4638ecc02e7e3f0c73474e94" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_num_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1ac62b33a788aeb12b0408ad6af4592576" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_num_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1a6a01c2fb98684250820184439034af7d" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_num_connections_</name></member>
      <member refid="classnest_1_1_connection_manager_1ab7b70a03df8e44f34b72415e42138459" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_num_target_data</name></member>
      <member refid="classnest_1_1_connection_manager_1a0cfb6daf412d75b2dafc09bab819a3b1" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_remote_targets_of_local_node</name></member>
      <member refid="classnest_1_1_connection_manager_1a49fc9b9c2fdbfac802bdf440dc172d22" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_secondary_recv_buffer_position</name></member>
      <member refid="classnest_1_1_connection_manager_1a024b7baa6a5dec791de66996f0a245b9" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_secondary_send_buffer_positions</name></member>
      <member refid="classnest_1_1_connection_manager_1a5bb5c7c10d785adab6ce6355ec8b59d8" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_sort_connections_by_source</name></member>
      <member refid="classnest_1_1_connection_manager_1aad101bf62f3cedecd89c38b1c756a2f8" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_source_node_id</name></member>
      <member refid="classnest_1_1_connection_manager_1a42d9e236f58179ada7e7e77de0ee1ce5" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_source_node_ids_</name></member>
      <member refid="classnest_1_1_connection_manager_1a7cc5104fcceb1b875d22ae6c9f0c2018" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_sources</name></member>
      <member refid="classnest_1_1_connection_manager_1aede87b403fb22979e3f81b4fe546a3ad" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>get_status</name></member>
      <member refid="classnest_1_1_connection_manager_1a23712fd1cbe62b5a0b447b49894d181f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_stdp_eps</name></member>
      <member refid="classnest_1_1_connection_manager_1a1906487a726e8f4bb4e65fe5868e4825" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_synapse_status</name></member>
      <member refid="classnest_1_1_connection_manager_1af756929ae281f12df3f395778207f1b6" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_target_node_id</name></member>
      <member refid="classnest_1_1_connection_manager_1a6798d923ce597300f380d3e8bd864ba4" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_targets</name></member>
      <member refid="classnest_1_1_connection_manager_1a0a1653bb70ca11e329d10e6355be549e" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>get_user_set_delay_extrema</name></member>
      <member refid="classnest_1_1_connection_manager_1a9e4157472a06f656acf385482e1076d3" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>has_primary_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1aafbbe49d9702b5333d6246a3c8a4ccec" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>has_primary_connections_</name></member>
      <member refid="classnest_1_1_connection_manager_1a785e13b8c24a23dfe161fb50df4ce94f" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>increase_connection_count</name></member>
      <member refid="classnest_1_1_connection_manager_1a95e1aed37d7c704e322fea89ac9dc705" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>initialize</name></member>
      <member refid="classnest_1_1_connection_manager_1a5c99a2b3039275d1c595ad602f8e0885" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>is_source_table_cleared</name></member>
      <member refid="classnest_1_1_connection_manager_1aff1ad5dd0e38cc4dfc0824726869c682" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>keep_source_table_</name></member>
      <member refid="classnest_1_1_manager_interface_1aeb056937c69d73ba501bab2fb371a56c" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_manager_interface_1af07ff595521c144ddb81899fec66e251" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>ManagerInterface</name></member>
      <member refid="classnest_1_1_connection_manager_1a78fb1133abe9595a36ecc2ada3165094" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>max_delay_</name></member>
      <member refid="classnest_1_1_connection_manager_1a9c7a1289a47ffa09024d22503041e298" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>min_delay_</name></member>
      <member refid="classnest_1_1_connection_manager_1a7e693e6fd53d9d845742d1e53d86e610a690fef92f99675616df1560392b420f8" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>NO_CONNECTION</name></member>
      <member refid="classnest_1_1_connection_manager_1a72cc51766e2587d82850590d5cb423db" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>no_targets_to_process</name></member>
      <member refid="classnest_1_1_connection_manager_1a0840641c0fc859a166e19769b648adf1" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>num_connections_</name></member>
      <member refid="classnest_1_1_manager_interface_1a9889d8ee2a6bd5f1799e86aed555db5e" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>operator=</name></member>
      <member refid="classnest_1_1_manager_interface_1a7a0e8989a48de50b52631e87ed3f2745" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>prepare</name></member>
      <member refid="classnest_1_1_connection_manager_1ac45e1f5b8cf6a5a40ec328ea0f3df5cb" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>prepare_target_table</name></member>
      <member refid="classnest_1_1_connection_manager_1a0fe3b21a49179d12a2c7fec5346cfc3a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>register_conn_builder</name></member>
      <member refid="classnest_1_1_connection_manager_1ab5370350364d70612b51ff75843f09b3" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>reject_last_target_data</name></member>
      <member refid="classnest_1_1_connection_manager_1acdc6d59644cf4450445a384e4ca9af85" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>remove_disabled_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1a92128e48714ee59e21d5d744486598a5" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>reset_source_table_entry_point</name></member>
      <member refid="classnest_1_1_connection_manager_1ad424a6e28fe6a4b7f2b8c2363d38352e" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>resize_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1a8ac8d6d68a9cde77289adee0f18bb03c" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>resize_target_table_devices_to_number_of_neurons</name></member>
      <member refid="classnest_1_1_connection_manager_1a7c615b8040991ef941ed79f1da616e62" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>resize_target_table_devices_to_number_of_synapse_types</name></member>
      <member refid="classnest_1_1_connection_manager_1ac7738820d617ad9c911ab5740447aa5f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>restore_source_table_entry_point</name></member>
      <member refid="classnest_1_1_connection_manager_1a43d18405dd8d80fce53fe9c58b52d233" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>restructure_connection_tables</name></member>
      <member refid="classnest_1_1_connection_manager_1ab574046af21302553e4282e9bc3bb839" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>save_source_table_entry_point</name></member>
      <member refid="classnest_1_1_connection_manager_1a5becb115b1c13104297a06e52c4ff8e2" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>secondary_connections_exist</name></member>
      <member refid="classnest_1_1_connection_manager_1ac87b5903245da7dc5a97a83a0a9dd337" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>secondary_connections_exist_</name></member>
      <member refid="classnest_1_1_connection_manager_1af9aeb3eb8125ed5cd414541de1eb1ee4" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>secondary_recv_buffer_pos_</name></member>
      <member refid="classnest_1_1_connection_manager_1aa4cf70c04f3993412ea928313a29b29a" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>send</name></member>
      <member refid="classnest_1_1_connection_manager_1a97481546e161d8ac38d29da43914f5bf" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>send_from_device</name></member>
      <member refid="classnest_1_1_connection_manager_1af322463684d9d9a6fe45c5e47602864f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>send_local</name></member>
      <member refid="classnest_1_1_connection_manager_1a33f3b39e92b74e442a3d7b708a4da9a1" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>send_to_devices</name></member>
      <member refid="classnest_1_1_connection_manager_1ad2ac475fde6e791711a2ed8c00bbb71b" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>send_to_devices</name></member>
      <member refid="classnest_1_1_connection_manager_1a364992a5aca6c29407e9ed0d97ec766b" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>set_connections_have_changed</name></member>
      <member refid="classnest_1_1_connection_manager_1a9d4d94383f51c20182969117ad43f0d5" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>set_source_has_more_targets</name></member>
      <member refid="classnest_1_1_connection_manager_1a38567f7aefd520dae214065ed1816f98" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>set_status</name></member>
      <member refid="classnest_1_1_connection_manager_1a5f6137160880e15f4d05c5b9f42dd0c0" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>set_stdp_eps</name></member>
      <member refid="classnest_1_1_connection_manager_1a9b5dd166871f9902c15de576936dca8f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>set_synapse_status</name></member>
      <member refid="classnest_1_1_connection_manager_1a630a7fe19e19ffa310ad17522b70878e" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>SimulationManager</name></member>
      <member refid="classnest_1_1_connection_manager_1ae24f61147ce5ba965b04a07f6beda83f" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>sort_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1a12e83697eae4fc161341ce621dea92cd" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>sort_connections_by_source_</name></member>
      <member refid="classnest_1_1_connection_manager_1affe5d11d6eba3194383e20c22333fd47" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>source_table_</name></member>
      <member refid="classnest_1_1_connection_manager_1a5a764e628f02ad0ed9cd088428ec9c84" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>split_to_neuron_device_vectors_</name></member>
      <member refid="classnest_1_1_connection_manager_1ab9a6d94398e5276021567b8862b9542e" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>stdp_eps_</name></member>
      <member refid="classnest_1_1_connection_manager_1a66194774f828bbabf7d8c22e468ee6b7" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>sw_construction_connect</name></member>
      <member refid="classnest_1_1_connection_manager_1ada2a71610370c6802f330191a06e7815" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>sync_has_primary_connections</name></member>
      <member refid="classnest_1_1_connection_manager_1a9b26d39afa156f974081bd098aef6631" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>target_table_</name></member>
      <member refid="classnest_1_1_connection_manager_1a9aa3c902d4dffe08db34d67fa85fe782" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>target_table_devices_</name></member>
      <member refid="classnest_1_1_connection_manager_1a831fe8bbe7a7f042a2add7c25a6c7906" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>trigger_update_weight</name></member>
      <member refid="classnest_1_1_connection_manager_1aff0901b4652d3a6eb85d252f432739af" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>unset_connections_have_changed</name></member>
      <member refid="classnest_1_1_connection_manager_1adb41052adde337156940c1cccb0dd157" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>update_delay_extrema_</name></member>
      <member refid="classnest_1_1_connection_manager_1a89ece61ab9b21dd3001e0096414cabbd" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>use_compressed_spikes</name></member>
      <member refid="classnest_1_1_connection_manager_1a2a697782b7c4b0f90b083c738a1e16d0" prot="private" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>use_compressed_spikes_</name></member>
      <member refid="classnest_1_1_connection_manager_1a71579f9db00c8c3a995f4956036c001d" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>valid_connection_rule</name></member>
      <member refid="classnest_1_1_connection_manager_1ab2b44ecf02b391848a5d2760676b1fe3" prot="public" virt="non-virtual"><scope>nest::ConnectionManager</scope><name>~ConnectionManager</name></member>
      <member refid="classnest_1_1_manager_interface_1ac60a79d2ba0a48f1b039ab1f9d502ec4" prot="public" virt="virtual"><scope>nest::ConnectionManager</scope><name>~ManagerInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
