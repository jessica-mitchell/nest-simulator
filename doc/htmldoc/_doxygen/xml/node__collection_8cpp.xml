<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="node__collection_8cpp" kind="file" language="C++">
    <compoundname>node_collection.cpp</compoundname>
    <includes refid="node__collection_8h" local="yes">node_collection.h</includes>
    <includes refid="kernel__manager_8h" local="yes">kernel_manager.h</includes>
    <includes refid="mpi__manager__impl_8h" local="yes">mpi_manager_impl.h</includes>
    <includes refid="vp__manager__impl_8h" local="yes">vp_manager_impl.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">numeric</includes>
    <incdepgraph>
      <node id="108">
        <label>genericmodel.h</label>
        <link refid="genericmodel_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>target_table_devices.h</label>
        <link refid="target__table__devices_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>limits</label>
      </node>
      <node id="50">
        <label>ntree.h</label>
        <link refid="ntree_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>random_generators.h</label>
        <link refid="random__generators_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>arraydatum.h</label>
      </node>
      <node id="21">
        <label>nest_types.h</label>
        <link refid="nest__types_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>mpi_manager_impl.h</label>
        <link refid="mpi__manager__impl_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>model_manager.h</label>
        <link refid="model__manager_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>connection_manager.h</label>
        <link refid="connection__manager_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>cstdint</label>
      </node>
      <node id="90">
        <label>per_thread_bool_indicator.h</label>
        <link refid="per__thread__bool__indicator_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>source_table.h</label>
        <link refid="source__table_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>stdint.h</label>
      </node>
      <node id="60">
        <label>nest_names.h</label>
        <link refid="nest__names_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>deprecation_warning.h</label>
        <link refid="deprecation__warning_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>stimulation_backend.h</label>
        <link refid="stimulation__backend_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>music_manager.h</label>
        <link refid="music__manager_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>source_table_position.h</label>
        <link refid="source__table__position_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>dictutils.h</label>
      </node>
      <node id="42">
        <label>event.h</label>
        <link refid="event_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>vp_manager.h</label>
        <link refid="vp__manager_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="54">
        <label>position.h</label>
        <link refid="position_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="94">
        <label>numeric</label>
      </node>
      <node id="11">
        <label>exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="35">
        <label>map</label>
      </node>
      <node id="121">
        <label>growth_curve.h</label>
        <link refid="growth__curve_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>generic_factory.h</label>
        <link refid="generic__factory_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>nest_time.h</label>
        <link refid="nest__time_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>aggregatedatum.h</label>
      </node>
      <node id="66">
        <label>dict.h</label>
      </node>
      <node id="39">
        <label>connection_id.h</label>
        <link refid="connection__id_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>source.h</label>
        <link refid="source_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cfloat</label>
      </node>
      <node id="1">
        <label>node_collection.cpp</label>
        <link refid="node__collection_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>target.h</label>
        <link refid="target_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>nestmodule.h</label>
        <link refid="nestmodule_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ostream</label>
      </node>
      <node id="105">
        <label>device_node.h</label>
        <link refid="device__node_8h"/>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>static_assert.h</label>
        <link refid="static__assert_8h"/>
      </node>
      <node id="72">
        <label>connector_base.h</label>
        <link refid="connector__base_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>slitype.h</label>
      </node>
      <node id="100">
        <label>io_manager.h</label>
        <link refid="io__manager_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>common_synapse_properties.h</label>
        <link refid="common__synapse__properties_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lockptr.h</label>
        <link refid="lockptr_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>nest_datums.h</label>
        <link refid="nest__datums_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>allocator.h</label>
      </node>
      <node id="84">
        <label>connection_label.h</label>
        <link refid="connection__label_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>node.h</label>
        <link refid="node_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>random_manager.h</label>
        <link refid="random__manager_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>enum_bitfield.h</label>
        <link refid="enum__bitfield_8h"/>
      </node>
      <node id="83">
        <label>histentry.h</label>
        <link refid="histentry_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>random</label>
      </node>
      <node id="69">
        <label>slimodule.h</label>
      </node>
      <node id="59">
        <label>parameter.h</label>
        <link refid="parameter_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>secondary_event.h</label>
        <link refid="secondary__event_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>bitset</label>
      </node>
      <node id="58">
        <label>token.h</label>
      </node>
      <node id="3">
        <label>ctime</label>
      </node>
      <node id="89">
        <label>nest_timeconverter.h</label>
        <link refid="nest__timeconverter_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>unistd.h</label>
      </node>
      <node id="45">
        <label>spike_data.h</label>
        <link refid="spike__data_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="67">
        <label>sharedptrdatum.h</label>
      </node>
      <node id="74">
        <label>block_vector.h</label>
        <link refid="block__vector_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>new</label>
      </node>
      <node id="95">
        <label>target_data.h</label>
        <link refid="target__data_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>kernel_manager.h</label>
        <link refid="kernel__manager_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>utility</label>
      </node>
      <node id="55">
        <label>array</label>
      </node>
      <node id="56">
        <label>sstream</label>
      </node>
      <node id="123">
        <label>vp_manager_impl.h</label>
        <link refid="vp__manager__impl_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>slifunction.h</label>
      </node>
      <node id="104">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>randutils.hpp</label>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="118">
        <label>simulation_manager.h</label>
        <link refid="simulation__manager_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>node_manager.h</label>
        <link refid="node__manager_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>dictdatum.h</label>
      </node>
      <node id="33">
        <label>sys/time.h</label>
      </node>
      <node id="31">
        <label>manager_interface.h</label>
        <link refid="manager__interface_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="25">
        <label>name.h</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>node_collection.h</label>
        <link refid="node__collection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>deque</label>
      </node>
      <node id="103">
        <label>stimulation_device.h</label>
        <link refid="stimulation__device_8h"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>target_table.h</label>
        <link refid="target__table_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>climits</label>
      </node>
      <node id="112">
        <label>modelrange_manager.h</label>
        <link refid="modelrange__manager_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>nest.h</label>
        <link refid="nest_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>model.h</label>
        <link refid="model_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>sliexceptions.h</label>
      </node>
      <node id="106">
        <label>logging_manager.h</label>
        <link refid="logging__manager_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>conn_parameter.h</label>
        <link refid="conn__parameter_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>event_delivery_manager.h</label>
        <link refid="event__delivery__manager_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>sparse_node_array.h</label>
        <link refid="sparse__node__array_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>growth_curve_factory.h</label>
        <link refid="growth__curve__factory_8h"/>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>modelrange.h</label>
        <link refid="modelrange_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>vector_util.h</label>
        <link refid="vector__util_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>type_traits</label>
      </node>
      <node id="119">
        <label>sp_manager.h</label>
        <link refid="sp__manager_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>set</label>
      </node>
      <node id="20">
        <label>config.h</label>
      </node>
      <node id="34">
        <label>conn_builder.h</label>
        <link refid="conn__builder_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>algorithm</label>
      </node>
      <node id="92">
        <label>mpi_manager.h</label>
        <link refid="mpi__manager_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>cstring</label>
      </node>
      <node id="77">
        <label>connector_model.h</label>
        <link refid="connector__model_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>recording_backend.h</label>
        <link refid="recording__backend_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="88">
        <label>spikecounter.h</label>
        <link refid="spikecounter_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>logging.h</label>
        <link refid="logging_8h"/>
      </node>
      <node id="62">
        <label>initializer_list</label>
      </node>
      <node id="19">
        <label>numerics.h</label>
        <link refid="numerics_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>compose.hpp</label>
      </node>
      <node id="73">
        <label>sort.h</label>
        <link refid="sort_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>stopwatch.h</label>
        <link refid="stopwatch_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structnest_1_1PrimitiveSortOp" prot="public">nest::PrimitiveSortOp</innerclass>
    <innernamespace refid="namespacenest">nest</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>node_collection.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="node__collection_8h" kindref="compound">node_collection.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mpi__manager__impl_8h" kindref="compound">mpi_manager_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vp__manager__impl_8h" kindref="compound">vp_manager_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenest" kindref="compound">nest</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>object<sp/>for<sp/>sorting<sp/>a<sp/>vector<sp/>of<sp/>NodeCollectionPrimitives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structnest_1_1PrimitiveSortOp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnest_1_1PrimitiveSortOp" kindref="compound">PrimitiveSortOp</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structnest_1_1PrimitiveSortOp_1a99b33fa0c9641182401f40503567efb5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structnest_1_1PrimitiveSortOp_1a99b33fa0c9641182401f40503567efb5" kindref="member">operator()</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref>&amp;<sp/>primitive_lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref>&amp;<sp/>primitive_rhs<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="42"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primitive_lhs[<sp/>0<sp/>]<sp/>&lt;<sp/>primitive_rhs[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45" refid="namespacenest_1aa6f6e7053480a3e591a72ec8cbaf2928" refkind="member"><highlight class="normal">}<sp/><ref refid="namespacenest_1aa6f6e7053480a3e591a72ec8cbaf2928" kindref="member">primitive_sort_op</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classnest_1_1nc__const__iterator_1aab9b6e632bf54c087e6ba5216f507062" refkind="member"><highlight class="normal"><ref refid="classnest_1_1nc__const__iterator_1aab9b6e632bf54c087e6ba5216f507062" kindref="member">nc_const_iterator::nc_const_iterator</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>collection_ptr,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive" kindref="compound">NodeCollectionPrimitive</ref>&amp;<sp/>collection,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref>,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>:<sp/>coll_ptr_(<sp/>collection_ptr<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>,<sp/>element_idx_(<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>,<sp/>part_idx_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/>step<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>,<sp/>primitive_collection_(<sp/>&amp;collection<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>,<sp/>composite_collection_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>assert(<sp/>not<sp/>collection_ptr.get()<sp/>or<sp/>collection_ptr.get()<sp/>==<sp/>&amp;collection<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>&gt;<sp/>collection.<ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>)<sp/></highlight><highlight class="comment">//<sp/>allow<sp/>==<sp/>size()<sp/>for<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1KernelException" kindref="compound">KernelException</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>offset<sp/>into<sp/>NodeCollectionPrimitive&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classnest_1_1nc__const__iterator_1ad4a0991d2234c80f72834153ff7639b2" refkind="member"><highlight class="normal"><ref refid="classnest_1_1nc__const__iterator_1aab9b6e632bf54c087e6ba5216f507062" kindref="member">nc_const_iterator::nc_const_iterator</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>collection_ptr,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite" kindref="compound">NodeCollectionComposite</ref>&amp;<sp/>collection,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>part,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>:<sp/>coll_ptr_(<sp/>collection_ptr<sp/>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>,<sp/>element_idx_(<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>,<sp/>part_idx_(<sp/>part<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/>step<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>,<sp/>primitive_collection_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>,<sp/>composite_collection_(<sp/>&amp;collection<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>assert(<sp/>not<sp/>collection_ptr.get()<sp/>or<sp/>collection_ptr.get()<sp/>==<sp/>&amp;collection<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>part<sp/>&gt;=<sp/>collection.<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.size()<sp/>or<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>&gt;=<sp/>collection.<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>part<sp/>].size()<sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>and<sp/>not(<sp/>part<sp/>==<sp/>collection.<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.size()<sp/>and<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1KernelException" kindref="compound">KernelException</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>part<sp/>or<sp/>offset<sp/>into<sp/>NodeCollectionComposite&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classnest_1_1nc__const__iterator_1a9eeb7b86dc05b4280acf6e29bc2af306" refkind="member"><highlight class="normal"><ref refid="classnest_1_1nc__const__iterator_1a9eeb7b86dc05b4280acf6e29bc2af306" kindref="member">nc_const_iterator::composite_update_indices_</ref>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>went<sp/>past<sp/>the<sp/>size<sp/>of<sp/>the<sp/>primitive,<sp/>we<sp/>need<sp/>to<sp/>adjust<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>primitive<sp/>part<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>primitive_size<sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>].size();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>&gt;=<sp/>primitive_size<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>-<sp/>primitive_size;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part_idx_<sp/>&lt;<sp/>composite_collection_-&gt;parts_.size()<sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_size<sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>].size();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>went<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>composite,<sp/>we<sp/>need<sp/>to<sp/>adjust<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>of<sp/>the<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a6ab75e064b25a77ff8c38a7ab83acc03" kindref="member">is_sliced_</ref><sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>&gt;=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>and<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>&gt;=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>&gt;=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.size()<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_of_composite<sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>=<sp/>end_of_composite.part_idx_;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>=<sp/>end_of_composite.element_idx_;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classnest_1_1nc__const__iterator_1a3a1db3f4904fbadc21cb3c65ba16d2c5" refkind="member"><highlight class="normal"><ref refid="classnest_1_1nc__const__iterator_1a3a1db3f4904fbadc21cb3c65ba16d2c5" kindref="member">nc_const_iterator::print_me</ref>(<sp/>std::ostream&amp;<sp/>out<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pc:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>cc:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>px:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>ex:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="classnest_1_1NodeIDTriple" kindref="compound">NodeIDTriple</ref></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="classnest_1_1nc__const__iterator_1a4e6c5c727d55c7197afe2e8ce5b60f77" kindref="member">nc_const_iterator::operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="132"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1NodeIDTriple" kindref="compound">NodeIDTriple</ref><sp/>gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref><sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ac783113c4714d40b0ba050ebd6ae48c8" kindref="member">node_id</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>+<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ac783113c4714d40b0ba050ebd6ae48c8" kindref="member">node_id</ref><sp/>&gt;<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref><sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1KernelException" kindref="compound">KernelException</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>NodeCollection<sp/>iterator<sp/>(primitive<sp/>element<sp/>beyond<sp/>last<sp/>element)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1a890f806916886ba009958e02dd081b87" kindref="member">model_id</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ace8867348c0910f4bb93aa8ff2e79149" kindref="member">lid</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>efficiency<sp/>we<sp/>check<sp/>each<sp/>value<sp/>instead<sp/>of<sp/>simply<sp/>checking<sp/>against</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>composite_collection-&gt;end()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/>part_idx_<sp/>&lt;<sp/>composite_collection_-&gt;end_part_</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>==<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>element_idx_<sp/>&lt;<sp/>composite_collection_-&gt;end_offset_<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>KernelException(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>NodeCollection<sp/>iterator<sp/>(composite<sp/>element<sp/>beyond<sp/>specified<sp/>end<sp/>element)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>local<sp/>placement<sp/>from<sp/>NodeCollectionPrimitives<sp/>that<sp/>comes<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ace8867348c0910f4bb93aa8ff2e79149" kindref="member">lid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>part<sp/>:<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref><sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>stripped-down<sp/>comparison<sp/>of<sp/>Primitives<sp/>to<sp/>avoid<sp/>redundant<sp/>and<sp/>potentially<sp/>expensive<sp/>comparisons<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>metadata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>current_part<sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part.first_<sp/>==<sp/>current_part.first_<sp/>and<sp/>part.last_<sp/>==<sp/>current_part.last_<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ace8867348c0910f4bb93aa8ff2e79149" kindref="member">lid</ref><sp/>+=<sp/>part.size();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ac783113c4714d40b0ba050ebd6ae48c8" kindref="member">node_id</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>][<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1a890f806916886ba009958e02dd081b87" kindref="member">model_id</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a47bc5a074697f56162865c1bc451d570" kindref="member">composite_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/><ref refid="classnest_1_1nc__const__iterator_1ad5fd8a391b6530fae9796280aa5397a2" kindref="member">part_idx_</ref><sp/>].model_id_;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>gt.<ref refid="classnest_1_1NodeIDTriple_1ace8867348c0910f4bb93aa8ff2e79149" kindref="member">lid</ref><sp/>+=<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">nc_const_iterator&amp;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="classnest_1_1nc__const__iterator_1a15ac6619abbe005f0ae4741b98369e18" kindref="member">nc_const_iterator::operator++</ref>()</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>+=<sp/><ref refid="classnest_1_1nc__const__iterator_1a8facb355c74899dbf61e507b5adc74d6" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref><sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>&gt;=<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1aa26ee4adb009da2a8bf1f32fcf305331" kindref="member">element_idx_</ref><sp/>=<sp/><ref refid="classnest_1_1nc__const__iterator_1a69ebad673bb9930afda282a18bc1e1f0" kindref="member">primitive_collection_</ref>-&gt;<ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1nc__const__iterator_1a9eeb7b86dc05b4280acf6e29bc2af306" kindref="member">composite_update_indices_</ref>();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="namespacenest_1a67b7a3a2f3d8ba2fd5308e956bf02c4e" kindref="member">operator+</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>lhs,<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs-&gt;operator+(<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1ae29b034a0d1cda526d76b352dc5be027" kindref="member">NodeCollection::NodeCollection</ref>()</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>:<sp/>fingerprint_(<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().get_fingerprint()<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" kindref="member">NodeCollection::create</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntVectorDatum&amp;<sp/>node_ids_datum<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>node_ids_datum-&gt;empty()<sp/>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>index<sp/>&gt;<sp/>node_ids;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>node_ids.reserve(<sp/>node_ids_datum-&gt;size()<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>datum<sp/>:<sp/>*node_ids_datum<sp/>)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>node_ids.push_back(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>getValue&lt;<sp/>long<sp/>&gt;(<sp/>datum<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>std::is_sorted(<sp/>node_ids.begin(),<sp/>node_ids.end()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>IDs<sp/>must<sp/>be<sp/>sorted<sp/>in<sp/>ascending<sp/>order&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>(<sp/>node_ids<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" kindref="member">NodeCollection::create</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TokenArray&amp;<sp/>node_ids_array<sp/>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>node_ids_array.empty()<sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>index<sp/>&gt;<sp/>node_ids;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>node_ids.reserve(<sp/>node_ids_array.size()<sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node_id_token<sp/>:<sp/>node_ids_array<sp/>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>node_ids.push_back(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>getValue&lt;<sp/>long<sp/>&gt;(<sp/>node_id_token<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>std::is_sorted(<sp/>node_ids.begin(),<sp/>node_ids.end()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>IDs<sp/>must<sp/>be<sp/>sorted<sp/>in<sp/>ascending<sp/>order&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>(<sp/>node_ids<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" kindref="member">NodeCollection::create</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>node_id<sp/>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>(<sp/>{<sp/>node_id<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a016062fcd624a01663b5d8fcc87cdffb" kindref="member">NodeCollection::create</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>index<sp/>&gt;&amp;<sp/>node_ids_vector<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>node_ids_vector.empty()<sp/>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>std::is_sorted(<sp/>node_ids_vector.begin(),<sp/>node_ids_vector.end()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Indices<sp/>must<sp/>be<sp/>sorted<sp/>in<sp/>ascending<sp/>order&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>(<sp/>node_ids_vector<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>()</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;();</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a6a290b3022377493fca47bf0d2271439" kindref="member">NodeCollection::create_</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>index<sp/>&gt;&amp;<sp/>node_ids<sp/>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>current_first<sp/>=<sp/>node_ids[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>current_last<sp/>=<sp/>current_first;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>current_model<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" kindref="member">get_model_id</ref>(<sp/>node_ids[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;<sp/>parts;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>old_node_id<sp/>=<sp/>current_first;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_id<sp/>=<sp/>++(<sp/>node_ids.begin()<sp/>);<sp/>node_id<sp/>!=<sp/>node_ids.end();<sp/>++node_id<sp/>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*node_id<sp/>==<sp/>old_node_id<sp/>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>node<sp/>IDs<sp/>in<sp/>a<sp/>NodeCollection<sp/>have<sp/>to<sp/>be<sp/>unique&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>old_node_id<sp/>=<sp/>*node_id;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>next_model<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" kindref="member">get_model_id</ref>(<sp/>*node_id<sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next_model<sp/>==<sp/>current_model<sp/>and<sp/>*node_id<sp/>==<sp/>(<sp/>current_last<sp/>+<sp/>1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>node<sp/>goes<sp/>in<sp/>Primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++current_last;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>Primitive;<sp/>node<sp/>goes<sp/>in<sp/>new<sp/>Primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parts.emplace_back(<sp/>current_first,<sp/>current_last,<sp/>current_model<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_first<sp/>=<sp/>*node_id;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_last<sp/>=<sp/>current_first;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_model<sp/>=<sp/>next_model;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>push<sp/>last<sp/>section<sp/>we<sp/>opened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>parts.emplace_back(<sp/>current_first,<sp/>current_last,<sp/>current_model<sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parts.size()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>parts[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>parts<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" kindref="member">NodeCollection::valid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="327"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1ab5d5b3687f26500ad6106d4d4eeba15a" kindref="member">fingerprint_</ref><sp/>==<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a99178c661d0c4145d812c7e576064a22" kindref="member">get_fingerprint</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" kindref="member">NodeCollectionPrimitive::NodeCollectionPrimitive</ref>(<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>first,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>last,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref>,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref><sp/>meta<sp/>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>:<sp/>first_(<sp/>first<sp/>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>,<sp/>last_(<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>,<sp/>model_id_(<sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>,<sp/>metadata_(<sp/>meta<sp/>)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>,<sp/>nodes_have_no_proxies_(<sp/>not<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().model_manager.get_node_model(<sp/>model_id_<sp/>)-&gt;has_proxies()<sp/>)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>assert_consistent_model_ids_(<sp/>model_id_<sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>assert(<sp/>first_<sp/>&lt;=<sp/>last_<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" kindref="member">NodeCollectionPrimitive::NodeCollectionPrimitive</ref>(<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>first,<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>last,<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>:<sp/>first_(<sp/>first<sp/>)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>,<sp/>last_(<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>,<sp/>model_id_(<sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>,<sp/>metadata_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>,<sp/>nodes_have_no_proxies_(<sp/>not<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().model_manager.get_node_model(<sp/>model_id_<sp/>)-&gt;has_proxies()<sp/>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>assert(<sp/>first_<sp/>&lt;=<sp/>last_<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" kindref="member">NodeCollectionPrimitive::NodeCollectionPrimitive</ref>(<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>first,<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>last<sp/>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>:<sp/>first_(<sp/>first<sp/>)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>,<sp/>last_(<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>,<sp/>model_id_(<sp/>invalid_index<sp/>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>,<sp/>metadata_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>assert(<sp/>first_<sp/>&lt;=<sp/>last_<sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>model_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_model_id<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" kindref="member">get_model_id</ref>(<sp/>first<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_index<sp/>=<sp/>first<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>node_id<sp/>=<sp/>init_index;<sp/>node_id<sp/>&lt;=<sp/>last;<sp/>++node_id<sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" kindref="member">get_model_id</ref>(<sp/>node_id<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>!=<sp/>first_model_id<sp/>)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;model<sp/>ids<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>model_id_<sp/>=<sp/>first_model_id;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>nodes_have_no_proxies_<sp/>=<sp/>not<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" kindref="member">model_manager</ref>.<ref refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" kindref="member">get_node_model</ref>(<sp/>model_id_<sp/>)-&gt;<ref refid="classnest_1_1Model_1a543b9f87792c1f7ad6078d855567d93a" kindref="member">has_proxies</ref>();</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" kindref="member">NodeCollectionPrimitive::NodeCollectionPrimitive</ref>()</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>:<sp/>first_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>,<sp/>last_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>,<sp/>model_id_(<sp/>invalid_index<sp/>)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>,<sp/>metadata_(<sp/>nullptr<sp/>)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>,<sp/>nodes_have_no_proxies_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">ArrayDatum</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a8a87dd111886fdf384bcda76d6648677" kindref="member">NodeCollectionPrimitive::to_array</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="390"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>ArrayDatum<sp/>node_ids;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>node_ids.reserve(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a11fa015ae3a1e31c795fa80f284cbba7" kindref="member">begin</ref>();<sp/>it<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" kindref="member">end</ref>();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>node_ids.push_back(<sp/>(<sp/>*it<sp/>).node_id<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_ids;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1adf16a78fedd48674f4800eeb697a8612" kindref="member">NodeCollectionPrimitive::operator+</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>rhs<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="402"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" kindref="member">valid</ref>()<sp/>or<sp/>not<sp/>rhs-&gt;valid()<sp/>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>KernelException(</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InvalidNodeCollection:<sp/>note<sp/>that<sp/>ResetKernel<sp/>invalidates<sp/>all<sp/>previously<sp/>created<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs-&gt;empty()<sp/>)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" kindref="member">empty</ref>()<sp/>)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" kindref="member">NodeCollectionPrimitive</ref><sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs_ptr<sp/>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rhs<sp/>is<sp/>primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>*rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rhs<sp/>is<sp/>composite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>NodeCollectionComposite<sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>*rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399" kindref="member">get_metadata</ref>().get()<sp/>or<sp/>rhs-&gt;get_metadata().get()<sp/>)<sp/>and<sp/>not(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a0326b6ac03236ebc06bb87a88c921399" kindref="member">get_metadata</ref>()<sp/>==<sp/>rhs-&gt;get_metadata()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>join<sp/>NodeCollections<sp/>with<sp/>same<sp/>metadata.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a6d369c6e56a62b8a1a5f78f0d88e3d6b" kindref="member">NodeCollectionPrimitive</ref><sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs_ptr<sp/>)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>rhs<sp/>is<sp/>Primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" kindref="member">overlapping</ref>(<sp/>*rhs_ptr<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>join<sp/>overlapping<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref><sp/>+<sp/>1<sp/>)<sp/>==<sp/>rhs_ptr-&gt;first_<sp/>and<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref><sp/>==<sp/>rhs_ptr-&gt;model_id_<sp/>)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>contiguous<sp/>and<sp/>homogeneous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref>,<sp/>rhs_ptr-&gt;last_,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref>,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" kindref="member">metadata_</ref><sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>rhs_ptr-&gt;last_<sp/>+<sp/>1<sp/>)<sp/>==<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>and<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref><sp/>==<sp/>rhs_ptr-&gt;model_id_<sp/>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>rhs_ptr-&gt;first_,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref>,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref>,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" kindref="member">metadata_</ref><sp/>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>not<sp/>contiguous<sp/>and<sp/>homogeneous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;<sp/>primitives;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitives.reserve(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitives.push_back(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitives.push_back(<sp/>*rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>primitives<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>if<sp/>rhs<sp/>is<sp/>not<sp/>Primitive,<sp/>i.e.<sp/>Composite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>NodeCollectionComposite*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs_ptr-&gt;operator+(<sp/>*this<sp/>);<sp/></highlight><highlight class="comment">//<sp/>use<sp/>Composite<sp/>operator+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">NodeCollectionPrimitive::const_iterator</ref></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a25abe74fe0454075401e8eefbb618d0a" kindref="member">NodeCollectionPrimitive::local_begin</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>cp<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="469"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_vps<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" kindref="member">vp_manager</ref>.<ref refid="classnest_1_1VPManager_1a8ddd2beb1aea2c9385b93ad4b842a2cb" kindref="member">get_num_virtual_processes</ref>();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_vp<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" kindref="member">vp_manager</ref>.<ref refid="classnest_1_1VPManager_1aa3d11af1445df6d186a4be6a5bbd5b3f" kindref="member">thread_to_vp</ref>(<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().vp_manager.get_thread_id()<sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vp_first_node<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" kindref="member">vp_manager</ref>.<ref refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" kindref="member">node_id_to_vp</ref>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>=<sp/>(<sp/>current_vp<sp/>-<sp/>vp_first_node<sp/>+<sp/>num_vps<sp/>)<sp/>%<sp/>num_vps;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>&gt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>)<sp/></highlight><highlight class="comment">//<sp/>Too<sp/>few<sp/>node<sp/>IDs<sp/>to<sp/>be<sp/>shared<sp/>among<sp/>all<sp/>vps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref>(<sp/>cp,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref>(<sp/>cp,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref>,<sp/>num_vps<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">NodeCollectionPrimitive::const_iterator</ref></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a69ab4981e94d91bb504431067502d8d5" kindref="member">NodeCollectionPrimitive::MPI_local_begin</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>cp<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="487"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">num_processes</ref><sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a496c51140dd2f76db937357bb70ac565" kindref="member">get_num_processes</ref>();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a6fa640ce78eda75f8304879ff396ab78" kindref="member">get_rank</ref>();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank_first_node<sp/>=</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a1fbad26739451a698618a1407b85124f" kindref="member">get_process_id_of_vp</ref>(<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().vp_manager.node_id_to_vp(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>=<sp/>(<sp/>rank<sp/>-<sp/>rank_first_node<sp/>+<sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">num_processes</ref><sp/>)<sp/>%<sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">num_processes</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>&gt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>)<sp/></highlight><highlight class="comment">//<sp/>Too<sp/>few<sp/>node<sp/>IDs<sp/>to<sp/>be<sp/>shared<sp/>among<sp/>all<sp/>MPI<sp/>processes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref>(<sp/>cp,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a79b697d1480b6f19c6e24f690e6b4736" kindref="member">const_iterator</ref>(<sp/>cp,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref>,<sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">num_processes</ref><sp/>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a711d51001ec0aca49a39aebd9d623fed" kindref="member">NodeCollectionPrimitive::slice</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="506"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" kindref="member">end</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadParameter(<sp/></highlight><highlight class="stringliteral">&quot;start<sp/>&lt;<sp/>stop<sp/>required.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" kindref="member">end</ref><sp/>&lt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadParameter(<sp/></highlight><highlight class="stringliteral">&quot;stop<sp/>&lt;=<sp/>size()<sp/>required.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" kindref="member">valid</ref>()<sp/>)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>KernelException(</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InvalidNodeCollection:<sp/>note<sp/>that<sp/>ResetKernel<sp/>invalidates<sp/>all<sp/>previously<sp/>created<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>sliced_nc;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a1744efa14d2e783728a7ffcfaf2c7ec5" kindref="member">step</ref><sp/>==<sp/>1<sp/>and<sp/>not<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" kindref="member">metadata_</ref><sp/>)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>primitive<sp/>NodeCollection<sp/>passing<sp/>node<sp/>IDs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>because<sp/>&quot;end&quot;<sp/>is<sp/>one<sp/>past<sp/>last<sp/>element<sp/>to<sp/>take<sp/>while<sp/>constructor<sp/>expects<sp/>ID<sp/>of<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>sliced_nc<sp/>=<sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>+<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>+<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" kindref="member">end</ref><sp/>-<sp/>1,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref><sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>sliced_nc<sp/>=<sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a60cf131a206f9265baecf1258d6bb536" kindref="member">end</ref>,<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a1744efa14d2e783728a7ffcfaf2c7ec5" kindref="member">step</ref><sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sliced_nc;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1ac8ce829688d735c9aa2c2a3e3748e137" kindref="member">NodeCollectionPrimitive::print_me</ref>(<sp/>std::ostream&amp;<sp/>out<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="538"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;NodeCollection(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5e105e372edd39292c6937ef7bae5c89" kindref="member">empty</ref>()<sp/>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;empty&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>metadata<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" kindref="member">metadata_</ref>.get()<sp/>?<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a9eb4435d839b157166198eccfa22b4ad" kindref="member">metadata_</ref>-&gt;get_type()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;metadata=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>metadata<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" kindref="member">print_primitive</ref>(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a96a57ec68b93427ab0645e5643cacd59" kindref="member">NodeCollectionPrimitive::print_primitive</ref>(<sp/>std::ostream&amp;<sp/>out<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="555"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3" kindref="member">model</ref><sp/>=</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref><sp/>!=<sp/>invalid_index<sp/>?<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" kindref="member">model_manager</ref>.<ref refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" kindref="member">get_node_model</ref>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref><sp/>)-&gt;<ref refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" kindref="member">get_name</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;model=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacenest_1_1names_1ab13a9c81386468eaede1c9c5c189cdd3" kindref="member">model</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>size=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1ad823ff8011517bb940959fc400a248fa" kindref="member">size</ref>()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>first=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref>;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>first=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>last=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a43bc612ed7fb0068c0df5c26f342636a" kindref="member">NodeCollectionPrimitive::is_contiguous_ascending</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive&amp;<sp/><ref refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d" kindref="member">other</ref><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="573"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref><sp/>+<sp/>1<sp/>)<sp/>==<sp/><ref refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d" kindref="member">other</ref>.first_<sp/>)<sp/>and<sp/>(<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1a5c2c6574099837ccae0d001944e248f1" kindref="member">model_id_</ref><sp/>==<sp/><ref refid="namespacenest_1_1names_1a7d67dc420acf69b2b62a5c25796d941d" kindref="member">other</ref>.model_id_<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1abcdd8cd690ab5112519b3abfb9d984af" kindref="member">NodeCollectionPrimitive::overlapping</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive&amp;<sp/>rhs<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="579"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>rhs.first_<sp/>&lt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref><sp/>and<sp/>rhs.first_<sp/>&gt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>)<sp/>or<sp/>(<sp/>rhs.last_<sp/>&lt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref><sp/>and<sp/>rhs.last_<sp/>&gt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionPrimitive_1a6e7a127680955daa5b44a8a3da0a17aa" kindref="member">NodeCollectionPrimitive::assert_consistent_model_ids_</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>expected_model_id<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="585"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>node_id<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1af5e259b390e7fe88c520cae11ae7d17e" kindref="member">first_</ref>;<sp/>node_id<sp/>&lt;=<sp/><ref refid="classnest_1_1NodeCollectionPrimitive_1aec71ef729b34d9127108bd4682e560a9" kindref="member">last_</ref>;<sp/>++node_id<sp/>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ad5380cf3321b38433a364b9dc87daaf7" kindref="member">get_model_id</ref>(<sp/>node_id<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>!=<sp/>expected_model_id<sp/>)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_model<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ab2ea2aea12115408f37d8c0acc8460db" kindref="member">get_model_of_node_id</ref>(<sp/><ref refid="namespacenest_1_1names_1ab7414ebe7026db2392fb2cc8e6d0e885" kindref="member">model_id</ref><sp/>)-&gt;<ref refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" kindref="member">get_name</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected_model<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a81f62008f5752675d486a9d91ef05831" kindref="member">modelrange_manager</ref>.<ref refid="classnest_1_1ModelRangeManager_1ab2ea2aea12115408f37d8c0acc8460db" kindref="member">get_model_of_node_id</ref>(<sp/>expected_model_id<sp/>)-&gt;<ref refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" kindref="member">get_name</ref>();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>nodes<sp/>must<sp/>have<sp/>the<sp/>same<sp/>model<sp/>(node<sp/>with<sp/>ID<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<sp/>node_id<sp/>)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>model<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>node_model<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>expected_model<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/>message<sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite::NodeCollectionComposite</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive&amp;<sp/>primitive,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>:<sp/>parts_()</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>,<sp/>size_(<sp/>(<sp/>end<sp/>-<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>-<sp/>1<sp/>)<sp/>/<sp/>step<sp/>+<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/>step<sp/>)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>,<sp/>start_part_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>,<sp/>start_offset_(<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>end<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>primitive,<sp/>set<sp/>the<sp/>end<sp/>to<sp/>the<sp/>first<sp/>in<sp/>the<sp/>next<sp/>(nonexistent)<sp/>part,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>consistency<sp/>with<sp/>iterator<sp/>comparisons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>,<sp/>end_part_(<sp/>end<sp/>==<sp/>primitive.size()<sp/>?<sp/>1<sp/>:<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>,<sp/>end_offset_(<sp/>end<sp/>==<sp/>primitive.size()<sp/>?<sp/>0<sp/>:<sp/>end<sp/>)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>,<sp/>is_sliced_(<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>!=<sp/>0<sp/>or<sp/>end<sp/>!=<sp/>primitive.size()<sp/>or<sp/>step<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>parts_.push_back(<sp/>primitive<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite::NodeCollectionComposite</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;&amp;<sp/>parts<sp/>)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>:<sp/>size_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>,<sp/>start_part_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>,<sp/>start_offset_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>,<sp/>end_part_(<sp/>parts.size()<sp/>)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>,<sp/>end_offset_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>,<sp/>is_sliced_(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parts.size()<sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>an<sp/>empty<sp/>composite<sp/>NodeCollection&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a79929df00838099cddde8593fcbd9efe" kindref="member">NodeCollectionMetadataPTR</ref><sp/>meta<sp/>=<sp/>parts[<sp/>0<sp/>].get_metadata();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>parts_.reserve(<sp/>parts.size()<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>part<sp/>:<sp/>parts<sp/>)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>meta.get()<sp/>and<sp/>not(<sp/>meta<sp/>==<sp/>part.get_metadata()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>metadata<sp/>in<sp/>a<sp/>NodeCollection<sp/>must<sp/>be<sp/>the<sp/>same&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>parts_.push_back(<sp/>part<sp/>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>+=<sp/>part.size();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" kindref="member">std::sort</ref>(<sp/>parts_.begin(),<sp/>parts_.end(),<sp/><ref refid="namespacenest_1aa6f6e7053480a3e591a72ec8cbaf2928" kindref="member">primitive_sort_op</ref><sp/>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite::NodeCollectionComposite</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionComposite&amp;<sp/>composite,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>:<sp/>parts_(<sp/>composite.parts_<sp/>)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>,<sp/>size_(<sp/>(<sp/>end<sp/>-<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>-<sp/>1<sp/>)<sp/>/<sp/>step<sp/>+<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>,<sp/>step_(<sp/>step<sp/>)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>,<sp/>start_part_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>,<sp/>start_offset_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>,<sp/>end_part_(<sp/>composite.parts_.size()<sp/>)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>,<sp/>end_offset_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>,<sp/>is_sliced_(<sp/>true<sp/>)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>end<sp/>-<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>&lt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>an<sp/>empty<sp/>composite<sp/>NodeCollection.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>&gt;<sp/>composite.size()<sp/>or<sp/>end<sp/>&gt;<sp/>composite.size()<sp/>)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>composite.is_sliced_<sp/>)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>composite.step_<sp/>&gt;<sp/>1<sp/>or<sp/>composite.end_part_<sp/>!=<sp/>0<sp/>or<sp/>composite.end_offset_<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>NodeCollection<sp/>is<sp/>sliced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>size_<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creating<sp/>a<sp/>sliced<sp/>NC<sp/>with<sp/>more<sp/>than<sp/>one<sp/>node<sp/>ID<sp/>from<sp/>a<sp/>sliced<sp/>NC<sp/>is<sp/>impossible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>slice<sp/>a<sp/>sliced<sp/>composite<sp/>NodeCollection.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>a<sp/>single<sp/>single<sp/>node<sp/>ID,<sp/>must<sp/>just<sp/>find<sp/>where<sp/>it<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>const_iterator<sp/>it<sp/>=<sp/>composite.begin()<sp/>+<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>it.get_current_part_offset(<sp/>start_part_,<sp/>start_offset_<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>end_part_<sp/>=<sp/>start_part_;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>end_offset_<sp/>=<sp/>start_offset_<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>NodeCollection<sp/>is<sp/>not<sp/>sliced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>start<sp/>and<sp/>stop<sp/>positions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>const_iterator<sp/>start_it<sp/>=<sp/>composite.begin()<sp/>+<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>start_it.get_current_part_offset(<sp/>start_part_,<sp/>start_offset_<sp/>);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>const_iterator<sp/>end_it<sp/>=<sp/>composite.begin()<sp/>+<sp/>end;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>end_it.get_current_part_offset(<sp/>end_part_,<sp/>end_offset_<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a389b48eccc1d773cb1240987ce97f799" kindref="member">NodeCollectionComposite::operator+</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>rhs<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="697"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs-&gt;empty()<sp/>)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1ab15dcd28e57637c600ea7fd568876c3c" kindref="member">get_metadata</ref>().get()<sp/>and<sp/>not(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1ab15dcd28e57637c600ea7fd568876c3c" kindref="member">get_metadata</ref>()<sp/>==<sp/>rhs-&gt;get_metadata()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>only<sp/>join<sp/>NodeCollections<sp/>with<sp/>the<sp/>same<sp/>metadata&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" kindref="member">valid</ref>()<sp/>or<sp/>not<sp/>rhs-&gt;valid()<sp/>)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>KernelException(</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InvalidNodeCollection:<sp/>note<sp/>that<sp/>ResetKernel<sp/>invalidates<sp/>all<sp/>previously<sp/>created<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6ab75e064b25a77ff8c38a7ab83acc03" kindref="member">is_sliced_</ref><sp/>)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&gt;<sp/>1<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>NodeCollection<sp/>to<sp/>a<sp/>sliced<sp/>composite.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive<sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs_ptr<sp/>)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>rhs<sp/>is<sp/>Primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>primitives<sp/>in<sp/>the<sp/>composite<sp/>for<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>part_it<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin();<sp/>part_it<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.end();<sp/>++part_it<sp/>)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part_it-&gt;overlapping(<sp/>*rhs_ptr<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>join<sp/>overlapping<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref>(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>*rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>rhs<sp/>is<sp/>Composite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite</ref><sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>rhs_ptr<sp/>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhs_ptr-&gt;is_sliced_<sp/>)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>rhs_ptr-&gt;step_<sp/>&gt;<sp/>1<sp/>or<sp/>rhs_ptr-&gt;end_part_<sp/>!=<sp/>0<sp/>or<sp/>rhs_ptr-&gt;end_offset_<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>NodeCollection<sp/>to<sp/>a<sp/>sliced<sp/>composite.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>overlap<sp/>between<sp/>the<sp/>two<sp/>composites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shortest_longest_nc<sp/>=<sp/>std::minmax(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*rhs_ptr,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite</ref>&amp;<sp/><ref refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite</ref>&amp;<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref><sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e" kindref="member">a</ref>.size()<sp/>&lt;<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref>.size();<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shortest<sp/>=<sp/>shortest_longest_nc.first;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>longest<sp/>=<sp/>shortest_longest_nc.second;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>short_it<sp/>=<sp/>shortest.begin();<sp/>short_it<sp/>&lt;<sp/>shortest.end();<sp/>++short_it<sp/>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>longest.contains(<sp/>(<sp/>*short_it<sp/>).node_id<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>join<sp/>overlapping<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_parts<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>new_parts.reserve(<sp/>new_parts.size()<sp/>+<sp/>rhs_ptr-&gt;parts_.size()<sp/>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>new_parts.insert(<sp/>new_parts.end(),<sp/>rhs_ptr-&gt;parts_.begin(),<sp/>rhs_ptr-&gt;parts_.end()<sp/>);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" kindref="member">std::sort</ref>(<sp/>new_parts.begin(),<sp/>new_parts.end(),<sp/><ref refid="namespacenest_1aa6f6e7053480a3e591a72ec8cbaf2928" kindref="member">primitive_sort_op</ref><sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1NodeCollectionComposite_1a19656bed68ef65341bb5adafb224cdcf" kindref="member">merge_parts_</ref>(<sp/>new_parts<sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>new_parts.size()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>only<sp/>a<sp/>single<sp/>primitive<sp/>in<sp/>the<sp/>composite,<sp/>we<sp/>extract<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>new_parts[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>new_parts<sp/>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a389b48eccc1d773cb1240987ce97f799" kindref="member">NodeCollectionComposite::operator+</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive&amp;<sp/>rhs<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="773"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1ab15dcd28e57637c600ea7fd568876c3c" kindref="member">get_metadata</ref>().get()<sp/>and<sp/>not(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1ab15dcd28e57637c600ea7fd568876c3c" kindref="member">get_metadata</ref>()<sp/>==<sp/>rhs.get_metadata()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>only<sp/>join<sp/>NodeCollections<sp/>with<sp/>the<sp/>same<sp/>metadata&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>primitives<sp/>in<sp/>the<sp/>composites<sp/>for<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>part_it<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin();<sp/>part_it<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.end();<sp/>++part_it<sp/>)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part_it-&gt;overlapping(<sp/>rhs<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>join<sp/>overlapping<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;<sp/>new_parts<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>new_parts.push_back(<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1a54cad81a8fdaa7618b888d9678b41c33" kindref="member">std::sort</ref>(<sp/>new_parts.begin(),<sp/>new_parts.end(),<sp/><ref refid="namespacenest_1aa6f6e7053480a3e591a72ec8cbaf2928" kindref="member">primitive_sort_op</ref><sp/>);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><ref refid="classnest_1_1NodeCollectionComposite_1a19656bed68ef65341bb5adafb224cdcf" kindref="member">merge_parts_</ref>(<sp/>new_parts<sp/>);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>new_parts.size()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>new_parts[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>new_parts<sp/>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a23c22481f80229c80d18daa5d6cf4e9f" kindref="member">NodeCollectionComposite::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="804"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6ab75e064b25a77ff8c38a7ab83acc03" kindref="member">is_sliced_</ref><sp/>)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&gt;<sp/>1<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6f21e6d36b3289b547df54833397d527" kindref="member">start_part_</ref><sp/>&gt;<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref><sp/>&gt;<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>!=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.size()<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Composite<sp/>is<sp/>sliced,<sp/>we<sp/>use<sp/>iterator<sp/>arithmetic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>*(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a21cb441d1685b69d7f2f568aeaca5b6e" kindref="member">begin</ref>()<sp/>+<sp/>i<sp/>)<sp/>).node_id;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Composite<sp/>is<sp/>unsliced,<sp/>we<sp/>can<sp/>do<sp/>a<sp/>more<sp/>efficient<sp/>search.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tot_prev_node_ids<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>part<sp/>:<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref><sp/>)<sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>NodeCollections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tot_prev_node_ids<sp/>+<sp/>part.size()<sp/>&gt;<sp/>i<sp/>)<sp/></highlight><highlight class="comment">//<sp/>is<sp/>i<sp/>in<sp/>current<sp/>NodeCollection?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>local_i<sp/>=<sp/>i<sp/>-<sp/>tot_prev_node_ids;<sp/></highlight><highlight class="comment">//<sp/>get<sp/>local<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>part[<sp/>local_i<sp/>];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>i<sp/>is<sp/>not<sp/>in<sp/>current<sp/>NodeCollection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tot_prev_node_ids<sp/>+=<sp/>part.size();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>exception<sp/>if<sp/>outside<sp/>of<sp/>NodeCollection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<sp/></highlight><highlight class="stringliteral">&quot;pos<sp/>points<sp/>outside<sp/>of<sp/>the<sp/>NodeCollection&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1ad747aad8ec312607e4bc8782ca539fa2" kindref="member">NodeCollectionComposite::operator==</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>rhs<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="834"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rhs_ptr<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite</ref><sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs.get()<sp/>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checking<sp/>if<sp/>rhs_ptr<sp/>is<sp/>invalid<sp/>first,<sp/>to<sp/>avoid<sp/>segfaults.<sp/>If<sp/>rhs<sp/>is<sp/>a<sp/>NodeCollectionPrimitive,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rhs_ptr<sp/>will<sp/>be<sp/>a<sp/>null<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>rhs_ptr<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a665397b0cb3f84cb6a5da4760deeabb1" kindref="member">size_</ref><sp/>!=<sp/>rhs_ptr-&gt;size()<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.size()<sp/>!=<sp/>rhs_ptr-&gt;parts_.size()<sp/>)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs_nc<sp/>=<sp/>rhs_ptr-&gt;parts_.begin();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs_nc<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin();<sp/>lhs_nc<sp/>!=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.end();<sp/>++lhs_nc,<sp/>++rhs_nc<sp/>)<sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>NodeCollections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/>(<sp/>*lhs_nc<sp/>)<sp/>==<sp/>(<sp/>*rhs_nc<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">NodeCollectionComposite::const_iterator</ref></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a223bad349b22043d2fa9705f4a55842e" kindref="member">NodeCollectionComposite::local_begin</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>cp<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="856"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_vps<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" kindref="member">vp_manager</ref>.<ref refid="classnest_1_1VPManager_1a8ddd2beb1aea2c9385b93ad4b842a2cb" kindref="member">get_num_virtual_processes</ref>();</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_vp<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" kindref="member">vp_manager</ref>.<ref refid="classnest_1_1VPManager_1aa3d11af1445df6d186a4be6a5bbd5b3f" kindref="member">thread_to_vp</ref>(<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().vp_manager.get_thread_id()<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vp_first_node<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1ae5288531d5c8bfa7d8c1f0bad6964fd2" kindref="member">vp_manager</ref>.<ref refid="classnest_1_1VPManager_1a847b957940c17b0a9c912facf1996f3c" kindref="member">node_id_to_vp</ref>(<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">[](<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1a3cbc659f9b33b1754b1ed368e3ad3e1c" kindref="member">local_begin_</ref>(<sp/>cp,<sp/>num_vps,<sp/>current_vp,<sp/>vp_first_node<sp/>);</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">NodeCollectionComposite::const_iterator</ref></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1acf2f8b5cfec022786d398088fa0cf4cf" kindref="member">NodeCollectionComposite::MPI_local_begin</ref>(<sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>cp<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="866"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">num_processes</ref><sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a496c51140dd2f76db937357bb70ac565" kindref="member">get_num_processes</ref>();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a6fa640ce78eda75f8304879ff396ab78" kindref="member">get_rank</ref>();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank_first_node<sp/>=</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1acb6c54ef758858ed478c76415e081de7" kindref="member">mpi_manager</ref>.<ref refid="classnest_1_1MPIManager_1a1fbad26739451a698618a1407b85124f" kindref="member">get_process_id_of_vp</ref>(<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().vp_manager.node_id_to_vp(<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">[](<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1a3cbc659f9b33b1754b1ed368e3ad3e1c" kindref="member">local_begin_</ref>(<sp/>cp,<sp/><ref refid="namespacenest_1_1names_1aff59ea78b9f423b3280788a10c406b92" kindref="member">num_processes</ref>,<sp/>rank,<sp/>rank_first_node<sp/>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">NodeCollectionComposite::const_iterator</ref></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a3cbc659f9b33b1754b1ed368e3ad3e1c" kindref="member">NodeCollectionComposite::local_begin_</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>cp,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_vp_elements,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_vp_element,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vp_element_first_node<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="881"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>=<sp/>(<sp/>current_vp_element<sp/>-<sp/>vp_element_first_node<sp/>)<sp/>%<sp/>num_vp_elements;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>current_vp_element<sp/>-<sp/>vp_element_first_node<sp/>)<sp/>%<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>no<sp/>local<sp/>nodes<sp/>in<sp/>the<sp/>NodeCollection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref>(<sp/>cp<sp/>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_part<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6f21e6d36b3289b547df54833397d527" kindref="member">start_part_</ref>;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_offset<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref>;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref><sp/>)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>create<sp/>an<sp/>iterator<sp/>at<sp/>the<sp/>start<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp_it<sp/>=<sp/><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref>(<sp/>cp,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6f21e6d36b3289b547df54833397d527" kindref="member">start_part_</ref>,<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref>,<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_it<sp/>+=<sp/><ref refid="namespacenest_1_1names_1ab6ca205fde8a56746ee51ff1714598cb" kindref="member">offset</ref>;<sp/></highlight><highlight class="comment">//<sp/>Go<sp/>forward<sp/>to<sp/>the<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_it.get_current_part_offset(<sp/>current_part,<sp/>current_offset<sp/>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref>(<sp/>cp,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>current_part,<sp/>current_offset,<sp/>num_vp_elements<sp/>*<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal">ArrayDatum</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a35c866c0e2eb4bf0d8475f99de17c773" kindref="member">NodeCollectionComposite::to_array</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="905"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>ArrayDatum<sp/>node_ids;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>node_ids.reserve(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1e260655d6d01212c82ce9dbe3389d8d" kindref="member">size</ref>()<sp/>);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a21cb441d1685b69d7f2f568aeaca5b6e" kindref="member">begin</ref>();<sp/>it<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref>();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>node_ids.push_back(<sp/>(<sp/>*it<sp/>).node_id<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_ids;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a3ce7324e418545024e0437812491205e" kindref="member">NodeCollectionComposite::slice</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>step<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="917"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref><sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadParameter(<sp/></highlight><highlight class="stringliteral">&quot;start<sp/>&lt;<sp/>stop<sp/>required.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref><sp/>&lt;=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1e260655d6d01212c82ce9dbe3389d8d" kindref="member">size</ref>()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadParameter(<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>&lt;=<sp/>size()<sp/>required.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/><ref refid="classnest_1_1NodeCollection_1adb932309733fdb13dc14c6fa82ec6f7c" kindref="member">valid</ref>()<sp/>)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>KernelException(</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InvalidNodeCollection:<sp/>note<sp/>that<sp/>ResetKernel<sp/>invalidates<sp/>all<sp/>previously<sp/>created<sp/>NodeCollections.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_composite<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1adfbf2ac5d4518b3c16f29e9149f95acb" kindref="member">NodeCollectionComposite</ref>(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="namespacenest_1_1names_1aa93a7f7f8ccafde2e02d7e1cf97e8882" kindref="member">start</ref>,<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref>,<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a486a189ff78ec7e4c3333bb3bb408006" kindref="member">step</ref><sp/>);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a486a189ff78ec7e4c3333bb3bb408006" kindref="member">step</ref><sp/>==<sp/>1<sp/>and<sp/>new_composite.start_part_<sp/>==<sp/>new_composite.end_part_<sp/>)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>only<sp/>the<sp/>primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_composite.parts_[<sp/>new_composite.start_part_<sp/>].slice(</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_composite.start_offset_,<sp/>new_composite.end_offset_<sp/>);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;<sp/>NodeCollectionComposite<sp/>&gt;(<sp/>new_composite<sp/>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a19656bed68ef65341bb5adafb224cdcf" kindref="member">NodeCollectionComposite::merge_parts_</ref>(<sp/>std::vector&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;&amp;<sp/>parts<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="945"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_merge<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>to<sp/>enter<sp/>the<sp/>while<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>last_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>did_merge<sp/>)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>parts<sp/>is<sp/>changed,<sp/>it<sp/>has<sp/>to<sp/>be<sp/>checked<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>did_merge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>last_i;<sp/>i<sp/>&lt;<sp/>parts.size()<sp/>-<sp/>1;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parts[<sp/>i<sp/>].is_contiguous_ascending(<sp/>parts[<sp/>i<sp/>+<sp/>1<sp/>]<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref><sp/>merged_primitivesPTR<sp/>=</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts[<sp/>i<sp/>]<sp/>+<sp/>std::make_shared&lt;<sp/>NodeCollectionPrimitive<sp/>&gt;(<sp/>parts[<sp/>i<sp/>+<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>merged_primitives<sp/>=</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive<sp/>const*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>merged_primitivesPTR.get()<sp/>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts[<sp/>i<sp/>]<sp/>=<sp/>*merged_primitives;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts.erase(<sp/>parts.begin()<sp/>+<sp/>i<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>did_merge<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a5008b9e4d16f8d4486229a1c09c0e267" kindref="member">NodeCollectionComposite::contains</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>node_id<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="972"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnest_1_1NodeCollectionComposite_1a032a030306e6d1f4e06107fbecefdd9f" kindref="member">find</ref>(<sp/>node_id<sp/>)<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a032a030306e6d1f4e06107fbecefdd9f" kindref="member">NodeCollectionComposite::find</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>node_id<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="978"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>add_size_op<sp/>=<sp/>[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive&amp;<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref><sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a7b383c5d74fcb49623336cdb4902fe4e" kindref="member">a</ref><sp/>+<sp/><ref refid="namespacenest_1_1names_1aa06f71460d73472a90e5d08ac1e5c68e" kindref="member">b</ref>.size();<sp/>};</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lower<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>lower<sp/>&lt;=<sp/>upper<sp/>)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>middle<sp/>=<sp/>(<sp/>lower<sp/>+<sp/>upper<sp/>)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>][<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>].<ref refid="classnest_1_1NodeCollectionComposite_1a1e260655d6d01212c82ce9dbe3389d8d" kindref="member">size</ref>()<sp/>-<sp/>1<sp/>]<sp/>&lt;<sp/>node_id<sp/>)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lower<sp/>=<sp/>middle<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>node_id<sp/>&lt;<sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>][<sp/>0<sp/>]<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>middle<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point<sp/>we<sp/>know<sp/>that<sp/>node_id<sp/>is<sp/>in<sp/>parts_[middle].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6ab75e064b25a77ff8c38a7ab83acc03" kindref="member">is_sliced_</ref><sp/>)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6f21e6d36b3289b547df54833397d527" kindref="member">start_part_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>middle<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6f21e6d36b3289b547df54833397d527" kindref="member">start_part_</ref><sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>&lt;<sp/>middle<sp/>)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>middle<sp/>is<sp/>outside<sp/>of<sp/>the<sp/>sliced<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>find<sp/>number<sp/>of<sp/>nodes<sp/>in<sp/>previous<sp/>parts<sp/>to<sp/>know<sp/>if<sp/>the<sp/>the<sp/>step<sp/>hits<sp/>the<sp/>node_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_prev_nodes<sp/>=</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin(),<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin()<sp/>+<sp/>middle,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>0<sp/>),<sp/>add_size_op<sp/>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>absolute_pos<sp/>=<sp/>num_prev_nodes<sp/>+<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>].find(<sp/>node_id<sp/>);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>or<sp/>the<sp/>last<sp/>node<sp/>can<sp/>be<sp/>somewhere<sp/>in<sp/>the<sp/>middle<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>absolute_part_start<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6f21e6d36b3289b547df54833397d527" kindref="member">start_part_</ref><sp/>==<sp/>middle<sp/>?<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref><sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>absolute_part_end<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>==<sp/>middle<sp/>?<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>:<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>].size();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>node_id<sp/>in<sp/>the<sp/>sliced<sp/>NC?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_id_before_start<sp/>=<sp/>node_id<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>][<sp/>absolute_part_start<sp/>];</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_id_after_end<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>][<sp/>absolute_part_end<sp/>-<sp/>1<sp/>]<sp/>&lt;<sp/>node_id;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_id_missed_by_step<sp/>=<sp/>(<sp/>(<sp/>absolute_pos<sp/>-<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref><sp/>)<sp/>%<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>node_id_before_start<sp/>or<sp/>node_id_after_end<sp/>or<sp/>node_id_missed_by_step<sp/>)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>calculated<sp/>local<sp/>ID<sp/>of<sp/>node_id.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>absolute_pos<sp/>-<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a5fa580e2807ffc4d23be51f880cf3687" kindref="member">start_offset_</ref><sp/>)<sp/>/<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>NC<sp/>is<sp/>not<sp/>sliced,<sp/>we<sp/>can<sp/>just<sp/>calculate<sp/>and<sp/>return<sp/>the<sp/>local<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum_pre<sp/>=</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin(),<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin()<sp/>+<sp/>middle,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>0<sp/>),<sp/>add_size_op<sp/>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum_pre<sp/>+<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>middle<sp/>].find(<sp/>node_id<sp/>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a74861480c52ee29bd5ceceac750affff" kindref="member">NodeCollectionComposite::has_proxies</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1042"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin(),<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.end(),<sp/>[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeCollectionPrimitive&amp;<sp/>prim<sp/>)<sp/>{<sp/>return<sp/>prim.has_proxies();<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><ref refid="classnest_1_1NodeCollectionComposite_1a0e3adf6b5bc35aa1ce5331c23b6f0b1c" kindref="member">NodeCollectionComposite::print_me</ref>(<sp/>std::ostream&amp;<sp/>out<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1049"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>std::string<sp/>metadata<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>0<sp/>].get_metadata().get()<sp/>?<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>[<sp/>0<sp/>].get_metadata()-&gt;get_type()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>std::string<sp/>nc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NodeCollection(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>std::string<sp/>space(<sp/>nc.size(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a6ab75e064b25a77ff8c38a7ab83acc03" kindref="member">is_sliced_</ref><sp/>)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&gt;<sp/>1<sp/>or<sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a8c178dcf21d205e6ace114a5753565b2" kindref="member">end_part_</ref><sp/>!=<sp/>0<sp/>or<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a50e78dfd559464289a34cbb0b461725f" kindref="member">end_offset_</ref><sp/>!=<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sliced<sp/>composite<sp/>NodeCollection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_part<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>previous_part<sp/>=<sp/>std::numeric_limits&lt;<sp/>size_t<sp/>&gt;::infinity();</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref><sp/>primitive_last<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>primitive_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeIDTriple<sp/>first_in_primitive<sp/>=<sp/>*<ref refid="classnest_1_1NodeCollectionComposite_1a21cb441d1685b69d7f2f568aeaca5b6e" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>string_vector;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>nc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;metadata=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>metadata<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollection_1a5d04609b236213bac6efa5372a5cbb42" kindref="member">const_iterator</ref><sp/>it<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a21cb441d1685b69d7f2f568aeaca5b6e" kindref="member">begin</ref>();<sp/>it<sp/>&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a1a07c19cccfdb8622b54557b899ff8df" kindref="member">end</ref>();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it.get_current_part_offset(<sp/>current_part,<sp/>current_offset<sp/>);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current_part<sp/>!=<sp/>previous_part<sp/>)<sp/></highlight><highlight class="comment">//<sp/>New<sp/>primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>!=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a21cb441d1685b69d7f2f568aeaca5b6e" kindref="member">begin</ref>()<sp/>)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>count<sp/>the<sp/>primitive,<sp/>so<sp/>can&apos;t<sp/>start<sp/>at<sp/>begin()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>space</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;model=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" kindref="member">model_manager</ref>.<ref refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" kindref="member">get_node_model</ref>(<sp/>first_in_primitive.model_id<sp/>)-&gt;<ref refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" kindref="member">get_name</ref>()</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>size=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>primitive_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primitive_size<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_in_primitive.node_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>last=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_in_primitive.node_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_in_primitive.node_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>last=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>primitive_last;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>step=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitive_size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_in_primitive<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++primitive_size;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_last<sp/>=<sp/>(<sp/>*it<sp/>).node_id;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previous_part<sp/>=<sp/>current_part;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>also<sp/>print<sp/>the<sp/>last<sp/>primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>space<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;model=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" kindref="member">kernel</ref>().<ref refid="classnest_1_1KernelManager_1a3558ff4918f9a1a561a11f65ae757c76" kindref="member">model_manager</ref>.<ref refid="classnest_1_1ModelManager_1a8058f85d46bd4af4c2f726be59aa269b" kindref="member">get_node_model</ref>(<sp/>first_in_primitive.model_id<sp/>)-&gt;<ref refid="classnest_1_1Model_1a44497c5d485772c2c527fbc2cac1bfdd" kindref="member">get_name</ref>()</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>size=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>primitive_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>primitive_size<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_in_primitive.node_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>last=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_in_primitive.node_id;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>first_in_primitive.node_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>last=&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>primitive_last;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref><sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>step=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classnest_1_1NodeCollectionComposite_1a0b2eea28a77662de01bfc2c227578315" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>None-sliced<sp/>Composite<sp/>NodeCollection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>nc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;metadata=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>metadata<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.end();<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>==<sp/><ref refid="classnest_1_1NodeCollectionComposite_1aceb770ed4b1fea6ca40c9a006235b551" kindref="member">parts_</ref>.end()<sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>space;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;print_primitive(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>space;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;print_primitive(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nest</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/node_collection.cpp"/>
  </compounddef>
</doxygen>
