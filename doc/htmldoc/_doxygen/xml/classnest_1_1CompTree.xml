<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1CompTree" kind="class" language="C++" prot="public">
    <compoundname>nest::CompTree</compoundname>
    <includes refid="cm__tree_8h" local="no">cm_tree.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1CompTree_1a698392d9f3ee4d836245cac78deb341a" prot="private" static="no" mutable="yes">
        <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref></type>
        <definition>Compartment nest::CompTree::root_</definition>
        <argsstring></argsstring>
        <name>root_</name>
        <qualifiedname>nest::CompTree::root_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="152" column="23" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="152" bodyend="-1"/>
        <referencedby refid="classnest_1_1CompTree_1a4e437f0128c27119bc6abb6b2a408c9c" compoundref="cm__tree_8h" startline="187" endline="190">get_root</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1CompTree_1a6d5a708371ef04d2e3af39dfb1a4c571" prot="private" static="no" mutable="no">
        <type>std::vector&lt; long &gt;</type>
        <definition>std::vector&lt; long &gt; nest::CompTree::compartment_indices_</definition>
        <argsstring></argsstring>
        <name>compartment_indices_</name>
        <qualifiedname>nest::CompTree::compartment_indices_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="153" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1CompTree_1a7c3ef19905921df906e68c66ddac9acd" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> * &gt;</type>
        <definition>std::vector&lt; Compartment* &gt; nest::CompTree::compartments_</definition>
        <argsstring></argsstring>
        <name>compartments_</name>
        <qualifiedname>nest::CompTree::compartments_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="154" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="154" bodyend="-1"/>
        <referencedby refid="classnest_1_1CompTree_1a531fa15badac1442b60d190d7d8bcdba" compoundref="cm__tree_8cpp" startline="153" endline="159">CompTree</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1CompTree_1a5607d41bb2978067140ce5fe6a0f71a3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> * &gt;</type>
        <definition>std::vector&lt; Compartment* &gt; nest::CompTree::leafs_</definition>
        <argsstring></argsstring>
        <name>leafs_</name>
        <qualifiedname>nest::CompTree::leafs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="155" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="155" bodyend="-1"/>
        <referencedby refid="classnest_1_1CompTree_1a531fa15badac1442b60d190d7d8bcdba" compoundref="cm__tree_8cpp" startline="153" endline="159">CompTree</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1CompTree_1ac12d3156d8e221560006e485e2edaec3" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long nest::CompTree::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>nest::CompTree::size_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="157" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="157" bodyend="-1"/>
        <referencedby refid="classnest_1_1CompTree_1a3c7f0301d4aabad6ebb9ffd286a0eae3" compoundref="cm__tree_8h" startline="194" endline="197">get_size</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1CompTree_1a7de4791c5d7b2d10ec9e889eb79ba758" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::solve_matrix_downsweep</definition>
        <argsstring>(Compartment *compartment_ptr, std::vector&lt; Compartment * &gt;::iterator leaf_it)</argsstring>
        <name>solve_matrix_downsweep</name>
        <qualifiedname>nest::CompTree::solve_matrix_downsweep</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
          <declname>compartment_ptr</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> * &gt;::iterator</type>
          <declname>leaf_it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="160" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="433" bodyend="462"/>
        <references refid="classnest_1_1Compartment_1a3ac2363f8348e9e1f6015e27fbfffeec" compoundref="cm__tree_8h" startline="65">nest::Compartment::children</references>
        <references refid="classnest_1_1Compartment_1af24a604d888d69e30253b28935bc771b" compoundref="cm__tree_8h" startline="114" endline="118">nest::Compartment::gather_input</references>
        <references refid="classnest_1_1Compartment_1aa0d16b1608f622cabba88e7d725c8ffe" compoundref="cm__tree_8h" startline="120" endline="131">nest::Compartment::io</references>
        <references refid="classnest_1_1Compartment_1adc2f5297cefd7cb15ec93b8ebfea2d8c" compoundref="cm__tree_8h" startline="89">nest::Compartment::n_passed</references>
        <references refid="classnest_1_1Compartment_1a25b343d9c8b8df234cb515385a7bf130" compoundref="cm__tree_8h" startline="64">nest::Compartment::parent</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a649df3b8835f0b6bb4a97bcfcc8aeb3d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::solve_matrix_upsweep</definition>
        <argsstring>(Compartment *compartment, double vv)</argsstring>
        <name>solve_matrix_upsweep</name>
        <qualifiedname>nest::CompTree::solve_matrix_upsweep</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
          <declname>compartment</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="161" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="465" bodyend="474"/>
        <references refid="classnest_1_1Compartment_1aab137075e52086cdd78c673c91321a4d" compoundref="cm__tree_8h" startline="133" endline="143">nest::Compartment::calc_v</references>
        <references refid="classnest_1_1Compartment_1a3ac2363f8348e9e1f6015e27fbfffeec" compoundref="cm__tree_8h" startline="65">nest::Compartment::children</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a2c5d92cee45102aef3286edbb3683ce8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::set_parents</definition>
        <argsstring>()</argsstring>
        <name>set_parents</name>
        <qualifiedname>nest::CompTree::set_parents</qualifiedname>
        <briefdescription>
<para>For each compartments, sets its pointer towards its parent compartment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="164" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="287" bodyend="297"/>
        <references refid="classnest_1_1Compartment_1af1c2ba2c9c322e6d285cf7a4252fe1ee" compoundref="cm__tree_8h" startline="62">nest::Compartment::p_index</references>
        <references refid="classnest_1_1Compartment_1a25b343d9c8b8df234cb515385a7bf130" compoundref="cm__tree_8h" startline="64">nest::Compartment::parent</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a7da265253f7b0c81fd7340ec7c8b3302" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::set_compartments</definition>
        <argsstring>()</argsstring>
        <name>set_compartments</name>
        <qualifiedname>nest::CompTree::set_compartments</qualifiedname>
        <briefdescription>
<para>Creates a vector of compartment pointers, organized in the order in which they were added by <computeroutput><ref refid="classnest_1_1CompTree_1a48398242a38df83e8f590937ef9cf424" kindref="member">add_compartment()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="165" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="304" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a1453ac333931a82971c18b47a926a80b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::set_leafs</definition>
        <argsstring>()</argsstring>
        <name>set_leafs</name>
        <qualifiedname>nest::CompTree::set_leafs</qualifiedname>
        <briefdescription>
<para>Creates a vector of compartment pointers of compartments that are also leafs of the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="166" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="319" bodyend="329"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1CompTree_1a531fa15badac1442b60d190d7d8bcdba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::CompTree::CompTree</definition>
        <argsstring>()</argsstring>
        <name>CompTree</name>
        <qualifiedname>nest::CompTree::CompTree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="170" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="153" bodyend="159"/>
        <references refid="classnest_1_1CompTree_1a7c3ef19905921df906e68c66ddac9acd" compoundref="cm__tree_8h" startline="154">compartments_</references>
        <references refid="classnest_1_1CompTree_1a5607d41bb2978067140ce5fe6a0f71a3" compoundref="cm__tree_8h" startline="155">leafs_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a9f0827e5214ee958651318b9c244519d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::CompTree::~CompTree</definition>
        <argsstring>()</argsstring>
        <name>~CompTree</name>
        <qualifiedname>nest::CompTree::~CompTree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="171" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a48398242a38df83e8f590937ef9cf424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::add_compartment</definition>
        <argsstring>(const long parent_index)</argsstring>
        <name>add_compartment</name>
        <qualifiedname>nest::CompTree::add_compartment</qualifiedname>
        <param>
          <type>const long</type>
          <declname>parent_index</declname>
        </param>
        <briefdescription>
<para>Add a compartment to the tree structure via the python interface root should have -1 as parent index. </para>
        </briefdescription>
        <detaileddescription>
<para>Add root compartment first. Assumes parent of compartment is already added </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="174" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a65420d0dd58b9b9b82718c66688e6459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::add_compartment</definition>
        <argsstring>(const long parent_index, const DictionaryDatum &amp;compartment_params)</argsstring>
        <name>add_compartment</name>
        <qualifiedname>nest::CompTree::add_compartment</qualifiedname>
        <param>
          <type>const long</type>
          <declname>parent_index</declname>
        </param>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
          <declname>compartment_params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="175" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a800da38436f2250f86af3e2f04f31b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::add_compartment</definition>
        <argsstring>(Compartment *compartment, const long parent_index)</argsstring>
        <name>add_compartment</name>
        <qualifiedname>nest::CompTree::add_compartment</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
          <declname>compartment</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>parent_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>we do not raise an <ref refid="classnest_1_1UnknownCompartment" kindref="compound">UnknownCompartment</ref> exception from within <ref refid="classnest_1_1CompTree_1a7b428d60f0438fa398a2072b2ccaf00a" kindref="member">get_compartment()</ref>, because we want to print a more informative exception message</para>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="176" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="181" bodyend="215"/>
        <references refid="classnest_1_1Compartment_1a3ac2363f8348e9e1f6015e27fbfffeec" compoundref="cm__tree_8h" startline="65">nest::Compartment::children</references>
        <references refid="classnest_1_1Compartment_1a9daf8fc9ef29ae17f59907c07abd39b9" compoundref="cm__tree_8h" startline="60">nest::Compartment::comp_index</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a51c187e456019aa1519a9218a3cd6ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::pre_run_hook</definition>
        <argsstring>()</argsstring>
        <name>pre_run_hook</name>
        <qualifiedname>nest::CompTree::pre_run_hook</qualifiedname>
        <briefdescription>
<para>Initialize state variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="177" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="367" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a6e940a5edbaf6483a6d663e9849fb102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::init_pointers</definition>
        <argsstring>()</argsstring>
        <name>init_pointers</name>
        <qualifiedname>nest::CompTree::init_pointers</qualifiedname>
        <briefdescription>
<para>Initialize all tree structure pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="178" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a2fd12be01fddb35e04ed3b52da53bc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::set_syn_buffers</definition>
        <argsstring>(std::vector&lt; RingBuffer &gt; &amp;syn_buffers)</argsstring>
        <name>set_syn_buffers</name>
        <qualifiedname>nest::CompTree::set_syn_buffers</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classnest_1_1RingBuffer" kindref="compound">RingBuffer</ref> &gt; &amp;</type>
          <declname>syn_buffers</declname>
        </param>
        <briefdescription>
<para>Initializes pointers for the spike buffers for all synapse receptors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="179" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="335" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a9e2183c2d8b8c54e132be56d463e043f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="className" kindref="compound">Name</ref>, double * &gt;</type>
        <definition>std::map&lt; Name, double * &gt; nest::CompTree::get_recordables</definition>
        <argsstring>()</argsstring>
        <name>get_recordables</name>
        <qualifiedname>nest::CompTree::get_recordables</qualifiedname>
        <briefdescription>
<para>Returns a map of variable names and pointers to the recordables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>add recordables for all compartments, suffixed by compartment_idx, to &quot;recordables&quot;</para>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="180" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="347" bodyend="361"/>
        <references refid="className_1a164be5d83e26df92490ea1f61df7de73" compoundref="name_8cc" startline="78" endline="104">Name::insert</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a7b428d60f0438fa398a2072b2ccaf00a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
        <definition>nest::Compartment * nest::CompTree::get_compartment</definition>
        <argsstring>(const long compartment_index) const</argsstring>
        <name>get_compartment</name>
        <qualifiedname>nest::CompTree::get_compartment</qualifiedname>
        <param>
          <type>const long</type>
          <declname>compartment_index</declname>
        </param>
        <briefdescription>
<para>Get the compartment corresponding to the provided index in the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the compartments by a recursive search through the tree.</para>
<para>The overloaded functions looks only in the subtree of the provided compartment, and also has the option to throw an error if no compartment corresponding to <computeroutput>compartment_index</computeroutput> is found in the tree </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="183" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="227" bodyend="230"/>
        <referencedby refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" compoundref="cm__default_8cpp" startline="70" endline="98">nest::cm_default::get_status</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656" compoundref="cm__default_8h" startline="314" endline="325">nest::cm_default::handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a5f4c36a303848d1b0dae56db612d1e61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
        <definition>nest::Compartment * nest::CompTree::get_compartment</definition>
        <argsstring>(const long compartment_index, Compartment *compartment, const long raise_flag) const</argsstring>
        <name>get_compartment</name>
        <qualifiedname>nest::CompTree::get_compartment</qualifiedname>
        <param>
          <type>const long</type>
          <declname>compartment_index</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
          <declname>compartment</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>raise_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="184" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="233" bodyend="258"/>
        <references refid="classnest_1_1Compartment_1a3ac2363f8348e9e1f6015e27fbfffeec" compoundref="cm__tree_8h" startline="65">nest::Compartment::children</references>
        <references refid="classnest_1_1Compartment_1a9daf8fc9ef29ae17f59907c07abd39b9" compoundref="cm__tree_8h" startline="60">nest::Compartment::comp_index</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a5d70d5dafe1db4c06e3db576149388e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
        <definition>nest::Compartment * nest::CompTree::get_compartment_opt</definition>
        <argsstring>(const long compartment_indx) const</argsstring>
        <name>get_compartment_opt</name>
        <qualifiedname>nest::CompTree::get_compartment_opt</qualifiedname>
        <param>
          <type>const long</type>
          <declname>compartment_indx</declname>
          <defname>compartment_idx</defname>
        </param>
        <briefdescription>
<para>Get the compartment corresponding to the provided index in the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>Optimized trough the use of a pointer vector containing all compartments. Calling this function before <ref refid="classnest_1_1CompTree_1a6e940a5edbaf6483a6d663e9849fb102" kindref="member">CompTree::init_pointers()</ref> is called will result in a segmentation fault </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="185" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a4e437f0128c27119bc6abb6b2a408c9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1Compartment" kindref="compound">Compartment</ref> *</type>
        <definition>Compartment * nest::CompTree::get_root</definition>
        <argsstring>() const</argsstring>
        <name>get_root</name>
        <qualifiedname>nest::CompTree::get_root</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="187" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="187" bodyend="190"/>
        <references refid="classnest_1_1CompTree_1a698392d9f3ee4d836245cac78deb341a" compoundref="cm__tree_8h" startline="152">root_</references>
        <referencedby refid="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656" compoundref="cm__default_8h" startline="314" endline="325">nest::cm_default::handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a3c7f0301d4aabad6ebb9ffd286a0eae3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long nest::CompTree::get_size</definition>
        <argsstring>() const</argsstring>
        <name>get_size</name>
        <qualifiedname>nest::CompTree::get_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="194" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="194" bodyend="197"/>
        <references refid="classnest_1_1CompTree_1ac12d3156d8e221560006e485e2edaec3" compoundref="cm__tree_8h" startline="157">size_</references>
        <referencedby refid="classnest_1_1cm__default_1a78fc40bde71c693a9231a99467ecb72c" compoundref="cm__default_8cpp" startline="70" endline="98">nest::cm_default::get_status</referencedby>
        <referencedby refid="classnest_1_1cm__default_1a4dfc43c05b72a7ebd3bdde2a00574656" compoundref="cm__default_8h" startline="314" endline="325">nest::cm_default::handles_test_event</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a523b1bc4eb18bea8baa3430300b1e4ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::CompTree::get_voltage</definition>
        <argsstring>() const</argsstring>
        <name>get_voltage</name>
        <qualifiedname>nest::CompTree::get_voltage</qualifiedname>
        <briefdescription>
<para>Returns vector of voltage values, indices correspond to compartments in <computeroutput>compartments_</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="200" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="386" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a6b0cb3d83ab09c1ffa37963e568018f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double nest::CompTree::get_compartment_voltage</definition>
        <argsstring>(const long compartment_index)</argsstring>
        <name>get_compartment_voltage</name>
        <qualifiedname>nest::CompTree::get_compartment_voltage</qualifiedname>
        <param>
          <type>const long</type>
          <declname>compartment_index</declname>
        </param>
        <briefdescription>
<para>Return voltage of single compartment voltage, indicated by the compartment_index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="201" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a7ed5d38f0efe9762dcb40577fc6493c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::construct_matrix</definition>
        <argsstring>(const long lag)</argsstring>
        <name>construct_matrix</name>
        <qualifiedname>nest::CompTree::construct_matrix</qualifiedname>
        <param>
          <type>const long</type>
          <declname>lag</declname>
        </param>
        <briefdescription>
<para>Construct the matrix equation to be solved to advance the model one timestep. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="204" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="409" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1aca870ba7d6d54bc96e7278b79441ca35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::solve_matrix</definition>
        <argsstring>()</argsstring>
        <name>solve_matrix</name>
        <qualifiedname>nest::CompTree::solve_matrix</qualifiedname>
        <briefdescription>
<para>Solve matrix with O(n) algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="206" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="421" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1CompTree_1a55816f3fb6b80fdd829a1ef4b4a9524d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nest::CompTree::print_tree</definition>
        <argsstring>() const</argsstring>
        <name>print_tree</name>
        <qualifiedname>nest::CompTree::print_tree</qualifiedname>
        <briefdescription>
<para>Print the tree graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="209" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.cpp" bodystart="480" bodyend="499"/>
        <references refid="classnest_1_1Compartment_1a2eb22d1d9e8b0432a64eccfb58a0a013" compoundref="cm__tree_8h" startline="74">nest::Compartment::ca</references>
        <references refid="classnest_1_1Compartment_1a9daf8fc9ef29ae17f59907c07abd39b9" compoundref="cm__tree_8h" startline="60">nest::Compartment::comp_index</references>
        <references refid="classnest_1_1Compartment_1a1d52dc90f938bcdd5af5b0f8274783ca" compoundref="cm__tree_8h" startline="77">nest::Compartment::el</references>
        <references refid="classnest_1_1Compartment_1a47fbcbc41f4cad32472cda77138f79e6" compoundref="cm__tree_8h" startline="75">nest::Compartment::gc</references>
        <references refid="classnest_1_1Compartment_1a4458df1849b5dee8197585417b5b05eb" compoundref="cm__tree_8h" startline="76">nest::Compartment::gl</references>
        <references refid="classnest_1_1Compartment_1a25b343d9c8b8df234cb515385a7bf130" compoundref="cm__tree_8h" startline="64">nest::Compartment::parent</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>nest::CompTree</label>
        <link refid="classnest_1_1CompTree"/>
        <childnode refid="2" relation="usage">
          <edgelabel>root_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::Compartment</label>
        <link refid="classnest_1_1Compartment"/>
        <childnode refid="2" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>compartment_currents</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>currents</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>nest::CompartmentCurrents</label>
        <link refid="classnest_1_1CompartmentCurrents"/>
        <childnode refid="4" relation="usage">
          <edgelabel>Na_chan_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>K_chan_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>nest::K</label>
        <link refid="classnest_1_1K"/>
      </node>
      <node id="4">
        <label>nest::Na</label>
        <link refid="classnest_1_1Na"/>
      </node>
      <node id="6">
        <label>nest::RingBuffer</label>
        <link refid="classnest_1_1RingBuffer"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" line="146" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/cm_tree.h" bodystart="147" bodyend="210"/>
    <listofallmembers>
      <member refid="classnest_1_1CompTree_1a48398242a38df83e8f590937ef9cf424" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>add_compartment</name></member>
      <member refid="classnest_1_1CompTree_1a65420d0dd58b9b9b82718c66688e6459" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>add_compartment</name></member>
      <member refid="classnest_1_1CompTree_1a800da38436f2250f86af3e2f04f31b81" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>add_compartment</name></member>
      <member refid="classnest_1_1CompTree_1a6d5a708371ef04d2e3af39dfb1a4c571" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>compartment_indices_</name></member>
      <member refid="classnest_1_1CompTree_1a7c3ef19905921df906e68c66ddac9acd" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>compartments_</name></member>
      <member refid="classnest_1_1CompTree_1a531fa15badac1442b60d190d7d8bcdba" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>CompTree</name></member>
      <member refid="classnest_1_1CompTree_1a7ed5d38f0efe9762dcb40577fc6493c8" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>construct_matrix</name></member>
      <member refid="classnest_1_1CompTree_1a7b428d60f0438fa398a2072b2ccaf00a" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_compartment</name></member>
      <member refid="classnest_1_1CompTree_1a5f4c36a303848d1b0dae56db612d1e61" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_compartment</name></member>
      <member refid="classnest_1_1CompTree_1a5d70d5dafe1db4c06e3db576149388e0" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_compartment_opt</name></member>
      <member refid="classnest_1_1CompTree_1a6b0cb3d83ab09c1ffa37963e568018f6" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_compartment_voltage</name></member>
      <member refid="classnest_1_1CompTree_1a9e2183c2d8b8c54e132be56d463e043f" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_recordables</name></member>
      <member refid="classnest_1_1CompTree_1a4e437f0128c27119bc6abb6b2a408c9c" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_root</name></member>
      <member refid="classnest_1_1CompTree_1a3c7f0301d4aabad6ebb9ffd286a0eae3" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_size</name></member>
      <member refid="classnest_1_1CompTree_1a523b1bc4eb18bea8baa3430300b1e4ed" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>get_voltage</name></member>
      <member refid="classnest_1_1CompTree_1a6e940a5edbaf6483a6d663e9849fb102" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>init_pointers</name></member>
      <member refid="classnest_1_1CompTree_1a5607d41bb2978067140ce5fe6a0f71a3" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>leafs_</name></member>
      <member refid="classnest_1_1CompTree_1a51c187e456019aa1519a9218a3cd6ef4" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1CompTree_1a55816f3fb6b80fdd829a1ef4b4a9524d" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>print_tree</name></member>
      <member refid="classnest_1_1CompTree_1a698392d9f3ee4d836245cac78deb341a" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>root_</name></member>
      <member refid="classnest_1_1CompTree_1a7da265253f7b0c81fd7340ec7c8b3302" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>set_compartments</name></member>
      <member refid="classnest_1_1CompTree_1a1453ac333931a82971c18b47a926a80b" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>set_leafs</name></member>
      <member refid="classnest_1_1CompTree_1a2c5d92cee45102aef3286edbb3683ce8" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>set_parents</name></member>
      <member refid="classnest_1_1CompTree_1a2fd12be01fddb35e04ed3b52da53bc83" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>set_syn_buffers</name></member>
      <member refid="classnest_1_1CompTree_1ac12d3156d8e221560006e485e2edaec3" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>size_</name></member>
      <member refid="classnest_1_1CompTree_1aca870ba7d6d54bc96e7278b79441ca35" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>solve_matrix</name></member>
      <member refid="classnest_1_1CompTree_1a7de4791c5d7b2d10ec9e889eb79ba758" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>solve_matrix_downsweep</name></member>
      <member refid="classnest_1_1CompTree_1a649df3b8835f0b6bb4a97bcfcc8aeb3d" prot="private" virt="non-virtual"><scope>nest::CompTree</scope><name>solve_matrix_upsweep</name></member>
      <member refid="classnest_1_1CompTree_1a9f0827e5214ee958651318b9c244519d" prot="public" virt="non-virtual"><scope>nest::CompTree</scope><name>~CompTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
