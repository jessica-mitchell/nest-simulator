<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1iaf__psc__exp__htum" kind="class" language="C++" prot="public">
    <compoundname>nest::iaf_psc_exp_htum</compoundname>
    <basecompoundref refid="classnest_1_1ArchivingNode" prot="public" virt="non-virtual">nest::ArchivingNode</basecompoundref>
    <includes refid="iaf__psc__exp__htum_8h" local="no">iaf_psc_exp_htum.h</includes>
    <innerclass refid="structnest_1_1iaf__psc__exp__htum_1_1Buffers__" prot="private">nest::iaf_psc_exp_htum::Buffers_</innerclass>
    <innerclass refid="structnest_1_1iaf__psc__exp__htum_1_1Parameters__" prot="private">nest::iaf_psc_exp_htum::Parameters_</innerclass>
    <innerclass refid="structnest_1_1iaf__psc__exp__htum_1_1State__" prot="private">nest::iaf_psc_exp_htum::State_</innerclass>
    <innerclass refid="structnest_1_1iaf__psc__exp__htum_1_1Variables__" prot="private">nest::iaf_psc_exp_htum::Variables_</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1iaf__psc__exp__htum_1ab8215c4809d6041198f1ce27cb2e5b08" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RecordablesMap&lt; iaf_psc_exp_htum &gt;</definition>
        <argsstring></argsstring>
        <name>RecordablesMap&lt; iaf_psc_exp_htum &gt;</name>
        <qualifiedname>nest::iaf_psc_exp_htum::RecordablesMap&lt; iaf_psc_exp_htum &gt;</qualifiedname>
        <param>
          <type><ref refid="classnest_1_1RecordablesMap" kindref="compound">RecordablesMap</ref>&lt; <ref refid="classnest_1_1iaf__psc__exp__htum" kindref="compound">iaf_psc_exp_htum</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="183" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnest_1_1iaf__psc__exp__htum_1a545e960231a0ef6050ea11f9e3565343" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class UniversalDataLogger&lt; iaf_psc_exp_htum &gt;</definition>
        <argsstring></argsstring>
        <name>UniversalDataLogger&lt; iaf_psc_exp_htum &gt;</name>
        <qualifiedname>nest::iaf_psc_exp_htum::UniversalDataLogger&lt; iaf_psc_exp_htum &gt;</qualifiedname>
        <param>
          <type>UniversalDataLogger&lt; <ref refid="classnest_1_1iaf__psc__exp__htum" kindref="compound">iaf_psc_exp_htum</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="183" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="group__iaf__psc__exp__htum__data_1ga52d13689c28f744c8924e22737410794" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__exp__htum_1_1Parameters__" kindref="compound">Parameters_</ref></type>
        <definition>Parameters_ nest::iaf_psc_exp_htum::P_</definition>
        <argsstring></argsstring>
        <name>P_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::P_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="337" column="15" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="337" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a4ffb83aae4d6e6a48665e236959156ae" compoundref="iaf__psc__exp__htum_8h" startline="388" endline="394">get_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a03f1a591aae55252d3db05b848c0509c" compoundref="iaf__psc__exp__htum_8h" startline="397" endline="413">set_status</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__exp__htum_1_1State__" kindref="compound">State_</ref></type>
        <definition>State_ nest::iaf_psc_exp_htum::S_</definition>
        <argsstring></argsstring>
        <name>S_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::S_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="338" column="10" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="338" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a4bb25e8bc0a0a27a3e3a751ff0f5cb57" compoundref="iaf__psc__exp__htum_8h" startline="318" endline="321">get_I_syn_ex_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a71d96294d9bea35bd15afa2f3fec31d7" compoundref="iaf__psc__exp__htum_8h" startline="323" endline="326">get_I_syn_in_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a4ffb83aae4d6e6a48665e236959156ae" compoundref="iaf__psc__exp__htum_8h" startline="388" endline="394">get_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a7b116c7bed8fd3f5239ae6ccba1ac8a9" compoundref="iaf__psc__exp__htum_8h" startline="313" endline="316">get_V_m_</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a03f1a591aae55252d3db05b848c0509c" compoundref="iaf__psc__exp__htum_8h" startline="397" endline="413">set_status</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__iaf__psc__exp__htum__data_1gae3c2f7a651ccfe16be29cac13b694786" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__exp__htum_1_1Variables__" kindref="compound">Variables_</ref></type>
        <definition>Variables_ nest::iaf_psc_exp_htum::V_</definition>
        <argsstring></argsstring>
        <name>V_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::V_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="339" column="14" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__iaf__psc__exp__htum__data_1ga68686a08e2bb32ca6039f808c89d252a" prot="private" static="no" mutable="no">
        <type><ref refid="structnest_1_1iaf__psc__exp__htum_1_1Buffers__" kindref="compound">Buffers_</ref></type>
        <definition>Buffers_ nest::iaf_psc_exp_htum::B_</definition>
        <argsstring></argsstring>
        <name>B_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::B_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="340" column="12" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="340" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a5b48a9821467151a1600ae68afe41863" compoundref="iaf__psc__exp__htum_8h" startline="377" endline="384">handles_test_event</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classnest_1_1iaf__psc__exp__htum_1a9e1ab745cfbfa36fbb40a0df6a0cfeee" prot="private" static="yes" mutable="no">
        <type><ref refid="classnest_1_1RecordablesMap" kindref="compound">RecordablesMap</ref>&lt; <ref refid="classnest_1_1iaf__psc__exp__htum" kindref="compound">iaf_psc_exp_htum</ref> &gt;</type>
        <definition>nest::RecordablesMap&lt; nest::iaf_psc_exp_htum &gt; nest::iaf_psc_exp_htum::recordablesMap_</definition>
        <argsstring></argsstring>
        <name>recordablesMap_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::recordablesMap_</qualifiedname>
        <briefdescription>
<para>Mapping of recordables names to access functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="344" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="344" bodyend="-1"/>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a4ffb83aae4d6e6a48665e236959156ae" compoundref="iaf__psc__exp__htum_8h" startline="388" endline="394">get_status</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a5b48a9821467151a1600ae68afe41863" compoundref="iaf__psc__exp__htum_8h" startline="377" endline="384">handles_test_event</referencedby>
        <referencedby refid="classnest_1_1iaf__psc__exp__htum_1a349e4b4208750e3384c99a7cab4c8cd5" compoundref="iaf__psc__exp__htum_8cpp" startline="194" endline="201">iaf_psc_exp_htum</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a349e4b4208750e3384c99a7cab4c8cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::iaf_psc_exp_htum::iaf_psc_exp_htum</definition>
        <argsstring>()</argsstring>
        <name>iaf_psc_exp_htum</name>
        <qualifiedname>nest::iaf_psc_exp_htum::iaf_psc_exp_htum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="155" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="194" bodyend="201"/>
        <references refid="classnest_1_1iaf__psc__exp__htum_1a9e1ab745cfbfa36fbb40a0df6a0cfeee" compoundref="iaf__psc__exp__htum_8h" startline="344">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1ab99c508e2bc879160f53d63fe3459fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::iaf_psc_exp_htum::iaf_psc_exp_htum</definition>
        <argsstring>(const iaf_psc_exp_htum &amp;)</argsstring>
        <name>iaf_psc_exp_htum</name>
        <qualifiedname>nest::iaf_psc_exp_htum::iaf_psc_exp_htum</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1iaf__psc__exp__htum" kindref="compound">iaf_psc_exp_htum</ref> &amp;</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="156" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a52fc2d4a6e5b45cfe9686f10e81fcca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_exp_htum::send_test_event</definition>
        <argsstring>(Node &amp;, rport, synindex, bool) override</argsstring>
        <name>send_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::send_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a60608af8d6238b96071a9f64544ec5e3">send_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>receiving_node</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a2d283b4b36e5ee3b6f1d84b35c9ed475" kindref="member">synindex</ref></type>
          <declname>syn_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dummy_target</declname>
        </param>
        <briefdescription>
<para>Send an event to the receiving_node passed as an argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of check_connection just throws <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref>.</para>
<para>This is required during the connection handshaking to test, if the receiving_node can handle the event type and receptor_type sent by the source node.</para>
<para>If dummy_target is true, this indicates that receiving_node is derived from <ref refid="classnest_1_1ConnTestDummyNodeBase" kindref="compound">ConnTestDummyNodeBase</ref> and used in the first call to <ref refid="classnest_1_1iaf__psc__exp__htum_1a52fc2d4a6e5b45cfe9686f10e81fcca3" kindref="member">send_test_event()</ref>. This can be ignored in most cases, but Nodes sending DS*Events to their own event hooks and then *Events to their proper targets must send DS*Events when called with the dummy target, and *Events when called with the real target, see #478. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="166" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="349" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1aa54d77b806192c5c83a45fe21488204d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::handle</definition>
        <argsstring>(SpikeEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle incoming spike events. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation of event handlers just throws an <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thrd</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1Event" kindref="compound">Event</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This handler has to be implemented if a <ref refid="classnest_1_1Node" kindref="compound">Node</ref> should accept spike events. <simplesect kind="see"><para>class <ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref></para>
</simplesect>
<simplesect kind="see"><para>class <ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is the default event to throw. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="168" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="350" bodyend="364"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a1e474048278b8ad309aecf878ff42122" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::handle</definition>
        <argsstring>(CurrentEvent &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for current events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>handle(thread, SpikeEvent&amp;)</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="169" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="367" bodyend="376"/>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1ad9b2f0adf2568a55f0903e4c7e18eb6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::handle</definition>
        <argsstring>(DataLoggingRequest &amp;) override</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handler for universal data logging request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnest_1_1iaf__psc__exp__htum_1aa54d77b806192c5c83a45fe21488204d" kindref="member">handle(SpikeEvent&amp;)</ref></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1UnexpectedEvent" kindref="compound">UnexpectedEvent</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="170" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_exp_htum::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1iaf__psc__exp__htum_1a52fc2d4a6e5b45cfe9686f10e81fcca3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="172" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="357" bodyend="364"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a2797a7ec7db9f5b919e20b4b2f2cdeee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_exp_htum::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="173" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="367" bodyend="374"/>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a5b48a9821467151a1600ae68afe41863" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::iaf_psc_exp_htum::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport) override</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <defname>dlr</defname>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <defname>receptor_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="174" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="377" bodyend="384"/>
        <references refid="group__iaf__psc__exp__htum__data_1ga68686a08e2bb32ca6039f808c89d252a" compoundref="iaf__psc__exp__htum_8h" startline="340">B_</references>
        <references refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" compoundref="node_8cpp" startline="108" endline="116">nest::Node::get_name</references>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1Buffers___1a38fcd1f3e7728f56a32a41ab3476ec57" compoundref="iaf__psc__exp__htum_8h" startline="280">nest::iaf_psc_exp_htum::Buffers_::logger_</references>
        <references refid="classnest_1_1iaf__psc__exp__htum_1a9e1ab745cfbfa36fbb40a0df6a0cfeee" compoundref="iaf__psc__exp__htum_8h" startline="344">recordablesMap_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a4ffb83aae4d6e6a48665e236959156ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <qualifiedname>nest::iaf_psc_exp_htum::get_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga85f1a73dde2b60e4353429eb22c31bcf">get_status</reimplements>
        <param>
          <type><ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Export properties of the node by setting entries in the status dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="176" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="388" bodyend="394"/>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1Parameters___1a5b6621faceacc24a0c2ab7d5f98bc140" compoundref="iaf__psc__exp__htum_8cpp" startline="91" endline="103">nest::iaf_psc_exp_htum::Parameters_::get</references>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1State___1a6cdfa893c813eddbf43db10e2ebd330f" compoundref="iaf__psc__exp__htum_8cpp" startline="162" endline="165">nest::iaf_psc_exp_htum::State_::get</references>
        <references refid="classnest_1_1ArchivingNode_1acd46838612262b4a5d4cacdf7d901145" compoundref="archiving__node_8cpp" startline="221" endline="233">nest::ArchivingNode::get_status</references>
        <references refid="group__iaf__psc__exp__htum__data_1ga52d13689c28f744c8924e22737410794" compoundref="iaf__psc__exp__htum_8h" startline="337">P_</references>
        <references refid="namespacenest_1_1names_1a62373422f098eca1af4ddd73144c5928" compoundref="nest__names_8h" startline="404">nest::names::recordables</references>
        <references refid="classnest_1_1iaf__psc__exp__htum_1a9e1ab745cfbfa36fbb40a0df6a0cfeee" compoundref="iaf__psc__exp__htum_8h" startline="344">recordablesMap_</references>
        <references refid="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" compoundref="iaf__psc__exp__htum_8h" startline="338">S_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a03f1a591aae55252d3db05b848c0509c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <qualifiedname>nest::iaf_psc_exp_htum::set_status</qualifiedname>
        <reimplements refid="group__status__interface_1ga9d7a4a3a64d03a4d7f6c5df87c80fe36">set_status</reimplements>
        <param>
          <type>const <ref refid="dictdatum_8h_1a4a4d8eba002ed1473f9f196598b268bc" kindref="member">DictionaryDatum</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Change properties of the node according to the entries in the dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classDictionary" kindref="compound">Dictionary</ref> with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="177" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="397" bodyend="413"/>
        <references refid="group__iaf__psc__exp__htum__data_1ga52d13689c28f744c8924e22737410794" compoundref="iaf__psc__exp__htum_8h" startline="337">P_</references>
        <references refid="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" compoundref="iaf__psc__exp__htum_8h" startline="338">S_</references>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1State___1a1a0da7658d4c42ff5338350cc8731118" compoundref="iaf__psc__exp__htum_8cpp" startline="168" endline="178">nest::iaf_psc_exp_htum::State_::set</references>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1Parameters___1a26c0a85b5d547835133746f4ceb22a7b" compoundref="iaf__psc__exp__htum_8cpp" startline="106" endline="159">nest::iaf_psc_exp_htum::Parameters_::set</references>
        <references refid="classnest_1_1ArchivingNode_1ac69d56c97bed5fd58fab9c3c745328c4" compoundref="archiving__node_8cpp" startline="236" endline="264">nest::ArchivingNode::set_status</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1ae810de070216d0f281833171a3b997bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(SpikeEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gae810de070216d0f281833171a3b997bc">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(WeightRecorderEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga18c58ec60440eae4dd4b264fb63a8d98">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a9686693f44cd03a5420633b836c25f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(RateEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga9686693f44cd03a5420633b836c25f27">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingRequest &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gacd1458cf76e47c030beafb6a4d5147ba">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DataLoggingReply &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga76de0226b6a5eef5dbe78a68d72c4492">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingReply" kindref="compound">DataLoggingReply</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1adef54045c4b20be6075910f936a723b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(CurrentEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gadef54045c4b20be6075910f936a723b6">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(ConductanceEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga0b4b6baf37b18218fd5103ab72bc2cae">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DoubleDataEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga1843f8e5565026ca51fc4b0fe1da77de">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(GapJunctionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga32b0e430fb34b46f56dc2ebc6dc7bacb">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1aec56b76a4286e1f662b33218f4083ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gaec56b76a4286e1f662b33218f4083ce8">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DiffusionConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1gace17f7fc8aea06c6ecc4f12deb957a81">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Node::handle</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;e)</argsstring>
        <name>handle</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handle</qualifiedname>
        <reimplements refid="group__event__interface_1ga2cebf7dc11a2a83795ff71c10c07f308">handle</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Import sets of overloaded virtual functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Technical Issues / Virtual Functions: Overriding, Overloading, and Hiding </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="163" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(SpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="group__event__interface_1gaf65947fe5dfeaefe79ac3cdf86e5bb27">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1SpikeEvent" kindref="compound">SpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
<para>Check if the node can handle a particular event and receptor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called upon connection setup by <ref refid="classnest_1_1iaf__psc__exp__htum_1a52fc2d4a6e5b45cfe9686f10e81fcca3" kindref="member">send_test_event()</ref>.</para>
<para><ref refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" kindref="member">handles_test_event()</ref> function is used to verify that the receiver can handle the event. It can also be used by the receiver to return information to the sender in form of the returned port. The default implementation throws an <ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref> exception. Any node class should define <ref refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" kindref="member">handles_test_event()</ref> functions for all those event types it can handle.</para>
<para>See Kunkel et al, Front Neuroinform 8:78 (2014), Sec 3.</para>
<para><simplesect kind="note"><para>The semantics of all other <ref refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" kindref="member">handles_test_event()</ref> functions is identical.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1IllegalConnection" kindref="compound">IllegalConnection</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1abbddfb14a40279cdf7340f6ff9936179" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(WeightRecorderEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abbddfb14a40279cdf7340f6ff9936179">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1WeightRecorderEvent" kindref="compound">WeightRecorderEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(RateEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5f91d66c3ceb67a60b066fcb01af2cd7">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1RateEvent" kindref="compound">RateEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DataLoggingRequest &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1aa34f16a445a0d408588bf7d6463f1a8c">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DataLoggingRequest" kindref="compound">DataLoggingRequest</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(CurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5c3e92ee9a4c7b6f660d6fb341a5c330">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1CurrentEvent" kindref="compound">CurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(ConductanceEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcc2e9e2acf3d08070679f2b03bd8e11">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1ConductanceEvent" kindref="compound">ConductanceEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DoubleDataEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a1d2f3f1de23d48b953bc570771ca9d2e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DoubleDataEvent" kindref="compound">DoubleDataEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a804bc701ca39ee9314df37f0cf75198d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSSpikeEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a804bc701ca39ee9314df37f0cf75198d">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSSpikeEvent" kindref="compound">DSSpikeEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DSCurrentEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a874ca038dce3731fdbf62a21fb17de4e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DSCurrentEvent" kindref="compound">DSCurrentEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(GapJunctionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f09ae49e6fa4cd4f2868f3e7eb4870e">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1GapJunctionEvent" kindref="compound">GapJunctionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a3f59fd074869893311cc2c46499713a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(InstantaneousRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a3f59fd074869893311cc2c46499713a5">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1InstantaneousRateConnectionEvent" kindref="compound">InstantaneousRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a059108cabfdc59a2bae9bb8092448915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DiffusionConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a059108cabfdc59a2bae9bb8092448915">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DiffusionConnectionEvent" kindref="compound">DiffusionConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacenest_1a440736750ce9e902e6729a1cb2153e95" kindref="member">port</ref></type>
        <definition>port nest::Node::handles_test_event</definition>
        <argsstring>(DelayedRateConnectionEvent &amp;, rport receptor_type)</argsstring>
        <name>handles_test_event</name>
        <qualifiedname>nest::iaf_psc_exp_htum::handles_test_event</qualifiedname>
        <reimplements refid="classnest_1_1Node_1abcdffe1cbefc66a5d11762a46aefea5b">handles_test_event</reimplements>
        <param>
          <type><ref refid="classnest_1_1DelayedRateConnectionEvent" kindref="compound">DelayedRateConnectionEvent</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1ac9ee368898d374e0f5df4fa748ccd79b" kindref="member">rport</ref></type>
          <declname>receptor_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="164" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/node.cpp" bodystart="390" bodyend="393"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a0f1f164d1eb7b3e148dbf65bb552e6b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::init_buffers_</definition>
        <argsstring>() override</argsstring>
        <name>init_buffers_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::init_buffers_</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a5881b951d112d2c408865d080287f453">init_buffers_</reimplements>
        <briefdescription>
<para>Configure persistent internal data structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Let node configure persistent internal data structures, such as input buffers or ODE solvers, to runtime information prior to first simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="180" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="216" bodyend="223"/>
        <references refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" compoundref="archiving__node_8cpp" startline="267" endline="273">nest::ArchivingNode::clear_history</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a0f0bfbd65e6c6c2d5de8501b5a19cdb7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::pre_run_hook</definition>
        <argsstring>() override</argsstring>
        <name>pre_run_hook</name>
        <qualifiedname>nest::iaf_psc_exp_htum::pre_run_hook</qualifiedname>
        <reimplements refid="classnest_1_1Node_1ad51550af656588536bcdf5afecdbf788">pre_run_hook</reimplements>
        <briefdescription>
<para>Re-calculate dependent parameters of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called each time a simulation is begun/resumed. It must re-calculate all internal Variables of the node required for spike handling or updating the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="181" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="226" bodyend="289"/>
        <references refid="classIAFPropagatorExp_1a63fe21d74cea5eab7137960fa756e5a7" compoundref="iaf__propagator_8h" startline="153" endline="159">IAFPropagatorExp::evaluate</references>
        <references refid="classnest_1_1Time_1aff831a8475d8060353c4cae73cc5748c" compoundref="nest__time_8h" startline="512" endline="523">nest::Time::get_ms</references>
        <references refid="classnest_1_1Time_1a6f14dc87dbd694a028020f00a5a92d7c" compoundref="nest__time_8h" startline="341" endline="344">nest::Time::get_resolution</references>
        <references refid="classnest_1_1Time_1afedb0e4fbf5d521e50573f2180016568" compoundref="nest__time_8h" startline="526" endline="540">nest::Time::get_steps</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a9e6a7c8866462dfb4619d2bbb2ec24fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::iaf_psc_exp_htum::update</definition>
        <argsstring>(Time const &amp;, const long, const long) override</argsstring>
        <name>update</name>
        <qualifiedname>nest::iaf_psc_exp_htum::update</qualifiedname>
        <reimplements refid="classnest_1_1Node_1a69f3767afe7e7d1bc5b141e777778fd5">update</reimplements>
        <param>
          <type><ref refid="classnest_1_1Time" kindref="compound">Time</ref> const &amp;</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <param>
          <type>const long</type>
        </param>
        <briefdescription>
<para>Bring the node from state $t$ to $t+n*dt$. </para>
        </briefdescription>
        <detaileddescription>
<para>n-&gt;update(T, from, to) performs the update steps beginning at T+from .. T+to-1, ie, emitting events with time stamps T+from+1 .. T+to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnest_1_1Time" kindref="compound">Time</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>network time at beginning of time slice. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>initial step inside time slice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para>post-final step inside time slice </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="183" column="8" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.cpp" bodystart="292" bodyend="347"/>
        <references refid="classnest_1_1KernelManager_1a39a94f269d1aeb7363ae5c33783b762e" compoundref="kernel__manager_8h" startline="249">nest::KernelManager::event_delivery_manager</references>
        <references refid="namespacenest_1a235f64c89ddf8992424ea32a13149a3e" compoundref="kernel__manager_8h" startline="272" endline="275">nest::kernel</references>
        <references refid="classnest_1_1EventDeliveryManager_1a9a350f7997aebc9c0a3b0620639ac0a4" compoundref="event__delivery__manager__impl_8h" startline="60" endline="63">nest::EventDeliveryManager::send</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a7b116c7bed8fd3f5239ae6ccba1ac8a9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::iaf_psc_exp_htum::get_V_m_</definition>
        <argsstring>() const</argsstring>
        <name>get_V_m_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::get_V_m_</qualifiedname>
        <briefdescription>
<para>Read out the real membrane potential. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="313" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="313" bodyend="316"/>
        <references refid="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" compoundref="iaf__psc__exp__htum_8h" startline="338">S_</references>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1State___1a2898540c0cbac2309d845ca0a8049f2d" compoundref="iaf__psc__exp__htum_8h" startline="246">nest::iaf_psc_exp_htum::State_::V_m_</references>
        <referencedby refid="classnest_1_1RecordablesMap_1a238a0f728aca7fe86dc4a86284eb37a2" compoundref="iaf__psc__exp__htum_8cpp" startline="49" endline="55">nest::RecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a4bb25e8bc0a0a27a3e3a751ff0f5cb57" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::iaf_psc_exp_htum::get_I_syn_ex_</definition>
        <argsstring>() const</argsstring>
        <name>get_I_syn_ex_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::get_I_syn_ex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="318" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="318" bodyend="321"/>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1State___1a8b0ec0f723eacc48a836701de1c32dbe" compoundref="iaf__psc__exp__htum_8h" startline="244">nest::iaf_psc_exp_htum::State_::i_syn_ex_</references>
        <references refid="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" compoundref="iaf__psc__exp__htum_8h" startline="338">S_</references>
        <referencedby refid="classnest_1_1RecordablesMap_1a238a0f728aca7fe86dc4a86284eb37a2" compoundref="iaf__psc__exp__htum_8cpp" startline="49" endline="55">nest::RecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1iaf__psc__exp__htum_1a71d96294d9bea35bd15afa2f3fec31d7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::iaf_psc_exp_htum::get_I_syn_in_</definition>
        <argsstring>() const</argsstring>
        <name>get_I_syn_in_</name>
        <qualifiedname>nest::iaf_psc_exp_htum::get_I_syn_in_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="323" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="323" bodyend="326"/>
        <references refid="structnest_1_1iaf__psc__exp__htum_1_1State___1ae9b2226d349e1589cdbd7e91656720c9" compoundref="iaf__psc__exp__htum_8h" startline="245">nest::iaf_psc_exp_htum::State_::i_syn_in_</references>
        <references refid="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" compoundref="iaf__psc__exp__htum_8h" startline="338">S_</references>
        <referencedby refid="classnest_1_1RecordablesMap_1a238a0f728aca7fe86dc4a86284eb37a2" compoundref="iaf__psc__exp__htum_8cpp" startline="49" endline="55">nest::RecordablesMap&lt; HostNode &gt;::create</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::iaf_psc_exp_htum</label>
        <link refid="classnest_1_1iaf__psc__exp__htum"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>nest::RecordablesMap&lt; nest::iaf_psc_exp_htum &gt;</label>
        <link refid="classnest_1_1RecordablesMap"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; nest::iaf_psc_exp_htum &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>nest::ArchivingNode</label>
        <link refid="classnest_1_1ArchivingNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>nest::DeprecationWarning</label>
        <link refid="classnest_1_1DeprecationWarning"/>
      </node>
      <node id="4">
        <label>nest::Node</label>
        <link refid="classnest_1_1Node"/>
        <childnode refid="5" relation="usage">
          <edgelabel>deprecation_warning</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>nest::RecordablesMap&lt; HostNode &gt;</label>
        <link refid="classnest_1_1RecordablesMap"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>nest::RingBuffer</label>
        <link refid="classnest_1_1RingBuffer"/>
      </node>
      <node id="3">
        <label>nest::StructuralPlasticityNode</label>
        <link refid="classnest_1_1StructuralPlasticityNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::iaf_psc_exp_htum</label>
        <link refid="classnest_1_1iaf__psc__exp__htum"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>P_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>S_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>V_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>B_</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>recordablesMap_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>nest::iaf_psc_exp_htum::Buffers_</label>
        <link refid="structnest_1_1iaf__psc__exp__htum_1_1Buffers__"/>
        <childnode refid="10" relation="usage">
          <edgelabel>currents_</edgelabel>
          <edgelabel>spikes_ex_</edgelabel>
          <edgelabel>spikes_in_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>nest::iaf_psc_exp_htum::Parameters_</label>
        <link refid="structnest_1_1iaf__psc__exp__htum_1_1Parameters__"/>
      </node>
      <node id="7">
        <label>nest::iaf_psc_exp_htum::State_</label>
        <link refid="structnest_1_1iaf__psc__exp__htum_1_1State__"/>
      </node>
      <node id="8">
        <label>nest::iaf_psc_exp_htum::Variables_</label>
        <link refid="structnest_1_1iaf__psc__exp__htum_1_1Variables__"/>
      </node>
      <node id="12">
        <label>std::map&lt; Name, double(HostNode::*)() const &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" line="151" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/models/iaf_psc_exp_htum.h" bodystart="152" bodyend="345"/>
    <listofallmembers>
      <member refid="classnest_1_1ArchivingNode_1a6c9f56d9b47e62eeb5a21f56dfbdc411" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>ArchivingNode</name></member>
      <member refid="classnest_1_1ArchivingNode_1acb6a397bfafe3b1c3349a33437f19f66" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>ArchivingNode</name></member>
      <member refid="group__iaf__psc__exp__htum__data_1ga68686a08e2bb32ca6039f808c89d252a" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>B_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a61c0b9825270fab375fc4c722cfaec6b" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>beta_Ca_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5917ea5dc7f39ee46825a20faae4d49c" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>Ca_minus_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a62b1974824c28eabfbb4bc4cbcc1edeb" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>Ca_t_</name></member>
      <member refid="classnest_1_1Node_1a93e4da4ded11807b07c5f2428401bbc7" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>calibrate_time</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3cd0ea9b8fed75be51cba72a0d80b781" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>clear_history</name></member>
      <member refid="classnest_1_1Node_1a09632867c7096c814eeceea1be42fc6b" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>clone</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a8fb547186b1ee49384fddeb4e268481d" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>connect_synaptic_element</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a0f11a1c88af75d6a51057d97fe1f6583" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>decay_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1Node_1a6c4750a3216c14453087bb14bc9a6a7a" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>deprecation_warning</name></member>
      <member refid="classnest_1_1Node_1a1c53a7fddc01f8d14531fb3af84a3881" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>downcast</name></member>
      <member refid="classnest_1_1Node_1a2c85dd6317fe53edd65e97641aeb0535" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a2575699815b3eed15322b0868ec2f89d" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>event_hook</name></member>
      <member refid="classnest_1_1Node_1a9f97c6432a9aa151df89653586f72ef1" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>finalize</name></member>
      <member refid="classnest_1_1Node_1a7c48b06a535a6e036c88ea2dcbaf8283" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>frozen_</name></member>
      <member refid="classnest_1_1Node_1a66b901cd57296f87cd25c00c4cfe3f74" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_C_m</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb8ec0a74d457fd285665b3ff8077213" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_Ca_minus</name></member>
      <member refid="classnest_1_1Node_1a59915001de69fc05d8a155da42a89e56" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_element_type</name></member>
      <member refid="classnest_1_1Node_1a56d38a28f4070f373eb51ed97e5bee73" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_g_L</name></member>
      <member refid="classnest_1_1ArchivingNode_1a17dd209382eae47cbb5f02b88fbb997a" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_history</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a4bb25e8bc0a0a27a3e3a751ff0f5cb57" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_I_syn_ex_</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a71d96294d9bea35bd15afa2f3fec31d7" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_I_syn_in_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a063cf1374f05675f2501b9cf1d4f04e7" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_K_triplet_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1ab6c3dea0d46a9f24fc4d726bea34dd3a" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_K_value</name></member>
      <member refid="classnest_1_1ArchivingNode_1aa756873904842e8e63e9144d1f49967f" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1ArchivingNode_1afab9e578540e7a00114f41ce4a6f877d" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_K_values</name></member>
      <member refid="classnest_1_1Node_1a25b2b6f159ffa8834cd966b3802f2fef" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a836bd9bd56b015902da2eab45c83ef34" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_LTD_value</name></member>
      <member refid="classnest_1_1Node_1a2283e744ff8f6a39c4d2fb6c00fc7958" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_LTP_history</name></member>
      <member refid="classnest_1_1Node_1af3b1227782c1fc9e0934a73ee7bf15f4" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_model_</name></member>
      <member refid="classnest_1_1Node_1a99139ba0b34f150c612f2f26c8645532" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_model_id</name></member>
      <member refid="classnest_1_1Node_1a86602cc948413d6fbe10fe4fefaca0ef" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_name</name></member>
      <member refid="classnest_1_1Node_1a0d0352c208e88979157bf69dac41a074" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_nc</name></member>
      <member refid="classnest_1_1Node_1a18f2dc5591f7de1e64b62d0d53cb4351" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_node_id</name></member>
      <member refid="classnest_1_1ArchivingNode_1afbac3e3b40f07e096fea768a715f9034" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_spiketime_ms</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a4ffb83aae4d6e6a48665e236959156ae" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_status</name></member>
      <member refid="classnest_1_1Node_1a885c4dc90e195ed2533af848c4fdad92" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_status_base</name></member>
      <member refid="classnest_1_1Node_1a54f0c50b08165643cee588bc89b464b8" prot="private" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_status_dict_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af2415c16f2edd606035f497d6003c392" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a84df4d213b9f22e9dae6b26c8fd9905d" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a9ba39ec217579e3ef23db9ae20479955" prot="private" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1af35fbeeb8459557ea3a5baf5c6fe7d20" prot="private" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_synaptic_elements</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5708dead1beae2f0bccb87080356cd63" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_synaptic_elements_connected</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a893ba9023105eb3c68c988dc3f912d2f" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_synaptic_elements_vacant</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a5b0318a17b8e2416f7904d00b3d4a830" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_tau_Ca</name></member>
      <member refid="classnest_1_1Node_1af77e4c86987efb2065b531f752c58b5f" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_tau_L</name></member>
      <member refid="classnest_1_1Node_1a76c9cb7ddfba60739af5b3bbf21bd3e7" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_tau_s</name></member>
      <member refid="classnest_1_1Node_1ada393fd33ced09b317415c0f89f4ccd8" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_tau_syn_ex</name></member>
      <member refid="classnest_1_1Node_1ad3ab12792e13a44d9a34663fa4d90b87" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_tau_syn_in</name></member>
      <member refid="classnest_1_1Node_1ad578b3b25416a4a8c79d86e943a5c666" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_thread</name></member>
      <member refid="classnest_1_1Node_1a5f2e7e5708eaf8428071ee74128e81eb" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a61d47288d1db6fa11aad35c522dae09a" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_urbanczik_history</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a7b116c7bed8fd3f5239ae6ccba1ac8a9" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_V_m_</name></member>
      <member refid="classnest_1_1Node_1a7812f4b7f634dc6838161319662d8947" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>get_vp</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1aa54d77b806192c5c83a45fe21488204d" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a1e474048278b8ad309aecf878ff42122" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1ad9b2f0adf2568a55f0903e4c7e18eb6d" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1ae810de070216d0f281833171a3b997bc" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a18c58ec60440eae4dd4b264fb63a8d98" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a9686693f44cd03a5420633b836c25f27" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1acd1458cf76e47c030beafb6a4d5147ba" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a76de0226b6a5eef5dbe78a68d72c4492" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1adef54045c4b20be6075910f936a723b6" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a0b4b6baf37b18218fd5103ab72bc2cae" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a1843f8e5565026ca51fc4b0fe1da77de" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a32b0e430fb34b46f56dc2ebc6dc7bacb" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1aec56b76a4286e1f662b33218f4083ce8" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1ace17f7fc8aea06c6ecc4f12deb957a81" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a2cebf7dc11a2a83795ff71c10c07f308" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handle</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a741b2da3cfccc5252ab207b1ce35baa7" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a2797a7ec7db9f5b919e20b4b2f2cdeee" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a5b48a9821467151a1600ae68afe41863" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1af65947fe5dfeaefe79ac3cdf86e5bb27" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1abbddfb14a40279cdf7340f6ff9936179" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a5f91d66c3ceb67a60b066fcb01af2cd7" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1aa34f16a445a0d408588bf7d6463f1a8c" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a5c3e92ee9a4c7b6f660d6fb341a5c330" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1abcc2e9e2acf3d08070679f2b03bd8e11" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a1d2f3f1de23d48b953bc570771ca9d2e" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a804bc701ca39ee9314df37f0cf75198d" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a874ca038dce3731fdbf62a21fb17de4e" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a3f09ae49e6fa4cd4f2868f3e7eb4870e" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a3f59fd074869893311cc2c46499713a5" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a059108cabfdc59a2bae9bb8092448915" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1abcdffe1cbefc66a5d11762a46aefea5b" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>handles_test_event</name></member>
      <member refid="classnest_1_1Node_1a3cadfe2698c39c5fd327f5d70d0b8adf" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>has_proxies</name></member>
      <member refid="classnest_1_1ArchivingNode_1a25d021158d742b10234548c339f7f625" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>history_</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a349e4b4208750e3384c99a7cab4c8cd5" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>iaf_psc_exp_htum</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1ab99c508e2bc879160f53d63fe3459fdc" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>iaf_psc_exp_htum</name></member>
      <member refid="classnest_1_1Node_1a1943c3183a149f56fcd797f1d8bfe815" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>init</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a0f1f164d1eb7b3e148dbf65bb552e6b4" prot="private" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>init_buffers_</name></member>
      <member refid="classnest_1_1Node_1a048ed537ecbe30cb98950a077106b0ef" prot="protected" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>init_state_</name></member>
      <member refid="classnest_1_1Node_1a95389430ba10f2da19aacded71503f74" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>initialized_</name></member>
      <member refid="classnest_1_1Node_1ab6ba7bb37d972a9a5e0f2a8e4c6fcc72" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>is_frozen</name></member>
      <member refid="classnest_1_1Node_1ab0fc187ef5dd007086eb11ca2107a3a5" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>is_model_prototype</name></member>
      <member refid="classnest_1_1Node_1acaf132bbee717313ffbc86fd291667c9" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>is_off_grid</name></member>
      <member refid="classnest_1_1Node_1a895a3c75963a7926b3c9cac2d62dece3" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>is_proxy</name></member>
      <member refid="classnest_1_1ArchivingNode_1abf5e14af5f052f6275746df00043e6ce" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>Kminus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aca1b6e411f89e286c59b519c97a5940f" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>Kminus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a3dcd0174ab639ea897388ea375a9a6b7" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>last_spike_</name></member>
      <member refid="classnest_1_1Node_1ac6e5bca87246812225ab04af4fd40df2" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>local_receiver</name></member>
      <member refid="classnest_1_1ArchivingNode_1a7384c7f1a1f3d059806598b606e056d8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>max_delay_</name></member>
      <member refid="classnest_1_1Node_1ae306f4602e575047801c45c9fec2a4d4" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>model_id_</name></member>
      <member refid="classnest_1_1ArchivingNode_1ac1f375fc0e109ced42aaf68cbba40fed" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>n_incoming_</name></member>
      <member refid="classnest_1_1Node_1a3ec5fd1ce0e6f3f0bccabd314c6845c3" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>nc_ptr_</name></member>
      <member refid="classnest_1_1Node_1a1b36ccdeb480a962678afbc72e0e05a9" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a359cbbba44db2a94cced8f60bcf7c728" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>Node</name></member>
      <member refid="classnest_1_1Node_1a9d697a1550c18613e0d2a0e57c67e836" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>node_id_</name></member>
      <member refid="classnest_1_1Node_1a537f1a88cfaefa242f317637354442ad" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>node_uses_wfr</name></member>
      <member refid="classnest_1_1Node_1a9f929d2c40ddaafd4a0822ea294f1ef9" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>node_uses_wfr_</name></member>
      <member refid="classnest_1_1Node_1a1168f649f515aea70ac6678ed66c48e4" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>one_node_per_process</name></member>
      <member refid="classnest_1_1Node_1a4b28c19bfaa4ac475f5248389ed911e6" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>operator=</name></member>
      <member refid="group__iaf__psc__exp__htum__data_1ga52d13689c28f744c8924e22737410794" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>P_</name></member>
      <member refid="classnest_1_1Node_1adf0d915da7c36f25820d19f1e2b1b4a1" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>post_run_cleanup</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a0f0bfbd65e6c6c2d5de8501b5a19cdb7" prot="private" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>pre_run_hook</name></member>
      <member refid="classnest_1_1Node_1aa14ec598e02577c8353131316d8ed5c9" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>print_network</name></member>
      <member refid="classnest_1_1Node_1a6d7d70e46c22988d76160cc00f93127a" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>receives_signal</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1ab8215c4809d6041198f1ce27cb2e5b08" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>RecordablesMap&lt; iaf_psc_exp_htum &gt;</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a9e1ab745cfbfa36fbb40a0df6a0cfeee" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>recordablesMap_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a0f573e9b1e9f7f49a493aa2a533c2803" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>register_stdp_connection</name></member>
      <member refid="group__iaf__psc__exp__htum__data_1gafd85507ce90e9cd50fe43da742f54d62" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>S_</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a52fc2d4a6e5b45cfe9686f10e81fcca3" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>send_test_event</name></member>
      <member refid="group__event__interface_1ga8cc1e073626a9ffc843b2685474238de" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga5469ac53c0b9d004829e1e2dbf41d120" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1gaa9414a7fa4241bc77bb110ba895968e0" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>sends_secondary_event</name></member>
      <member refid="group__event__interface_1ga2732c32368c1ea09600a1a2ffddcb2f7" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>sends_secondary_event</name></member>
      <member refid="classnest_1_1Node_1a849c236abc0ac5bf1b97fc86188c525f" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>sends_signal</name></member>
      <member refid="classnest_1_1Node_1a72b316c5f1bb8bb566256efab5371f4b" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_frozen_</name></member>
      <member refid="classnest_1_1Node_1a9488f6aaf5ca2897eba23819251569e0" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_initialized</name></member>
      <member refid="classnest_1_1Node_1af1edec8d44fc63df732b8ff58f0788bf" prot="protected" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_initialized_</name></member>
      <member refid="classnest_1_1Node_1a7d4d7c594bd3cfbf892f040f248ac153" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_local_device_id</name></member>
      <member refid="classnest_1_1Node_1a8df5c7f9272bd5da51cb5de78db00161" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_model_id</name></member>
      <member refid="classnest_1_1Node_1a73f12f75b97e2fc6adc1a5d27a7f50b1" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_nc_</name></member>
      <member refid="classnest_1_1Node_1a07451d06b3d812eae961d61397f5826c" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_node_id_</name></member>
      <member refid="classnest_1_1Node_1a2344ea2328630ee3e1faaec8e4ca2071" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_node_uses_wfr</name></member>
      <member refid="classnest_1_1ArchivingNode_1af5655cc7a93c86837c09e48cce007993" prot="protected" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_spiketime</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a03f1a591aae55252d3db05b848c0509c" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_status</name></member>
      <member refid="classnest_1_1Node_1aa4d0cfaa54c461c66570d926c51a2078" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_status_base</name></member>
      <member refid="classnest_1_1Node_1a4b386596a08e94fd4ad229b586f0e8ff" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_thread</name></member>
      <member refid="classnest_1_1Node_1ad6b1c6a7b2287c55a982debe99e66415" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_thread_lid</name></member>
      <member refid="classnest_1_1Node_1a219e882ed608cca39c88b4863b037fbe" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>set_vp</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a1b21cac6a54b750cfb72a011cc226936" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a64bcfbab69f9d53322f18896838c6c80" prot="public" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>StructuralPlasticityNode</name></member>
      <member refid="classnest_1_1Node_1a1e0e3bdf9dd259183dcb8c457265383b" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>supports_urbanczik_archiving</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1afb62fb32d42235fb404d919fdf1865e8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>synaptic_elements_map_</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a905ca4acf3665fca699c1cc91f2704f8" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>tau_Ca_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a2eaadb93df6c09941829cfcf99f0af80" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>tau_minus_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a072504ce3c26083587fbd78522d50dc1" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>tau_minus_inv_</name></member>
      <member refid="classnest_1_1ArchivingNode_1aaae85c3700810f049ccb9ca853c651b7" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>tau_minus_triplet_</name></member>
      <member refid="classnest_1_1ArchivingNode_1adf4c70fed4fe8f168b28b47b51fa35ab" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>tau_minus_triplet_inv_</name></member>
      <member refid="classnest_1_1Node_1a9ec98b82cf08796b726ca26666e5739d" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>thread_</name></member>
      <member refid="classnest_1_1Node_1a4316e73a0c494ccb37e6a19b00664223" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>thread_lid_</name></member>
      <member refid="classnest_1_1ArchivingNode_1a75621ba377fb9e61a31a67c9d9ee3684" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>trace_</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a545e960231a0ef6050ea11f9e3565343" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>UniversalDataLogger&lt; iaf_psc_exp_htum &gt;</name></member>
      <member refid="classnest_1_1iaf__psc__exp__htum_1a9e6a7c8866462dfb4619d2bbb2ec24fa" prot="private" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>update</name></member>
      <member refid="classnest_1_1StructuralPlasticityNode_1a74fc8e9d9ef49af9c53b35e19ee3ddd9" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>update_synaptic_elements</name></member>
      <member refid="group__iaf__psc__exp__htum__data_1gae3c2f7a651ccfe16be29cac13b694786" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>V_</name></member>
      <member refid="classnest_1_1Node_1ad40bb2d1d3c32dd953374bbe6a76e5a6" prot="private" virt="non-virtual"><scope>nest::iaf_psc_exp_htum</scope><name>vp_</name></member>
      <member refid="classnest_1_1Node_1a86af40b228d33130e9a8257249a7af28" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>wfr_update</name></member>
      <member refid="classnest_1_1Node_1a292ae9d034507fb6f382f61a9251cbe7" prot="public" virt="virtual"><scope>nest::iaf_psc_exp_htum</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
