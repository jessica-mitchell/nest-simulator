<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_random_generator" kind="class" language="C++" prot="public" final="yes">
    <compoundname>nest::RandomGenerator</compoundname>
    <basecompoundref refid="classnest_1_1_base_random_generator" prot="public" virt="non-virtual">nest::BaseRandomGenerator</basecompoundref>
    <includes refid="random__generators_8h" local="no">random_generators.h</includes>
    <templateparamlist>
      <param>
        <type>typename RandomEngineT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnest_1_1_random_generator_1a3456d3cc2853cb4ff7ed6f3a485e015a" prot="public" static="no">
        <type>typename RandomEngineT::result_type</type>
        <definition>using nest::RandomGenerator&lt; RandomEngineT &gt;::result_type =  typename RandomEngineT::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="125" column="3" bodyfile="nestkernel/random_generators.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnest_1_1_random_generator_1a4f50e86a9ec071e93b76950f9c6932ea" prot="private" static="no" mutable="no">
        <type>RandomEngineT</type>
        <definition>RandomEngineT nest::RandomGenerator&lt; RandomEngineT &gt;::rng_</definition>
        <argsstring></argsstring>
        <name>rng_</name>
        <briefdescription>
<para>Wrapped RNG engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="266" column="17" bodyfile="nestkernel/random_generators.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_random_generator_1a250ed6e340cedce32190c1c147b12cc4" prot="private" static="no" mutable="no">
        <type>std::uniform_int_distribution&lt; unsigned long &gt;</type>
        <definition>std::uniform_int_distribution&lt; unsigned long &gt; nest::RandomGenerator&lt; RandomEngineT &gt;::uniform_ulong_dist_</definition>
        <argsstring></argsstring>
        <name>uniform_ulong_dist_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="267" column="33" bodyfile="nestkernel/random_generators.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_random_generator_1aad9ce2b5f8df78d6633a9f3faaab39b3" prot="private" static="no" mutable="no">
        <type>std::uniform_real_distribution</type>
        <definition>std::uniform_real_distribution nest::RandomGenerator&lt; RandomEngineT &gt;::uniform_double_dist_0_1_</definition>
        <argsstring></argsstring>
        <name>uniform_double_dist_0_1_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="268" column="4" bodyfile="nestkernel/random_generators.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_random_generator_1a2c742a6ef1c623229b6d184f8178176a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RandomGenerator&lt; RandomEngineT &gt;::RandomGenerator</definition>
        <argsstring>()=delete</argsstring>
        <name>RandomGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="127" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1ad67716e4605602f4a86d2ef09f79d8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nest::RandomGenerator&lt; RandomEngineT &gt;::RandomGenerator</definition>
        <argsstring>(const RandomEngineT &amp;rng)=delete</argsstring>
        <name>RandomGenerator</name>
        <param>
          <type>const RandomEngineT &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="128" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a1a2a560799a86e4140eb521d4295b245" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::RandomGenerator&lt; RandomEngineT &gt;::RandomGenerator</definition>
        <argsstring>(std::initializer_list&lt; std::uint32_t &gt; seed)</argsstring>
        <name>RandomGenerator</name>
        <param>
          <type>std::initializer_list&lt; std::uint32_t &gt;</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="130" column="12" bodyfile="nestkernel/random_generators.h" bodystart="130" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1aad40c7bf9e03db4e6d48b7c9ae35221d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::uniform_int_distribution&lt; unsigned long &gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a472253c50dffaecb1a448f6395483610">operator()</reimplements>
        <param>
          <type>std::uniform_int_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Calls the provided distribution with the wrapped RNG engine. One operator per distribution must be defined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution that will be called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="141" column="3" bodyfile="nestkernel/random_generators.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a450d4494f2a75a1414231a1ce601a079" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::uniform_real_distribution&lt;&gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a2512da8d7398489887ae02d73d694a6c">operator()</reimplements>
        <param>
          <type>std::uniform_real_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="147" column="3" bodyfile="nestkernel/random_generators.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1ad62bb1efc952b130815ed16b49a34bab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::poisson_distribution&lt; unsigned long &gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1aaaaf7e40729f6e2c6439ccc4af2551c3">operator()</reimplements>
        <param>
          <type>std::poisson_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="153" column="3" bodyfile="nestkernel/random_generators.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a6378c3763e541efb730e6ae97016de94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::normal_distribution&lt;&gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1ad20e37e78309a1608e75debc923e04d9">operator()</reimplements>
        <param>
          <type>std::normal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="159" column="3" bodyfile="nestkernel/random_generators.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a7ffb30a7a53986603631546109c43390" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::lognormal_distribution&lt;&gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1aef117d929ee5ac4eed50be6d86f9a4bf">operator()</reimplements>
        <param>
          <type>std::lognormal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="165" column="3" bodyfile="nestkernel/random_generators.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a7127b3b0d815e097f58f22645d7a1bfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::binomial_distribution&lt; unsigned long &gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a1cb1527038b11069334f706094616f2f">operator()</reimplements>
        <param>
          <type>std::binomial_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="171" column="3" bodyfile="nestkernel/random_generators.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a662db7eb06758b8dfcce24c9759466bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::gamma_distribution&lt;&gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a1eaa74bc8d26b08098a6465a34b63da2">operator()</reimplements>
        <param>
          <type>std::gamma_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="177" column="3" bodyfile="nestkernel/random_generators.h" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1ac8e57968ef032ab08bfd9f10ed126d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::exponential_distribution&lt;&gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a5d18f95f6ee9eb4eeb64c99e9dcbdd66">operator()</reimplements>
        <param>
          <type>std::exponential_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="183" column="3" bodyfile="nestkernel/random_generators.h" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1aa84e11d50990909fe2388fc44ef78370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::discrete_distribution&lt; unsigned long &gt; &amp;d) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a574b47da2aa4456e364aa6826157f84b">operator()</reimplements>
        <param>
          <type>std::discrete_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="189" column="3" bodyfile="nestkernel/random_generators.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a3c7741c888b6b597e0a9b2b62b13fa5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::uniform_int_distribution&lt; unsigned long &gt; &amp;d, std::uniform_int_distribution&lt; unsigned long &gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a06186796d519ed7f8f49da7397d54c5f">operator()</reimplements>
        <param>
          <type>std::uniform_int_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::uniform_int_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Calls the provided distribution with the wrapped RNG engine, using provided distribution parameters. One operator per distribution must be defined. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution that will be called. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="195" column="3" bodyfile="nestkernel/random_generators.h" bodystart="195" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a315d96e8a07cf14e44e4c77c1358ffc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::uniform_real_distribution&lt;&gt; &amp;d, std::uniform_real_distribution&lt;&gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1aefa0d58372b408a12aa5fae8cf2edafa">operator()</reimplements>
        <param>
          <type>std::uniform_real_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::uniform_real_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="202" column="3" bodyfile="nestkernel/random_generators.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1abb59501479698026ebe46abee3d24577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::poisson_distribution&lt; unsigned long &gt; &amp;d, std::poisson_distribution&lt; unsigned long &gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a5e45fdc276d15bd247630b51724dfa81">operator()</reimplements>
        <param>
          <type>std::poisson_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::poisson_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="208" column="3" bodyfile="nestkernel/random_generators.h" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a3acd7572381608deed381a09e33d2d28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::normal_distribution&lt;&gt; &amp;d, std::normal_distribution&lt;&gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a871b7a859435dc51adb2a59a7014b14f">operator()</reimplements>
        <param>
          <type>std::normal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::normal_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="215" column="3" bodyfile="nestkernel/random_generators.h" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a8b3c03079fc032775198d43ba9edb176" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::lognormal_distribution&lt;&gt; &amp;d, std::lognormal_distribution&lt;&gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a37be54106f0a82695f451002fbaa1ab9">operator()</reimplements>
        <param>
          <type>std::lognormal_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::lognormal_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="221" column="3" bodyfile="nestkernel/random_generators.h" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a9bf1758f36f3cb4a34fc886801d0c50b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::binomial_distribution&lt; unsigned long &gt; &amp;d, std::binomial_distribution&lt; unsigned long &gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a0aeae4aeb22ddfba73e3469821c6a768">operator()</reimplements>
        <param>
          <type>std::binomial_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::binomial_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="227" column="3" bodyfile="nestkernel/random_generators.h" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a7028eaf466643f4e5fa3c5540edbe7c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::gamma_distribution&lt;&gt; &amp;d, std::gamma_distribution&lt;&gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a2ef81f616be10a510228f00f89d9b729">operator()</reimplements>
        <param>
          <type>std::gamma_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::gamma_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="234" column="3" bodyfile="nestkernel/random_generators.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1ad860ff1d7e4304195517a4b2adb5c42c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::exponential_distribution&lt;&gt; &amp;d, std::exponential_distribution&lt;&gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a5ea3fba875a9cc81864288648dc2bb47">operator()</reimplements>
        <param>
          <type>std::exponential_distribution&lt;&gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::exponential_distribution&lt;&gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="240" column="3" bodyfile="nestkernel/random_generators.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1acecca5c056c7a2943e16f21aa1c3b384" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::operator()</definition>
        <argsstring>(std::discrete_distribution&lt; unsigned long &gt; &amp;d, std::discrete_distribution&lt; unsigned long &gt;::param_type &amp;p) override</argsstring>
        <name>operator()</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a9d8fc0b53cd6528dd11a6727fc607ed9">operator()</reimplements>
        <param>
          <type>std::discrete_distribution&lt; unsigned long &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::discrete_distribution&lt; unsigned long &gt;::param_type &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="246" column="3" bodyfile="nestkernel/random_generators.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a9699db4c43a8caef056f31fe5f4411d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::RandomGenerator&lt; RandomEngineT &gt;::drand</definition>
        <argsstring>() override</argsstring>
        <name>drand</name>
        <reimplements refid="classnest_1_1_base_random_generator_1ac9f238412d989640ad55a82e8d9e3a45">drand</reimplements>
        <briefdescription>
<para>Uses the wrapped RNG engine to draw a double from a uniform distribution in the range [0, 1). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="253" column="3" bodyfile="nestkernel/random_generators.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_random_generator_1a5adae48e125f4162d1e9dba8ee000dc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long</type>
        <definition>unsigned long nest::RandomGenerator&lt; RandomEngineT &gt;::ulrand</definition>
        <argsstring>(unsigned long N) override</argsstring>
        <name>ulrand</name>
        <reimplements refid="classnest_1_1_base_random_generator_1a3983c4b45417bf8fd09c592691f6c40e">ulrand</reimplements>
        <param>
          <type>unsigned long</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Uses the wrapped RNG engine to draw an unsigned long from a uniform distribution in the range [0, N). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value that can be drawn. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/random_generators.h" line="259" column="3" bodyfile="nestkernel/random_generators.h" bodystart="259" bodyend="263"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for RNG engines. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RandomEngineT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the wrapped engine, must conform with the C++11 random engine interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>nest::BaseRandomGenerator</label>
        <link refid="classnest_1_1_base_random_generator"/>
      </node>
      <node id="1">
        <label>nest::RandomGenerator&lt; RandomEngineT &gt;</label>
        <link refid="classnest_1_1_random_generator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>nest::BaseRandomGenerator</label>
        <link refid="classnest_1_1_base_random_generator"/>
      </node>
      <node id="1">
        <label>nest::RandomGenerator&lt; RandomEngineT &gt;</label>
        <link refid="classnest_1_1_random_generator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="nestkernel/random_generators.h" line="122" column="1" bodyfile="nestkernel/random_generators.h" bodystart="123" bodyend="269"/>
    <listofallmembers>
      <member refid="classnest_1_1_random_generator_1a9699db4c43a8caef056f31fe5f4411d2" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>drand</name></member>
      <member refid="classnest_1_1_random_generator_1aad40c7bf9e03db4e6d48b7c9ae35221d" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a450d4494f2a75a1414231a1ce601a079" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1ad62bb1efc952b130815ed16b49a34bab" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a6378c3763e541efb730e6ae97016de94" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a7ffb30a7a53986603631546109c43390" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a7127b3b0d815e097f58f22645d7a1bfb" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a662db7eb06758b8dfcce24c9759466bf" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1ac8e57968ef032ab08bfd9f10ed126d44" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1aa84e11d50990909fe2388fc44ef78370" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a3c7741c888b6b597e0a9b2b62b13fa5f" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a315d96e8a07cf14e44e4c77c1358ffc3" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1abb59501479698026ebe46abee3d24577" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a3acd7572381608deed381a09e33d2d28" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a8b3c03079fc032775198d43ba9edb176" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a9bf1758f36f3cb4a34fc886801d0c50b" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a7028eaf466643f4e5fa3c5540edbe7c6" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1ad860ff1d7e4304195517a4b2adb5c42c" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1acecca5c056c7a2943e16f21aa1c3b384" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>operator()</name></member>
      <member refid="classnest_1_1_random_generator_1a2c742a6ef1c623229b6d184f8178176a" prot="public" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>RandomGenerator</name></member>
      <member refid="classnest_1_1_random_generator_1ad67716e4605602f4a86d2ef09f79d8b8" prot="public" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>RandomGenerator</name></member>
      <member refid="classnest_1_1_random_generator_1a1a2a560799a86e4140eb521d4295b245" prot="public" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>RandomGenerator</name></member>
      <member refid="classnest_1_1_random_generator_1a3456d3cc2853cb4ff7ed6f3a485e015a" prot="public" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>result_type</name></member>
      <member refid="classnest_1_1_random_generator_1a4f50e86a9ec071e93b76950f9c6932ea" prot="private" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>rng_</name></member>
      <member refid="classnest_1_1_random_generator_1a5adae48e125f4162d1e9dba8ee000dc6" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>ulrand</name></member>
      <member refid="classnest_1_1_random_generator_1aad9ce2b5f8df78d6633a9f3faaab39b3" prot="private" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>uniform_double_dist_0_1_</name></member>
      <member refid="classnest_1_1_random_generator_1a250ed6e340cedce32190c1c147b12cc4" prot="private" virt="non-virtual"><scope>nest::RandomGenerator</scope><name>uniform_ulong_dist_</name></member>
      <member refid="classnest_1_1_base_random_generator_1a060a5729c3fe031529c81baace4b983e" prot="public" virt="virtual"><scope>nest::RandomGenerator</scope><name>~BaseRandomGenerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
