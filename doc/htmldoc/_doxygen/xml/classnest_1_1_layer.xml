<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnest_1_1_layer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>nest::Layer</compoundname>
    <basecompoundref refid="classnest_1_1_abstract_layer" prot="public" virt="non-virtual">nest::AbstractLayer</basecompoundref>
    <derivedcompoundref refid="classnest_1_1_free_layer" prot="public" virt="non-virtual">nest::FreeLayer&lt; D &gt;</derivedcompoundref>
    <derivedcompoundref refid="classnest_1_1_grid_layer" prot="public" virt="non-virtual">nest::GridLayer&lt; D &gt;</derivedcompoundref>
    <includes refid="layer_8h" local="no">layer.h</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>D</declname>
        <defname>D</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1_layer_1af53da8f0c9a40e6c25a99fac5e303487" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Layer&lt; D &gt;::lower_left_</definition>
        <argsstring></argsstring>
        <name>lower_left_</name>
        <briefdescription>
<para>lower left corner (minimum coordinates) of layer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="436" column="12" bodyfile="nestkernel/layer.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_layer_1a3fe40a896502071fc257e0bf4b7f5961" prot="protected" static="no" mutable="no">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Layer&lt; D &gt;::extent_</definition>
        <argsstring></argsstring>
        <name>extent_</name>
        <briefdescription>
<para>size of layer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="437" column="12" bodyfile="nestkernel/layer.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_layer_1ac2a10c1e0879d2166cdbcfdb0ba3a82e" prot="protected" static="no" mutable="no">
        <type>std::bitset&lt; D &gt;</type>
        <definition>std::bitset&lt; D &gt; nest::Layer&lt; D &gt;::periodic_</definition>
        <argsstring></argsstring>
        <name>periodic_</name>
        <briefdescription>
<para>periodic b.c. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="438" column="15" bodyfile="nestkernel/layer.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classnest_1_1_layer_1a003b69d3b9c07caafa4b91c5afd26e71" prot="protected" static="yes" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>&lt; D, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Ntree&lt; D, index &gt; &gt; nest::Layer&lt; D &gt;::cached_ntree_</definition>
        <argsstring></argsstring>
        <name>cached_ntree_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Global position information for a single layer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="443" column="26" bodyfile="nestkernel/layer.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1_layer_1a078e2a5d9e67fd18a21f8cfabb74bebb" prot="protected" static="yes" mutable="no">
        <type>std::vector&lt; std::pair&lt; <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt; *</type>
        <definition>std::vector&lt; std::pair&lt; Position&lt; D &gt;, index &gt; &gt; * nest::Layer&lt; D &gt;::cached_vector_</definition>
        <argsstring></argsstring>
        <name>cached_vector_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="444" column="22" bodyfile="nestkernel/layer.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnest_1_1_layer_1a9c62ed522d77cfb65ab7ca6403f607b6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MaskedLayer&lt; D &gt;</definition>
        <argsstring></argsstring>
        <name>MaskedLayer&lt; D &gt;</name>
        <param>
          <type><ref refid="classnest_1_1_masked_layer" kindref="compound">MaskedLayer</ref>&lt; D &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="444" column="22" bodyfile="nestkernel/layer.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1_layer_1a44db808bdb6b71ff3392cd4d743f49e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Layer&lt; D &gt;::Layer</definition>
        <argsstring>()</argsstring>
        <name>Layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an empty layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="221" column="3" bodyfile="nestkernel/layer.h" bodystart="583" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1afe8b87e0bc750f510e35a413e6cea13b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Layer&lt; D &gt;::Layer</definition>
        <argsstring>(const Layer &amp;other_layer)</argsstring>
        <name>Layer</name>
        <param>
          <type>const <ref refid="classnest_1_1_layer" kindref="compound">Layer</ref> &amp;</type>
          <declname>other_layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="226" column="3" bodyfile="nestkernel/layer.h" bodystart="594" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a5c95831f62337f6b03b7a3030721140e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::Layer&lt; D &gt;::~Layer</definition>
        <argsstring>() override</argsstring>
        <name>~Layer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="231" column="3" bodyfile="nestkernel/layer.h" bodystart="603" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a7e195bd64082ccf858d4419328b000d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::set_status</definition>
        <argsstring>(const DictionaryDatum &amp;) override</argsstring>
        <name>set_status</name>
        <reimplements refid="classnest_1_1_abstract_layer_1ad06fa8f1d890798881a7ae445b964108">set_status</reimplements>
        <param>
          <type>const DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change properties of the layer according to the entries in the dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary with named parameter settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="238" column="8" bodyfile="nestkernel/layer_impl.h" bodystart="82" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1aa997b0fe16bc08093545385042fe6e19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::get_status</definition>
        <argsstring>(DictionaryDatum &amp;) const override</argsstring>
        <name>get_status</name>
        <reimplements refid="classnest_1_1_abstract_layer_1a4e6967b12d99eccd9dc329daa1149c96">get_status</reimplements>
        <param>
          <type>DictionaryDatum &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Export properties of the layer by setting entries in the status dictionary. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="245" column="8" bodyfile="nestkernel/layer_impl.h" bodystart="95" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a6e68c37a78e18c593855cc6875c1dbf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int nest::Layer&lt; D &gt;::get_num_dimensions</definition>
        <argsstring>() const override</argsstring>
        <name>get_num_dimensions</name>
        <reimplements refid="classnest_1_1_abstract_layer_1aa3317ac18b2fb26cee1425134559e939">get_num_dimensions</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="248" column="3" bodyfile="nestkernel/layer.h" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1ab711e33971020b78cde12543b57d4be4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
        <definition>const Position&lt; D &gt;&amp; nest::Layer&lt; D &gt;::get_lower_left</definition>
        <argsstring>() const</argsstring>
        <name>get_lower_left</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The bottom left position of the layer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="257" column="3" bodyfile="nestkernel/layer.h" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1ad1eb42e8f942fcd2dd85c64ef4233900" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
        <definition>const Position&lt; D &gt;&amp; nest::Layer&lt; D &gt;::get_extent</definition>
        <argsstring>() const</argsstring>
        <name>get_extent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>extent of layer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="266" column="3" bodyfile="nestkernel/layer.h" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a53c46f3e1dabf057073dab59b51813e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Layer&lt; D &gt;::get_center</definition>
        <argsstring>() const</argsstring>
        <name>get_center</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>center of layer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="275" column="3" bodyfile="nestkernel/layer.h" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a8ea1571c299ddf01b5dcd2544507c83e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::bitset&lt; D &gt;</type>
        <definition>std::bitset&lt; D &gt; nest::Layer&lt; D &gt;::get_periodic_mask</definition>
        <argsstring>() const</argsstring>
        <name>get_periodic_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a bitmask specifying which directions are periodic </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="284" column="3" bodyfile="nestkernel/layer.h" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1acd44b40683a603583aca0a1a51c1468f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>virtual Position&lt; D &gt; nest::Layer&lt; D &gt;::get_position</definition>
        <argsstring>(index sind) const =0</argsstring>
        <name>get_position</name>
        <reimplementedby refid="classnest_1_1_free_layer_1a6baeb70ed0dc8b7bd41fa0c135e4b509">get_position</reimplementedby>
        <reimplementedby refid="classnest_1_1_grid_layer_1adbb1859f86f6ec3e169172e50331935e">get_position</reimplementedby>
        <param>
          <type><ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>sind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get position of node. Only possible for local nodes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sind</parametername>
</parameternamelist>
<parameterdescription>
<para>index of node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>position of node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="294" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a96bf140046dc1815263bad1be6395219" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::Layer&lt; D &gt;::get_position_vector</definition>
        <argsstring>(const index sind) const override</argsstring>
        <name>get_position_vector</name>
        <reimplements refid="classnest_1_1_abstract_layer_1a9e34dca62adbd5f133dab3fbbe18fccf">get_position_vector</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>sind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sind</parametername>
</parameternamelist>
<parameterdescription>
<para>index of node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>position of node as std::vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="300" column="15" bodyfile="nestkernel/layer.h" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a5bdc6e9ae51ca2c547ef62a25315681d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Layer&lt; D &gt;::compute_displacement</definition>
        <argsstring>(const Position&lt; D &gt; &amp;from_pos, const Position&lt; D &gt; &amp;to_pos) const</argsstring>
        <name>compute_displacement</name>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>to_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns displacement of a position from another position. When using periodic boundary conditions, will return minimum displacement. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector pointing from from_pos to to_pos </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="309" column="12" bodyfile="nestkernel/layer_impl.h" bodystart="48" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a52c45681c7e56df3264fe31db5032108" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double nest::Layer&lt; D &gt;::compute_displacement</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const std::vector&lt; double &gt; &amp;to_pos, const unsigned int dimension) const override</argsstring>
        <name>compute_displacement</name>
        <reimplements refid="classnest_1_1_abstract_layer_1aba143620ebfde0ca5111fa32cd8fc8bf">compute_displacement</reimplements>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>to_pos</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="310" column="10" bodyfile="nestkernel/layer_impl.h" bodystart="68" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a066ca032ad333cb421c3f4538fb2630f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
        <definition>Position&lt; D &gt; nest::Layer&lt; D &gt;::compute_displacement</definition>
        <argsstring>(const Position&lt; D &gt; &amp;from_pos, const index to) const</argsstring>
        <name>compute_displacement</name>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns displacement of node from given position. When using periodic boundary conditions, will return minimum displacement. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>node in layer to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector pointing from from_pos to node to&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="321" column="12" bodyfile="nestkernel/layer.h" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a319156f736642bdb7bc5483c79b10530" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::Layer&lt; D &gt;::compute_displacement</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const index to) const override</argsstring>
        <name>compute_displacement</name>
        <reimplements refid="classnest_1_1_abstract_layer_1ad91d0d2ea53dff6932424b93683be50c">compute_displacement</reimplements>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns displacement of node from given position. When using periodic boundary conditions, will return minimum displacement. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>node in layer to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector pointing from from_pos to node to&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="323" column="15" bodyfile="nestkernel/layer.h" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1acb771d17f684fe36675ad7395d520b2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nest::Layer&lt; D &gt;::compute_distance</definition>
        <argsstring>(const Position&lt; D &gt; &amp;from_pos, const index lid) const</argsstring>
        <name>compute_distance</name>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns distance to node from given position. When using periodic boundary conditions, will return minimum distance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>node in layer to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of vector pointing from from_pos to node to&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="332" column="10" bodyfile="nestkernel/layer.h" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1ad01a6f6f14f46165fea0ec5c6fc9da08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::Layer&lt; D &gt;::compute_distance</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const index lid) const override</argsstring>
        <name>compute_distance</name>
        <reimplements refid="classnest_1_1_abstract_layer_1ad1368f4c4efe9a6ff909838f744e7f23">compute_distance</reimplements>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref></type>
          <declname>lid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns distance to node from given position. When using periodic boundary conditions, will return minimum distance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position vector in layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>node in layer to which displacement is to be computed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of vector pointing from from_pos to node to&apos;s position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="334" column="10" bodyfile="nestkernel/layer.h" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a8680705537ec5ed10f3dadd966075feb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::Layer&lt; D &gt;::compute_distance</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;from_pos, const std::vector&lt; double &gt; &amp;to_pos) const override</argsstring>
        <name>compute_distance</name>
        <reimplements refid="classnest_1_1_abstract_layer_1a834e81b328875c599de404b1531ec2d7">compute_distance</reimplements>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>from_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>to_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="336" column="10" bodyfile="nestkernel/layer.h" bodystart="646" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a616cfe345fae749c13eb188e9ea41df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>&lt; D, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Ntree&lt; D, index &gt; &gt; nest::Layer&lt; D &gt;::get_global_positions_ntree</definition>
        <argsstring>(NodeCollectionPTR node_collection)</argsstring>
        <name>get_global_positions_ntree</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get positions for all nodes in layer, including nodes on other MPI processes. The positions will be cached so that subsequent calls for the same layer are fast. One one layer is cached at the time, so the user should group together all ConnectLayers calls using the same pool layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="346" column="19" bodyfile="nestkernel/layer_impl.h" bodystart="135" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a6dd26a0979ad92d43e94bb71c45fd687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>&lt; D, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Ntree&lt; D, index &gt; &gt; nest::Layer&lt; D &gt;::get_global_positions_ntree</definition>
        <argsstring>(std::bitset&lt; D &gt; periodic, Position&lt; D &gt; lower_left, Position&lt; D &gt; extent, NodeCollectionPTR node_collection)</argsstring>
        <name>get_global_positions_ntree</name>
        <param>
          <type>std::bitset&lt; D &gt;</type>
          <declname>periodic</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
          <declname>lower_left</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;</type>
          <declname>extent</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get positions globally, overriding the dimensions of the layer and the periodic flags. The supplied lower left corner and extent coordinates are only used for the dimensions where the supplied periodic flag is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="354" column="19" bodyfile="nestkernel/layer_impl.h" bodystart="153" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a40a6e749847f747190339cd061acb284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt; *</type>
        <definition>std::vector&lt; std::pair&lt; Position&lt; D &gt;, index &gt; &gt; * nest::Layer&lt; D &gt;::get_global_positions_vector</definition>
        <argsstring>(NodeCollectionPTR node_collection)</argsstring>
        <name>get_global_positions_vector</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="359" column="15" bodyfile="nestkernel/layer_impl.h" bodystart="213" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a9cf7738cc88a6531a2aab4adf2be51df" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; Position&lt; D &gt;, index &gt; &gt; nest::Layer&lt; D &gt;::get_global_positions_vector</definition>
        <argsstring>(const MaskDatum &amp;mask, const Position&lt; D &gt; &amp;anchor, bool allow_oversized, NodeCollectionPTR node_collection)</argsstring>
        <name>get_global_positions_vector</name>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt; &amp;</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_oversized</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="361" column="23" bodyfile="nestkernel/layer_impl.h" bodystart="251" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a72db1887553137c059800b8b2fc58cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt;</type>
        <definition>std::vector&lt; index &gt; nest::Layer&lt; D &gt;::get_global_nodes</definition>
        <argsstring>(const MaskDatum &amp;mask, const std::vector&lt; double &gt; &amp;anchor, bool allow_oversized, NodeCollectionPTR node_collection) override</argsstring>
        <name>get_global_nodes</name>
        <reimplements refid="classnest_1_1_abstract_layer_1a777aa1d3700a850d4e19f8ce4b32c34f">get_global_nodes</reimplements>
        <param>
          <type>const <ref refid="namespacenest_1ab77cf7ce5a71015113b36ab014c49393" kindref="member">MaskDatum</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_oversized</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector with the node IDs of the nodes inside the mask. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="369" column="15" bodyfile="nestkernel/layer_impl.h" bodystart="270" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a805e0bc30af5b8449cbb5ee09fbd71fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::connect</definition>
        <argsstring>(NodeCollectionPTR source_nc, AbstractLayerPTR target, NodeCollectionPTR target_nc, ConnectionCreator &amp;connector) override</argsstring>
        <name>connect</name>
        <reimplements refid="classnest_1_1_abstract_layer_1a8a6ee06c5c1a36fddb025ea2d2b87145">connect</reimplements>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>source_nc</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a6779693086ed293feb10b317db6e193e" kindref="member">AbstractLayerPTR</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>target_nc</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1_connection_creator" kindref="compound">ConnectionCreator</ref> &amp;</type>
          <declname>connector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect this layer to the given target layer. The actual connections are made in class <ref refid="classnest_1_1_connection_creator" kindref="compound">ConnectionCreator</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source_nc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> to the source layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>target layer to connect to. Must have same dimension as this layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_nc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> to the target layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connector</parametername>
</parameternamelist>
<parameterdescription>
<para>connection properties </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="383" column="8" bodyfile="nestkernel/layer_impl.h" bodystart="112" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a84ccd5b88b173dedb7cb3b4b9b6c2a95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::dump_nodes</definition>
        <argsstring>(std::ostream &amp;os) const override</argsstring>
        <name>dump_nodes</name>
        <reimplements refid="classnest_1_1_abstract_layer_1aa7998764a99b213fbcbaa66273af928d">dump_nodes</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write layer data to stream. For each node in layer, write one line to stream containing: node ID x-position y-position [z-position] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="394" column="8" bodyfile="nestkernel/layer_impl.h" bodystart="286" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1ac1b9a1c8651f3eefae09c200e00974af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::dump_connections</definition>
        <argsstring>(std::ostream &amp;out, NodeCollectionPTR node_collection, AbstractLayerPTR target_layer, const Token &amp;syn_model) override</argsstring>
        <name>dump_connections</name>
        <reimplements refid="classnest_1_1_abstract_layer_1ad8da61eaa018ec1449b5a4c861897e00">dump_connections</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1a6779693086ed293feb10b317db6e193e" kindref="member">AbstractLayerPTR</ref></type>
          <declname>target_layer</declname>
        </param>
        <param>
          <type>const Token &amp;</type>
          <declname>syn_model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dumps information about all connections of the given type having their source in the given layer to the given output stream. For distributed simulations this function will dump the connections with local targets only. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_collection</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_node_collection" kindref="compound">NodeCollection</ref> of the layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_layer</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnest_1_1_target" kindref="compound">Target</ref> layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synapse_id</parametername>
</parameternamelist>
<parameterdescription>
<para>type of connection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="406" column="8" bodyfile="nestkernel/layer_impl.h" bodystart="300" bodyend="351"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnest_1_1_layer_1a3bdf16e4d5e8ce0a7d2c8807b9e858c2" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::clear_ntree_cache_</definition>
        <argsstring>() const override</argsstring>
        <name>clear_ntree_cache_</name>
        <reimplements refid="classnest_1_1_abstract_layer_1aeca0c0047fb439d82308b60a3b21f1e6">clear_ntree_cache_</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the cache for global position information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="415" column="8" bodyfile="nestkernel/layer.h" bodystart="666" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a0320d45963d9093ac80d6908f140b3f0" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void nest::Layer&lt; D &gt;::clear_vector_cache_</definition>
        <argsstring>() const override</argsstring>
        <name>clear_vector_cache_</name>
        <reimplements refid="classnest_1_1_abstract_layer_1a1e2e32ad29738387bb17856d8f309064">clear_vector_cache_</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the cache for global position information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="420" column="8" bodyfile="nestkernel/layer.h" bodystart="674" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1af80ad7c54c28a5b07c63093944324cfe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>&lt; D, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt; Ntree&lt; D, index &gt; &gt; nest::Layer&lt; D &gt;::do_get_global_positions_ntree_</definition>
        <argsstring>(NodeCollectionPTR node_collection)</argsstring>
        <name>do_get_global_positions_ntree_</name>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="422" column="19" bodyfile="nestkernel/layer_impl.h" bodystart="183" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1ac03f53f6e62c44af5adc7f8043ab52ca" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Layer&lt; D &gt;::insert_global_positions_ntree_</definition>
        <argsstring>(Ntree&lt; D, index &gt; &amp;tree, NodeCollectionPTR node_collection)=0</argsstring>
        <name>insert_global_positions_ntree_</name>
        <reimplementedby refid="classnest_1_1_free_layer_1ab3201672033e5215b9bdeb2cb526f061">insert_global_positions_ntree_</reimplementedby>
        <reimplementedby refid="classnest_1_1_grid_layer_1a9bcbeaa5ead80bf9afb7c999532d3c66">insert_global_positions_ntree_</reimplementedby>
        <param>
          <type><ref refid="classnest_1_1_ntree" kindref="compound">Ntree</ref>&lt; D, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
          <declname>node_collection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert global position info into ntree. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="427" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1_layer_1a7a60d49f6d728e7694ff2557391b9f2a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void nest::Layer&lt; D &gt;::insert_global_positions_vector_</definition>
        <argsstring>(std::vector&lt; std::pair&lt; Position&lt; D &gt;, index &gt; &gt; &amp;, NodeCollectionPTR)=0</argsstring>
        <name>insert_global_positions_vector_</name>
        <reimplementedby refid="classnest_1_1_free_layer_1a09296d377a06ea3aa2dd32332ce67272">insert_global_positions_vector_</reimplementedby>
        <reimplementedby refid="classnest_1_1_grid_layer_1ac85710f4a2d6b30b9814aa34f88a7a9a">insert_global_positions_vector_</reimplementedby>
        <param>
          <type>std::vector&lt; std::pair&lt; <ref refid="classnest_1_1_position" kindref="compound">Position</ref>&lt; D &gt;, <ref refid="namespacenest_1a48ce49a10a37dfb7f5243583ff1d4b85" kindref="member">index</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="namespacenest_1accbbbd2c49375cc6c2edd964cccda54e" kindref="member">NodeCollectionPTR</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert global position info into vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nestkernel/layer.h" line="432" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Abstract base class for <ref refid="classnest_1_1_layer" kindref="compound">Layer</ref> of given dimension (D=2 or 3). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>nest::GridLayer&lt; D &gt;</label>
        <link refid="classnest_1_1_grid_layer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nest::Layer&lt; D &gt;</label>
        <link refid="classnest_1_1_layer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nest::FreeLayer&lt; D &gt;</label>
        <link refid="classnest_1_1_free_layer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::AbstractLayer</label>
        <link refid="classnest_1_1_abstract_layer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::Layer&lt; D &gt;</label>
        <link refid="classnest_1_1_layer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::AbstractLayer</label>
        <link refid="classnest_1_1_abstract_layer"/>
      </node>
    </collaborationgraph>
    <location file="nestkernel/layer.h" line="215" column="1" bodyfile="nestkernel/layer.h" bodystart="216" bodyend="447"/>
    <listofallmembers>
      <member refid="classnest_1_1_abstract_layer_1a0ad131746b1272ec9866a336dc380a91" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>AbstractLayer</name></member>
      <member refid="classnest_1_1_layer_1a003b69d3b9c07caafa4b91c5afd26e71" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>cached_ntree_</name></member>
      <member refid="classnest_1_1_abstract_layer_1a1e8fda88e7029c3b23f35819cba848c6" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>cached_ntree_md_</name></member>
      <member refid="classnest_1_1_layer_1a078e2a5d9e67fd18a21f8cfabb74bebb" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>cached_vector_</name></member>
      <member refid="classnest_1_1_abstract_layer_1add028a9b29284bac5c09ac20f6b42c3b" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>cached_vector_md_</name></member>
      <member refid="classnest_1_1_layer_1a3bdf16e4d5e8ce0a7d2c8807b9e858c2" prot="protected" virt="virtual"><scope>nest::Layer</scope><name>clear_ntree_cache_</name></member>
      <member refid="classnest_1_1_layer_1a0320d45963d9093ac80d6908f140b3f0" prot="protected" virt="virtual"><scope>nest::Layer</scope><name>clear_vector_cache_</name></member>
      <member refid="classnest_1_1_layer_1a5bdc6e9ae51ca2c547ef62a25315681d" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>compute_displacement</name></member>
      <member refid="classnest_1_1_layer_1a52c45681c7e56df3264fe31db5032108" prot="public" virt="virtual"><scope>nest::Layer</scope><name>compute_displacement</name></member>
      <member refid="classnest_1_1_layer_1a066ca032ad333cb421c3f4538fb2630f" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>compute_displacement</name></member>
      <member refid="classnest_1_1_layer_1a319156f736642bdb7bc5483c79b10530" prot="public" virt="virtual"><scope>nest::Layer</scope><name>compute_displacement</name></member>
      <member refid="classnest_1_1_layer_1acb771d17f684fe36675ad7395d520b2e" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>compute_distance</name></member>
      <member refid="classnest_1_1_layer_1ad01a6f6f14f46165fea0ec5c6fc9da08" prot="public" virt="virtual"><scope>nest::Layer</scope><name>compute_distance</name></member>
      <member refid="classnest_1_1_layer_1a8680705537ec5ed10f3dadd966075feb" prot="public" virt="virtual"><scope>nest::Layer</scope><name>compute_distance</name></member>
      <member refid="classnest_1_1_layer_1a805e0bc30af5b8449cbb5ee09fbd71fb" prot="public" virt="virtual"><scope>nest::Layer</scope><name>connect</name></member>
      <member refid="classnest_1_1_abstract_layer_1a268b14297e57188c5f29a44bad369990" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>create_layer</name></member>
      <member refid="classnest_1_1_layer_1af80ad7c54c28a5b07c63093944324cfe" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>do_get_global_positions_ntree_</name></member>
      <member refid="classnest_1_1_layer_1ac1b9a1c8651f3eefae09c200e00974af" prot="public" virt="virtual"><scope>nest::Layer</scope><name>dump_connections</name></member>
      <member refid="classnest_1_1_layer_1a84ccd5b88b173dedb7cb3b4b9b6c2a95" prot="public" virt="virtual"><scope>nest::Layer</scope><name>dump_nodes</name></member>
      <member refid="classnest_1_1_layer_1a3fe40a896502071fc257e0bf4b7f5961" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>extent_</name></member>
      <member refid="classnest_1_1_layer_1a53c46f3e1dabf057073dab59b51813e3" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_center</name></member>
      <member refid="classnest_1_1_layer_1ad1eb42e8f942fcd2dd85c64ef4233900" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_extent</name></member>
      <member refid="classnest_1_1_layer_1a72db1887553137c059800b8b2fc58cd1" prot="public" virt="virtual"><scope>nest::Layer</scope><name>get_global_nodes</name></member>
      <member refid="classnest_1_1_layer_1a616cfe345fae749c13eb188e9ea41df5" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_global_positions_ntree</name></member>
      <member refid="classnest_1_1_layer_1a6dd26a0979ad92d43e94bb71c45fd687" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_global_positions_ntree</name></member>
      <member refid="classnest_1_1_layer_1a40a6e749847f747190339cd061acb284" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_global_positions_vector</name></member>
      <member refid="classnest_1_1_layer_1a9cf7738cc88a6531a2aab4adf2be51df" prot="public" virt="virtual"><scope>nest::Layer</scope><name>get_global_positions_vector</name></member>
      <member refid="classnest_1_1_layer_1ab711e33971020b78cde12543b57d4be4" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_lower_left</name></member>
      <member refid="classnest_1_1_abstract_layer_1a560ba4e701334a2040b56a34c60f3d64" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>get_metadata</name></member>
      <member refid="classnest_1_1_abstract_layer_1aa22fca27ef998582d5ede2a7f293478b" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_node_collection</name></member>
      <member refid="classnest_1_1_layer_1a6e68c37a78e18c593855cc6875c1dbf2" prot="public" virt="virtual"><scope>nest::Layer</scope><name>get_num_dimensions</name></member>
      <member refid="classnest_1_1_layer_1a8ea1571c299ddf01b5dcd2544507c83e" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>get_periodic_mask</name></member>
      <member refid="classnest_1_1_layer_1acd44b40683a603583aca0a1a51c1468f" prot="public" virt="pure-virtual"><scope>nest::Layer</scope><name>get_position</name></member>
      <member refid="classnest_1_1_layer_1a96bf140046dc1815263bad1be6395219" prot="public" virt="virtual"><scope>nest::Layer</scope><name>get_position_vector</name></member>
      <member refid="classnest_1_1_layer_1aa997b0fe16bc08093545385042fe6e19" prot="public" virt="virtual"><scope>nest::Layer</scope><name>get_status</name></member>
      <member refid="classnest_1_1_layer_1ac03f53f6e62c44af5adc7f8043ab52ca" prot="protected" virt="pure-virtual"><scope>nest::Layer</scope><name>insert_global_positions_ntree_</name></member>
      <member refid="classnest_1_1_layer_1a7a60d49f6d728e7694ff2557391b9f2a" prot="protected" virt="pure-virtual"><scope>nest::Layer</scope><name>insert_global_positions_vector_</name></member>
      <member refid="classnest_1_1_layer_1a44db808bdb6b71ff3392cd4d743f49e1" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>Layer</name></member>
      <member refid="classnest_1_1_layer_1afe8b87e0bc750f510e35a413e6cea13b" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>Layer</name></member>
      <member refid="classnest_1_1_layer_1af53da8f0c9a40e6c25a99fac5e303487" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>lower_left_</name></member>
      <member refid="classnest_1_1_layer_1a9c62ed522d77cfb65ab7ca6403f607b6" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>MaskedLayer&lt; D &gt;</name></member>
      <member refid="classnest_1_1_abstract_layer_1a32cbd1dbb9fdfd0b12903814aeb5c066" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>node_collection_</name></member>
      <member refid="classnest_1_1_layer_1ac2a10c1e0879d2166cdbcfdb0ba3a82e" prot="protected" virt="non-virtual"><scope>nest::Layer</scope><name>periodic_</name></member>
      <member refid="classnest_1_1_abstract_layer_1a54c83f92a30139407e7477a8ce019414" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>set_node_collection</name></member>
      <member refid="classnest_1_1_layer_1a7e195bd64082ccf858d4419328b000d7" prot="public" virt="virtual"><scope>nest::Layer</scope><name>set_status</name></member>
      <member refid="classnest_1_1_abstract_layer_1a5ffddcffaba780d5e7b61d2850d2c922" prot="public" virt="virtual"><scope>nest::Layer</scope><name>~AbstractLayer</name></member>
      <member refid="classnest_1_1_layer_1a5c95831f62337f6b03b7a3030721140e" prot="public" virt="non-virtual"><scope>nest::Layer</scope><name>~Layer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
