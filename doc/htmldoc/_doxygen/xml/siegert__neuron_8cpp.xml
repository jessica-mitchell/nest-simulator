<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="siegert__neuron_8cpp" kind="file" language="C++">
    <compoundname>siegert_neuron.cpp</compoundname>
    <includes refid="siegert__neuron_8h" local="yes">siegert_neuron.h</includes>
    <incdepgraph>
      <node id="1">
        <label>siegert_neuron.cpp</label>
        <link refid="siegert__neuron_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>siegert_neuron.h</label>
        <link refid="siegert__neuron_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>config.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>siegert_neuron.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>NEST.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(C)<sp/>2004<sp/>The<sp/>NEST<sp/>Initiative</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>NEST<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>NEST.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="siegert__neuron_8h" kindref="compound">siegert_neuron.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>we<sp/>need<sp/>isnan()<sp/>//<sp/>fabs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>libnestutil:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__util_8h" kindref="compound">dict_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="numerics_8h" kindref="compound">numerics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>nestkernel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exceptions_8h" kindref="compound">exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel__manager_8h" kindref="compound">kernel_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="universal__data__logger__impl_8h" kindref="compound">universal_data_logger_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>from<sp/>sli:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dictutils_8h" kindref="compound">dictutils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">my_params</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1aa689f9c844899d76cc06e33a7a1fa455" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1ac65af513b4b6e81d637126d8550ab779" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Scaled<sp/>complementary<sp/>error<sp/>function<sp/>erfcx(x)<sp/>=<sp/>exp(x^2)<sp/>*<sp/>erfc(x)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">erfcx(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>*(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>)<sp/>p;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp(<sp/>scale<sp/>*<sp/>scale<sp/>*<sp/>x<sp/>*<sp/>x<sp/>+<sp/>gsl_sf_log_erfc(<sp/>x<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenest" kindref="compound">nest</ref></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>Recordables<sp/>map</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">RecordablesMap&lt;<sp/>siegert_neuron<sp/>&gt;<sp/>siegert_neuron::recordablesMap_;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Override<sp/>the<sp/>create()<sp/>method<sp/>with<sp/>one<sp/>call<sp/>to<sp/>RecordablesMap::insert_()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>for<sp/>each<sp/>quantity<sp/>to<sp/>be<sp/>recorded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="classnest_1_1RecordablesMap_1a303b1d32c8f72ab936b4afe76bca9588" kindref="member">RecordablesMap&lt; siegert_neuron &gt;::create</ref>()</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>insert_(<sp/><ref refid="namespacenest_1_1names_1ab4b26dd1d966a0f85ad1a1493b4ebaf2" kindref="member">names::rate</ref>,<sp/>&amp;siegert_neuron::get_rate_<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>Default<sp/>constructors<sp/>defining<sp/>default<sp/>parameters<sp/>and<sp/>state</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">nest::siegert_neuron::Parameters_::Parameters_()</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>:<sp/>tau_(<sp/>1.0<sp/>)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>,<sp/>tau_m_(<sp/>5.0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>,<sp/>tau_syn_(<sp/>0.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>,<sp/>t_ref_(<sp/>2.0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>,<sp/>mean_(<sp/>0.0<sp/>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1/ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>,<sp/>theta_(<sp/>15.0<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>mV,<sp/>rel<sp/>to<sp/>E_L_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>,<sp/>V_reset_(<sp/>0.0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>mV,<sp/>rel<sp/>to<sp/>E_L_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">nest::siegert_neuron::State_::State_()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>:<sp/>r_(<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>and<sp/>state<sp/>extractions<sp/>and<sp/>manipulation<sp/>functions</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">nest::siegert_neuron::Parameters_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="107"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::mean,<sp/>mean_<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::theta,<sp/>theta_<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_reset,<sp/>V_reset_<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau,<sp/>tau_<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau_m,<sp/>tau_m_<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau_syn,<sp/>tau_syn_<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::t_ref,<sp/>t_ref_<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">nest::siegert_neuron::Parameters_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,<sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::mean,<sp/>mean_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::theta,<sp/>theta_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::V_reset,<sp/>V_reset_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau,<sp/>tau_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau_m,<sp/>tau_m_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::tau_syn,<sp/>tau_syn_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::t_ref,<sp/>t_ref_,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>V_reset_<sp/>&gt;=<sp/>theta_<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Reset<sp/>potential<sp/>must<sp/>be<sp/>smaller<sp/>than<sp/>threshold.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t_ref_<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Refractory<sp/>time<sp/>must<sp/>not<sp/>be<sp/>negative.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tau_<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;time<sp/>constant<sp/>must<sp/>be<sp/>&gt;<sp/>0.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tau_m_<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Membrane<sp/>time<sp/>constant<sp/>must<sp/>be<sp/>&gt;<sp/>0.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tau_syn_<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>BadProperty(<sp/></highlight><highlight class="stringliteral">&quot;Membrane<sp/>time<sp/>constant<sp/>must<sp/>not<sp/>be<sp/>negative.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">nest::siegert_neuron::State_::get(<sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="156"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>def&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::rate,<sp/>r_<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">nest::siegert_neuron::State_::set(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlockPTRDatum" kindref="compound">DictionaryDatum</ref>&amp;<sp/>d,<sp/>Node*<sp/>node<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>updateValueParam&lt;<sp/>double<sp/>&gt;(<sp/>d,<sp/>names::rate,<sp/>r_,<sp/>node<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">nest::siegert_neuron::Buffers_::Buffers_(<sp/>siegert_neuron&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">nest::siegert_neuron::Buffers_::Buffers_(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Buffers_&amp;,<sp/>siegert_neuron&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>:<sp/>logger_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>Default<sp/>and<sp/>copy<sp/>constructor<sp/>for<sp/>node</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">nest::siegert_neuron::siegert_neuron()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>:<sp/>ArchivingNode()</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>,<sp/>P_()</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>,<sp/>S_()</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>recordablesMap_.create();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>Node::set_node_uses_wfr(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.use_wfr()<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>gsl_w_<sp/>=<sp/>gsl_integration_workspace_alloc(<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">nest::siegert_neuron::siegert_neuron(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>siegert_neuron&amp;<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>:<sp/>ArchivingNode(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref><sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>,<sp/>P_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.P_<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>,<sp/>S_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.S_<sp/>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>,<sp/>B_(<sp/><ref refid="namespacenest_1_1names_1aaaa28a9fba4f2e503b794e38f3ea4341" kindref="member">n</ref>.B_,<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>Node::set_node_uses_wfr(<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.use_wfr()<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>gsl_w_<sp/>=<sp/>gsl_integration_workspace_alloc(<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">nest::siegert_neuron::~siegert_neuron()</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>gsl_integration_workspace_free(<sp/>gsl_w_<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>Siegert<sp/>function</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">nest::siegert_neuron::siegert(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma_square<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a127c6d5d7daea4ae18b9f769ba7e5053" kindref="member">sigma</ref><sp/>=<sp/>std::sqrt(<sp/>sigma_square<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>cases<sp/>where<sp/>neurons<sp/>get<sp/>no<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>(Brunel,<sp/>2000)<sp/>eq.<sp/>(22)<sp/>to<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>firing<sp/>rate<sp/>to<sp/>be<sp/>~<sp/>1e-16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>P_.theta_<sp/>-<sp/>mu<sp/>)<sp/>&gt;<sp/>6.<sp/>*<sp/>sigma<sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Effective<sp/>shift<sp/>of<sp/>threshold<sp/>and<sp/>reset<sp/>due<sp/>to<sp/>colored<sp/>noise:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>=<sp/>|zeta(1/2)|*sqrt(2)<sp/>with<sp/>zeta<sp/>being<sp/>the<sp/>Riemann<sp/>zeta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>(Fourcaud<sp/>&amp;<sp/>Brunel,<sp/>2002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a4049bde752984d7bc74b209f5e13f3cb" kindref="member">alpha</ref><sp/>=<sp/>2.0652531522312172;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold_shift<sp/>=<sp/><ref refid="namespacenest_1_1names_1a4049bde752984d7bc74b209f5e13f3cb" kindref="member">alpha</ref><sp/>/<sp/>2.<sp/>*<sp/>sqrt(<sp/>P_.tau_syn_<sp/>/<sp/>P_.tau_m_<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scaled<sp/>and<sp/>shifted<sp/>threshold<sp/>and<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_th<sp/>=<sp/>(<sp/>P_.theta_<sp/>-<sp/><ref refid="namespacenest_1_1names_1a41418631177d193e77de719b808dbebe" kindref="member">mu</ref><sp/>)<sp/>/<sp/>sigma<sp/>+<sp/>threshold_shift;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_r<sp/>=<sp/>(<sp/>P_.V_reset_<sp/>-<sp/><ref refid="namespacenest_1_1names_1a41418631177d193e77de719b808dbebe" kindref="member">mu</ref><sp/>)<sp/>/<sp/>sigma<sp/>+<sp/>threshold_shift;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>numerical<sp/>integration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral,<sp/>result,<sp/>error;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_subintervals<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>erfcx_scale<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>gsl_function<sp/>F;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>F.function<sp/>=<sp/>&amp;erfcx;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>F.params<sp/>=<sp/>&amp;erfcx_scale;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>tolerances<sp/>for<sp/>numerical<sp/>integration,<sp/>1.49e-8<sp/>is<sp/>approximately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>machine<sp/>precision<sp/>for<sp/>single-precision<sp/>floats,<sp/>i.e.<sp/>2^(-26).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_abs<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_rel<sp/>=<sp/>1.49e-8;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>integral<sp/>of<sp/>exp(<sp/>s^2<sp/>)<sp/>*<sp/>(<sp/>1<sp/>+<sp/>erf(<sp/>s<sp/>)<sp/>)<sp/>from<sp/>y_r<sp/>to<sp/>y_th</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>the<sp/>sign<sp/>of<sp/>y_th<sp/>and<sp/>y_r.<sp/>Uses<sp/>the<sp/>scaled<sp/>complementary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>function<sp/>erfcx(<sp/>s<sp/>)<sp/>=<sp/>exp(<sp/>s^2<sp/>)<sp/>*<sp/>erf(<sp/>s<sp/>).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y_r<sp/>&gt;<sp/>0.<sp/>)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_integration_qags(<sp/>&amp;F,<sp/>y_r,<sp/>y_th,<sp/>err_abs,<sp/>err_rel,<sp/>max_subintervals,<sp/>gsl_w_,<sp/>&amp;result,<sp/>&amp;error<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>integral<sp/>=<sp/>2.<sp/>*<sp/>gsl_sf_dawson(<sp/>y_th<sp/>)<sp/>-<sp/>2.<sp/>*<sp/>exp(<sp/>y_r<sp/>*<sp/>y_r<sp/>-<sp/>y_th<sp/>*<sp/>y_th<sp/>)<sp/>*<sp/>gsl_sf_dawson(<sp/>y_r<sp/>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>exp(<sp/>-y_th<sp/>*<sp/>y_th<sp/>)<sp/>*<sp/>result;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>1e3<sp/>due<sp/>to<sp/>conversion<sp/>from<sp/>kHz<sp/>to<sp/>Hz,<sp/>as<sp/>time<sp/>constant<sp/>in<sp/>ms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1e3<sp/>*<sp/>exp(<sp/>-y_th<sp/>*<sp/>y_th<sp/>)<sp/>/<sp/>(<sp/>exp(<sp/>-y_th<sp/>*<sp/>y_th<sp/>)<sp/>*<sp/>P_.t_ref_<sp/>+<sp/>P_.tau_m_<sp/>*<sp/>std::sqrt(<sp/>M_PI<sp/>)<sp/>*<sp/>integral<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y_th<sp/>&lt;<sp/>0.<sp/>)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_integration_qags(<sp/>&amp;F,<sp/>-y_th,<sp/>-y_r,<sp/>err_abs,<sp/>err_rel,<sp/>max_subintervals,<sp/>gsl_w_,<sp/>&amp;result,<sp/>&amp;error<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>integral<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>1e3<sp/>due<sp/>to<sp/>conversion<sp/>from<sp/>kHz<sp/>to<sp/>Hz,<sp/>as<sp/>time<sp/>constant<sp/>in<sp/>ms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1e3<sp/>*<sp/>1.<sp/>/<sp/>(<sp/>P_.t_ref_<sp/>+<sp/>P_.tau_m_<sp/>*<sp/>std::sqrt(<sp/>M_PI<sp/>)<sp/>*<sp/>integral<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>gsl_integration_qags(<sp/>&amp;F,<sp/>y_th,<sp/>-y_r,<sp/>err_abs,<sp/>err_rel,<sp/>max_subintervals,<sp/>gsl_w_,<sp/>&amp;result,<sp/>&amp;error<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>integral<sp/>=<sp/>2.<sp/>*<sp/>gsl_sf_dawson(<sp/>y_th<sp/>)<sp/>+<sp/>exp(<sp/>-y_th<sp/>*<sp/>y_th<sp/>)<sp/>*<sp/>result;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>1e3<sp/>due<sp/>to<sp/>conversion<sp/>from<sp/>kHz<sp/>to<sp/>Hz,<sp/>as<sp/>time<sp/>constant<sp/>in<sp/>ms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1e3<sp/>*<sp/>exp(<sp/>-y_th<sp/>*<sp/>y_th<sp/>)<sp/>/<sp/>(<sp/>exp(<sp/>-y_th<sp/>*<sp/>y_th<sp/>)<sp/>*<sp/>P_.t_ref_<sp/>+<sp/>P_.tau_m_<sp/>*<sp/>std::sqrt(<sp/>M_PI<sp/>)<sp/>*<sp/>integral<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>Node<sp/>initialization<sp/>functions</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">nest::siegert_neuron::init_buffers_()</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resize<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a1fcf983c7bf4fc3467092f439dd0632d" kindref="member">buffer_size</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>B_.drift_input_.resize(<sp/>buffer_size,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>B_.diffusion_input_.resize(<sp/>buffer_size,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>B_.last_y_values.resize(<sp/>buffer_size,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>B_.logger_.reset();<sp/></highlight><highlight class="comment">//<sp/>includes<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ArchivingNode::clear_history();</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">nest::siegert_neuron::pre_run_hook()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>B_.logger_.init();<sp/></highlight><highlight class="comment">//<sp/>ensures<sp/>initialization<sp/>in<sp/>case<sp/>mm<sp/>connected<sp/>after<sp/>Simulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a28927084c4ac3443d239b5bb2988761e" kindref="member">h</ref><sp/>=<sp/>Time::get_resolution().get_ms();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>propagators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>V_.P1_<sp/>=<sp/>std::exp(<sp/>-h<sp/>/<sp/>P_.tau_<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>V_.P2_<sp/>=<sp/>-<ref refid="namespacenumerics_1a3cf41aab824fa7688404652067a60565" kindref="member">numerics::expm1</ref>(<sp/>-h<sp/>/<sp/>P_.tau_<sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>Update<sp/>and<sp/>event<sp/>handling<sp/>functions</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">nest::siegert_neuron::update_(<sp/>Time<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>called_from_wfr_update<sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>assert(<sp/>to<sp/>&gt;=<sp/>0<sp/>and<sp/>(<sp/>delay<sp/>)<sp/>from<sp/>&lt;<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay()<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>assert(<sp/>from<sp/>&lt;<sp/>to<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a1fcf983c7bf4fc3467092f439dd0632d" kindref="member">buffer_size</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().connection_manager.get_min_delay();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacenest_1_1names_1a1a2f73160a35837584a83d8081ebb9f3" kindref="member">wfr_tol</ref><sp/>=<sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().simulation_manager.get_wfr_tol();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wfr_tol_exceeded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>to<sp/>store<sp/>rates<sp/>to<sp/>be<sp/>sent<sp/>by<sp/>rate<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>new_rates(<sp/>buffer_size,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lag<sp/>=<sp/>from;<sp/>lag<sp/>&lt;<sp/>to;<sp/>++lag<sp/>)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>rate<sp/>in<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>new_rates[<sp/>lag<sp/>]<sp/>=<sp/>S_.r_;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>propagate<sp/>rate<sp/>to<sp/>new<sp/>time<sp/>step<sp/>(exponential<sp/>integration)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>drive<sp/>=<sp/>siegert(<sp/>B_.drift_input_[<sp/>lag<sp/>],<sp/>B_.diffusion_input_[<sp/>lag<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>S_.r_<sp/>=<sp/>V_.P1_<sp/>*<sp/>(<sp/>S_.r_<sp/>)<sp/>+<sp/>V_.P2_<sp/>*<sp/>(<sp/>P_.mean_<sp/>+<sp/>drive<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>called_from_wfr_update<sp/>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rate<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B_.logger_.record_data(<sp/><ref refid="namespacenest_1_1names_1a6448c21f7fb2a2b838e803d3fa965fc7" kindref="member">origin</ref>.get_steps()<sp/>+<sp/>lag<sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>check<sp/>convergence<sp/>of<sp/>waveform<sp/>relaxation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>deviation<sp/>from<sp/>last<sp/>iteration<sp/>exceeds<sp/>wfr_tol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wfr_tol_exceeded<sp/>=<sp/>wfr_tol_exceeded<sp/>or<sp/>fabs(<sp/>S_.r_<sp/>-<sp/>B_.last_y_values[<sp/>lag<sp/>]<sp/>)<sp/>&gt;<sp/><ref refid="namespacenest_1_1names_1a1a2f73160a35837584a83d8081ebb9f3" kindref="member">wfr_tol</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>last_y_values<sp/>for<sp/>next<sp/>wfr_update<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B_.last_y_values[<sp/>lag<sp/>]<sp/>=<sp/>S_.r_;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>called_from_wfr_update<sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>last_y_values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;(<sp/>buffer_size,<sp/>0.0<sp/>).swap(<sp/>B_.last_y_values<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modifiy<sp/>new_rates<sp/>for<sp/>diffusion-event<sp/>as<sp/>proxy<sp/>for<sp/>next<sp/>min_delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>from;<sp/>temp<sp/>&lt;<sp/>to;<sp/>++temp<sp/>)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_rates[<sp/>temp<sp/>]<sp/>=<sp/>S_.r_;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>diffusion-event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>DiffusionConnectionEvent<sp/>rve;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>rve.set_coeffarray(<sp/>new_rates<sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><ref refid="namespacenest_1_1names_1a10bb77aea4fd28a36ab8335ab5fbda45" kindref="member">kernel</ref>().event_delivery_manager.send_secondary(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>rve<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;(<sp/>buffer_size,<sp/>0.0<sp/>).swap(<sp/>B_.drift_input_<sp/>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>double<sp/>&gt;(<sp/>buffer_size,<sp/>0.0<sp/>).swap(<sp/>B_.diffusion_input_<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wfr_tol_exceeded;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">nest::siegert_neuron::handle(<sp/>DiffusionConnectionEvent&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>drift<sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_drift_factor();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffusion<sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_diffusion_factor();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>unsigned<sp/>int<sp/>&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.begin();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>call<sp/>to<sp/>get_coeffvalue(<sp/>it<sp/>)<sp/>in<sp/>this<sp/>loop<sp/>also<sp/>advances<sp/>the<sp/>iterator<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>!=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.end()<sp/>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespacenumerics_1acd42d3be907c55f5a5eabeb4c595b976" kindref="member">e</ref>.get_coeffvalue(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.drift_input_[<sp/>i<sp/>]<sp/>+=<sp/>drift<sp/>*<sp/>value;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>B_.diffusion_input_[<sp/>i<sp/>]<sp/>+=<sp/>diffusion<sp/>*<sp/>value;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">nest::siegert_neuron::handle(<sp/>DataLoggingRequest&amp;<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>B_.logger_.handle(<sp/>e<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HAVE_GSL</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mitchell/Work/repo/nest-simulator/models/siegert_neuron.cpp"/>
  </compounddef>
</doxygen>
