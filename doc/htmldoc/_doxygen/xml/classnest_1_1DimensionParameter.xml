<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classnest_1_1DimensionParameter" kind="class" language="C++" prot="public">
    <compoundname>nest::DimensionParameter</compoundname>
    <basecompoundref refid="classnest_1_1Parameter" prot="public" virt="non-virtual">nest::Parameter</basecompoundref>
    <includes refid="parameter_8h" local="no">parameter.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnest_1_1DimensionParameter_1ab49e8b67a5561a718fab29f1bbc59b24" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int nest::DimensionParameter::num_dimensions_</definition>
        <argsstring></argsstring>
        <name>num_dimensions_</name>
        <qualifiedname>nest::DimensionParameter::num_dimensions_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1249" column="7" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1249" bodyend="-1"/>
        <referencedby refid="classnest_1_1DimensionParameter_1a4d44fe2d8095ba176fc00e7ec1eb806a" compoundref="parameter_8h" startline="1243" endline="1246">get_num_dimensions</referencedby>
        <referencedby refid="classnest_1_1DimensionParameter_1afe49c67d29442b12e143f276dd073c78" compoundref="parameter_8h" startline="1230" endline="1240">get_values</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1DimensionParameter_1a7acd4b18860cb1092aca2c3bcdf3b115" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt; const</type>
        <definition>std::shared_ptr&lt; Parameter &gt; const nest::DimensionParameter::px_</definition>
        <argsstring></argsstring>
        <name>px_</name>
        <qualifiedname>nest::DimensionParameter::px_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1250" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1250" bodyend="-1"/>
        <referencedby refid="classnest_1_1DimensionParameter_1afe49c67d29442b12e143f276dd073c78" compoundref="parameter_8h" startline="1230" endline="1240">get_values</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1DimensionParameter_1aa65ecd3fbb7cf0e0e072b63f8477f828" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt; const</type>
        <definition>std::shared_ptr&lt; Parameter &gt; const nest::DimensionParameter::py_</definition>
        <argsstring></argsstring>
        <name>py_</name>
        <qualifiedname>nest::DimensionParameter::py_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1251" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1251" bodyend="-1"/>
        <referencedby refid="classnest_1_1DimensionParameter_1afe49c67d29442b12e143f276dd073c78" compoundref="parameter_8h" startline="1230" endline="1240">get_values</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classnest_1_1DimensionParameter_1a202eaa5abbc626f58deeda7ead780bbb" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt; const</type>
        <definition>std::shared_ptr&lt; Parameter &gt; const nest::DimensionParameter::pz_</definition>
        <argsstring></argsstring>
        <name>pz_</name>
        <qualifiedname>nest::DimensionParameter::pz_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1252" column="25" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1252" bodyend="-1"/>
        <referencedby refid="classnest_1_1DimensionParameter_1afe49c67d29442b12e143f276dd073c78" compoundref="parameter_8h" startline="1230" endline="1240">get_values</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1a33f10df5f1725e122c2bf8384a2ee82e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::DimensionParameter::DimensionParameter</definition>
        <argsstring>(std::shared_ptr&lt; Parameter &gt; px, std::shared_ptr&lt; Parameter &gt; py)</argsstring>
        <name>DimensionParameter</name>
        <qualifiedname>nest::DimensionParameter::DimensionParameter</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>px</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>py</declname>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> with one given <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> per dimension. </para>
        </briefdescription>
        <detaileddescription>
<para>A copy is made of the supplied <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1184" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1184" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1a7bf6e21c5906fe06a9944419b227c357" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::DimensionParameter::DimensionParameter</definition>
        <argsstring>(std::shared_ptr&lt; Parameter &gt; px, std::shared_ptr&lt; Parameter &gt; py, std::shared_ptr&lt; Parameter &gt; pz)</argsstring>
        <name>DimensionParameter</name>
        <qualifiedname>nest::DimensionParameter::DimensionParameter</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>px</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>py</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> &gt;</type>
          <declname>pz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1193" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1193" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1a4619e1a9105ebde275d5e3853e67316f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nest::DimensionParameter::DimensionParameter</definition>
        <argsstring>(const DimensionParameter &amp;p)</argsstring>
        <name>DimensionParameter</name>
        <qualifiedname>nest::DimensionParameter::DimensionParameter</qualifiedname>
        <param>
          <type>const <ref refid="classnest_1_1DimensionParameter" kindref="compound">DimensionParameter</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1207" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1207" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1aadab771dcc28aed27a17473d473d3d12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::DimensionParameter::value</definition>
        <argsstring>(RngPtr, Node *) override</argsstring>
        <name>value</name>
        <qualifiedname>nest::DimensionParameter::value</qualifiedname>
        <reimplements refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplements>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
        </param>
        <briefdescription>
<para>The <ref refid="classnest_1_1DimensionParameter" kindref="compound">DimensionParameter</ref> has no double value, so this method will always throw. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1220" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1220" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1afe49c67d29442b12e143f276dd073c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; nest::DimensionParameter::get_values</definition>
        <argsstring>(RngPtr rng)</argsstring>
        <name>get_values</name>
        <qualifiedname>nest::DimensionParameter::get_values</qualifiedname>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Generates a position with values for each dimension generated from their respective parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The position, given as an array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1230" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1230" bodyend="1240"/>
        <references refid="classnest_1_1DimensionParameter_1ab49e8b67a5561a718fab29f1bbc59b24" compoundref="parameter_8h" startline="1249">num_dimensions_</references>
        <references refid="classnest_1_1DimensionParameter_1a7acd4b18860cb1092aca2c3bcdf3b115" compoundref="parameter_8h" startline="1250">px_</references>
        <references refid="classnest_1_1DimensionParameter_1aa65ecd3fbb7cf0e0e072b63f8477f828" compoundref="parameter_8h" startline="1251">py_</references>
        <references refid="classnest_1_1DimensionParameter_1a202eaa5abbc626f58deeda7ead780bbb" compoundref="parameter_8h" startline="1252">pz_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1a4d44fe2d8095ba176fc00e7ec1eb806a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int nest::DimensionParameter::get_num_dimensions</definition>
        <argsstring>() const</argsstring>
        <name>get_num_dimensions</name>
        <qualifiedname>nest::DimensionParameter::get_num_dimensions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1243" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1243" bodyend="1246"/>
        <references refid="classnest_1_1DimensionParameter_1ab49e8b67a5561a718fab29f1bbc59b24" compoundref="parameter_8h" startline="1249">num_dimensions_</references>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, Node *node)=0</argsstring>
        <name>value</name>
        <qualifiedname>nest::DimensionParameter::value</qualifiedname>
        <reimplements refid="classnest_1_1Parameter_1a547d7a88eb7bce31f53fd06d370bb2e7">value</reimplements>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when getting a parameter value based on random values or node attributes, like position. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the node, used when the node position is relevant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1178" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classnest_1_1DimensionParameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double nest::Parameter::value</definition>
        <argsstring>(RngPtr rng, const std::vector&lt; double &gt; &amp;source_pos, const std::vector&lt; double &gt; &amp;target_pos, const AbstractLayer &amp;layer, Node *node)</argsstring>
        <name>value</name>
        <qualifiedname>nest::DimensionParameter::value</qualifiedname>
        <reimplements refid="classnest_1_1Parameter_1a829b6a636dc326bc9ec36765bc245d38">value</reimplements>
        <param>
          <type><ref refid="namespacenest_1a5c7ff981ccfbf8793f4c09f650b48a0c" kindref="member">RngPtr</ref></type>
          <declname>rng</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>source_pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>target_pos</declname>
        </param>
        <param>
          <type>const <ref refid="classnest_1_1AbstractLayer" kindref="compound">AbstractLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type><ref refid="classnest_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Generates a value based on parameter specifications and arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Used when connecting spatial nodes. Note that not all parameters support all overloaded versions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the random number generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the target node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>spatial layer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>target node, required for normal and lognormal parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1178" column="3" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1453" bodyend="1460"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Position-generating <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>One <ref refid="classnest_1_1Parameter" kindref="compound">Parameter</ref> per dimension is stored. When getting a position vector, a value for each dimension is generated from their respective Parameters. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>nest::DimensionParameter</label>
        <link refid="classnest_1_1DimensionParameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1Parameter"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>nest::DimensionParameter</label>
        <link refid="classnest_1_1DimensionParameter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>nest::Parameter</label>
        <link refid="classnest_1_1Parameter"/>
      </node>
    </collaborationgraph>
    <location file="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" line="1175" column="1" bodyfile="/home/mitchell/Work/repo/nest-simulator/nestkernel/parameter.h" bodystart="1176" bodyend="1253"/>
    <listofallmembers>
      <member refid="classnest_1_1Parameter_1a73d93795275bcb0ba6e59761ab52c928" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>apply</name></member>
      <member refid="classnest_1_1DimensionParameter_1a33f10df5f1725e122c2bf8384a2ee82e" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>DimensionParameter</name></member>
      <member refid="classnest_1_1DimensionParameter_1a7bf6e21c5906fe06a9944419b227c357" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>DimensionParameter</name></member>
      <member refid="classnest_1_1DimensionParameter_1a4619e1a9105ebde275d5e3853e67316f" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>DimensionParameter</name></member>
      <member refid="classnest_1_1DimensionParameter_1a4d44fe2d8095ba176fc00e7ec1eb806a" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>get_num_dimensions</name></member>
      <member refid="classnest_1_1DimensionParameter_1afe49c67d29442b12e143f276dd073c78" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>get_values</name></member>
      <member refid="classnest_1_1Parameter_1a73aaebb7863ec82e848463497631bd88" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>is_spatial</name></member>
      <member refid="classnest_1_1Parameter_1ac20be9081c515b43cc92c7964d316902" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>is_spatial_</name></member>
      <member refid="classnest_1_1DimensionParameter_1ab49e8b67a5561a718fab29f1bbc59b24" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>num_dimensions_</name></member>
      <member refid="classnest_1_1Parameter_1a795d9e3c2ef8e4b2f272377807dc4817" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1Parameter_1a7c451c0b857c87c3df9c2b2340851556" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>Parameter</name></member>
      <member refid="classnest_1_1DimensionParameter_1a7acd4b18860cb1092aca2c3bcdf3b115" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>px_</name></member>
      <member refid="classnest_1_1DimensionParameter_1aa65ecd3fbb7cf0e0e072b63f8477f828" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>py_</name></member>
      <member refid="classnest_1_1DimensionParameter_1a202eaa5abbc626f58deeda7ead780bbb" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>pz_</name></member>
      <member refid="classnest_1_1Parameter_1ae333502a77312fc1ba9dcfdd27fc762a" prot="public" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>returns_int_only</name></member>
      <member refid="classnest_1_1Parameter_1ad3e746702f48606b0b18a86188ff3350" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>returns_int_only_</name></member>
      <member refid="classnest_1_1DimensionParameter_1aadab771dcc28aed27a17473d473d3d12" prot="public" virt="virtual"><scope>nest::DimensionParameter</scope><name>value</name></member>
      <member refid="classnest_1_1DimensionParameter_1a547d7a88eb7bce31f53fd06d370bb2e7" prot="public" virt="virtual"><scope>nest::DimensionParameter</scope><name>value</name></member>
      <member refid="classnest_1_1DimensionParameter_1a829b6a636dc326bc9ec36765bc245d38" prot="public" virt="virtual"><scope>nest::DimensionParameter</scope><name>value</name></member>
      <member refid="classnest_1_1Parameter_1a60666e9ec0de4fb53188f64657217939" prot="protected" virt="non-virtual"><scope>nest::DimensionParameter</scope><name>value_is_integer_</name></member>
      <member refid="classnest_1_1Parameter_1aee3ca93bce135fcb5d8d7f0ec7bd0daf" prot="public" virt="virtual"><scope>nest::DimensionParameter</scope><name>~Parameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
